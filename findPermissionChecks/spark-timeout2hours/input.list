<dumb> -> <android.webkit.WebView: void clearView()>
<dumb> -> <android.media.RingtoneManager: void stopPreviousRingtone()>
<dumb> -> <android.telephony.gsm.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
<dumb> -> <android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(java.lang.String,java.lang.String,android.net.sip.SipAudioCall$Listener,int)>
<dumb> -> <android.widget.QuickContactBadge: void assignContactFromPhone(java.lang.String,boolean)>
<dumb> -> <android.accounts.AccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)>
<dumb> -> <android.view.View: boolean startDrag(android.content.ClipData,android.view.View$DragShadowBuilder,java.lang.Object,int)>
<dumb> -> <android.accounts.AccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<dumb> -> <android.accounts.AccountManager: android.accounts.Account[] getAccounts()>
<dumb> -> <android.webkit.WebView: void onPause()>
<dumb> -> <android.media.MediaPlayer: void reset()>
<dumb> -> <android.accounts.AccountManager: android.accounts.AccountManagerFuture confirmCredentials(android.accounts.Account,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<dumb> -> <android.accounts.AccountManager: android.accounts.AccountManagerFuture removeAccount(android.accounts.Account,android.accounts.AccountManagerCallback,android.os.Handler)>
<dumb> -> <android.widget.VideoView: void setVideoURI(android.net.Uri)>
<dumb> -> <android.app.DownloadManager: long enqueue(android.app.DownloadManager$Request)>
<dumb> -> <android.content.ContentResolver: void removePeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle)>
<dumb> -> <android.widget.VideoView: void pause()>
<dumb> -> <android.accounts.AccountManager: boolean addAccountExplicitly(android.accounts.Account,java.lang.String,android.os.Bundle)>
<dumb> -> <android.app.ActivityManager: java.util.List getRecentTasks(int,int)>
<dumb> -> <android.net.sip.SipManager: android.net.sip.SipSession createSipSession(android.net.sip.SipProfile,android.net.sip.SipSession$Listener)>
<dumb> -> <android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<dumb> -> <android.media.MediaPlayer: void stop()>
<dumb> -> <android.app.WallpaperManager: void setResource(int)>
<dumb> -> <android.accounts.AccountManager: android.accounts.AccountManagerFuture hasFeatures(android.accounts.Account,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<dumb> -> <android.location.LocationManager: void removeTestProvider(java.lang.String)>
<dumb> -> <android.accounts.AccountManager: android.accounts.Account[] getAccountsByType(java.lang.String)>
<dumb> -> <android.media.RingtoneManager: android.media.Ringtone getRingtone(int)>
<dumb> -> <android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.app.PendingIntent)>
<dumb> -> <android.media.AsyncPlayer: void play(android.content.Context,android.net.Uri,boolean,int)>
<dumb> -> <android.telephony.TelephonyManager: android.telephony.CellLocation getCellLocation()>
<dumb> -> <android.app.DownloadManager: android.net.Uri getUriForDownloadedFile(long)>
<dumb> -> <android.accounts.AccountManager: void clearPassword(android.accounts.Account)>
<dumb> -> <android.location.LocationManager: void clearTestProviderLocation(java.lang.String)>
<dumb> -> <android.net.sip.SipManager: void unregister(android.net.sip.SipProfile,android.net.sip.SipRegistrationListener)>
<dumb> -> <android.net.sip.SipManager: void open(android.net.sip.SipProfile)>
<dumb> -> <android.location.LocationManager: java.util.List getProviders(boolean)>
<dumb> -> <android.net.sip.SipManager: android.net.sip.SipSession getSessionFor(android.content.Intent)>
<dumb> -> <android.telephony.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>
<dumb> -> <android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.app.PendingIntent)>
<dumb> -> <android.widget.VideoView: void suspend()>
<dumb> -> <android.net.ConnectivityManager: int startUsingNetworkFeature(int,java.lang.String)>
<dumb> -> <android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,android.os.Bundle,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<dumb> -> <android.telephony.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
<dumb> -> <android.app.NotificationManager: void notify(java.lang.String,int,android.app.Notification)>
<dumb> -> <android.net.sip.SipManager: void close(java.lang.String)>
<dumb> -> <android.content.ContentResolver: void addPeriodicSync(android.accounts.Account,java.lang.String,android.os.Bundle,long)>
<dumb> -> <android.location.LocationManager: java.util.List getProviders(android.location.Criteria,boolean)>
<dumb> -> <android.accounts.AccountManager: void setAuthToken(android.accounts.Account,java.lang.String,java.lang.String)>
<dumb> -> <android.net.sip.SipManager: void register(android.net.sip.SipProfile,int,android.net.sip.SipRegistrationListener)>
<dumb> -> <android.accounts.AccountManager: void setPassword(android.accounts.Account,java.lang.String)>
<dumb> -> <android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.app.PendingIntent)>
<dumb> -> <android.widget.VideoView: void setVideoPath(java.lang.String)>
<dumb> -> <android.app.WallpaperManager: void clear()>
<dumb> -> <android.media.AudioManager: void startBluetoothSco()>
<dumb> -> <android.location.LocationManager: java.lang.String getBestProvider(android.location.Criteria,boolean)>
<dumb> -> <android.location.LocationManager: void setTestProviderLocation(java.lang.String,android.location.Location)>
<dumb> -> <android.app.ActivityManager: void moveTaskToFront(int,int)>
<dumb> -> <android.location.LocationManager: void setTestProviderStatus(java.lang.String,int,android.os.Bundle,long)>
<dumb> -> <android.telephony.TelephonyManager: void listen(android.telephony.PhoneStateListener,int)>
<dumb> -> <android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.app.PendingIntent)>
<dumb> -> <android.app.NotificationManager: void notify(int,android.app.Notification)>
<dumb> -> <android.net.sip.SipManager: android.net.sip.SipAudioCall takeAudioCall(android.content.Intent,android.net.sip.SipAudioCall$Listener)>
<dumb> -> <android.location.LocationManager: void addTestProvider(java.lang.String,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)>
<dumb> -> <android.location.LocationManager: boolean isProviderEnabled(java.lang.String)>
<dumb> -> <android.location.LocationManager: void setTestProviderEnabled(java.lang.String,boolean)>
<dumb> -> <android.media.AudioManager: void setMode(int)>
<dumb> -> <android.bluetooth.BluetoothAdapter: boolean enable()>
<dumb> -> <android.accounts.AccountManager: java.lang.String peekAuthToken(android.accounts.Account,java.lang.String)>
<dumb> -> <android.app.ActivityManager: void restartPackage(java.lang.String)>
<dumb> -> <android.location.LocationManager: void requestSingleUpdate(java.lang.String,android.location.LocationListener,android.os.Looper)>
<dumb> -> <android.widget.QuickContactBadge: void assignContactFromEmail(java.lang.String,boolean)>
<dumb> -> <android.webkit.WebView: void enablePlatformNotifications()>
<dumb> -> <android.app.ActivityManager: java.util.List getRunningTasks(int)>
<dumb> -> <android.accounts.AccountManager: android.accounts.AccountManagerFuture updateCredentials(android.accounts.Account,java.lang.String,android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<dumb> -> <android.location.LocationManager: android.location.LocationProvider getProvider(java.lang.String)>
<dumb> -> <android.accounts.AccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)>
<dumb> -> <android.net.sip.SipManager: void open(android.net.sip.SipProfile,android.app.PendingIntent,android.net.sip.SipRegistrationListener)>
<dumb> -> <android.os.Vibrator: void vibrate(long)>
<dumb> -> <android.telephony.gsm.SmsManager: void sendDataMessage(java.lang.String,java.lang.String,short,byte[],android.app.PendingIntent,android.app.PendingIntent)>
<dumb> -> <android.widget.VideoView: void start()>
<dumb> -> <android.inputmethodservice.KeyboardView: void setKeyboard(android.inputmethodservice.Keyboard)>
<dumb> -> <android.accounts.AccountManager: void setUserData(android.accounts.Account,java.lang.String,java.lang.String)>
<dumb> -> <android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthTokenByFeatures(java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)>
<dumb> -> <android.app.WallpaperManager: void suggestDesiredDimensions(int,int)>
<dumb> -> <android.widget.VideoView: void stopPlayback()>
<dumb> -> <android.location.LocationManager: void addProximityAlert(double,double,float,long,android.app.PendingIntent)>
<dumb> -> <android.accounts.AccountManager: void invalidateAuthToken(java.lang.String,java.lang.String)>
<dumb> -> <android.accounts.AccountManager: java.lang.String getPassword(android.accounts.Account)>
<dumb> -> <android.media.MediaPlayer: void setWakeMode(android.content.Context,int)>
<dumb> -> <android.location.LocationManager: void clearTestProviderEnabled(java.lang.String)>
<dumb> -> <android.app.DownloadManager: long addCompletedDownload(java.lang.String,java.lang.String,boolean,java.lang.String,java.lang.String,long,boolean)>
<dumb> -> <android.accounts.AccountManager: android.accounts.AccountManagerFuture addAccount(java.lang.String,java.lang.String,java.lang.String[],android.os.Bundle,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<dumb> -> <android.widget.QuickContactBadge: void onClick(android.view.View)>
<dumb> -> <android.telephony.SmsManager: void sendTextMessage(java.lang.String,java.lang.String,java.lang.String,android.app.PendingIntent,android.app.PendingIntent)>
<dumb> -> <android.accounts.AccountManager: android.accounts.AccountManagerFuture getAuthToken(android.accounts.Account,java.lang.String,boolean,android.accounts.AccountManagerCallback,android.os.Handler)>
<dumb> -> <android.media.MediaPlayer: void pause()>
<dumb> -> <android.app.ActivityManager: void killBackgroundProcesses(java.lang.String)>
<dumb> -> <android.location.LocationManager: void requestLocationUpdates(long,float,android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<dumb> -> <android.accounts.AccountManager: java.lang.String getUserData(android.accounts.Account,java.lang.String)>
<dumb> -> <android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener,android.os.Looper)>
<dumb> -> <android.widget.VideoView: void resume()>
<dumb> -> <android.speech.SpeechRecognizer: void startListening(android.content.Intent)>
<dumb> -> <android.media.MediaPlayer: void start()>
<dumb> -> <android.net.sip.SipManager: android.net.sip.SipAudioCall makeAudioCall(android.net.sip.SipProfile,android.net.sip.SipProfile,android.net.sip.SipAudioCall$Listener,int)>
<dumb> -> <android.media.MediaPlayer: void release()>
<dumb> -> <android.location.LocationManager: void clearTestProviderStatus(java.lang.String)>
<dumb> -> <android.media.AsyncPlayer: void stop()>
<dumb> -> <android.net.VpnService: android.content.Intent prepare(android.content.Context)>
<dumb> -> <android.net.ConnectivityManager: int stopUsingNetworkFeature(int,java.lang.String)>
<dumb> -> <android.location.LocationManager: void requestLocationUpdates(java.lang.String,long,float,android.location.LocationListener)>
<dumb> -> <android.media.RingtoneManager: void setActualDefaultRingtoneUri(android.content.Context,int,android.net.Uri)>
<dumb> -> <android.location.LocationManager: void requestSingleUpdate(android.location.Criteria,android.location.LocationListener,android.os.Looper)>
<dumb> -> <android.media.RingtoneManager: android.media.Ringtone getRingtone(android.content.Context,android.net.Uri)>
<dumb> -> <android.net.wifi.WifiManager: boolean setWifiEnabled(boolean)>
<dumb> -> <android.app.AlarmManager: void setTimeZone(java.lang.String)>
<dumb> -> <android.media.AudioManager: void stopBluetoothSco()>
<dumb> -> <android.accounts.AccountManager: android.accounts.AccountManagerFuture editProperties(java.lang.String,android.app.Activity,android.accounts.AccountManagerCallback,android.os.Handler)>
<dumb> -> <android.location.LocationManager: android.location.Location getLastKnownLocation(java.lang.String)>
<dumb> -> <android.telephony.gsm.SmsManager: void sendMultipartTextMessage(java.lang.String,java.lang.String,java.util.ArrayList,java.util.ArrayList,java.util.ArrayList)>
