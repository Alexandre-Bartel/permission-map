<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void log(java.lang.String)>
<com.android.i18n.phonenumbers.AsYouTypeFormatter: boolean attemptToExtractIdd()>
<android.animation.ValueAnimator$1: void <init>()>
<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int[])>
<android.renderscript.RenderScript: int nElementCreate(int,int,boolean,int)>
<android.renderscript.RenderScript: void nAllocationRead(int,byte[])>
<android.media.audiofx.Equalizer: short getNumberOfPresets()>
<android.animation.AnimatorSet: java.util.HashMap access$100(android.animation.AnimatorSet)>
<android.view.SurfaceView: boolean gatherTransparentRegion(android.graphics.Region)>
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuItemImpl getExpandedItem()>
<android.hardware.SensorManager$SensorEventPool: void returnToPool(android.hardware.SensorEvent)>
<android.telephony.ServiceState: void setIsManualSelection(boolean)>
<com.android.server.BackupManagerService$RunInitializeReceiver: void <init>(com.android.server.BackupManagerService)>
<android.media.AudioService$FocusStackEntry: void <init>(int,int,android.media.IAudioFocusDispatcher,android.os.IBinder,java.lang.String,android.media.AudioService$AudioFocusDeathHandler,java.lang.String,int)>
<android.view.GLES20Canvas: void onPreDraw(android.graphics.Rect)>
<android.net.Uri$OpaqueUri: java.lang.String getEncodedQuery()>
<android.view.InputEventConsistencyVerifier: void reset()>
<GenerationGG: android.widget.ShareActionProvider get_androidwidgetShareActionProvider()>
<android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message)>
<android.renderscript.Font$FontFamily: void <init>(android.renderscript.Font$1)>
<android.hardware.usb.UsbAccessory: int hashCode()>
<android.graphics.Xfermode: void <init>()>
<android.animation.AnimatorSet$Node: void addDependency(android.animation.AnimatorSet$Dependency)>
<com.android.server.wm.Session: void dragRecipientEntered(android.view.IWindow)>
<android.util.PrintStreamPrinter: void <init>(java.io.PrintStream)>
<android.speech.tts.TextToSpeechService$AudioSpeechItem: void stopImpl()>
<android.widget.ImageButton: boolean onSetAlpha(int)>
<android.view.GLES20Canvas: boolean clipRect(float,float,float,float)>
<android.media.AudioTrack: int getChannelCount()>
<android.gesture.GestureOverlayView: void cancelGesture(android.view.MotionEvent)>
<com.android.internal.telephony.cdma.CdmaConnection: int getCDMAIndex()>
<android.graphics.Paint: int native_getTextAlign(int)>
<android.media.AudioRecord: int getMinBufferSize(int,int,int)>
<android.os.Debug: int getLoadedClassCount()>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker$2: void <init>(com.android.internal.telephony.cdma.CdmaServiceStateTracker,android.os.Handler)>
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker$1: void <clinit>()>
<android.media.TimedText$Style: void <init>(android.media.TimedText)>
<android.server.BluetoothHealthProfileHandler$HealthChannel: android.os.ParcelFileDescriptor access$1600(android.server.BluetoothHealthProfileHandler$HealthChannel)>
<junit.runner.BaseTestRunner: void addFailure(junit.framework.Test,junit.framework.AssertionFailedError)>
<android.graphics.Bitmap$1: android.graphics.Bitmap createFromParcel(android.os.Parcel)>
<android.bluetooth.BluetoothTetheringDataTracker: android.bluetooth.BluetoothTetheringDataTracker getInstance()>
<android.os.ParcelUuid$1: android.os.ParcelUuid createFromParcel(android.os.Parcel)>
<android.widget.AdapterView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<com.android.server.wm.WindowManagerService: boolean access$602(com.android.server.wm.WindowManagerService,boolean)>
<android.net.http.AndroidHttpClient$2: void <init>(android.net.http.AndroidHttpClient,org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)>
<android.widget.Spinner$DropDownAdapter: void <init>(android.widget.SpinnerAdapter)>
<android.view.VelocityTracker: void nativeComputeCurrentVelocity(int,int,float)>
<android.location.Address: java.lang.String getThoroughfare()>
<com.android.server.InputMethodManagerService$InputMethodFileManager: void access$300(com.android.server.InputMethodManagerService$InputMethodFileManager,java.lang.String)>
<android.app.LoadedApk$ReceiverDispatcher: android.app.IntentReceiverLeaked getLocation()>
<com.android.server.pm.PackageManagerService: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])>
<android.view.View: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.internal.telephony.BaseCommands: java.lang.String getProcCmdLine()>
<android.net.http.RequestHandle: java.lang.String computeDigestAuthResponse(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.net.LinkAddress$1: void <init>()>
<android.app.NativeActivity: void onLowMemoryNative(int)>
<com.android.internal.telephony.cat.BerTlv: java.util.List getComprehensionTlvs()>
<com.android.internal.os.BatteryStatsImpl: void noteFullWifiLockReleasedFromSourceLocked(android.os.WorkSource)>
<com.android.internal.view.menu.BaseMenuPresenter: boolean shouldIncludeItem(int,com.android.internal.view.menu.MenuItemImpl)>
<android.bluetooth.BluetoothDeviceProfileState: void access$8800(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<com.android.server.LocationManagerService$UpdateRecord: void dump(java.io.PrintWriter,java.lang.String)>
<android.util.TimingLogger: void dumpToLog()>
<android.graphics.Paint: android.graphics.Shader setShader(android.graphics.Shader)>
<com.android.internal.telephony.RetryManager: void <init>()>
<android.view.GLES20RecordingCanvas: void drawPoints(float[],int,int,android.graphics.Paint)>
<com.android.server.MountService: void registerListener(android.os.storage.IMountServiceListener)>
<android.view.ViewDebug$2: void <init>(android.view.View)>
<android.media.AudioService: java.util.HashMap access$4500(android.media.AudioService)>
<android.view.WindowLeaked: void <init>(java.lang.String)>
<com.android.server.am.ActivityManagerService: java.lang.String buildOomTag(java.lang.String,java.lang.String,int,int)>
<android.webkit.WebView: boolean nativeScrollLayer(int,int,int)>
<android.location.Address: void setPremises(java.lang.String)>
<android.hardware.SensorManager$LegacyListener: void registerSensor(int)>
<com.android.server.PowerManagerService: void access$5500(com.android.server.PowerManagerService,int)>
<com.android.server.location.LocationProviderProxy: boolean requiresNetwork()>
<android.media.AudioTrack: int native_setup(java.lang.Object,int,int,int,int,int,int,int[])>
<android.util.JsonWriter: android.util.JsonWriter name(java.lang.String)>
<android.renderscript.Sampler: android.renderscript.Sampler CLAMP_LINEAR_MIP_LINEAR(android.renderscript.RenderScript)>
<android.nfc.tech.BasicTagTechnology: void <init>(android.nfc.Tag,int)>
<android.widget.TableLayout$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>
<android.renderscript.Type: void <init>(int,android.renderscript.RenderScript)>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getSCAddress()>
<android.graphics.Path: void <clinit>()>
<android.filterfw.core.VertexFrame: java.lang.String toString()>
<GenerationGG: android.widget.ResourceCursorTreeAdapter get_androidwidgetResourceCursorTreeAdapter()>
<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivities(android.content.Intent,java.lang.String,int)>
<android.webkit.WebBackForwardList: void <init>(android.webkit.CallbackProxy)>
<com.android.server.am.ServiceRecord: void cancelNotification()>
<android.renderscript.Sampler$Builder: android.renderscript.Sampler create()>
<com.android.internal.telephony.cdma.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)>
<com.android.server.location.LocationProviderProxy$Connection: android.location.ILocationProvider getProvider()>
<android.view.KeyEvent$1: android.view.KeyEvent createFromParcel(android.os.Parcel)>
<android.webkit.WebChromeClient: void onReceivedIcon(android.webkit.WebView,android.graphics.Bitmap)>
<android.view.ViewGroup: android.view.MotionEvent obtainMotionEventNoHistoryOrSelf(android.view.MotionEvent)>
<com.android.server.am.ActivityManagerService: java.util.List getServices(int,int)>
<android.view.HardwareRenderer$Gl20Renderer: void trimMemory(int)>
<Wrapper_android_hardware_SensorListener: void test_android_hardware_SensorListener()>
<android.content.pm.ProviderInfo$1: java.lang.Object[] newArray(int)>
<com.android.server.location.MockProvider: boolean sendExtraCommand(java.lang.String,android.os.Bundle)>
<android.widget.TextView$HandleView: void startTouchUpFilter(int)>
<android.server.BluetoothAdapterStateMachine: void access$1400(android.server.BluetoothAdapterStateMachine,com.android.internal.util.IState)>
<GenerationGG: android.text.Html$ImageGetter get_androidtextHtml__ImageGetter()>
<android.net.ProxyProperties: java.net.Proxy makeProxy()>
<android.view.inputmethod.InputMethodInfo: int hashCode()>
<android.view.GLES20Canvas: void drawTextOnPath(java.lang.String,android.graphics.Path,float,float,android.graphics.Paint)>
<com.android.server.accessibility.TouchExplorer$PerformLongPressDelayed: void post(android.view.MotionEvent,int,long)>
<android.webkit.Network: boolean isValidProxySet()>
<android.os.Process: void <init>()>
<android.graphics.drawable.ShapeDrawable: void <init>(android.graphics.drawable.shapes.Shape)>
<android.graphics.drawable.PictureDrawable: void setFilterBitmap(boolean)>
<android.widget.TextView$CharWrapper: char[] access$102(android.widget.TextView$CharWrapper,char[])>
<android.graphics.Path: void addRect(android.graphics.RectF,android.graphics.Path$Direction)>
<android.view.MotionEvent: float getHistoricalOrientation(int)>
<android.bluetooth.BluetoothSocket$SocketState: void <init>(java.lang.String,int)>
<com.android.server.accessibility.AccessibilityManagerService: void updateInputFilterLocked()>
<android.view.animation.Animation: boolean hasStarted()>
<android.widget.AlphabetIndexer: void setCursor(android.database.Cursor)>
<android.net.http.Request: boolean canResponseHaveBody(org.apache.http.HttpRequest,int)>
<android.preference.PreferenceScreen$SavedState$1: java.lang.Object[] newArray(int)>
<android.graphics.drawable.BitmapDrawable: int getOpacity()>
<android.widget.BaseAdapter: boolean isEnabled(int)>
<GenerationGG: android.os.NetworkOnMainThreadException get_androidosNetworkOnMainThreadException()>
<android.view.GLES20Canvas: void nDrawBitmap(int,int,byte[],int,int)>
<android.telephony.SmsMessage: byte[] getPdu()>
<android.widget.RemoteViews: boolean access$100(android.widget.RemoteViews)>
<android.graphics.Paint: android.graphics.Typeface getTypeface()>
<android.media.AudioRecord: int native_read_in_short_array(short[],int,int)>
<android.os.ParcelUuid$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.view.IWindow$Stub: android.view.IWindow asInterface(android.os.IBinder)>
<android.view.IWindowSession$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.internal.os.BatteryStatsImpl: void clearHistoryLocked()>
<android.ddm.DdmHandleAppName: void <init>()>
<android.text.style.UnderlineSpan: int getSpanTypeId()>
<android.util.SparseArray: void append(int,java.lang.Object)>
<com.android.server.ThrottleService: android.util.TrustedTime access$1100(com.android.server.ThrottleService)>
<com.android.internal.os.BatteryStatsImpl$2: com.android.internal.os.BatteryStatsImpl createFromParcel(android.os.Parcel)>
<android.view.MotionEvent: float getY(int)>
<com.android.server.sip.SipSessionListenerProxy: void onCallTransferring(android.net.sip.ISipSession,java.lang.String)>
<android.app.FragmentManagerImpl: boolean dispatchPrepareOptionsMenu(android.view.Menu)>
<android.content.SyncStatusInfo: void writeToParcel(android.os.Parcel,int)>
<com.android.internal.os.ProcessStats: int getLastIdleTime()>
<android.widget.OverScroller: int getStartY()>
<android.gesture.GestureLibraries: android.gesture.GestureLibrary fromRawResource(android.content.Context,int)>
<android.webkit.CacheManager$CacheResult: void <init>()>
<GenerationGG: android.os.Handler get_androidosHandler()>
<com.android.server.wm.WindowManagerService: void setInTouchMode(boolean)>
<android.view.accessibility.AccessibilityEvent$1: void <init>()>
<Wrapper_android_util_DisplayMetrics: void test_android_util_DisplayMetrics()>
<android.webkit.HTML5VideoView: android.graphics.SurfaceTexture getSurfaceTexture(int)>
<android.widget.AutoCompleteTextView: void showDropDownAfterLayout()>
<android.net.sip.SipAudioCall$1: void onRegistering(android.net.sip.SipSession)>
<android.hardware.usb.IUsbManager$Stub: android.hardware.usb.IUsbManager asInterface(android.os.IBinder)>
<android.view.GLES20Canvas: int nSaveLayer(int,float,float,float,float,int,int)>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: boolean isRoamingBetweenOperators(boolean,android.telephony.ServiceState)>
<android.drm.DrmManagerClient: int access$400(android.drm.DrmManagerClient,int)>
<android.view.GLES20Canvas: int nGetMaximumTextureHeight()>
<com.android.server.sip.SipSessionGroup$RegisterCommand: void <init>(com.android.server.sip.SipSessionGroup,int)>
<android.database.sqlite.SQLiteStatement: android.os.ParcelFileDescriptor native_1x1_blob_ashmem()>
<android.graphics.Path: void native_transform(int,int,int)>
<com.android.internal.telephony.cat.RilMessageDecoder: com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady access$300(com.android.internal.telephony.cat.RilMessageDecoder)>
<GenerationGG: android.text.style.ClickableSpan get_androidtextstyleClickableSpan()>
<android.test.suitebuilder.TestGrouping: java.util.List testCaseClassesInPackage(java.lang.String)>
<com.android.internal.telephony.DataConnection: void access$3000(com.android.internal.telephony.DataConnection,com.android.internal.util.IState)>
<android.renderscript.BaseObj: void checkValid()>
<android.app.SearchableInfo$1: void <init>()>
<android.view.View: int computeHorizontalScrollOffset()>
<android.widget.RelativeLayout$DependencyGraph$Node: void <init>()>
<com.android.internal.widget.ActionBarView: android.graphics.drawable.Drawable access$500(com.android.internal.widget.ActionBarView)>
<android.inputmethodservice.Keyboard$Key: void onReleased(boolean)>
<android.renderscript.Matrix4f: void transpose()>
<android.server.BluetoothService: void shutoffBluetooth()>
<GenerationGG: android.accounts.AccountsException get_androidaccountsAccountsException()>
<com.android.server.pm.PackageManagerService: java.util.List queryIntentReceivers(android.content.Intent,java.lang.String,int)>
<android.provider.MediaStore$Audio$Media: void <clinit>()>
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener)>
<com.android.internal.widget.ScrollingTabContainerView$TabAdapter: long getItemId(int)>
<android.net.http.HttpAuthHeader: java.lang.String getRealm()>
<android.net.wifi.WifiStateMachine$2: void onReceive(android.content.Context,android.content.Intent)>
<GenerationGG: android.drm.DrmSupportInfo get_androiddrmDrmSupportInfo()>
<android.view.inputmethod.CompletionInfo$1: void <init>()>
<android.graphics.Color: int HSVToColor(float[])>
<android.widget.PopupWindow: boolean isTouchable()>
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void access$1000(android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask,java.lang.Throwable)>
<android.widget.TextView: int getCompoundPaddingRight()>
<android.test.mock.MockContext: android.content.Context getApplicationContext()>
<com.android.server.accessibility.TouchExplorer: void handleMotionEventStateDelegating(android.view.MotionEvent,int)>
<android.server.BluetoothService: void initializeNativeDataNative()>
<android.service.textservice.SpellCheckerService$InternalISpellCheckerSession: void onCancel()>
<android.content.ContentProviderOperation: boolean isReadOperation()>
<com.android.server.location.GpsLocationProvider: int access$1800(com.android.server.location.GpsLocationProvider)>
<android.content.pm.VerifierInfo$1: android.content.pm.VerifierInfo createFromParcel(android.os.Parcel)>
<android.server.BluetoothBondState$1: void <init>(android.server.BluetoothBondState)>
<android.widget.DatePicker$2: void <init>(android.widget.DatePicker)>
<com.android.internal.telephony.sip.SipCommandInterface: void setupDataCall(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.os.Message)>
<android.view.ViewRootImpl: void destroyHardwareResources()>
<java.lang.Object: int getType(int)>
<android.text.style.SuggestionSpan$1: java.lang.Object[] newArray(int)>
<android.app.ActionBar$LayoutParams: void <init>(int)>
<android.text.method.ArrowKeyMovementMethod: int getPageHeight(android.widget.TextView)>
<android.animation.ValueAnimator: void initAnimation()>
<android.app.backup.BackupDataInput: void dtor(int)>
<android.content.pm.PermissionGroupInfo$1: void <init>()>
<android.view.inputmethod.InputMethodManager: void startGettingWindowFocus(android.view.View)>
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.StateMachine access$200(com.android.internal.util.StateMachine$SmHandler)>
<android.preference.ListPreference: java.lang.CharSequence getSummary()>
<android.media.JetPlayer: boolean native_loadJetFromFile(java.lang.String)>
<android.view.animation.Animation: void setRepeatMode(int)>
<Wrapper_android_renderscript_RenderScriptGL: void test_android_renderscript_RenderScriptGL()>
<android.text.TextUtils: java.lang.String htmlEncode(java.lang.String)>
<android.media.AudioTrack: void native_stop()>
<android.graphics.Paint: float getTextRunAdvances(java.lang.String,int,int,int,int,int,float[],int,int)>
<com.android.internal.telephony.sip.SipCallBase: void <init>()>
<android.drm.DrmUtils: android.drm.DrmUtils$ExtendedMetadataParser getExtendedMetadataParser(byte[])>
<android.widget.VideoView: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>
<DumbClass: void DumbMethod29()>
<com.android.server.pm.PackageManagerService: void deleteTempPackageFiles()>
<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newAssertQuery(android.net.Uri)>
<android.view.ViewDebug: void startRecyclerTracing(java.lang.String,android.view.View)>
<android.view.Surface: void <clinit>()>
<android.media.AudioTrack: void setPlaybackPositionUpdateListener(android.media.AudioTrack$OnPlaybackPositionUpdateListener,android.os.Handler)>
<GenerationGG: junit.framework.TestListener get_junitframeworkTestListener()>
<android.telephony.cdma.CdmaCellLocation: int hashCode()>
<GenerationGG: android.content.ServiceConnection get_androidcontentServiceConnection()>
<Wrapper_android_os_ConditionVariable: void test_android_os_ConditionVariable()>
<GenerationGG: android.content.DialogInterface$OnKeyListener get_androidcontentDialogInterface__OnKeyListener()>
<android.net.UrlQuerySanitizer: boolean getAllowUnregisteredParamaters()>
<android.text.method.BaseMovementMethod: boolean lineEnd(android.widget.TextView,android.text.Spannable)>
<com.android.server.DevicePolicyManagerService: boolean isEncryptionSupported()>
<android.inputmethodservice.KeyboardView: void onMeasure(int,int)>
<android.webkit.WebView$InvokeListBox$MyArrayListAdapter: long getItemId(int)>
<android.util.JsonWriter: void beforeValue(boolean)>
<GenerationGG: android.text.method.HideReturnsTransformationMethod get_androidtextmethodHideReturnsTransformationMethod()>
<com.android.server.am.ActivityManagerService: void scheduleAppGcsLocked()>
<android.app.DownloadManager: java.lang.String[] getWhereArgsForIds(long[])>
<android.widget.TextView: android.text.TextPaint getPaint()>
<GenerationGG: android.content.MutableContextWrapper get_androidcontentMutableContextWrapper()>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,java.util.List)>
<android.widget.OverScroller: boolean isFinished()>
<android.os.RemoteCallbackList: void finishBroadcast()>
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: boolean processMessage(android.os.Message)>
<android.database.sqlite.SQLiteCantOpenDatabaseException: void <init>(java.lang.String)>
<android.text.style.SpellCheckSpan: void <init>()>
<java.lang.Object: void registerDataSetObserver(android.database.DataSetObserver)>
<android.renderscript.Allocation: void copyFromUnchecked(int[])>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: android.os.BatteryStats$Uid$Proc$ExcessivePower getExcessivePower(int)>
<android.net.wifi.WifiStateMachine: void access$6500(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.widget.HorizontalScrollView: void setFillViewport(boolean)>
<android.content.ContentQueryMap: void setKeepUpdated(boolean)>
<android.service.wallpaper.WallpaperService$Engine: void dispatchPointer(android.view.MotionEvent)>
<android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl: void setEnabled(boolean)>
<android.view.GLES20Canvas: void nRotate(int,float)>
<GenerationGG: android.database.ContentObservable get_androiddatabaseContentObservable()>
<android.sax.Element: void <init>(android.sax.Element,java.lang.String,java.lang.String,int)>
<android.util.JsonReader: int nextNonWhitespace()>
<android.graphics.Movie: void draw(android.graphics.Canvas,float,float,android.graphics.Paint)>
<android.net.DummyDataStateTracker: android.net.NetworkInfo getNetworkInfo()>
<com.android.server.WallpaperManagerService$WallpaperConnection: void attachEngine(android.service.wallpaper.IWallpaperEngine)>
<com.android.internal.util.FastXmlSerializer: void flush()>
<android.app.WallpaperManager: void <clinit>()>
<android.content.BroadcastReceiver: void abortBroadcast()>
<android.widget.GridLayout: android.widget.GridLayout$Spec spec(int,int)>
<android.os.AsyncTask$WorkerRunnable: void <init>(android.os.AsyncTask$1)>
<com.android.internal.view.InputConnectionWrapper$InputContextCallback: void setCursorCapsMode(int,int)>
<android.app.Fragment$SavedState$1: void <init>()>
<android.renderscript.Allocation: void syncAll(int)>
<android.text.util.Rfc822Token: boolean equals(java.lang.Object)>
<android.net.NetworkState: void <init>(android.net.NetworkInfo,android.net.LinkProperties,android.net.LinkCapabilities,java.lang.String)>
<android.speech.tts.AudioPlaybackHandler$ListEntry: void <init>(android.speech.tts.AudioPlaybackHandler,int,android.speech.tts.MessageParams)>
<android.webkit.WebView: void startTouch(float,float,long)>
<GenerationGG: java.lang.String get_javalangString()>
<com.android.internal.statusbar.StatusBarNotification: java.lang.String toString()>
<android.app.Fragment: android.animation.Animator onCreateAnimator(int,boolean,int)>
<android.content.SyncStorageEngine: java.util.ArrayList getAuthorities()>
<android.widget.LinearLayout: float getWeightSum()>
<android.renderscript.RenderScript: void rsnTypeGetNativeData(int,int,int[])>
<android.webkit.CookieManager: boolean acceptCookie()>
<android.widget.ListView: boolean recycleOnMeasure()>
<com.android.internal.telephony.gsm.GsmCall: void connectionDisconnected(com.android.internal.telephony.gsm.GsmConnection)>
<android.webkit.WebView: void autoFillForm(int)>
<com.android.server.wm.WindowState: void clearAnimation()>
<android.widget.AbsListView: boolean isFastScrollAlwaysVisible()>
<android.content.pm.PermissionGroupInfo: void <init>(android.content.pm.PermissionGroupInfo)>
<android.server.BluetoothHealthProfileHandler: java.util.List findChannelByStates(android.bluetooth.BluetoothDevice,int[])>
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,byte[])>
<com.android.internal.app.ResolverActivity$ResolveListAdapter: java.util.List access$000(com.android.internal.app.ResolverActivity$ResolveListAdapter)>
<android.content.pm.PackageInfoLite$1: void <init>()>
<android.net.sip.SimpleSessionDescription: java.lang.String encode()>
<android.graphics.Paint: boolean isUnderlineText()>
<android.os.FileObserver$ObserverThread: void stopWatching(int,int)>
<android.text.TextPaint: void <init>(int)>
<android.webkit.WebViewCore: void nativeContentInvalidateAll()>
<android.webkit.FindActionModeCallback: int getActionModeHeight()>
<com.android.internal.view.menu.ActionMenuItem: int getItemId()>
<android.net.sip.SipAudioCall: int access$1000(android.net.sip.SipAudioCall)>
<android.net.EthernetDataTracker: void setUserDataEnable(boolean)>
<android.widget.FastScroller$ScrollFade: void <init>(android.widget.FastScroller)>
<com.android.server.sip.SipSessionGroup: void access$500(com.android.server.sip.SipSessionGroup,com.android.server.sip.SipSessionGroup$SipSessionImpl)>
<android.widget.AbsListView: android.util.SparseBooleanArray getCheckedItemPositions()>
<android.renderscript.RenderScript: void nContextBindProgramVertex(int)>
<android.net.wifi.WifiWatchdogStateMachine: boolean access$3800(android.net.wifi.WifiWatchdogStateMachine,int)>
<android.content.res.AssetManager: java.io.InputStream open(java.lang.String,int)>
<android.view.View: void cancelLongPress()>
<android.media.MediaScannerConnection$1: void <init>(android.media.MediaScannerConnection)>
<android.test.mock.MockCursor: double getDouble(int)>
<android.view.InputDevice$1: void <init>()>
<android.database.DatabaseUtils: void appendEscapedSQLString(java.lang.StringBuilder,java.lang.String)>
<com.android.server.pm.PackageManagerService: int checkUidSignatures(int,int)>
<com.android.internal.telephony.WspTypeDecoder: void <init>(byte[])>
<android.net.wifi.WpsInfo: int describeContents()>
<android.opengl.ETC1Util$ETC1Texture: int getWidth()>
<android.widget.Toast$TN$2: void <init>(android.widget.Toast$TN)>
<android.renderscript.RenderScript: void nAllocationRead(int,short[])>
<com.android.internal.widget.AbsActionBarView: boolean isOverflowMenuShowing()>
<com.android.server.NotificationManagerService$NotificationRecord: void <init>(java.lang.String,java.lang.String,int,int,int,int,android.app.Notification)>
<android.view.KeyEvent: boolean isDown()>
<android.util.SparseBooleanArray: void <init>(int)>
<android.telephony.PhoneNumberUtils: int indexOfLastNetworkChar(java.lang.String)>
<android.app.IActivityManager$WaitResult$1: void <init>()>
<com.android.internal.view.menu.MenuItemImpl: boolean isChecked()>
<android.content.res.AssetManager: void deleteTheme(int)>
<junit.runner.BaseTestRunner: void setLoading(boolean)>
<com.android.internal.app.ActionBarImpl: java.lang.CharSequence getTitle()>
<android.widget.OverScroller$SplineOverScroller: void startSpringback(int,int,int)>
<com.android.server.VibratorService$Vibration: android.os.IBinder access$500(com.android.server.VibratorService$Vibration)>
<android.net.http.RequestHandle: java.lang.String doubleQuote(java.lang.String)>
<android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int)>
<android.server.search.SearchManagerService: android.content.Context access$100(android.server.search.SearchManagerService)>
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.DataConnectionAc getDataConnectionAc()>
<com.android.internal.telephony.gsm.GsmServiceStateTracker: boolean regCodeIsRoaming(int)>
<android.test.mock.MockDialogInterface: void cancel()>
<android.widget.TableRow: android.widget.LinearLayout$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.net.NetworkPolicy: java.lang.String toString()>
<android.os.storage.IMountService$Stub: android.os.IBinder asBinder()>
<android.content.ContentProviderResult$1: android.content.ContentProviderResult[] newArray(int)>
<android.content.pm.PackageParser$ParsePackageItemArgs: void <init>(android.content.pm.PackageParser$Package,java.lang.String[],int,int,int,int)>
<GenerationGG: android.widget.AdapterViewAnimator get_androidwidgetAdapterViewAnimator()>
<android.view.GLES20RecordingCanvas: java.lang.Object getNextPoolable()>
<com.android.internal.telephony.cdma.sms.BearerData: void encodeUserDataPayload(com.android.internal.telephony.cdma.sms.UserData)>
<android.os.INetworkManagementService$Stub$Proxy: void <init>(android.os.IBinder)>
<android.server.search.SearchManagerService$BootCompletedReceiver: void <init>(android.server.search.SearchManagerService,android.server.search.SearchManagerService$1)>
<com.android.internal.telephony.DataConnection$DcDefaultState: void enter()>
<android.telephony.PhoneNumberUtils: boolean isNonSeparator(char)>
<android.view.ViewRootImpl$RunQueue: void executeActions(android.os.Handler)>
<android.net.wifi.WifiStateMachine$WaitForWpsCompletionState: void enter()>
<com.android.internal.telephony.cat.TextMessage$1: java.lang.Object[] newArray(int)>
<android.nfc.tech.NfcF: byte[] getSystemCode()>
<android.content.ContentResolver: int samplePercentForDuration(long)>
<android.net.wifi.WifiWatchdogStateMachine: void access$2500(android.net.wifi.WifiWatchdogStateMachine,com.android.internal.util.IState)>
<android.net.sip.SipSessionAdapter: void onRingingBack(android.net.sip.ISipSession)>
<android.view.View$6: java.lang.Object get(java.lang.Object)>
<com.android.internal.telephony.cdma.CDMAPhone: void removeReferences()>
<android.view.KeyEvent$DispatcherState: void startTracking(android.view.KeyEvent,java.lang.Object)>
<android.net.NetworkInfo: void setSubtype(int,java.lang.String)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: android.os.IBinder asBinder()>
<android.widget.ProgressBar$SavedState$1: void <init>()>
<com.android.internal.view.menu.ActionMenuPresenter$SavedState$1: com.android.internal.view.menu.ActionMenuPresenter$SavedState[] newArray(int)>
<com.android.server.MountService$UnmountCallBack: void handleFinished()>
<GenerationGG: android.text.style.TabStopSpan get_androidtextstyleTabStopSpan()>
<com.android.server.pm.Installer: int execute(java.lang.String)>
<android.net.http.RequestHandle: int getRedirectCount()>
<android.net.wifi.WifiStateMachine: boolean access$4900(android.net.wifi.WifiStateMachine)>
<android.media.audiofx.BassBoost: void <init>(int,int)>
<Wrapper_android_test_PerformanceTestCase: void test_android_test_PerformanceTestCase()>
<android.preference.PreferenceManager: android.preference.PreferenceFragment getFragment()>
<android.webkit.WebSettings: void setSaveFormData(boolean)>
<android.media.AudioService$RemoteControlStackEntry: void <init>(android.app.PendingIntent,android.content.ComponentName)>
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.Connection$DisconnectCause disconnectCauseFromCode(int)>
<android.widget.TextView$SelectionModifierCursorController: int getMaxTouchOffset()>
<android.util.SparseBooleanArray: int size()>
<android.test.ActivityUnitTestCase$MockParent: int getRequestedOrientation()>
<android.speech.tts.FileSynthesisCallback: int done()>
<android.view.textservice.SpellCheckerInfo: java.lang.String getId()>
<android.webkit.WebSyncManager: int access$000()>
<android.inputmethodservice.InputMethodService: boolean isFullscreenMode()>
<android.app.admin.DeviceAdminInfo$1: java.lang.Object[] newArray(int)>
<android.os.Environment: java.io.File getExternalStorageDirectory()>
<android.webkit.WebView: int nativeSelectionY()>
<android.bluetooth.BluetoothDeviceProfileState: void access$3000(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.IState)>
<android.util.Log$1: void <init>()>
<android.os.Handler: void removeMessages(int)>
<android.widget.ActivityChooserModel$HistoricalRecord: java.lang.String toString()>
<android.webkit.WebView: boolean nativeHasContent()>
<android.view.MotionEvent: boolean isTainted()>
<android.view.InputDevice: java.util.List getMotionRanges()>
<android.app.ActivityThread$ApplicationThread: void scheduleStopService(android.os.IBinder)>
<android.server.BluetoothPanProfileHandler: int getPanDeviceConnectionState(android.bluetooth.BluetoothDevice)>
<Wrapper_android_graphics_SumPathEffect: void test_android_graphics_SumPathEffect()>
<com.android.internal.os.BatteryStatsImpl$StopwatchTimer: boolean reset(com.android.internal.os.BatteryStatsImpl,boolean)>
<android.widget.TextView: void setMinWidth(int)>
<android.view.VelocityTracker$1: void <init>()>
<android.widget.Spinner$DropDownAdapter: int getItemViewType(int)>
<android.net.wifi.WifiWatchdogStateMachine: int access$4400(android.net.wifi.WifiWatchdogStateMachine)>
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub$Proxy: void <init>(android.os.IBinder)>
<android.provider.Downloads$Impl: boolean isStatusError(int)>
<GenerationGG: android.database.sqlite.SQLiteProgram get_androiddatabasesqliteSQLiteProgram()>
<android.content.pm.ApplicationInfo$1: android.content.pm.ApplicationInfo[] newArray(int)>
<com.android.internal.app.NetInitiatedActivity: int access$100(com.android.internal.app.NetInitiatedActivity)>
<android.media.audiofx.AudioEffect: byte[] concatArrays(byte[][])>
<android.graphics.BlurMaskFilter$Blur: void <clinit>()>
<android.app.ContextImpl$29: void <init>()>
<android.util.Xml$Encoding: android.util.Xml$Encoding[] values()>
<android.net.NetworkInfo$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.widget.ActivityChooserModel$HistoricalRecord: int hashCode()>
<android.net.Uri$OpaqueUri: java.lang.String getQuery()>
<android.location.Location: float access$602(android.location.Location,float)>
<com.android.server.ProcessMap: java.lang.Object put(java.lang.String,int,java.lang.Object)>
<android.widget.ZoomButtonsController: boolean access$000(android.widget.ZoomButtonsController)>
<android.content.pm.IPackageStatsObserver$Stub$Proxy: android.os.IBinder asBinder()>
<android.app.DialogFragment: void show(android.app.FragmentManager,java.lang.String)>
<android.content.SyncManager: boolean access$002(android.content.SyncManager,boolean)>
<android.content.res.ObbInfo: void <clinit>()>
<GenerationGG: android.graphics.drawable.Drawable$Callback get_androidgraphicsdrawableDrawable__Callback()>
<android.renderscript.RenderScript: int rsnAllocationCubeCreateFromBitmap(int,int,int,android.graphics.Bitmap,int)>
<android.net.Uri$StringUri: android.net.Uri$Part getQueryPart()>
<android.util.MathUtils: void <clinit>()>
<android.database.sqlite.SQLiteDirectCursorDriver: void cursorClosed()>
<android.net.wifi.p2p.WifiP2pGroup: void <clinit>()>
<android.graphics.drawable.shapes.RectShape: android.graphics.drawable.shapes.RectShape clone()>
<GenerationGG: android.graphics.PixelFormat get_androidgraphicsPixelFormat()>
<android.net.wifi.WifiWatchdogStateMachine$DelayWalledGardenState: void enter()>
<java.lang.Object: void removeItem(int)>
<android.database.Observable: void unregisterAll()>
<android.app.LoadedApk: java.lang.String getResDir()>
<android.accounts.AccountManager$AmsTask: android.os.Bundle getResult(long,java.util.concurrent.TimeUnit)>
<android.content.res.XmlBlock: int access$100(int)>
<android.os.AsyncTask$InternalHandler: void <init>(android.os.AsyncTask$1)>
<android.location.Address: java.lang.String access$802(android.location.Address,java.lang.String)>
<Wrapper_android_animation_PropertyValuesHolder: void test_android_animation_PropertyValuesHolder()>
<android.media.audiofx.Visualizer: int setEnabled(boolean)>
<com.android.internal.telephony.cat.AppInterface$CommandType: com.android.internal.telephony.cat.AppInterface$CommandType fromInt(int)>
<com.android.server.PowerManagerService$14: void <init>(com.android.server.PowerManagerService)>
<android.view.KeyCharacterMap: int getModifierBehavior()>
<com.android.server.sip.SipService: boolean access$1600(com.android.server.sip.SipService,java.lang.String)>
<android.speech.tts.TextToSpeech: android.speech.tts.TextToSpeech$Connection access$200(android.speech.tts.TextToSpeech)>
<android.graphics.Canvas: void native_drawLine(int,float,float,float,float,int)>
<android.webkit.BrowserFrame: void access$300(android.webkit.BrowserFrame,int,int)>
<android.app.IThumbnailRetriever$Stub: void <init>()>
<android.graphics.Paint: int native_breakText(java.lang.String,boolean,float,float[])>
<GenerationGG: android.graphics.SweepGradient get_androidgraphicsSweepGradient()>
<android.renderscript.RenderScript: void rsnAllocationData2D(int,int,int,int,int,int,int,int,float[],int)>
<android.widget.ProgressBar: void initProgressBar()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: java.lang.String access$402(com.android.internal.telephony.cdma.CdmaLteUiccRecords,java.lang.String)>
<GenerationGG: android.content.CursorLoader get_androidcontentCursorLoader()>
<android.app.TabActivity: void setDefaultTab(java.lang.String)>
<com.android.server.MountService: void access$2700(com.android.server.MountService,com.android.server.MountService$ObbState)>
<android.nfc.Tag: boolean hasTech(int)>
<android.security.KeyChain$KeyChainConnection: android.security.IKeyChainService getService()>
<android.graphics.Interpolator: void reset(int)>
<android.text.method.ArrowKeyMovementMethod: android.text.method.MovementMethod getInstance()>
<com.android.internal.view.BaseIWindow: void executeCommand(java.lang.String,java.lang.String,android.os.ParcelFileDescriptor)>
<android.os.Message: java.lang.Runnable getCallback()>
<android.content.pm.FeatureInfo$1: android.content.pm.FeatureInfo[] newArray(int)>
<com.android.server.BackupManagerService: android.app.IActivityManager access$700(com.android.server.BackupManagerService)>
<com.android.server.connectivity.Tethering: java.util.Collection access$4400(com.android.server.connectivity.Tethering)>
<android.graphics.Region: boolean nativeOp(int,int,int,int,int,int)>
<android.widget.RemoteViews$MemoryUsageCounter: void <init>(android.widget.RemoteViews)>
<android.os.Debug: void printLoadedClasses(int)>
<com.android.server.wm.ViewServer: boolean stop()>
<android.hardware.Camera: void setZoomChangeListener(android.hardware.Camera$OnZoomChangeListener)>
<com.android.server.pm.UserManager: void writeUserList()>
<com.android.internal.app.ActionBarImpl$ActionModeImpl: java.lang.CharSequence getTitle()>
<com.android.server.usb.UsbDeviceManager: android.content.Context access$600(com.android.server.usb.UsbDeviceManager)>
<android.view.View: void onPopulateAccessibilityEventInternal(android.view.accessibility.AccessibilityEvent)>
<android.app.LoaderManagerImpl: android.content.Loader getLoader(int)>
<GenerationGG: android.hardware.usb.UsbRequest get_androidhardwareusbUsbRequest()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$3300(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,android.os.Message)>
<android.content.Intent$FilterComparison: void <init>(android.content.Intent)>
<android.graphics.drawable.DrawableContainer: int getIntrinsicWidth()>
<android.graphics.Paint: android.graphics.Paint$Style getStyle()>
<com.android.internal.telephony.BaseCommands: void setOnRestrictedStateChanged(android.os.Handler,int,java.lang.Object)>
<android.renderscript.Type$Builder: android.renderscript.Type$Builder setMipmaps(boolean)>
<com.android.server.NotificationManagerService$ToastRecord: java.lang.String toString()>
<android.widget.SlidingDrawer: void prepareTracking(int)>
<com.android.internal.telephony.sip.SipPhone: java.lang.String getVoiceMailAlphaTag()>
<android.view.ViewGroup: boolean isAlwaysDrawnWithCacheEnabled()>
<com.android.internal.os.LoggingPrintStream: void close()>
<android.appwidget.AppWidgetProvider: void onUpdate(android.content.Context,android.appwidget.AppWidgetManager,int[])>
<com.android.server.am.ActivityManagerService: boolean getPackageAskScreenCompat(java.lang.String)>
<android.bluetooth.BluetoothAdapter$StateChangeCallbackWrapper: void onBluetoothStateChange(boolean)>
<android.net.wifi.WpsStateMachine: com.android.internal.util.State access$100(android.net.wifi.WpsStateMachine)>
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: boolean isInHomeSidNid(int,int)>
<android.view.textservice.TextInfo: int getSequence()>
<android.opengl.ETC1Util$ETC1Texture: java.nio.ByteBuffer getData()>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config,boolean)>
<android.graphics.Canvas: void native_drawTextRun(int,java.lang.String,int,int,int,int,float,float,int,int)>
<GenerationGG: android.opengl.Matrix get_androidopenglMatrix()>
<android.mtp.MtpDevice: boolean importFile(int,java.lang.String)>
<com.android.server.pm.UserManager: void removeUser(int)>
<com.android.server.location.GeocoderProxy$Connection: android.location.IGeocodeProvider getProvider()>
<android.view.View: int getVerticalScrollbarPosition()>
<android.media.AudioService: int access$3900(android.media.AudioService)>
<android.widget.CursorTreeAdapter$MyCursorHelper: boolean access$402(android.widget.CursorTreeAdapter$MyCursorHelper,boolean)>
<android.app.ActivityThread$ApplicationThread: void scheduleDestroyActivity(android.os.IBinder,boolean,int)>
<android.app.Activity: boolean isResumed()>
<com.android.internal.widget.LockPatternUtils: java.lang.String access$200()>
<android.app.WallpaperInfo: java.lang.String toString()>
<android.net.http.HttpAuthHeader: void parseHeader(java.lang.String)>
<android.app.Activity: void onActionModeFinished(android.view.ActionMode)>
<com.android.server.WifiService$3: boolean shouldDeviceStayAwake(int,int)>
<android.webkit.WebView: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>
<com.android.server.UiModeManagerService: boolean access$502(com.android.server.UiModeManagerService,boolean)>
<android.view.MotionEvent: android.view.MotionEvent clampNoHistory(float,float,float,float)>
<android.content.pm.PackageItemInfo: void <init>()>
<android.graphics.BitmapRegionDecoder: void recycle()>
<android.net.NetworkStatsHistory: java.lang.String toString()>
<android.webkit.BrowserFrame$ConfigCallback: void addHandler(android.os.Handler)>
<android.speech.tts.TextToSpeechService$1: void setCallback(java.lang.String,android.speech.tts.ITextToSpeechCallback)>
<GenerationGG: android.graphics.drawable.GradientDrawable get_androidgraphicsdrawableGradientDrawable()>
<android.widget.VideoView: int access$202(android.widget.VideoView,int)>
<android.net.http.RequestHandle: void setRedirectCount(int)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$WaitForWifiDisableState: void <init>(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<android.location.Location$1: android.location.Location[] newArray(int)>
<android.test.mock.MockPackageManager: int checkSignatures(int,int)>
<android.net.DhcpInfo: void putAddress(java.lang.StringBuffer,int)>
<android.net.sip.SipProfile: java.lang.String access$1202(android.net.sip.SipProfile,java.lang.String)>
<android.animation.PropertyValuesHolder: java.lang.String getPropertyName()>
<Wrapper_android_opengl_GLUtils: void test_android_opengl_GLUtils()>
<android.content.ContextWrapper: java.io.File getExternalCacheDir()>
<android.os.Process: boolean supportsProcesses()>
<android.os.SystemProperties: void native_set(java.lang.String,java.lang.String)>
<android.view.Surface$1: android.view.Surface[] newArray(int)>
<android.webkit.WebViewCore$EventHub: void removeMessages()>
<com.android.internal.telephony.cat.BerTlv: com.android.internal.telephony.cat.BerTlv decode(byte[])>
<android.view.animation.ScaleAnimation: void <init>(float,float,float,float)>
<android.net.wifi.WifiNative: boolean stopFilteringMulticastV6Packets()>
<android.content.pm.UserInfo: void <init>(int,java.lang.String,int)>
<android.webkit.GeolocationPermissions: void <init>()>
<com.android.internal.telephony.PhoneBase: java.lang.String getActiveApnHost(java.lang.String)>
<com.android.internal.telephony.DataConnectionTracker: boolean isDataSetupCompleteOk(android.os.AsyncResult)>
<android.webkit.WebSettings: void setCacheMode(int)>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: com.android.internal.telephony.SmsHeader getUserDataHeader()>
<GenerationGG: android.util.Base64DataException get_androidutilBase64DataException()>
<android.net.LocalSocket: void setSendBufferSize(int)>
<android.os.Build: java.lang.String access$000(java.lang.String)>
<android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCDHelper(java.lang.String,boolean)>
<GenerationGG: android.os.ConditionVariable get_androidosConditionVariable()>
<android.graphics.Path: void lineTo(float,float)>
<android.net.DhcpStateMachine$WaitBeforeRenewalState: void <init>(android.net.DhcpStateMachine)>
<com.android.server.accessibility.AccessibilityManagerService: boolean canDispathEventLocked(com.android.server.accessibility.AccessibilityManagerService$Service,android.view.accessibility.AccessibilityEvent,int)>
<android.view.ViewConfiguration: int getTapTimeout()>
<android.net.wifi.WifiStateMachine: int access$4000(android.net.wifi.WifiStateMachine)>
<android.content.res.CompatibilityInfo: android.content.res.CompatibilityInfo$Translator getTranslator()>
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String[] access$202(com.android.internal.telephony.ims.IsimUiccRecords,java.lang.String[])>
<android.content.pm.ServiceInfo$1: android.content.pm.ServiceInfo[] newArray(int)>
<com.android.internal.telephony.cat.PresentationType: void <init>(java.lang.String,int)>
<android.graphics.drawable.ScaleDrawable: int getIntrinsicWidth()>
<android.inputmethodservice.IInputMethodSessionWrapper$InputMethodEventCallbackWrapper: void <init>(com.android.internal.view.IInputMethodCallback)>
<android.text.style.QuoteSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)>
<android.widget.LinearLayout: int getBaselineAlignedChildIndex()>
<com.android.server.PackageManagerBackupAgent: void writeEntity(android.app.backup.BackupDataOutput,java.lang.String,byte[])>
<com.android.internal.view.menu.MenuItemImpl: boolean isActionButton()>
<android.webkit.WebViewCore: void resumeUpdatePicture(android.webkit.WebViewCore)>
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHid: void <init>(android.bluetooth.BluetoothDeviceProfileState,android.bluetooth.BluetoothDeviceProfileState$1)>
<android.renderscript.Double3: void <init>(double,double,double)>
<android.content.Loader: void unregisterListener(android.content.Loader$OnLoadCompleteListener)>
<android.webkit.ZoomControlExternal: void <clinit>()>
<android.widget.ListPopupWindow: void setPromptPosition(int)>
<android.widget.SearchView$SearchAutoComplete: void replaceText(java.lang.CharSequence)>
<android.app.IUiModeManager$Stub$Proxy: android.os.IBinder asBinder()>
<android.net.wifi.WifiNative: java.lang.String listNetworksCommand()>
<android.net.NetworkStatsHistory: int getIndexAfter(long)>
<android.view.accessibility.AccessibilityRecord: void init(android.view.accessibility.AccessibilityRecord)>
<android.widget.RelativeLayout$LayoutParams: int[] getRules()>
<android.graphics.drawable.PaintDrawable: void <init>()>
<android.text.format.DateUtils: void <init>()>
<android.text.style.SuggestionSpan: void writeToParcel(android.os.Parcel,int)>
<android.inputmethodservice.InputMethodService$InputMethodImpl: void <init>(android.inputmethodservice.InputMethodService)>
<com.android.server.pm.Installer: int remove(java.lang.String,int)>
<android.test.SingleLaunchActivityTestCase: void <clinit>()>
<com.android.internal.net.LegacyVpnInfo$1: com.android.internal.net.LegacyVpnInfo[] newArray(int)>
<android.widget.GridLayout$Axis: void <init>(android.widget.GridLayout,boolean,android.widget.GridLayout$1)>
<android.widget.TextView: android.content.Context access$4700(android.widget.TextView)>
<android.animation.PropertyValuesHolder: void setupStartValue(java.lang.Object)>
<android.app.ActivityThread$ResourcesKey: boolean equals(java.lang.Object)>
<com.android.internal.telephony.gsm.SimSmsInterfaceManager$CellBroadcastRangeManager: void startUpdate()>
<com.android.server.wm.InputManager: void setInputDispatchMode(boolean,boolean)>
<android.util.Base64$Decoder: void <init>(int,byte[])>
<android.widget.AdapterView: android.widget.AdapterView$OnItemClickListener getOnItemClickListener()>
<android.content.ClipboardManager: void <init>(android.content.Context,android.os.Handler)>
<android.os.IVibratorService$Stub$Proxy: android.os.IBinder asBinder()>
<android.renderscript.RSSurfaceView: android.renderscript.RenderScriptGL createRenderScriptGL(android.renderscript.RenderScriptGL$SurfaceConfig)>
<android.util.Pools: android.util.Pool synchronizedPool(android.util.Pool)>
<android.preference.PreferenceActivity: android.widget.ListAdapter access$200(android.preference.PreferenceActivity)>
<GenerationGG: android.widget.ExpandableListView$OnGroupClickListener get_androidwidgetExpandableListView__OnGroupClickListener()>
<android.widget.ShareActionProvider: android.content.Context access$100(android.widget.ShareActionProvider)>
<android.app.ApplicationErrorReport$BatteryInfo: void dump(android.util.Printer,java.lang.String)>
<android.view.inputmethod.EditorInfo$1: java.lang.Object[] newArray(int)>
<android.preference.Preference: void setOnPreferenceChangeListener(android.preference.Preference$OnPreferenceChangeListener)>
<android.media.MediaPlayer: void native_finalize()>
<android.media.AudioService: void pushMediaButtonReceiver(android.app.PendingIntent,android.content.ComponentName)>
<android.text.style.SuggestionSpan: int getUnderlineColor()>
<com.android.internal.util.XmlUtils: void nextElement(org.xmlpull.v1.XmlPullParser)>
<GenerationGG: android.graphics.SumPathEffect get_androidgraphicsSumPathEffect()>
<android.drm.DrmEvent: void <init>(int,int,java.lang.String,java.util.HashMap)>
<com.android.server.location.ComprehensiveCountryDetector$3: void <init>(com.android.server.location.ComprehensiveCountryDetector,android.location.Country,android.location.Country,boolean,boolean)>
<android.graphics.Canvas: void nativeSetDrawFilter(int,int)>
<android.net.WebAddress: int getPort()>
<android.app.ApplicationPackageManager$ResourceName: int hashCode()>
<android.content.pm.PackageInfoLite: java.lang.String toString()>
<com.android.internal.telephony.cdma.CdmaConnection: void log(java.lang.String)>
<com.android.internal.policy.PolicyManager: android.view.Window makeNewWindow(android.content.Context)>
<android.app.admin.DeviceAdminReceiver: android.content.ComponentName getWho(android.content.Context)>
<android.animation.ObjectAnimator: void setupEndValues()>
<android.app.ListActivity: void onListItemClick(android.widget.ListView,android.view.View,int,long)>
<com.android.internal.os.BatteryStatsImpl$Uid: void noteScanWifiLockAcquiredLocked()>
<android.graphics.PointF: void <init>(android.graphics.Point)>
<android.content.AsyncQueryHandler: void onInsertComplete(int,java.lang.Object,android.net.Uri)>
<android.speech.tts.BlockingMediaPlayer: void <init>(android.content.Context,android.net.Uri,int)>
<android.widget.LinearLayout: void setWeightSum(float)>
<android.bluetooth.BluetoothDeviceProfileState: void access$4400(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.net.rtp.AudioGroup: void nativeAdd(int,int,java.lang.String,int,java.lang.String,int)>
<android.webkit.LoadListener: java.lang.String host()>
<android.text.style.ForegroundColorSpan: int getForegroundColor()>
<android.widget.RadioGroup: void init()>
<android.graphics.PorterDuffColorFilter: int nCreatePorterDuffFilter(int,int,int)>
<android.view.ViewGroup: boolean shouldDelayChildPressedState()>
<com.android.server.TwilightCalculator: void <init>()>
<android.webkit.ZoomManager: boolean willScaleTriggerZoom(float)>
<android.content.res.XmlBlock$Parser: java.lang.String getNamespacePrefix(int)>
<android.widget.AbsListView$SavedState: java.lang.String toString()>
<GenerationGG: android.os.SystemClock get_androidosSystemClock()>
<android.inputmethodservice.Keyboard$Row: void <init>(android.inputmethodservice.Keyboard)>
<android.widget.AbsSpinner: int pointToPosition(int,int)>
<android.webkit.BrowserFrame: void resetLoadingStates()>
<android.drm.DrmManagerClient$InfoHandler: void <init>(android.drm.DrmManagerClient,android.os.Looper)>
<android.view.ViewGroup$HoverTarget: android.view.ViewGroup$HoverTarget obtain(android.view.View)>
<GenerationGG: android.util.StateSet get_androidutilStateSet()>
<android.net.wifi.WifiWatchdogStateMachine$DnsCheckingState: void exit()>
<android.nfc.NfcAdapter: void <init>()>
<GenerationGG: android.view.ViewParent get_androidviewViewParent()>
<android.location.Address$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.internal.util.StateMachine$SmHandler: void <init>(android.os.Looper,com.android.internal.util.StateMachine)>
<com.android.server.am.ActivityRecord: void windowsGone()>
<com.android.internal.telephony.BaseCommands: void unregisterForSIMReady(android.os.Handler)>
<android.webkit.WebSettings: android.webkit.BrowserFrame access$000(android.webkit.WebSettings)>
<com.android.server.wm.WindowState: boolean isOpaqueDrawn()>
<android.widget.AbsSpinner: int getCount()>
<android.webkit.CallbackProxy$7: void <init>(android.webkit.CallbackProxy,android.webkit.JsPromptResult)>
<android.media.AudioTrack: int native_get_playback_rate()>
<android.appwidget.AppWidgetHostView: void <clinit>()>
<android.view.View: boolean isVerticalScrollBarEnabled()>
<android.app.backup.RestoreSession$RestoreObserverWrapper$1: void <init>(android.app.backup.RestoreSession$RestoreObserverWrapper,android.os.Looper,android.app.backup.RestoreSession)>
<android.location.Address: java.lang.String getLocality()>
<android.os.Handler: void removeCallbacksAndMessages(java.lang.Object)>
<android.net.wifi.WifiStateMachine: android.net.wifi.p2p.WifiP2pManager access$1200(android.net.wifi.WifiStateMachine)>
<android.widget.OverScroller$SplineOverScroller: void setFriction(float)>
<android.widget.AbsoluteLayout: boolean shouldDelayChildPressedState()>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: void <init>(android.content.Context)>
<android.widget.CompoundButton$SavedState$1: android.widget.CompoundButton$SavedState[] newArray(int)>
<android.net.LocalSocket: int getSoTimeout()>
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String isimTlvToString(byte[])>
<android.bluetooth.BluetoothPbap: android.bluetooth.IBluetoothPbap access$002(android.bluetooth.BluetoothPbap,android.bluetooth.IBluetoothPbap)>
<android.widget.ExpandableListView: long getPackedPositionForGroup(int)>
<android.content.SyncManager$3: void <init>(android.content.SyncManager)>
<com.android.internal.view.BaseSurfaceHolder: void setType(int)>
<android.graphics.Path: void addRoundRect(android.graphics.RectF,float,float,android.graphics.Path$Direction)>
<android.view.ViewRootImpl$ResizedInfo: void <init>(android.view.ViewRootImpl)>
<android.content.AsyncTaskLoader: void executePendingTask()>
<android.app.ActivityManager$ProcessErrorStateInfo$1: java.lang.Object[] newArray(int)>
<com.android.internal.telephony.IccCard: void finalize()>
<android.drm.DrmRights: byte[] getData()>
<android.preference.Preference: void notifyHierarchyChanged()>
<junit.framework.TestSuite: java.lang.reflect.Constructor getTestConstructor(java.lang.Class)>
<android.app.Activity: void onTitleChanged(java.lang.CharSequence,int)>
<com.android.internal.telephony.CallForwardInfo: java.lang.String toString()>
<android.webkit.WebView: void access$3100(android.webkit.WebView,float,float)>
<android.net.NetworkTemplate$1: android.net.NetworkTemplate createFromParcel(android.os.Parcel)>
<android.view.textservice.SpellCheckerSubtype: java.lang.String getLocale()>
<android.view.View: int getWindowAttachCount()>
<android.os.UEventObserver$UEventThread: void addObserver(java.lang.String,android.os.UEventObserver)>
<android.widget.RemoteViews: void setCharSequence(int,java.lang.String,java.lang.CharSequence)>
<android.os.Message: void <clinit>()>
<android.preference.Preference: void setWidgetLayoutResource(int)>
<com.android.internal.app.ResolverActivity$ResolveListAdapter: android.content.pm.ResolveInfo resolveInfoForPosition(int)>
<android.webkit.WebSettings: boolean getBlockNetworkImage()>
<android.text.style.ForegroundColorSpan: void <init>(int)>
<android.webkit.WebView$8: void <init>(android.webkit.WebView)>
<GenerationGG: android.graphics.ComposePathEffect get_androidgraphicsComposePathEffect()>
<com.android.internal.widget.LockPatternView: void onDraw(android.graphics.Canvas)>
<com.android.server.am.UsageStatsService$PkgUsageStatsExtended: void writeToParcel(android.os.Parcel)>
<com.android.internal.telephony.SmsMessageBase: void <init>()>
<android.webkit.WebSettings$ZoomDensity: void <init>(java.lang.String,int,int)>
<android.content.pm.ServiceInfo: void dump(android.util.Printer,java.lang.String)>
<android.media.audiofx.Equalizer: int getCenterFreq(short)>
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setShortcut(char,char)>
<com.android.server.ThrottleService: long access$1300(com.android.server.ThrottleService)>
<android.webkit.WebView: android.graphics.Rect contentToViewRect(android.graphics.Rect)>
<android.view.inputmethod.CompletionInfo: long getId()>
<android.graphics.drawable.Drawable: int getIntrinsicWidth()>
<android.view.View: android.content.res.Resources getResources()>
<android.graphics.Matrix$1: void setRotate(float)>
<android.bluetooth.BluetoothDeviceProfileState: void access$4500(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.IState)>
<android.graphics.Rect: void setEmpty()>
<android.database.sqlite.SQLiteQuery: int nativeFillWindow(int,int,int,int,int)>
<android.app.SharedPreferencesImpl: java.util.WeakHashMap access$500(android.app.SharedPreferencesImpl)>
<android.app.backup.IFullBackupRestoreObserver$Stub: android.app.backup.IFullBackupRestoreObserver asInterface(android.os.IBinder)>
<android.net.NetworkUtils: int netmaskIntToPrefixLength(int)>
<android.webkit.WebViewCore: boolean access$6800(android.webkit.WebViewCore,int,int,android.graphics.Rect)>
<android.graphics.Paint: void <init>(android.graphics.Paint)>
<android.renderscript.RenderScript: void rsnContextBindProgramStore(int,int)>
<android.media.audiofx.EnvironmentalReverb: short getDecayHFRatio()>
<android.preference.PreferenceGroupAdapter: android.preference.PreferenceGroupAdapter$PreferenceLayout createPreferenceLayout(android.preference.Preference,android.preference.PreferenceGroupAdapter$PreferenceLayout)>
<android.net.wifi.WifiWatchdogStateMachine: void access$2700(android.net.wifi.WifiWatchdogStateMachine,com.android.internal.util.IState)>
<android.view.inputmethod.InputBinding: int getPid()>
<GenerationGG: android.view.inputmethod.BaseInputConnection get_androidviewinputmethodBaseInputConnection()>
<android.content.ContextWrapper: void <init>(android.content.Context)>
<android.renderscript.Allocation: void validateIsFloat32()>
<android.webkit.GeolocationPermissions: void access$400(java.lang.String)>
<android.service.wallpaper.WallpaperService$Engine: void onVisibilityChanged(boolean)>
<android.app.ActivityThread$ApplicationThread: void scheduleTrimMemory(int)>
<android.webkit.BrowserFrame: void goBackOrForward(int)>
<com.android.server.LocationManagerService: void addProvider(com.android.server.location.LocationProviderInterface)>
<com.android.internal.telephony.sip.SipCommandInterface: void getIccCardStatus(android.os.Message)>
<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
<com.android.server.am.PendingIntentRecord: java.lang.String toString()>
<android.app.BackStackRecord: android.app.FragmentTransaction setTransition(int)>
<com.android.internal.os.PkgUsageStats: void <clinit>()>
<com.android.internal.util.JournaledFile: void <init>(java.io.File,java.io.File)>
<android.test.mock.MockContext: void removeStickyBroadcast(android.content.Intent)>
<com.android.server.MountService$UnmountCallBack: void <init>(com.android.server.MountService,java.lang.String,boolean,boolean)>
<DumbClass: void DumbMethod59()>
<android.test.mock.MockContentProvider$InversionIContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.widget.Gallery: void setUnselectedAlpha(float)>
<com.android.internal.util.AsyncChannel$SyncMessenger$SyncHandler: void <init>(com.android.internal.util.AsyncChannel$SyncMessenger,android.os.Looper)>
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree: void <init>(android.bluetooth.BluetoothDeviceProfileState)>
<android.app.AlertDialog: void setView(android.view.View,int,int,int,int)>
<android.net.wifi.WifiNative: boolean reconnectCommand()>
<android.net.LocalSocketImpl: android.net.Credentials getPeerCredentials_native(java.io.FileDescriptor)>
<com.android.server.am.ActivityManagerService: int getRequestedOrientation(android.os.IBinder)>
<com.android.server.accessibility.TouchExplorer$PointerTracker: long getLastReceivedUpPointerDownTime()>
<android.media.AudioService: android.media.AudioService$VolumeStreamState[] access$3100(android.media.AudioService)>
<android.media.AudioTrack: int getPositionNotificationPeriod()>
<android.content.SyncManager: android.os.PowerManager$WakeLock access$800(android.content.SyncManager)>
<android.view.TextureView: android.graphics.Bitmap getBitmap(int,int)>
<GenerationGG: android.widget.ListAdapter get_androidwidgetListAdapter()>
<android.view.KeyEvent: int getUnicodeChar()>
<android.view.inputmethod.InputBinding: void <init>(android.view.inputmethod.InputConnection,android.os.IBinder,int,int)>
<com.android.server.NetworkManagementService: void unregisterObserver(android.net.INetworkManagementEventObserver)>
<android.graphics.drawable.BitmapDrawable: void <init>(android.content.res.Resources)>
<android.app.IThumbnailRetriever$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.internal.os.IResultReceiver$Stub$Proxy: void <init>(android.os.IBinder)>
<android.animation.ValueAnimator: void removeAllUpdateListeners()>
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: boolean allowFilterResult(android.content.pm.PackageParser$ActivityIntentInfo,java.util.List)>
<GenerationGG: android.renderscript.RenderScript$RSMessageHandler get_androidrenderscriptRenderScript__RSMessageHandler()>
<android.telephony.TelephonyManager: java.lang.String getSimCountryIso()>
<android.app.backup.IRestoreSession$Stub: android.app.backup.IRestoreSession asInterface(android.os.IBinder)>
<android.widget.RelativeLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.webkit.WebView: void setFocusControllerActive(boolean)>
<android.server.BluetoothService: void sendProfileStateMessage(int,int)>
<android.text.style.MetricAffectingSpan$Passthrough: void updateDrawState(android.text.TextPaint)>
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat setPattern(java.lang.String)>
<android.view.ContextThemeWrapper: void <init>(android.content.Context,int)>
<android.net.DhcpStateMachine$StoppedState: void enter()>
<android.widget.Switch: boolean verifyDrawable(android.graphics.drawable.Drawable)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void setEnterFadeDuration(int)>
<android.widget.ExpandableListView: void setOnGroupExpandListener(android.widget.ExpandableListView$OnGroupExpandListener)>
<android.os.Debug$MemoryInfo: void <init>(android.os.Parcel,android.os.Debug$1)>
<android.widget.Chronometer: android.widget.Chronometer$OnChronometerTickListener getOnChronometerTickListener()>
<android.telephony.SmsMessage: boolean isEmail()>
<android.mtp.MtpObjectInfo: int getImagePixDepth()>
<com.android.server.am.UsageStatsService: void collectDumpInfoFLOCK(java.io.PrintWriter,boolean,boolean,java.util.HashSet)>
<android.graphics.Bitmap: void setDefaultDensity(int)>
<com.android.internal.telephony.SmsMessageBase$SubmitPduBase: java.lang.String toString()>
<android.net.http.HttpAuthHeader: boolean isProxy()>
<android.inputmethodservice.Keyboard: void <clinit>()>
<android.server.BluetoothService: void cleanupNativeDataNative()>
<com.android.server.pm.PackageManagerService: java.util.List matchVerifiers(android.content.pm.PackageInfoLite,java.util.List,com.android.server.pm.PackageVerificationState)>
<android.view.View: int getNextFocusForwardId()>
<android.media.AudioService$AudioServiceBroadcastReceiver: void <init>(android.media.AudioService,android.media.AudioService$1)>
<android.net.wifi.p2p.WifiP2pInfo$1: void <init>()>
<android.accounts.AccountManagerService: android.accounts.IAccountAuthenticatorCache access$900(android.accounts.AccountManagerService)>
<android.widget.TextView: int getSelectionEnd()>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: void addExcessiveWake(long,long)>
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void <init>(java.lang.String,float[])>
<android.content.pm.ParceledListSlice: void <init>()>
<com.android.server.am.ActivityManagerService: boolean decProviderCount(com.android.server.am.ProcessRecord,com.android.server.am.ContentProviderRecord)>
<Wrapper_android_text_style_BackgroundColorSpan: void test_android_text_style_BackgroundColorSpan()>
<android.app.backup.FileBackupHelperBase: void dtor(int)>
<android.view.KeyEvent: void <init>()>
<android.net.http.HttpResponseCache: long maxSize()>
<com.android.server.pm.PackageManagerService: java.lang.String access$1900(com.android.server.pm.PackageManagerService)>
<android.content.OperationApplicationException: void <init>()>
<GenerationGG: android.test.ProviderTestCase2 get_androidtestProviderTestCase2()>
<com.android.internal.telephony.IccPhoneBookInterfaceManager$1: void handleMessage(android.os.Message)>
<android.test.mock.MockContext: boolean isRestricted()>
<com.android.server.sip.SipService: boolean anyOpenedToReceiveCalls()>
<android.location.Criteria: void setHorizontalAccuracy(int)>
<android.opengl.Matrix: void orthoM(float[],int,float,float,float,float,float,float)>
<android.text.Layout$TabStops: float nextTab(float)>
<android.net.http.SslError: java.lang.String toString()>
<android.view.animation.Animation: boolean isFillEnabled()>
<android.widget.TextView$SuggestionsPopupWindow: int getTextOffset()>
<android.telephony.cdma.CdmaCellLocation: boolean isEmpty()>
<GenerationGG: android.graphics.ColorMatrixColorFilter get_androidgraphicsColorMatrixColorFilter()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: android.net.wifi.p2p.WifiP2pGroup access$7802(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,android.net.wifi.p2p.WifiP2pGroup)>
<GenerationGG: android.widget.CompoundButton get_androidwidgetCompoundButton()>
<android.widget.TabHost$2: void <init>(android.widget.TabHost)>
<com.android.server.wm.Watermark: void <init>(android.util.DisplayMetrics,android.view.SurfaceSession,java.lang.String[])>
<android.location.Location: float getAccuracy()>
<android.telephony.SignalStrength: void writeToParcel(android.os.Parcel,int)>
<android.view.GLES20Canvas: void setMatrix(android.graphics.Matrix)>
<android.view.GLES20Canvas: void drawPosText(java.lang.String,float[],android.graphics.Paint)>
<android.view.MotionEvent$1: java.lang.Object[] newArray(int)>
<com.android.internal.widget.ActionBarView: void setContextView(com.android.internal.widget.ActionBarContextView)>
<android.net.http.AndroidHttpClientConnection: org.apache.http.StatusLine parseResponseHeader(android.net.http.Headers)>
<com.android.internal.telephony.gsm.GsmSMSDispatcher: void dispose()>
<android.location.Location: void computeDistanceAndBearing(double,double,double,double,float[])>
<android.text.Annotation: java.lang.String getKey()>
<android.bluetooth.BluetoothDeviceProfileState: void access$8200(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<com.android.internal.widget.IRemoteViewsFactory$Stub: android.os.IBinder asBinder()>
<android.net.wifi.WifiWatchdogStateMachine: android.content.IntentFilter access$700(android.net.wifi.WifiWatchdogStateMachine)>
<android.net.sip.SipAudioCall: java.lang.String access$500(android.net.sip.SipAudioCall)>
<android.app.LoadedApk: java.lang.String getPackageName()>
<android.webkit.WebViewCore: void nativeMoveMouse(int,int,int)>
<android.os.storage.StorageVolume: int hashCode()>
<android.webkit.GeolocationPermissions: void postUIMessage(android.os.Message)>
<android.os.ResultReceiver$MyRunnable: void <init>(android.os.ResultReceiver,int,android.os.Bundle)>
<com.android.server.PowerManagerService: void setScreenBrightnessMode(int)>
<android.os.Looper: void prepareMainLooper()>
<android.view.Display: int getPixelFormat()>
<android.net.SSLCertificateSocketFactory: org.apache.http.conn.ssl.SSLSocketFactory getHttpSocketFactory(int,android.net.SSLSessionCache)>
<android.net.MailTo: void <init>()>
<android.graphics.Bitmap: void checkPixelAccess(int,int)>
<android.webkit.WebView: int access$3800(android.webkit.WebView)>
<android.util.JsonToken: android.util.JsonToken[] values()>
<android.view.inputmethod.CorrectionInfo$1: java.lang.Object[] newArray(int)>
<android.os.Handler: boolean sendMessageDelayed(android.os.Message,long)>
<com.android.server.LocationManagerService$ProximityAlert: void <init>(com.android.server.LocationManagerService,int,double,double,float,long,android.app.PendingIntent)>
<android.preference.PreferenceGroupAdapter: int getCount()>
<android.server.BluetoothService: void setA2dpService(android.server.BluetoothA2dpService)>
<android.preference.MultiSelectListPreference$SavedState: void <clinit>()>
<com.android.internal.telephony.BaseCommands: void registerForSIMLockedOrAbsent(android.os.Handler,int,java.lang.Object)>
<android.net.http.AndroidHttpClient: org.apache.http.conn.ClientConnectionManager getConnectionManager()>
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List access$202(com.android.internal.telephony.cdma.RuimSmsInterfaceManager,java.util.List)>
<android.app.Application: void registerComponentCallbacks(android.content.ComponentCallbacks)>
<com.android.internal.util.BitwiseOutputStream: void <init>(int)>
<android.text.method.TextKeyListener$NullKeyListener: boolean onKeyDown(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.net.wifi.WifiNative: java.lang.String p2pGetDeviceAddress()>
<android.content.res.CompatibilityInfo: void applyToConfiguration(android.content.res.Configuration)>
<GenerationGG: android.widget.SimpleCursorTreeAdapter get_androidwidgetSimpleCursorTreeAdapter()>
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: boolean retryAfterDisconnected(java.lang.String)>
<android.database.ContentObserver$NotificationRunnable: void <init>(android.database.ContentObserver,boolean)>
<android.widget.AbsListView: int findClosestMotionRow(int)>
<com.android.server.wm.InputMonitor: void setFocusedAppLw(com.android.server.wm.AppWindowToken)>
<android.server.BluetoothService: java.lang.Integer getAuthorizationAgentRequestData(java.lang.String)>
<android.net.NetworkPolicy: int hashCode()>
<android.webkit.WebIconDatabase: void nativeReleaseIconForPageUrl(java.lang.String)>
<com.android.server.BackupManagerService: boolean access$1700(com.android.server.BackupManagerService,android.content.pm.Signature[],android.content.pm.PackageInfo)>
<android.media.AudioService$AudioHandler$1: void <init>(android.media.AudioService$AudioHandler)>
<android.preference.PreferenceActivity$2: void onClick(android.view.View)>
<android.view.inputmethod.InputMethodInfo: java.lang.String getPackageName()>
<android.net.wifi.WifiWatchdogStateMachine$4: void <clinit>()>
<android.content.pm.ConfigurationInfo: void <init>(android.content.pm.ConfigurationInfo)>
<com.android.server.net.NetworkPolicyManagerService: java.lang.Object access$100(com.android.server.net.NetworkPolicyManagerService)>
<android.media.RingtoneManager: int inferStreamType()>
<android.net.EthernetDataTracker: boolean setRadio(boolean)>
<android.server.BluetoothAdapterStateMachine: void access$2900(android.server.BluetoothAdapterStateMachine)>
<GenerationGG: android.database.SQLException get_androiddatabaseSQLException()>
<android.bluetooth.BluetoothHealthAppConfiguration: void writeToParcel(android.os.Parcel,int)>
<android.widget.TextView: android.content.Context access$2700(android.widget.TextView)>
<com.android.internal.telephony.cat.DisplayTextParams: boolean setIcon(android.graphics.Bitmap)>
<android.widget.AbsListView$SavedState$1: void <init>()>
<com.android.internal.telephony.CommandException: com.android.internal.telephony.CommandException fromRilErrno(int)>
<android.graphics.Matrix: boolean preSkew(float,float)>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: void <init>(com.android.internal.os.BatteryStatsImpl$Uid)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isLongClickable()>
<android.webkit.HTML5VideoViewProxy: void access$1100(android.webkit.HTML5VideoViewProxy,android.graphics.Bitmap,int)>
<android.location.Location: java.lang.String toString()>
<android.webkit.SslCertLookupTable: void <init>()>
<android.content.IntentFilter: boolean hasAction(java.lang.String)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.View)>
<com.android.server.am.ActivityManagerService: boolean killPids(int[],java.lang.String,boolean)>
<android.text.style.SuperscriptSpan: int getSpanTypeId()>
<android.content.SyncManager: void ensureAlarmService()>
<android.content.res.ColorStateList: void writeToParcel(android.os.Parcel,int)>
<android.webkit.HTML5VideoViewProxy: void dispatchOnEnded()>
<com.android.server.ClipboardService: boolean hasPrimaryClip()>
<android.os.AsyncTask: java.lang.Object get()>
<android.hardware.SensorManager: boolean remapCoordinateSystem(float[],int,int,float[])>
<android.view.MotionEvent: void nativeSetFlags(int,int)>
<android.widget.ViewFlipper: void setAutoStart(boolean)>
<android.widget.TextView$SelectionModifierCursorController: boolean isSelectionStartDragged()>
<Wrapper_android_graphics_RegionIterator: void test_android_graphics_RegionIterator()>
<com.android.server.wm.WindowManagerService$5: void <init>(com.android.server.wm.WindowManagerService,android.os.IBinder)>
<android.app.DialogFragment: void onDestroyView()>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: void incStartsLocked()>
<android.database.sqlite.SQLiteProgram: void native_bind_null(int)>
<com.android.server.location.GpsLocationProvider: void handleUpdateLocation(android.location.Location)>
<android.content.Loader: android.content.Context getContext()>
<android.widget.AbsListView: int access$300(android.widget.AbsListView)>
<android.graphics.Canvas: void native_drawColor(int,int,int)>
<android.media.TimedText$Font: void <init>(android.media.TimedText)>
<com.android.internal.telephony.cat.DTTZResponseData: byte getTZOffSetByte(long)>
<android.net.LinkProperties: boolean isIdenticalHttpProxy(android.net.LinkProperties)>
<android.widget.TextView: int getExtendedPaddingBottom()>
<android.telephony.TelephonyManager: java.lang.String getNetworkTypeName(int)>
<android.renderscript.Allocation: void copyTo(android.graphics.Bitmap)>
<com.android.server.LocationManagerService: void removeProvider(com.android.server.location.LocationProviderInterface)>
<android.renderscript.Type$Builder: android.renderscript.Type create()>
<com.android.server.PowerManagerService: boolean isScreenLock(int)>
<android.app.Notification: android.app.Notification clone()>
<android.renderscript.Element: android.renderscript.Element I64(android.renderscript.RenderScript)>
<android.graphics.Path: void detectSimplePath(float,float,float,float,android.graphics.Path$Direction)>
<android.preference.MultiSelectListPreference: void setEntryValues(java.lang.CharSequence[])>
<android.graphics.drawable.BitmapDrawable: void computeBitmapSize()>
<Wrapper_android_text_style_SuperscriptSpan: void test_android_text_style_SuperscriptSpan()>
<android.inputmethodservice.InputMethodService: void onViewClicked(boolean)>
<android.preference.PreferenceGroupAdapter$PreferenceLayout: java.lang.String access$202(android.preference.PreferenceGroupAdapter$PreferenceLayout,java.lang.String)>
<GenerationGG: android.text.Spanned get_androidtextSpanned()>
<android.renderscript.Matrix2f: void transpose()>
<android.graphics.PixelXorXfermode: void <init>(int)>
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.internal.util.State: void <init>()>
<android.os.storage.StorageManager$ObbActionListener: void <init>(android.os.storage.StorageManager,android.os.storage.StorageManager$1)>
<android.widget.AbsListView: boolean isTextFilterEnabled()>
<android.app.SearchableInfo: int describeContents()>
<android.os.Debug: int setGlobalAllocationLimit(int)>
<com.android.internal.telephony.gsm.SimTlv: boolean nextObject()>
<com.android.internal.textservice.ISpellCheckerService$Stub: com.android.internal.textservice.ISpellCheckerService asInterface(android.os.IBinder)>
<android.content.SyncResult$1: android.content.SyncResult[] newArray(int)>
<android.inputmethodservice.InputMethodService: void setTheme(int)>
<android.view.AbsSavedState$2: java.lang.Object[] newArray(int)>
<android.preference.MultiSelectListPreference$SavedState: void <init>(android.os.Parcelable)>
<android.graphics.TableMaskFilter: int nativeNewClip(int,int)>
<android.text.BoringLayout: int getTopPadding()>
<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLConfig chooseEglConfig()>
<android.view.textservice.SpellCheckerSession: com.android.internal.textservice.ISpellCheckerSessionListener getSpellCheckerSessionListener()>
<android.net.wifi.WifiStateMachine: com.android.internal.util.State access$14200(android.net.wifi.WifiStateMachine)>
<android.test.InstrumentationTestSuite: void <init>(java.lang.Class,android.app.Instrumentation)>
<com.android.internal.os.BatteryStatsImpl$Uid: void initUserActivityLocked()>
<android.view.GLES20RecordingCanvas: void <clinit>()>
<android.widget.RelativeLayout$DependencyGraph$Node: void setNextPoolable(java.lang.Object)>
<android.filterfw.core.FrameManager: void <init>()>
<android.text.util.Linkify: java.lang.String makeUrl(java.lang.String,java.lang.String[],java.util.regex.Matcher,android.text.util.Linkify$TransformFilter)>
<android.app.ApplicationErrorReport$CrashInfo: void dump(android.util.Printer,java.lang.String)>
<android.net.wifi.WifiConfigStore: java.util.List getConfiguredNetworks()>
<Wrapper_android_test_suitebuilder_annotation_SmallTest: void test_android_test_suitebuilder_annotation_SmallTest()>
<android.text.util.Rfc822Token: java.lang.String quoteComment(java.lang.String)>
<GenerationGG: android.drm.DrmUtils get_androiddrmDrmUtils()>
<android.widget.AdapterView: void removeAllViews()>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: int getCurrentDataConnectionState()>
<GenerationGG: android.net.wifi.WifiManager get_androidnetwifiWifiManager()>
<android.server.BluetoothService: android.os.ParcelUuid[] convertStringToParcelUuid(java.lang.String)>
<android.test.mock.MockPackageManager: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>
<android.content.ContentProvider: android.content.ContentProvider coerceToLocalContentProvider(android.content.IContentProvider)>
<android.content.ContentService$ObserverNode: void addObserverLocked(android.net.Uri,int,android.database.IContentObserver,boolean,java.lang.Object,int,int)>
<com.android.server.am.ActivityManagerService$13: void <init>(com.android.server.am.ActivityManagerService)>
<android.bluetooth.BluetoothUuid: boolean containsAnyUuid(android.os.ParcelUuid[],android.os.ParcelUuid[])>
<android.nfc.tech.Ndef: int getMaxSize()>
<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: void <init>(com.android.server.usb.UsbSettingsManager)>
<android.app.SharedPreferencesImpl: java.util.Map access$400(android.app.SharedPreferencesImpl)>
<android.net.IConnectivityManager$Stub: android.os.IBinder asBinder()>
<GenerationGG: android.widget.FilterQueryProvider get_androidwidgetFilterQueryProvider()>
<android.bluetooth.BluetoothHealthAppConfiguration: int getRole()>
<android.app.WallpaperManager$Globals: void forgetLoadedWallpaper()>
<android.graphics.Bitmap: void checkWidthHeight(int,int)>
<com.android.server.ThrottleService: java.util.concurrent.atomic.AtomicLong access$500(com.android.server.ThrottleService)>
<android.webkit.WebHistoryItem: java.lang.String getTitle()>
<android.graphics.RadialGradient: void <init>(float,float,float,int[],float[],android.graphics.Shader$TileMode)>
<android.os.storage.StorageManager$ObbActionListener: int addListener(android.os.storage.OnObbStateChangeListener)>
<android.view.DragEvent: float getX()>
<android.text.style.LeadingMarginSpan$Standard: int describeContents()>
<android.widget.TextView: android.text.Editable getEditableText()>
<android.animation.AnimatorSet: void playTogether(android.animation.Animator[])>
<com.android.server.WifiService$LockList: com.android.server.WifiService$WifiLock removeLock(android.os.IBinder)>
<android.server.BluetoothBondState: java.lang.String getPendingOutgoingBonding()>
<android.os.ParcelFileDescriptor: void <init>(android.os.ParcelFileDescriptor)>
<android.graphics.Canvas: void native_drawTextOnPath(int,java.lang.String,int,float,float,int,int)>
<android.view.ViewGroup: int indexOfChild(android.view.View)>
<GenerationGG: android.text.style.BulletSpan get_androidtextstyleBulletSpan()>
<android.app.ProgressDialog: android.widget.ProgressBar access$000(android.app.ProgressDialog)>
<com.android.internal.telephony.DataConnection: void <init>(com.android.internal.telephony.PhoneBase,java.lang.String,int,com.android.internal.telephony.RetryManager)>
<com.android.internal.telephony.GsmAlphabet: int countGsmSeptetsUsingTables(java.lang.CharSequence,boolean,int,int)>
<com.android.internal.os.AtomicFile: void finishWrite(java.io.FileOutputStream)>
<android.widget.CalendarView: int getWeeksSinceMinDate(java.util.Calendar)>
<android.widget.CursorAdapter$ChangeObserver: void <init>(android.widget.CursorAdapter)>
<com.android.server.pm.BasePermission: java.lang.String toString()>
<android.content.SyncManager: boolean access$3100(android.content.SyncManager)>
<com.android.internal.util.BitwiseInputStream$AccessException: void <init>(java.lang.String)>
<com.android.internal.app.AlertController: android.widget.Button access$400(com.android.internal.app.AlertController)>
<GenerationGG: android.os.StrictMode$VmPolicy get_androidosStrictMode__VmPolicy()>
<com.android.internal.telephony.gsm.GSMPhone: void setSystemProperty(java.lang.String,java.lang.String)>
<android.view.GLES20RecordingCanvas: void drawLines(float[],android.graphics.Paint)>
<android.content.CursorLoader: java.lang.String[] getSelectionArgs()>
<android.app.Application: java.lang.Object[] collectActivityLifecycleCallbacks()>
<com.android.server.pm.PackageManagerService: boolean isProtectedBroadcast(java.lang.String)>
<android.gesture.GestureOverlayView: void addOnGesturePerformedListener(android.gesture.GestureOverlayView$OnGesturePerformedListener)>
<android.server.BluetoothService$RemoteService: int hashCode()>
<android.graphics.RectF$1: android.graphics.RectF createFromParcel(android.os.Parcel)>
<GenerationGG: android.content.ClipboardManager get_androidcontentClipboardManager()>
<android.graphics.drawable.GradientDrawable: boolean ensureValidRect()>
<com.android.internal.telephony.IccCardStatus$PinState: void <init>(java.lang.String,int)>
<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableWifiRegexs()>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: void readFromParcelLocked(android.os.Parcel)>
<android.test.mock.MockResources: android.content.res.XmlResourceParser getLayout(int)>
<android.content.res.TypedArray: void <init>(android.content.res.Resources,int[],int[],int)>
<android.net.InterfaceConfiguration: void <init>()>
<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray access$1600(com.android.server.accessibility.AccessibilityManagerService)>
<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.Intent)>
<android.net.wifi.p2p.WifiP2pDevice: boolean isServiceDiscoveryCapable()>
<GenerationGG: android.mtp.MtpObjectInfo get_androidmtpMtpObjectInfo()>
<android.os.Environment: java.io.File getExternalStorageAppCacheDirectory(java.lang.String)>
<com.android.internal.telephony.gsm.GsmDataConnection: boolean isDnsOk(java.lang.String[])>
<android.view.VelocityTracker: void computeCurrentVelocity(int,float)>
<android.view.InputEventConsistencyVerifier: void onUnhandledEvent(android.view.InputEvent,int)>
<android.text.util.Rfc822Tokenizer: int findTokenEnd(java.lang.CharSequence,int)>
<android.app.ContextImpl: android.app.ContextImpl getImpl(android.content.Context)>
<android.text.format.Time: int getActualMaximum(int)>
<android.widget.ExpandableListView: long getChildOrGroupId(android.widget.ExpandableListPosition)>
<android.widget.VideoView$1: void onVideoSizeChanged(android.media.MediaPlayer,int,int)>
<android.net.wifi.p2p.WifiP2pDevice: java.lang.String toString()>
<android.app.QueuedWork: void waitToFinish()>
<android.webkit.StreamLoader: void closeStreamAndSendEndData()>
<android.net.DhcpStateMachine: void access$1900(android.net.DhcpStateMachine,com.android.internal.util.IState)>
<android.os.Debug: void stopAllocCounting()>
<android.net.wifi.WifiConfigStore: void updateIpAndProxyFromWpsConfig(int,android.net.wifi.WpsInfo)>
<GenerationGG: android.app.backup.SharedPreferencesBackupHelper get_androidappbackupSharedPreferencesBackupHelper()>
<GenerationGG: android.graphics.Canvas$EdgeType get_androidgraphicsCanvas__EdgeType()>
<GenerationGG: android.text.method.TextKeyListener$Capitalize get_androidtextmethodTextKeyListener__Capitalize()>
<android.view.DragEvent: void <init>()>
<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkCapabilities getLinkCapabilities()>
<android.app.ActivityThread$ApplicationThread: void bindApplication(java.lang.String,android.content.pm.ApplicationInfo,java.util.List,android.content.ComponentName,java.lang.String,android.os.ParcelFileDescriptor,boolean,android.os.Bundle,android.app.IInstrumentationWatcher,int,boolean,boolean,android.content.res.Configuration,android.content.res.CompatibilityInfo,java.util.Map,android.os.Bundle)>
<android.animation.ValueAnimator: java.lang.String toString()>
<android.graphics.BitmapFactory: byte[] nativeScaleNinePatch(byte[],float,android.graphics.Rect)>
<android.net.wifi.p2p.WifiP2pDevice$1: android.net.wifi.p2p.WifiP2pDevice createFromParcel(android.os.Parcel)>
<android.app.backup.BackupHelperDispatcher: void doOneBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor,android.app.backup.BackupHelperDispatcher$Header,android.app.backup.BackupHelper)>
<android.nfc.tech.NfcF: byte[] getManufacturer()>
<android.view.View: boolean hasStaticLayer()>
<android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiWatchdogStateMachine$DnsCheckingState access$1500(android.net.wifi.WifiWatchdogStateMachine)>
<android.graphics.drawable.GradientDrawable$GradientState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>
<Wrapper_android_renderscript_Float3: void test_android_renderscript_Float3()>
<GenerationGG: android.renderscript.Short2 get_androidrenderscriptShort2()>
<android.media.audiofx.AudioEffect$NativeEventHandler: void <init>(android.media.audiofx.AudioEffect,android.media.audiofx.AudioEffect,android.os.Looper)>
<android.webkit.WebResourceResponse: java.lang.String access$100(android.webkit.WebResourceResponse)>
<Wrapper_android_content_pm_ConfigurationInfo: void test_android_content_pm_ConfigurationInfo()>
<android.webkit.WebView: void passToJavaScript(java.lang.String,android.view.KeyEvent)>
<android.content.res.XmlBlock$Parser: int next()>
<android.media.AudioTrack: int getPlaybackHeadPosition()>
<android.content.Intent: android.os.Bundle getExtras()>
<com.android.server.am.ServiceRecord: java.lang.String toString()>
<android.webkit.WebIconDatabase: void access$200()>
<com.android.server.VibratorService$Vibration: int access$700(com.android.server.VibratorService$Vibration)>
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: void sortResults(java.util.List)>
<android.app.Activity: android.view.View onCreatePanelView(int)>
<com.android.internal.telephony.cdma.CDMAPhone: boolean getCallForwardingIndicator()>
<android.net.wifi.WpsResult$Status: android.net.wifi.WpsResult$Status valueOf(java.lang.String)>
<com.android.server.PowerManagerService: boolean access$600(com.android.server.PowerManagerService)>
<android.content.pm.IPackageDeleteObserver$Stub: void <init>()>
<android.webkit.HTML5VideoFullScreen: boolean isFullScreenMode()>
<android.graphics.Paint: int getTextWidths(java.lang.String,float[])>
<android.app.ActivityManagerNative: void <init>()>
<com.android.server.BatteryService: void native_update()>
<android.widget.ProgressBar: void setIndeterminate(boolean)>
<android.app.backup.BackupHelperDispatcher: void performBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>
<android.media.AudioTrack: int native_set_loop(int,int,int)>
<android.app.backup.RestoreSet: void <init>(android.os.Parcel)>
<android.net.LinkProperties$1: android.net.LinkProperties[] newArray(int)>
<com.android.internal.os.BatteryStatsImpl: void noteScreenOffLocked()>
<android.widget.AbsListView: int pointToPosition(int,int)>
<android.view.textservice.SpellCheckerSubtype: int hashCodeInternal(java.lang.String,java.lang.String)>
<android.content.res.XmlBlock$Parser: int getDepth()>
<com.android.internal.telephony.cdma.EriManager$EriDisplayInformation: java.lang.String toString()>
<android.opengl.EGLLogWrapper: void <init>(javax.microedition.khronos.egl.EGL,int,java.io.Writer)>
<android.widget.ScrollBarDrawable: void onBoundsChange(android.graphics.Rect)>
<android.graphics.Canvas: boolean clipRect(android.graphics.RectF,android.graphics.Region$Op)>
<android.content.pm.PackageStats: void writeToParcel(android.os.Parcel,int)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(java.lang.CharSequence[],int,android.content.DialogInterface$OnClickListener)>
<android.accounts.IAccountAuthenticator$Stub$Proxy: void <init>(android.os.IBinder)>
<android.widget.ScrollView: boolean shouldDelayChildPressedState()>
<android.net.ThrottleManager: void <init>(android.net.IThrottleManager)>
<com.android.server.AppWidgetService$AppWidgetId: void <init>()>
<android.os.Debug: void resetThreadExternalAllocSize()>
<com.android.internal.util.StateMachine$SmHandler: void setupInitialStateStack()>
<com.android.server.pm.UserManager: void writeUser(android.content.pm.UserInfo)>
<android.bluetooth.BluetoothSocket: int bindListenNative()>
<android.util.Base64: byte[] decode(java.lang.String,int)>
<android.bluetooth.BluetoothDevice: java.lang.String toString()>
<android.os.StrictMode: void enableDeathOnNetwork()>
<android.telephony.gsm.GsmCellLocation: void setStateInvalid()>
<Wrapper_android_webkit_GeolocationPermissions: void test_android_webkit_GeolocationPermissions()>
<GenerationGG: android.view.accessibility.AccessibilityManager get_androidviewaccessibilityAccessibilityManager()>
<android.os.Environment: java.io.File getDirectory(java.lang.String,java.lang.String)>
<android.bluetooth.BluetoothDeviceProfileState: void access$7800(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.database.CursorJoiner$Result: void <init>(java.lang.String,int)>
<android.view.KeyEvent: int getRepeatCount()>
<android.webkit.HTML5VideoViewProxy$VideoPlayer: void end()>
<android.accounts.AccountAuthenticatorCache: void <clinit>()>
<com.android.internal.telephony.gsm.GsmMmiCode: boolean isPinCommand()>
<android.widget.PopupWindow: android.view.View getContentView()>
<com.android.server.DevicePolicyManagerService: boolean hasGrantedPolicy(android.content.ComponentName,int)>
<com.android.server.am.ActivityManagerService: android.content.IIntentSender getIntentSenderLocked(int,java.lang.String,int,android.os.IBinder,java.lang.String,int,android.content.Intent[],java.lang.String[],int)>
<com.android.server.am.ServiceRecord: void dumpStartList(java.io.PrintWriter,java.lang.String,java.util.List,long)>
<android.database.sqlite.SQLiteDatabase$1: void <init>(android.database.sqlite.SQLiteDatabase,int)>
<com.android.server.UiModeManagerService$6: void onProviderEnabled(java.lang.String)>
<android.opengl.GLSurfaceView$DefaultContextFactory: void <init>(android.opengl.GLSurfaceView)>
<android.widget.AdapterViewAnimator$ViewAndMetaData: void <init>(android.widget.AdapterViewAnimator,android.view.View,int,int,long)>
<Wrapper_android_renderscript_Float2: void test_android_renderscript_Float2()>
<android.os.BatteryStats: java.lang.String printWakeLock(java.lang.StringBuilder,android.os.BatteryStats$Timer,long,java.lang.String,int,java.lang.String)>
<android.webkit.WebSettings: void setJavaScriptCanOpenWindowsAutomatically(boolean)>
<android.app.Instrumentation: void waitForIdle(java.lang.Runnable)>
<android.nfc.NdefRecord: byte[] generate(short,short,byte[],byte[],byte[])>
<GenerationGG: android.os.HandlerThread get_androidosHandlerThread()>
<android.webkit.HTML5VideoViewProxy: void access$1300(android.webkit.HTML5VideoViewProxy,int)>
<android.animation.ObjectAnimator: void setProperty(android.util.Property)>
<android.os.Bundle$1: void <init>()>
<android.widget.TextView$SelectionModifierCursorController: void <init>(android.widget.TextView)>
<com.android.server.am.ActivityManagerService$4: void onEvent(int,java.lang.String)>
<android.preference.PreferenceManager: java.lang.String getSharedPreferencesName()>
<android.view.Surface: void setPosition(int,int)>
<android.test.MoreAsserts: void assertEquals(java.lang.String,int[],int[])>
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void log(java.lang.String)>
<android.graphics.Rect$1: android.graphics.Rect[] newArray(int)>
<com.android.internal.telephony.DataConnectionAc: boolean rspIsInactive(android.os.Message)>
<com.android.internal.telephony.DataCallState$SetupResult: void <clinit>()>
<android.speech.tts.ITextToSpeechCallback$Stub: void <init>()>
<android.speech.SpeechRecognizer$InternalListener: void onBufferReceived(byte[])>
<android.widget.AbsListView$FlingRunnable: void start(int)>
<android.widget.Spinner$DropDownAdapter: boolean areAllItemsEnabled()>
<android.server.BluetoothInputProfileHandler: java.util.List getConnectedInputDevices()>
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: boolean allowFilterResult(android.content.IntentFilter,java.util.List)>
<android.animation.AnimatorSet$1: void onAnimationCancel(android.animation.Animator)>
<android.widget.ExpandableListView: boolean isGroupExpanded(int)>
<android.widget.RemoteViews: void setRemoteAdapter(int,android.content.Intent)>
<android.media.AudioTrack: int getPlayState()>
<com.android.internal.telephony.cdma.CDMAPhone: void <clinit>()>
<android.webkit.WebViewCore: void nativeReplaceTextfieldText(int,int,java.lang.String,int,int,int)>
<android.net.rtp.AudioGroup: void clear()>
<android.app.LoaderManagerImpl$LoaderInfo: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.webkit.ZoomManager$PostScale: void <init>(android.webkit.ZoomManager,boolean,boolean,boolean)>
<com.android.internal.app.IBatteryStats$Stub: com.android.internal.app.IBatteryStats asInterface(android.os.IBinder)>
<android.graphics.drawable.AnimatedRotateDrawable: int getChangingConfigurations()>
<android.content.ContentProvider: boolean access$100(android.content.ContentProvider)>
<com.android.server.MountService: boolean isExternalStorageEmulated()>
<com.android.server.PackageManagerBackupAgent: void <init>(android.content.pm.PackageManager,java.util.List)>
<android.view.View$TransformationInfo: android.graphics.Camera access$702(android.view.View$TransformationInfo,android.graphics.Camera)>
<android.media.MediaPlayer: void setOnVideoSizeChangedListener(android.media.MediaPlayer$OnVideoSizeChangedListener)>
<android.widget.TextView: void onTextChanged(java.lang.CharSequence,int,int,int)>
<android.view.ViewRootImpl: void dispatchKey(android.view.KeyEvent)>
<android.view.ViewRootImpl: void setStopped(boolean)>
<android.widget.TextView: int getCurrentTextColor()>
<com.android.internal.widget.ActionBarContainer: void setStackedBackground(android.graphics.drawable.Drawable)>
<android.webkit.WebView: int access$2100(android.webkit.WebView)>
<android.app.ReceiverRestrictedContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>
<android.bluetooth.BluetoothDeviceProfileState$1: void <init>(android.bluetooth.BluetoothDeviceProfileState)>
<android.view.MotionEvent: float getHistoricalTouchMajor(int,int)>
<android.widget.Spinner$DropDownAdapter: void registerDataSetObserver(android.database.DataSetObserver)>
<android.view.ViewGroup: void offsetDescendantRectToMyCoords(android.view.View,android.graphics.Rect)>
<android.graphics.YuvImage: void adjustRectangle(android.graphics.Rect)>
<com.android.internal.os.BatteryStatsImpl$StopwatchTimer: void <init>(com.android.internal.os.BatteryStatsImpl$Uid,int,java.util.ArrayList,java.util.ArrayList,android.os.Parcel)>
<android.os.Messenger$1: void <init>()>
<android.view.MotionEvent: float nativeGetYPrecision(int)>
<android.server.BluetoothAdapterStateMachine: void access$1600(android.server.BluetoothAdapterStateMachine,com.android.internal.util.IState)>
<android.text.method.MetaKeyKeyListener: long resetLockedMeta(long)>
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: void <init>(java.util.ArrayList,boolean,boolean)>
<android.widget.SearchView: void setOnSearchClickListener(android.view.View$OnClickListener)>
<android.view.GLES20Canvas: int getMaximumBitmapWidth()>
<android.content.ContextWrapper: java.io.File getDatabasePath(java.lang.String)>
<android.widget.HorizontalScrollView: boolean isFillViewport()>
<android.widget.TextView$MenuHandler: void <init>(android.widget.TextView,android.widget.TextView$1)>
<com.android.internal.os.BatteryStatsImpl: long getHistoryBaseTime()>
<com.android.internal.util.AsyncChannel: void connect(android.content.Context,android.os.Handler,android.os.Messenger)>
<android.widget.GridLayout$Arc: java.lang.String toString()>
<android.app.ActivityThread$ResourcesKey: int hashCode()>
<GenerationGG: android.webkit.JsResult get_androidwebkitJsResult()>
<android.graphics.PorterDuffColorFilter: int native_CreatePorterDuffFilter(int,int)>
<android.graphics.Bitmap: void nativeGetPixels(int,int[],int,int,int,int,int,int)>
<android.graphics.Typeface: int nativeCreate(java.lang.String,int)>
<com.android.internal.telephony.sip.SipCommandInterface: void sendCdmaSms(byte[],android.os.Message)>
<android.view.TextureView: void onVisibilityChanged(android.view.View,int)>
<android.content.pm.ParceledListSlice: void <init>(android.os.Parcel,int,boolean,android.content.pm.ParceledListSlice$1)>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.ApnContext addApnContext(java.lang.String)>
<com.android.internal.view.menu.MenuItemImpl: void setMenuInfo(android.view.ContextMenu$ContextMenuInfo)>
<android.renderscript.FieldPacker: byte[] getData()>
<com.android.server.ThrottleService: android.app.NotificationManager access$1800(com.android.server.ThrottleService)>
<android.util.JsonWriter: void newline()>
<android.view.VelocityTracker: void nativeClear(int)>
<android.widget.MediaController$1: void onLayoutChange(android.view.View,int,int,int,int,int,int,int,int)>
<android.renderscript.RenderScript: boolean isAlive()>
<android.test.AndroidTestCase: void setContext(android.content.Context)>
<Wrapper_android_os_Process: void test_android_os_Process()>
<android.app.ActivityManager$RunningAppProcessInfo: void <init>(android.os.Parcel,android.app.ActivityManager$1)>
<com.android.i18n.phonenumbers.AsYouTypeFormatter: java.lang.String inputDigitWithOptionToRememberPosition(char,boolean)>
<android.view.Surface: void <init>(android.graphics.SurfaceTexture)>
<android.net.wifi.WifiStateMachine$WaitForWpsCompletionState: void <init>(android.net.wifi.WifiStateMachine)>
<android.webkit.GeolocationPermissions: android.webkit.GeolocationPermissions getInstance()>
<android.webkit.WebView: int scaleTrackballX(float,int)>
<android.inputmethodservice.KeyboardView: int access$900(android.inputmethodservice.KeyboardView)>
<android.os.Bundle$1: android.os.Bundle[] newArray(int)>
<com.android.server.WallpaperManagerService$1: void <init>(com.android.server.WallpaperManagerService,java.lang.String,int)>
<com.android.server.BackupManagerService$ActiveRestoreSession: void endRestoreSession()>
<android.view.MenuInflater$InflatedOnMenuItemClickListener: void <clinit>()>
<android.content.pm.IPackageDataObserver$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.internal.widget.LockPatternView: void resetPattern()>
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager$1: void <init>(com.android.internal.telephony.cdma.RuimSmsInterfaceManager)>
<android.preference.MultiSelectListPreference: java.util.Set access$200(android.preference.MultiSelectListPreference)>
<com.android.server.pm.PackageManagerService: void access$2600(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$MoveParams,int)>
<android.database.sqlite.SQLiteException: void <init>(java.lang.String)>
<android.view.GLES20Canvas: void nSetupColorFilter(int,int)>
<DumbClass: void DumbMethod42()>
<android.graphics.drawable.GradientDrawable$GradientState: float access$202(android.graphics.drawable.GradientDrawable$GradientState,float)>
<android.widget.TextView: int getLineAtCoordinate(float)>
<android.preference.ListPreference$1: void <init>(android.preference.ListPreference)>
<android.net.NetworkStatsHistory: long getLong(long[],int,long)>
<android.nfc.Tag: android.nfc.INfcTag getTagService()>
<android.app.ActivityManager$TaskThumbnails$1: void <init>()>
<android.webkit.WebView: int computeHorizontalScrollOffset()>
<com.android.server.am.ServiceRecord: com.android.server.am.AppBindRecord retrieveAppBindingLocked(android.content.Intent,com.android.server.am.ProcessRecord)>
<com.android.server.am.ActivityManagerService: void grantUriPermissionUncheckedFromIntentLocked(int,java.lang.String,android.content.Intent,com.android.server.am.UriPermissionOwner)>
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager$1: void handleMessage(android.os.Message)>
<android.test.mock.MockCursor: int getColumnIndexOrThrow(java.lang.String)>
<com.android.internal.telephony.AdnRecord: void <init>(java.lang.String,java.lang.String,java.lang.String[])>
<android.graphics.drawable.GradientDrawable$GradientState: float access$400(android.graphics.drawable.GradientDrawable$GradientState)>
<android.content.ISyncStatusObserver$Stub: android.os.IBinder asBinder()>
<com.android.internal.util.Predicates$OrPredicate: void <init>(java.lang.Iterable)>
<android.text.method.BaseMovementMethod: boolean bottom(android.widget.TextView,android.text.Spannable)>
<GenerationGG: android.graphics.Camera get_androidgraphicsCamera()>
<android.app.DialogFragment: int show(android.app.FragmentTransaction,java.lang.String)>
<com.android.internal.view.IInputConnectionWrapper: android.os.Message obtainMessageIO(int,int,java.lang.Object)>
<com.android.internal.view.IInputConnectionWrapper: void <init>(android.os.Looper,android.view.inputmethod.InputConnection)>
<android.webkit.WebViewCore$AutoFillData: void <init>()>
<android.renderscript.Element: android.renderscript.Element SAMPLER(android.renderscript.RenderScript)>
<android.location.GpsSatellite: void <init>(int)>
<android.media.MediaPlayer: android.media.MediaPlayer$OnBufferingUpdateListener access$400(android.media.MediaPlayer)>
<android.test.TestCaseUtil: java.lang.String getTestName(junit.framework.Test)>
<android.gesture.Gesture: long getID()>
<android.widget.AdapterViewAnimator: int getNumActiveViews()>
<android.os.DropBoxManager$Entry$1: java.lang.Object createFromParcel(android.os.Parcel)>
<Wrapper_android_util_StringBuilderPrinter: void test_android_util_StringBuilderPrinter()>
<android.view.ViewStub: int getLayoutResource()>
<android.app.admin.DeviceAdminInfo: void dump(android.util.Printer,java.lang.String)>
<android.gesture.GestureOverlayView: int getGestureColor()>
<android.app.IAlarmManager$Stub: void <init>()>
<android.view.GLES20Canvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)>
<android.text.util.Linkify$3: void <init>()>
<android.webkit.ZoomManager: boolean isFixedLengthAnimationInProgress()>
<android.net.wifi.WifiWatchdogStateMachine: long access$4100(android.net.wifi.WifiWatchdogStateMachine)>
<android.view.textservice.SpellCheckerSession: com.android.internal.textservice.ITextServicesSessionListener getTextServicesSessionListener()>
<com.android.server.connectivity.Vpn: java.lang.String jniGetName(int)>
<android.util.Property: java.lang.String getName()>
<android.content.pm.ApplicationInfo: int describeContents()>
<Wrapper_android_util_Base64InputStream: void test_android_util_Base64InputStream()>
<android.webkit.WebStorage$Origin: void <init>(java.lang.String,android.webkit.WebStorage$1)>
<android.app.Activity: void onPrepareDialog(int,android.app.Dialog,android.os.Bundle)>
<GenerationGG: android.util.Base64OutputStream get_androidutilBase64OutputStream()>
<android.telephony.SignalStrength: void copyFrom(android.telephony.SignalStrength)>
<android.opengl.GLES10: void glTexCoordPointerBounds(int,int,int,java.nio.Buffer,int)>
<android.net.wifi.WpsInfo: void <init>()>
<android.graphics.Paint: int getTextRunCursor(char[],int,int,int,int,int)>
<android.view.ViewRootImpl: boolean isNavigationKey(android.view.KeyEvent)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(android.util.Property,android.animation.TypeEvaluator,java.lang.Object[])>
<android.renderscript.Type: void calcElementCount()>
<android.widget.TextView: android.text.style.URLSpan[] getUrls()>
<android.net.wifi.SupplicantStateTracker$DormantState: void <init>(android.net.wifi.SupplicantStateTracker)>
<com.android.server.connectivity.Tethering$TetherMasterSM$StartTetheringErrorState: void <init>(com.android.server.connectivity.Tethering$TetherMasterSM)>
<android.drm.DrmSupportInfo: void addFileSuffix(java.lang.String)>
<android.graphics.drawable.GradientDrawable: android.graphics.drawable.Drawable mutate()>
<android.accounts.AccountManagerService$RemoveAccountSession: void <init>(android.accounts.AccountManagerService,android.accounts.IAccountManagerResponse,android.accounts.Account)>
<android.net.wifi.WifiStateMachine: void access$7500(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: android.os.IBinder asBinder()>
<android.view.accessibility.AccessibilityNodeInfo: int getChildCount()>
<android.content.res.StringBlock$Height: void chooseHeight(java.lang.CharSequence,int,int,int,int,android.graphics.Paint$FontMetricsInt)>
<android.webkit.WebView$PackageListener: void <init>(android.webkit.WebView$1)>
<GenerationGG: android.text.method.DigitsKeyListener get_androidtextmethodDigitsKeyListener()>
<android.app.Dialog: boolean onTouchEvent(android.view.MotionEvent)>
<com.android.internal.telephony.gsm.GsmMmiCode: boolean isUssdRequest()>
<android.content.IntentFilter$AuthorityEntry: boolean access$200(android.content.IntentFilter$AuthorityEntry)>
<android.widget.AutoCompleteTextView$PassThroughClickListener: void <init>(android.widget.AutoCompleteTextView)>
<android.view.animation.AlphaAnimation: void applyTransformation(float,android.view.animation.Transformation)>
<com.android.internal.os.BatteryStatsImpl: int getPhoneSignalStrengthCount(int,int)>
<android.animation.AnimatorSet$Builder: void <init>(android.animation.AnimatorSet,android.animation.Animator)>
<android.graphics.drawable.RotateDrawable: android.graphics.drawable.Drawable mutate()>
<android.bluetooth.BluetoothInputStream: int read()>
<android.app.Fragment: void onHiddenChanged(boolean)>
<com.android.internal.telephony.gsm.SIMRecords: void setSpnFromConfig(java.lang.String)>
<com.android.internal.telephony.IccFileHandler: void <init>(com.android.internal.telephony.PhoneBase)>
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String access$002(com.android.internal.telephony.ims.IsimUiccRecords,java.lang.String)>
<android.content.pm.PackageInfo$1: void <init>()>
<android.media.AudioRecord: int native_get_pos_update_period()>
<com.android.server.VibratorService: boolean hasVibrator()>
<android.widget.NumberPicker: java.lang.String[] getDisplayedValues()>
<android.view.animation.Animation: long computeDurationHint()>
<android.widget.TextView$BufferType: void <clinit>()>
<android.media.AudioService: boolean canReassignAudioFocus()>
<com.android.internal.telephony.PhoneProxy: java.lang.String getPhoneName()>
<com.android.server.wm.DimAnimator: boolean updateSurface(boolean,long,boolean)>
<android.content.pm.ConfigurationInfo$1: java.lang.Object[] newArray(int)>
<com.android.internal.telephony.ServiceStateTracker: void cancelPollState()>
<com.android.internal.telephony.cdma.SmsMessage: void <init>()>
<java.lang.Object: boolean requery()>
<com.android.server.sip.SipSessionListenerProxy$5: void <init>(com.android.server.sip.SipSessionListenerProxy,android.net.sip.ISipSession)>
<com.android.server.am.ActivityManagerService: android.content.res.Configuration getConfiguration()>
<android.view.GLES20RecordingCanvas: void drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)>
<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,byte[])>
<android.widget.ListPopupWindow: android.view.View getAnchorView()>
<android.content.res.AssetManager: int access$700(android.content.res.AssetManager,int,byte[],int,int)>
<android.view.KeyEvent: boolean isMetaPressed()>
<android.content.SyncStorageEngine: android.content.SyncStorageEngine$DayStats[] getDayStatistics()>
<android.widget.AutoCompleteTextView: int getListSelection()>
<android.view.textservice.SpellCheckerInfo: int getSubtypeCount()>
<android.view.accessibility.AccessibilityEvent: long getEventTime()>
<android.view.Surface: void setLayer(int)>
<android.text.style.ClickableSpan: void <init>()>
<com.android.i18n.phonenumbers.CountryCodeToRegionCodeMap: java.util.Map getCountryCodeToRegionCodeMap()>
<android.util.SparseIntArray: void put(int,int)>
<android.media.AsyncPlayer: java.lang.String access$000(android.media.AsyncPlayer)>
<android.view.View: float getPivotY()>
<android.graphics.Path: boolean native_isEmpty(int)>
<android.widget.TimePicker: java.lang.Integer getCurrentMinute()>
<android.media.AudioService: boolean access$6802(android.media.AudioService,boolean)>
<android.test.suitebuilder.TestGrouping$TestCasePredicate: void <init>()>
<com.android.i18n.phonenumbers.AsYouTypeFormatter: java.lang.String attemptToFormatAccruedDigits()>
<com.android.internal.telephony.Connection: java.lang.String getCnapName()>
<android.os.AsyncTask$InternalHandler: void <init>()>
<android.view.View: int getMeasuredWidthAndState()>
<android.app.LoaderManagerImpl$LoaderInfo: void stop()>
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: void dumpFilter(java.io.PrintWriter,java.lang.String,android.content.pm.PackageParser$ServiceIntentInfo)>
<android.view.KeyEvent: void recycle()>
<android.widget.SearchView: android.view.View access$300(android.widget.SearchView)>
<android.net.wifi.p2p.WifiP2pService: int access$200(android.net.wifi.p2p.WifiP2pService)>
<android.location.Location: boolean hasBearing()>
<android.graphics.Canvas: boolean native_clipRegion(int,int,int)>
<android.drm.DrmErrorEvent: void <init>(int,int,java.lang.String)>
<android.content.ClipData$Item: void <init>(android.content.Intent)>
<android.net.http.SslError: int getPrimaryError()>
<android.view.WindowManagerImpl: void trimMemory(int)>
<android.app.ActivityThread: android.content.Intent getIntentBeingBroadcast()>
<android.accounts.AccountManagerService$GetAccountsByTypeAndFeatureSession: void <init>(android.accounts.AccountManagerService,android.accounts.IAccountManagerResponse,java.lang.String,java.lang.String[])>
<android.filterfw.core.FieldPort: void clear()>
<android.view.animation.AlphaAnimation: boolean willChangeBounds()>
<android.content.res.ColorStateList: int getColorForState(int[],int)>
<java.lang.Object: java.lang.String getNamespace()>
<android.os.Handler: android.os.Message obtainMessage()>
<com.android.internal.os.BatteryStatsImpl: void notePhoneOffLocked()>
<GenerationGG: java.lang.Class get_javalangClass()>
<com.android.server.am.UriPermissionOwner: void removeUriPermissionLocked(android.net.Uri,int)>
<android.bluetooth.BluetoothSocket: void initSocketFromFdNative(int)>
<android.webkit.WebView$6: void <init>(android.webkit.WebView,java.io.File,android.graphics.Picture,java.io.File)>
<android.content.pm.ServiceInfo: void <init>(android.content.pm.ServiceInfo)>
<com.android.server.connectivity.Vpn$LegacyVpnRunner: com.android.internal.net.LegacyVpnInfo getInfo()>
<com.android.server.location.LocationProviderProxy: boolean supportsBearing()>
<android.os.storage.StorageManager$MountServiceBinderListener: void <init>(android.os.storage.StorageManager,android.os.storage.StorageManager$1)>
<android.app.ActivityThread$ApplicationThread: void scheduleDestroyBackupAgent(android.content.pm.ApplicationInfo,android.content.res.CompatibilityInfo)>
<com.android.internal.os.ProcessStats: void onLoadChanged(float,float,float)>
<android.widget.NumberPicker$ChangeCurrentByOneFromLongPressCommand: void <init>(android.widget.NumberPicker)>
<android.net.LocalSocketImpl: void shutdown(java.io.FileDescriptor,boolean)>
<android.widget.GridLayout$Interval: java.lang.String toString()>
<GenerationGG: android.renderscript.FieldPacker get_androidrenderscriptFieldPacker()>
<Wrapper_android_graphics_SweepGradient: void test_android_graphics_SweepGradient()>
<android.net.NetworkQuotaInfo: int describeContents()>
<android.webkit.ConsoleMessage: void <init>(java.lang.String,java.lang.String,int,android.webkit.ConsoleMessage$MessageLevel)>
<android.net.MobileDataStateTracker$MobileDataStateReceiver: void <init>(android.net.MobileDataStateTracker,android.net.MobileDataStateTracker$1)>
<android.net.wifi.WpsInfo$1: java.lang.Object[] newArray(int)>
<GenerationGG: android.graphics.Picture get_androidgraphicsPicture()>
<android.view.FocusFinder: int majorAxisDistanceToFarEdge(int,android.graphics.Rect,android.graphics.Rect)>
<android.widget.RemoteViews$ReflectionActionWithoutParams: void apply(android.view.View,android.view.ViewGroup)>
<android.util.PrefixPrinter: void <init>(android.util.Printer,java.lang.String)>
<android.os.Handler: android.os.IMessenger getIMessenger()>
<android.webkit.WebViewCore: void nativeMoveFocus(int,int)>
<android.view.ViewGroup: void requestTransitionStart(android.animation.LayoutTransition)>
<android.widget.DatePicker: void access$600(android.widget.DatePicker,int,int,int)>
<android.view.accessibility.IAccessibilityManagerClient$Stub: android.os.IBinder asBinder()>
<android.graphics.drawable.BitmapDrawable: void draw(android.graphics.Canvas)>
<android.bluetooth.BluetoothDeviceProfileState: void access$8300(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<com.android.server.wm.WindowManagerService$3: void <init>(com.android.server.wm.WindowManagerService)>
<android.webkit.WebViewCore: void nativePause()>
<GenerationGG: android.widget.MediaController$MediaPlayerControl get_androidwidgetMediaController__MediaPlayerControl()>
<android.media.MediaRecorder: void setAudioSamplingRate(int)>
<android.drm.DrmManagerClient: void _finalize(int)>
<android.text.Layout: int getLineAscent(int)>
<android.widget.AdapterView: android.widget.AdapterView$OnItemLongClickListener getOnItemLongClickListener()>
<android.graphics.Bitmap: void <clinit>()>
<android.widget.FrameLayout: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.webkit.SearchBoxImpl: void <init>(android.webkit.WebViewCore,android.webkit.CallbackProxy)>
<android.widget.GridLayout$Interval: int size()>
<android.widget.TableLayout: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)>
<android.net.wifi.WifiStateMachine: com.android.internal.util.State access$800(android.net.wifi.WifiStateMachine)>
<android.webkit.WebSettings: android.webkit.WebSettings$ZoomDensity getDefaultZoom()>
<com.android.internal.telephony.BaseCommands: int getLteOnCdmaModeStatic()>
<android.widget.ProgressBar: void onVisibilityChanged(android.view.View,int)>
<android.view.animation.Animation: boolean isInitialized()>
<android.webkit.WebViewCore$1: void updateQuota(long)>
<android.graphics.Paint: void native_setStrokeCap(int,int)>
<android.graphics.Canvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)>
<android.content.pm.InstrumentationInfo: int describeContents()>
<android.net.LinkCapabilities: void writeToParcel(android.os.Parcel,int)>
<android.widget.RelativeLayout$LayoutParams: int access$212(android.widget.RelativeLayout$LayoutParams,int)>
<GenerationGG: android.content.res.TypedArray get_androidcontentresTypedArray()>
<android.app.FragmentManagerState: void <clinit>()>
<com.android.server.ThrottleService$DataRecorder: void setPeriodStart(java.util.Calendar)>
<android.net.wifi.WifiConfiguration$EnterpriseField: void setValue(java.lang.String)>
<android.text.format.Time: void <init>(android.text.format.Time)>
<android.content.SyncManager$ActiveSyncContext: void toString(java.lang.StringBuilder)>
<android.app.ActivityThread$Profiler: void stopProfiling()>
<android.webkit.BrowserFrame: void nativeOrientationChanged(int)>
<android.net.wifi.WifiStateMachine: void access$1900(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<com.android.internal.telephony.cdma.CdmaCall: void detach(com.android.internal.telephony.cdma.CdmaConnection)>
<android.server.BluetoothEventLoop: void startEventLoopNative()>
<android.text.method.MetaKeyKeyListener: long press(long,int,long,long,long,long,long)>
<com.android.server.WifiService: int access$3100(com.android.server.WifiService)>
<android.app.ContextImpl: java.io.File getCacheDir()>
<android.content.BroadcastReceiver: boolean getDebugUnregister()>
<android.view.MotionEvent: float getHistoricalY(int)>
<android.nfc.tech.NdefFormatable: void <init>(android.nfc.Tag)>
<android.app.BackStackRecord: android.app.FragmentTransaction add(int,android.app.Fragment)>
<com.android.internal.telephony.gsm.SmsMessage: int getProtocolIdentifier()>
<android.renderscript.Byte3: void <init>()>
<android.util.StringBuilderPrinter: void println(java.lang.String)>
<com.android.internal.os.PkgUsageStats$1: com.android.internal.os.PkgUsageStats[] newArray(int)>
<android.media.AudioService$VolumeStreamState: void setVolumeIndexSettingName(java.lang.String)>
<android.net.http.Headers: java.lang.String getAcceptRanges()>
<android.net.MobileDataStateTracker: boolean isTeardownRequested()>
<java.lang.Object: int getViewTypeCount()>
<android.media.AudioService: int access$3000(android.media.AudioService,int,int,int)>
<android.net.wifi.WifiConfigStore: void writeIpAndProxyConfigurations()>
<android.opengl.GLSurfaceView: int getRenderMode()>
<com.android.internal.telephony.sip.SipCommandInterface: void hangupConnection(int,android.os.Message)>
<android.hardware.usb.UsbEndpoint: int getAddress()>
<com.android.server.am.ReceiverList: void dump(java.io.PrintWriter,java.lang.String)>
<android.widget.NumberPicker$ChangeCurrentByOneFromLongPressCommand: void setIncrement(boolean)>
<com.android.server.location.LocationProviderProxy$Connection: com.android.internal.location.DummyLocationProvider getCachedAttributes()>
<android.content.res.XmlBlock$Parser: boolean isAttributeDefault(int)>
<android.opengl.GLUtils: void texSubImage2D(int,int,int,int,android.graphics.Bitmap)>
<android.test.MoreAsserts: void assertNotEmpty(java.lang.Iterable)>
<android.database.MatrixCursor$RowBuilder: void <init>(android.database.MatrixCursor,int,int)>
<android.app.ContextImpl$21: void <init>()>
<android.filterfw.core.GLEnvironment: void tearDown()>
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: int getHandle()>
<android.app.backup.RestoreSet$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.server.net.NetworkAlertObserver: void interfaceRemoved(java.lang.String)>
<android.webkit.WebViewCore$EventHub: void sendMessage(android.os.Message)>
<com.android.internal.telephony.cat.DTTZResponseData: void <init>(java.util.Calendar)>
<android.preference.GenericInflater: void <clinit>()>
<android.os.Process: long getElapsedCpuTime()>
<android.net.wifi.WifiConfiguration: java.util.BitSet access$100(android.os.Parcel)>
<android.opengl.GLES11Ext: void _nativeClassInit()>
<android.widget.ExpandableListConnector: boolean hasStableIds()>
<android.database.DefaultDatabaseErrorHandler: void <init>()>
<android.view.OrientationEventListener: void enable()>
<android.inputmethodservice.InputMethodService: android.view.inputmethod.EditorInfo getCurrentInputEditorInfo()>
<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,short[])>
<android.speech.SpeechRecognizer$InternalListener: void onEndOfSpeech()>
<android.renderscript.Element: android.renderscript.Element U32_3(android.renderscript.RenderScript)>
<android.database.DefaultDatabaseErrorHandler: void deleteDatabaseFile(java.lang.String)>
<android.widget.SimpleExpandableListAdapter: long getGroupId(int)>
<android.net.http.RequestQueue: void queueRequest(android.net.http.Request,boolean)>
<android.widget.Switch: int getThumbScrollRange()>
<android.app.ITransientNotification$Stub$Proxy: void <init>(android.os.IBinder)>
<android.telephony.gsm.SmsMessage: java.lang.String getEmailFrom()>
<android.app.ActivityManager$RecentTaskInfo: int describeContents()>
<android.app.ActivityManager$RunningAppProcessInfo: void <init>(java.lang.String,int,java.lang.String[])>
<android.view.inputmethod.ExtractedTextRequest$1: void <init>()>
<android.bluetooth.BluetoothDeviceProfileState$2: void onServiceConnected(int,android.bluetooth.BluetoothProfile)>
<com.android.server.LightsService: void setLight_native(int,int,int,int,int,int,int)>
<android.telephony.ServiceState$1: java.lang.Object[] newArray(int)>
<android.server.BluetoothHealthProfileHandler: int convertState(int)>
<android.media.RingtoneManager: java.lang.String getSettingForType(int)>
<android.media.AudioService: int access$2202(android.media.AudioService,int)>
<android.graphics.Matrix$1: boolean postSkew(float,float,float,float)>
<android.widget.SlidingDrawer: boolean isOpened()>
<android.gesture.InstanceLearner: java.util.ArrayList classify(int,int,float[])>
<android.webkit.ZoomControlExternal$ExtendedZoomControls: boolean hasFocus()>
<android.text.TextUtils$SimpleStringSplitter: void setString(java.lang.String)>
<android.graphics.BitmapFactory: boolean nativeIsSeekable(java.io.FileDescriptor)>
<com.android.server.sip.SipService$AutoRegistrationProcess: void <init>(com.android.server.sip.SipService)>
<android.test.mock.MockPackageManager: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)>
<com.android.internal.telephony.RILRequest: void onError(int,java.lang.Object)>
<android.view.GLES20Canvas: boolean clipRect(android.graphics.RectF,android.graphics.Region$Op)>
<android.accounts.AccountManagerService$Session: void onRequestContinued()>
<android.content.pm.ManifestDigest: void <init>(byte[])>
<android.app.ContextImpl$ApplicationContentResolver: void <init>(android.content.Context,android.app.ActivityThread)>
<android.app.ApplicationThreadNative: android.os.IBinder asBinder()>
<android.util.LruCache: int size()>
<android.bluetooth.BluetoothHealth$BluetoothHealthCallbackWrapper: void <init>(android.bluetooth.BluetoothHealthCallback)>
<android.opengl.GLUtils: void <clinit>()>
<android.widget.TableLayout: boolean isColumnShrinkable(int)>
<android.content.ISyncStatusObserver$Stub: android.content.ISyncStatusObserver asInterface(android.os.IBinder)>
<android.os.storage.StorageManager$ObbListenerDelegate: int access$200(android.os.storage.StorageManager$ObbListenerDelegate)>
<android.content.Intent: void setSourceBounds(android.graphics.Rect)>
<android.view.GLES20Canvas: void nDisableVsync()>
<android.webkit.ZoomManager: float access$502(android.webkit.ZoomManager,float)>
<android.server.BluetoothService: java.lang.String access$502(java.lang.String)>
<com.android.internal.os.BatteryStatsImpl$Uid: void noteStartGps()>
<com.android.server.location.GpsLocationProvider: boolean native_init()>
<com.android.server.wm.ViewServer$ViewServerWorker: void focusChanged()>
<com.android.internal.util.JournaledFile: java.io.File chooseForWrite()>
<android.os.RegistrantList: void <init>()>
<android.widget.TextView: void setPrivateImeOptions(java.lang.String)>
<android.view.GLES20RecordingCanvas$1: void onReleased(android.view.GLES20RecordingCanvas)>
<android.net.DhcpStateMachine$StoppedState: void <init>(android.net.DhcpStateMachine)>
<android.net.wifi.WpsResult: void <init>(android.net.wifi.WpsResult$Status)>
<android.os.BatteryStats$HistoryPrinter: void <init>()>
<android.hardware.usb.UsbInterface$1: void <init>()>
<android.accessibilityservice.IAccessibilityServiceConnection$Stub: android.os.IBinder asBinder()>
<android.net.sip.SipSession$Listener: void onCallBusy(android.net.sip.SipSession)>
<android.webkit.WebHistoryItem: void <clinit>()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void <clinit>()>
<android.content.pm.PackageParser: java.lang.String access$000(java.lang.String,java.lang.CharSequence,java.lang.String[])>
<GenerationGG: android.content.SharedPreferences get_androidcontentSharedPreferences()>
<android.net.sip.SipProfile: void <init>()>
<android.util.LogWriter: void flush()>
<android.view.IWindowSession$Stub$Proxy: void <init>(android.os.IBinder)>
<android.content.SyncStatusInfo: void ensurePeriodicSyncTimeSize(int)>
<GenerationGG: android.opengl.Visibility get_androidopenglVisibility()>
<com.android.server.PowerManagerService: void dockStateChanged(int)>
<android.net.http.HttpsConnection: void <init>(android.content.Context,org.apache.http.HttpHost,org.apache.http.HttpHost,android.net.http.RequestFeeder)>
<android.widget.Gallery: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<android.view.View$10: void setValue(java.lang.Object,float)>
<com.android.internal.telephony.AdnRecord: void setEmails(java.lang.String[])>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>
<com.android.internal.os.BatteryStatsImpl: void noteStartWakeFromSourceLocked(android.os.WorkSource,int,java.lang.String,int)>
<com.android.internal.telephony.Connection: com.android.internal.telephony.Call$State getState()>
<android.util.Log: void <clinit>()>
<com.android.server.wm.WindowState: void <init>(com.android.server.wm.WindowManagerService,com.android.server.wm.Session,android.view.IWindow,com.android.server.wm.WindowToken,com.android.server.wm.WindowState,int,android.view.WindowManager$LayoutParams,int)>
<android.app.Fragment: void onActivityResult(int,int,android.content.Intent)>
<android.sax.Children: void <init>()>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.gsm.GsmCall getRingingCall()>
<android.view.View$UnsetPressedState: void <init>(android.view.View)>
<android.app.ActivityManager$MemoryInfo$1: void <init>()>
<android.text.PackedObjectVector: void setValue(int,int,java.lang.Object)>
<android.test.IsolatedContext: java.lang.Object getSystemService(java.lang.String)>
<android.view.accessibility.AccessibilityRecord: void setItemCount(int)>
<android.renderscript.AllocationAdapter: android.renderscript.AllocationAdapter create1D(android.renderscript.RenderScript,android.renderscript.Allocation)>
<android.widget.TextView$CharWrapper: void getChars(int,int,char[],int)>
<android.server.BluetoothService: void <clinit>()>
<android.widget.AbsListView$RecycleBin: android.widget.AbsListView$RecyclerListener access$3500(android.widget.AbsListView$RecycleBin)>
<android.app.SearchableInfo: int getIconId()>
<com.android.server.pm.PackageManagerService$MeasureParams: void handleServiceError()>
<android.widget.TextView: int getTotalPaddingTop()>
<android.webkit.HTML5VideoViewProxy$PosterDownloader: void cleanup()>
<android.webkit.BrowserFrame: void didFirstLayout()>
<android.bluetooth.BluetoothSocket: int writeNative(byte[],int,int)>
<android.widget.TextView: void makeBlink()>
<android.content.ContentResolver$ParcelFileDescriptorInner: void close()>
<android.renderscript.Script: void setVar(int,int)>
<android.telephony.PhoneNumberUtils: java.lang.String extractNetworkPortionAlt(java.lang.String)>
<com.android.internal.telephony.sip.SipPhoneBase: void notifyPreciseCallStateChanged()>
<android.widget.RemoteViews: void setFloat(int,java.lang.String,float)>
<android.content.IntentFilter: int getPriority()>
<android.filterfw.core.SerializedFrame: boolean hasNativeAllocation()>
<android.content.pm.VerifierDeviceIdentity: java.lang.String toString()>
<android.util.LruCache: int safeSizeOf(java.lang.Object,java.lang.Object)>
<android.content.ContentProviderResult: int describeContents()>
<android.graphics.ColorMatrix: void setRotate(int,float)>
<android.net.wifi.WifiInfo: boolean isExplicitConnect()>
<com.android.internal.os.HandlerCaller: void recycleArgs(com.android.internal.os.HandlerCaller$SomeArgs)>
<android.os.StrictMode$ThreadPolicy: void <init>(int,android.os.StrictMode$1)>
<android.net.INetworkPolicyManager$Stub: void <init>()>
<com.android.internal.util.AsyncChannel: void access$000(com.android.internal.util.AsyncChannel,int)>
<android.view.animation.AnimationSet: long computeDurationHint()>
<android.view.accessibility.AccessibilityEvent: int describeContents()>
<com.android.internal.telephony.cat.ResultException$1: void <clinit>()>
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setMimeType(java.lang.String)>
<android.webkit.WebIconDatabase$EventHandler: void <init>()>
<android.media.audiofx.Visualizer: void <init>(int)>
<android.app.NativeActivity$InputMethodCallback: void sessionCreated(com.android.internal.view.IInputMethodSession)>
<android.webkit.CallbackProxy: void setDownloadListener(android.webkit.DownloadListener)>
<android.graphics.RectF: void offsetTo(float,float)>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: byte[] getUserData()>
<android.text.PackedIntVector: int getValue(int,int)>
<com.android.server.wm.DimSurface: void <init>(android.view.SurfaceSession)>
<android.gesture.Learner: void removeInstances(java.lang.String)>
<com.android.internal.telephony.RestrictedState: boolean isCsRestricted()>
<android.media.ExifInterface: byte[] getThumbnail()>
<android.view.View: void addOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>
<android.telephony.PhoneNumberUtils: boolean is12Key(char)>
<android.view.accessibility.IAccessibilityInteractionConnection$Stub: void <init>()>
<android.net.DnsPinger: void <clinit>()>
<com.android.server.am.ActivityRecord: boolean isInHistory()>
<android.widget.TextView$CharWrapper: java.lang.String toString()>
<com.android.internal.os.ProcessStats: java.lang.String readFile(java.lang.String,char)>
<android.app.FragmentBreadCrumbs: android.view.View$OnClickListener access$000(android.app.FragmentBreadCrumbs)>
<com.android.server.LocationManagerService$ProximityListener: void onProviderDisabled(java.lang.String)>
<android.widget.TextView$SelectionEndHandleView: int getHotspotX(android.graphics.drawable.Drawable,boolean)>
<android.media.FaceDetector: int fft_initialize(int,int,int)>
<com.android.server.wm.WindowManagerService: void setOnHardKeyboardStatusChangeListener(com.android.server.wm.WindowManagerService$OnHardKeyboardStatusChangeListener)>
<android.net.MobileDataStateTracker: android.os.Handler access$900(android.net.MobileDataStateTracker)>
<android.widget.RemoteViews$SetOnClickFillInIntent$1: void <init>(android.widget.RemoteViews$SetOnClickFillInIntent)>
<android.content.ContentValues: void putAll(android.content.ContentValues)>
<android.webkit.WebViewCore$EventHub: void access$8000(android.webkit.WebViewCore$EventHub)>
<android.view.InputEventConsistencyVerifier: void ensurePointerCountIsOneForThisAction(android.view.MotionEvent)>
<android.util.Log: boolean isLoggable(java.lang.String,int)>
<android.content.pm.PackageParser: boolean isPackageFilename(java.lang.String)>
<android.gesture.GestureOverlayView: void setGestureStrokeAngleThreshold(float)>
<android.text.style.SuggestionRangeSpan: void setBackgroundColor(int)>
<android.net.NetworkInfo$DetailedState: void <init>(java.lang.String,int)>
<com.android.internal.os.BatteryStatsImpl$Timer: void writeTimerToParcel(android.os.Parcel,com.android.internal.os.BatteryStatsImpl$Timer,long)>
<android.graphics.Canvas: void drawText(java.lang.String,float,float,android.graphics.Paint)>
<com.android.server.PowerManagerService$5: void <init>(com.android.server.PowerManagerService)>
<android.net.wifi.WifiConfigStore: int configKey(android.net.wifi.WifiConfiguration)>
<com.android.internal.widget.ActionBarView$SavedState: void <init>(android.os.Parcelable)>
<android.net.INetworkPolicyListener$Stub: void <init>()>
<android.location.Location: void setAltitude(double)>
<android.os.StrictMode: boolean vmClosableObjectLeaksEnabled()>
<com.android.internal.view.menu.MenuBuilder: void setCallback(com.android.internal.view.menu.MenuBuilder$Callback)>
<android.webkit.CookieManager: void deleteACookie(android.webkit.CookieManager$Cookie)>
<com.android.internal.util.Predicates$NotPredicate: void <init>(com.android.internal.util.Predicate)>
<android.location.ILocationListener$Stub$Proxy: android.os.IBinder asBinder()>
<android.os.ServiceManagerNative: android.os.IServiceManager asInterface(android.os.IBinder)>
<android.speech.SpeechRecognizer: void cancel()>
<android.content.pm.InstrumentationInfo: void <init>()>
<android.preference.Preference: java.lang.Object onGetDefaultValue(android.content.res.TypedArray,int)>
<android.app.backup.RestoreSession: void <init>(android.content.Context,android.app.backup.IRestoreSession)>
<android.net.wifi.WifiInfo: int getNetworkId()>
<android.os.Binder: void linkToDeath(android.os.IBinder$DeathRecipient,int)>
<android.graphics.RadialGradient: int nativePostCreate1(int,float,float,float,int[],float[],int)>
<android.net.LinkProperties: int hashCode()>
<GenerationGG: android.content.pm.PackageManager get_androidcontentpmPackageManager()>
<com.android.internal.telephony.IccCardStatus$CardState: void <init>(java.lang.String,int)>
<android.webkit.WebSyncManager: void stopSync()>
<com.android.internal.telephony.IccCard: com.android.internal.telephony.IccCard$State getConsolidatedState(com.android.internal.telephony.IccCard$State,com.android.internal.telephony.IccCard$State,com.android.internal.telephony.IccCard$State)>
<android.net.http.AndroidHttpClientConnection: java.lang.String toString()>
<android.widget.ExpandableListView: void setChildDivider(android.graphics.drawable.Drawable)>
<android.widget.PopupMenu: void setOnDismissListener(android.widget.PopupMenu$OnDismissListener)>
<android.media.AudioService: android.bluetooth.BluetoothDevice access$2402(android.media.AudioService,android.bluetooth.BluetoothDevice)>
<Wrapper_android_graphics_drawable_shapes_OvalShape: void test_android_graphics_drawable_shapes_OvalShape()>
<java.lang.Object: float getInterpolation(float)>
<android.media.AudioService: int rescaleIndex(int,int,int)>
<com.android.internal.telephony.Call: void setGeneric(boolean)>
<android.renderscript.RenderScript: int rsnAllocationGetType(int,int)>
<GenerationGG: android.graphics.YuvImage get_androidgraphicsYuvImage()>
<com.android.internal.telephony.gsm.GSMPhone: android.telephony.CellLocation getCellLocation()>
<GenerationGG: java.lang.Iterable get_javalangIterable()>
<java.lang.Object: android.view.SubMenu addSubMenu(int)>
<DumbClass: void DumbMethod66()>
<android.net.wifi.WifiStateMachine$DisconnectingState: void <init>(android.net.wifi.WifiStateMachine)>
<android.net.LocalSocketImpl: void <init>()>
<android.net.LocalSocketImpl: void bindLocal(java.io.FileDescriptor,java.lang.String,int)>
<android.text.StaticLayout: void prepare()>
<android.server.BluetoothAdapterStateMachine: void access$800(android.server.BluetoothAdapterStateMachine,com.android.internal.util.IState)>
<android.view.Window: android.view.Window access$200(android.view.Window)>
<android.hardware.SensorManager$ListenerDelegate: void <init>(android.hardware.SensorManager,android.hardware.SensorEventListener,android.hardware.Sensor,android.os.Handler)>
<android.text.AndroidCharacter: void <init>()>
<android.net.wifi.WifiNative: boolean startFilteringMulticastV6Packets()>
<com.android.internal.telephony.SmsRawData$1: java.lang.Object[] newArray(int)>
<android.app.IActivityManager$WaitResult: void <init>(android.os.Parcel)>
<android.util.LongSparseArray: void setValueAt(int,java.lang.Object)>
<android.mtp.MtpDevice: long getStorageId(int)>
<android.net.LocalSocket: android.net.Credentials getPeerCredentials()>
<android.test.mock.MockResources: java.lang.String getString(int)>
<android.webkit.WebViewCore: java.util.ArrayList nativeGetTouchHighlightRects(int,int,int)>
<android.webkit.BrowserFrame: void certificate(android.net.http.SslCertificate)>
<com.android.server.PowerManagerService: int access$4902(com.android.server.PowerManagerService,int)>
<android.app.LauncherActivity$1: void onClick(android.view.View)>
<GenerationGG: android.content.pm.PackageItemInfo get_androidcontentpmPackageItemInfo()>
<android.graphics.Canvas: void drawPosText(java.lang.String,float[],android.graphics.Paint)>
<android.widget.ZoomButtonsController$5: void <init>(android.widget.ZoomButtonsController)>
<android.animation.ValueAnimator: void <clinit>()>
<android.widget.OverScroller: void fling(int,int,int,int,int,int,int,int,int,int)>
<android.app.Activity: void dispatchActivityResult(java.lang.String,int,int,android.content.Intent)>
<android.location.Criteria: boolean access$502(android.location.Criteria,boolean)>
<com.android.internal.statusbar.StatusBarIconList: void <clinit>()>
<android.graphics.Paint: int native_getStrokeCap(int)>
<android.widget.OverScroller: int getCurrY()>
<android.view.InputDevice$1: android.view.InputDevice[] newArray(int)>
<android.net.wifi.IWifiManager$Stub: android.net.wifi.IWifiManager asInterface(android.os.IBinder)>
<android.widget.OverScroller$SplineOverScroller: void startScroll(int,int,int)>
<android.app.Dialog: void cancel()>
<android.media.AudioService$VolumeStreamState$VolumeDeathHandler: int access$1800(android.media.AudioService$VolumeStreamState$VolumeDeathHandler)>
<android.widget.Chronometer: java.lang.String getFormat()>
<android.app.Instrumentation: java.lang.Object access$200(android.app.Instrumentation)>
<android.webkit.CertTool: void <clinit>()>
<android.inputmethodservice.KeyboardView: android.inputmethodservice.KeyboardView$OnKeyboardActionListener access$1300(android.inputmethodservice.KeyboardView)>
<android.view.ViewConfiguration: void <clinit>()>
<android.util.LogWriter: void flushBuilder()>
<com.android.server.PreferredComponent: java.lang.String getParseError()>
<android.content.ContentProviderNative: android.os.IBinder asBinder()>
<android.app.WallpaperManager$FastBitmapDrawable: int getMinimumWidth()>
<android.media.audiofx.BassBoost: boolean getStrengthSupported()>
<android.media.AudioService: boolean isStreamAffectedByMute(int)>
<android.app.backup.RestoreSet: void <init>(java.lang.String,java.lang.String,long)>
<android.test.RenamingDelegatingContext: java.lang.String getDatabasePrefix()>
<android.net.NetworkStatsHistory: long getBucketDuration()>
<android.os.storage.IObbActionListener$Stub$Proxy: android.os.IBinder asBinder()>
<android.view.MotionEvent: int nativeSetSource(int,int)>
<android.text.Layout$Alignment: void <init>(java.lang.String,int)>
<android.widget.GridLayout$Axis: void logError(java.lang.String,android.widget.GridLayout$Arc[],boolean[])>
<android.webkit.WebView$3: void onClick(android.content.DialogInterface,int)>
<com.android.internal.telephony.cdma.SmsMessage: boolean isReplace()>
<com.android.internal.telephony.DefaultPhoneNotifier: int convertDataState(com.android.internal.telephony.Phone$DataState)>
<android.renderscript.RenderScript: void rsnAllocationData2D(int,int,int,int,int,int,android.graphics.Bitmap)>
<com.android.server.DeviceStorageMonitorService: boolean access$202(com.android.server.DeviceStorageMonitorService,boolean)>
<android.text.style.UnderlineSpan: void updateDrawState(android.text.TextPaint)>
<com.android.internal.telephony.IccCardStatus: int getCdmaSubscriptionAppIndex()>
<com.android.server.VibratorService$Vibration: boolean hasLongerTimeout(long)>
<android.webkit.WebSettings$EventHandler: void setRenderPriority()>
<android.app.backup.FileBackupHelperBase: int writeFile_native(int,java.lang.String,int)>
<com.android.server.am.ActivityManagerService$8$1: void <init>(com.android.server.am.ActivityManagerService$8)>
<android.renderscript.AllocationAdapter: void setY(int)>
<android.gesture.GestureStore: void readFormatV1(java.io.DataInputStream)>
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String getIsimImpi()>
<android.provider.Settings$NameValueCache: void <clinit>()>
<com.android.server.MountService: boolean isUidOwnerOfPackageOrSystem(java.lang.String,int)>
<com.android.internal.telephony.RILRequest: void release()>
<Wrapper_android_view_animation_Transformation: void test_android_view_animation_Transformation()>
<Wrapper_android_text_ParcelableSpan: void test_android_text_ParcelableSpan()>
<android.util.MonthDisplayHelper: int getWeekStartDay()>
<android.text.util.Rfc822Tokenizer: java.lang.CharSequence terminateToken(java.lang.CharSequence)>
<com.android.server.sip.SipSessionListenerProxy: void onRegistrationTimeout(android.net.sip.ISipSession)>
<GenerationGG: android.nfc.NfcAdapter$CreateNdefMessageCallback get_androidnfcNfcAdapter__CreateNdefMessageCallback()>
<com.android.internal.telephony.cdma.CDMAPhone$2: void <clinit>()>
<com.android.internal.telephony.PhoneBase: void notifyNewRingingConnectionP(com.android.internal.telephony.Connection)>
<android.mtp.MtpObjectInfo: int getCompressedSize()>
<java.lang.Object: boolean moveToPrevious()>
<android.os.Parcel: void freeBuffer()>
<android.gesture.GestureOverlayView: boolean isEventsInterceptionEnabled()>
<com.android.server.TextServicesManagerService: android.view.textservice.SpellCheckerInfo findAvailSpellCheckerLocked(java.lang.String,java.lang.String)>
<android.content.ContentValues: void clear()>
<android.gesture.Gesture: void serialize(java.io.DataOutputStream)>
<DumbClass: void DumbMethod44()>
<android.content.res.ColorStateList: int getDefaultColor()>
<android.inputmethodservice.InputMethodService: boolean onEvaluateFullscreenMode()>
<com.android.internal.telephony.WapPushOverSms$WapPushConnection: void onServiceDisconnected(android.content.ComponentName)>
<com.android.internal.util.StateMachine$ProcessedMessages: void add(android.os.Message,com.android.internal.util.State,com.android.internal.util.State)>
<android.view.SurfaceView$MyWindow: void executeCommand(java.lang.String,java.lang.String,android.os.ParcelFileDescriptor)>
<GenerationGG: java.nio.Buffer get_javanioBuffer()>
<android.preference.PreferenceManager: int getDefaultSharedPreferencesMode()>
<android.text.method.AllCapsTransformationMethod: void <init>(android.content.Context)>
<com.android.internal.widget.LockPatternView: float getCenterXForColumn(int)>
<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo access$4200(android.net.wifi.WifiStateMachine)>
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: void <init>(com.android.internal.telephony.cdma.CDMAPhone)>
<android.app.Instrumentation: void startAllocCounting()>
<android.view.OrientationEventListener: void disable()>
<com.android.internal.telephony.DataConnection: com.android.internal.telephony.DataConnection$DcInactiveState access$200(com.android.internal.telephony.DataConnection)>
<android.renderscript.FieldPacker: void addU64(android.renderscript.Long3)>
<GenerationGG: android.opengl.GLException get_androidopenglGLException()>
<android.inputmethodservice.KeyboardView: boolean access$800(android.inputmethodservice.KeyboardView)>
<android.renderscript.BaseObj: void setName(java.lang.String)>
<android.graphics.Paint$Join: void <init>(java.lang.String,int,int)>
<com.android.internal.widget.LockPatternUtils: java.util.concurrent.atomic.AtomicBoolean access$300()>
<Wrapper_android_view_LayoutInflater: void test_android_view_LayoutInflater()>
<android.widget.NumberPicker: void setOnLongPressUpdateInterval(long)>
<android.view.inputmethod.ComposingText: void <init>()>
<android.media.audiofx.Virtualizer: android.media.audiofx.Virtualizer$OnParameterChangeListener access$100(android.media.audiofx.Virtualizer)>
<android.media.AudioService: android.bluetooth.BluetoothDevice access$2400(android.media.AudioService)>
<android.preference.PreferenceManager: int getNextRequestCode()>
<android.test.IsolatedContext: int checkUriPermission(android.net.Uri,int,int,int)>
<android.webkit.WebView: int access$3600(android.webkit.WebView)>
<android.view.GLES20Layer: int getLayer()>
<android.net.Uri$StringUri: void <init>(java.lang.String,android.net.Uri$1)>
<android.app.SearchableInfo: java.lang.String getSuggestAuthority()>
<android.view.ViewRootImpl$AccessibilityInteractionConnectionManager: void <init>(android.view.ViewRootImpl)>
<android.view.View: void clearAnimation()>
<android.net.LocalSocketAddress: java.lang.String getName()>
<com.android.internal.appwidget.IAppWidgetHost$Stub$Proxy: void <init>(android.os.IBinder)>
<android.widget.TextView$ActionPopupWindow: int getVerticalLocalPosition(int)>
<android.view.View: void setScaleX(float)>
<com.android.server.am.UsageStatsService: void readHistoryStatsFLOCK(com.android.internal.os.AtomicFile)>
<GenerationGG: android.widget.AbsListView get_androidwidgetAbsListView()>
<com.android.server.am.ActivityManagerService: void addBroadcastToHistoryLocked(com.android.server.am.BroadcastRecord)>
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLength(android.content.ComponentName)>
<android.widget.RelativeLayout$DependencyGraph: void <init>()>
<com.android.internal.telephony.WspTypeDecoder: boolean seekXWapApplicationId(int,int)>
<android.widget.HorizontalScrollView: void requestDisallowInterceptTouchEvent(boolean)>
<android.webkit.AccessibilityInjector: boolean traverseGivenAxis(int,int,boolean,java.lang.String)>
<android.view.GLES20RecordingCanvas$1: void onAcquired(android.view.GLES20RecordingCanvas)>
<android.graphics.Canvas: void access$000(int)>
<android.widget.AbsListView$SavedState: void <clinit>()>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy build()>
<android.test.mock.MockResources: java.lang.String[] getStringArray(int)>
<android.view.MotionEvent: float getTouchMajor(int)>
<com.android.server.am.ActivityManagerService: void registerActivityWatcher(android.app.IActivityWatcher)>
<com.android.internal.telephony.CommandException: void <init>(com.android.internal.telephony.CommandException$Error)>
<com.android.server.WifiService: com.android.internal.util.AsyncChannel access$702(com.android.server.WifiService,com.android.internal.util.AsyncChannel)>
<android.app.IThumbnailRetriever$Stub$Proxy: void <init>(android.os.IBinder)>
<android.widget.FrameLayout: int getPaddingBottomWithForeground()>
<com.android.internal.telephony.RetryManager$RetryRec: void <init>(int,int)>
<android.os.ParcelUuid: boolean equals(java.lang.Object)>
<android.renderscript.RSTextureView: boolean onSurfaceTextureDestroyed(android.graphics.SurfaceTexture)>
<android.graphics.Region: boolean set(android.graphics.Rect)>
<android.server.BluetoothDeviceProperties: void <init>(android.server.BluetoothService)>
<com.android.server.am.UsageStatsService: void <init>(java.lang.String)>
<android.bluetooth.BluetoothOutputStream: void write(byte[],int,int)>
<android.net.NetworkTemplate$1: java.lang.Object[] newArray(int)>
<android.hardware.SensorManager$LegacyListener: boolean unregisterSensor(int)>
<android.util.Pair: void <init>(java.lang.Object,java.lang.Object)>
<android.view.ViewRootImpl: int joystickAxisValueToDirection(float)>
<android.media.AudioTrack: float getMaxVolume()>
<android.widget.AbsListView: void layoutChildren()>
<android.text.MeasuredText: void <clinit>()>
<android.app.NativeActivity: void onWindowFocusChanged(boolean)>
<android.webkit.AccessibilityInjector: void <clinit>()>
<android.webkit.LoadListener: void handleCertificate(android.net.http.SslCertificate)>
<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int access$1500(com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy)>
<android.net.Proxy: void setHttpProxySystemProperty(java.lang.String,java.lang.String,java.lang.String)>
<android.graphics.Picture: int getHeight()>
<android.text.DynamicLayout: boolean getLineContainsTab(int)>
<android.text.style.CharacterStyle$Passthrough: android.text.style.CharacterStyle getUnderlying()>
<android.inputmethodservice.InputMethodService: int getCandidatesHiddenVisibility()>
<android.webkit.WebTextView$1: void <init>(android.webkit.WebTextView)>
<android.telephony.SmsMessage: boolean isMwiDontStore()>
<GenerationGG: android.content.ClipboardManager$OnPrimaryClipChangedListener get_androidcontentClipboardManager__OnPrimaryClipChangedListener()>
<android.webkit.WebSettings: void access$100(android.webkit.WebSettings,int)>
<android.widget.RemoteViews$SetDrawableParameters: void <init>(android.widget.RemoteViews,android.os.Parcel)>
<android.graphics.drawable.GradientDrawable$1: void <clinit>()>
<android.graphics.Paint: float measureText(java.lang.String,int,int)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: android.net.wifi.p2p.WifiP2pService$P2pStateMachine$WaitForWifiDisableState access$2100(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<android.widget.AutoCompleteTextView$MyWatcher: void beforeTextChanged(java.lang.CharSequence,int,int,int)>
<android.content.res.Resources: java.lang.String getResourceEntryName(int)>
<android.server.BluetoothHealthProfileHandler: int access$000(android.server.BluetoothHealthProfileHandler)>
<com.android.internal.telephony.SmsMessageBase: long getTimestampMillis()>
<android.renderscript.FieldPacker: void reset(int)>
<android.nfc.Tag: java.lang.String toString()>
<android.net.wifi.WifiStateMachine: long access$9200(android.net.wifi.WifiStateMachine)>
<Wrapper_android_os_Build: void test_android_os_Build()>
<android.view.View$AccessibilityDelegate: boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent)>
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimImpuLoaded: void <init>(com.android.internal.telephony.ims.IsimUiccRecords,com.android.internal.telephony.ims.IsimUiccRecords$1)>
<android.graphics.drawable.DrawableContainer: int getChangingConfigurations()>
<android.widget.ListView$FocusSelector: void <init>(android.widget.ListView,android.widget.ListView$1)>
<android.content.pm.VerifierInfo$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean exactlySameAs(com.android.i18n.phonenumbers.Phonenumber$PhoneNumber)>
<android.mtp.MtpObjectInfo: int getSequenceNumber()>
<GenerationGG: android.content.ClipData$Item get_androidcontentClipData__Item()>
<android.preference.PreferenceInflater: void init(android.preference.PreferenceManager)>
<android.animation.Keyframe$ObjectKeyframe: void setValue(java.lang.Object)>
<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getDefault(int,android.net.SSLSessionCache)>
<android.webkit.HTML5VideoView: boolean surfaceTextureDeleted()>
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void saveNitzTimeZone(java.lang.String)>
<android.view.View: void setOnTouchListener(android.view.View$OnTouchListener)>
<com.android.server.accessibility.AccessibilityManagerService$4: void <init>(com.android.server.accessibility.AccessibilityManagerService,android.os.Handler)>
<android.net.Uri$StringUri: java.lang.String getEncodedSchemeSpecificPart()>
<android.widget.TextView: void removeTextChangedListener(android.text.TextWatcher)>
<android.graphics.Bitmap: boolean compress(android.graphics.Bitmap$CompressFormat,int,java.io.OutputStream)>
<android.renderscript.Sampler: android.renderscript.Sampler CLAMP_NEAREST(android.renderscript.RenderScript)>
<android.webkit.WebView: android.graphics.Point nativeSelectableText()>
<android.webkit.WebSettings: void setPrivateBrowsingEnabled(boolean)>
<com.android.server.wm.WindowManagerService: void setStrictModeVisualIndicatorPreference(java.lang.String)>
<android.os.ParcelFileDescriptor$1: java.lang.Object[] newArray(int)>
<GenerationGG: android.text.style.AlignmentSpan get_androidtextstyleAlignmentSpan()>
<android.view.WindowManagerImpl: void reportNewConfiguration(android.content.res.Configuration)>
<android.app.ResultInfo: java.lang.String toString()>
<android.widget.ListPopupWindow: int getSelectedItemPosition()>
<android.server.BluetoothPanProfileHandler: android.content.Context access$200(android.server.BluetoothPanProfileHandler)>
<android.content.ComponentName: int hashCode()>
<android.widget.AbsListView: boolean isSmoothScrollbarEnabled()>
<android.text.style.MetricAffectingSpan: android.text.style.CharacterStyle getUnderlying()>
<android.test.mock.MockPackageManager: java.util.List queryPermissionsByGroup(java.lang.String,int)>
<android.webkit.WebViewCore$TouchEventData: void <init>()>
<android.net.Uri$OpaqueUri: java.lang.String getScheme()>
<android.location.Address: java.lang.String access$1002(android.location.Address,java.lang.String)>
<com.android.server.PowerManagerService: boolean batteryIsLow()>
<android.webkit.WebView$7: void <init>(android.webkit.WebView,java.io.FileInputStream,android.os.Bundle)>
<android.inputmethodservice.KeyboardView$3: void <init>(android.inputmethodservice.KeyboardView)>
<com.android.server.accessibility.AccessibilityManagerService: void removeAccessibilityInteractionConnection(android.view.IWindow)>
<android.widget.RelativeLayout: void setVerticalGravity(int)>
<android.provider.Settings$Secure: java.lang.String getBluetoothInputDevicePriorityKey(java.lang.String)>
<android.ddm.DdmHandleNativeHeap: void <clinit>()>
<android.opengl.GLUtils: void nativeClassInit()>
<android.app.ActivityThread: java.lang.String safeToComponentShortString(android.content.Intent)>
<android.speech.tts.TtsEngines$EngineInfoComparator: void <init>()>
<android.webkit.WebView: void finalize()>
<android.net.wifi.WpsResult$1: void <init>()>
<android.net.wifi.WifiStateTracker$WifiStateReceiver: void <init>(android.net.wifi.WifiStateTracker,android.net.wifi.WifiStateTracker$1)>
<android.util.JsonReader: void skipToEndOfLine()>
<GenerationGG: android.text.method.MovementMethod get_androidtextmethodMovementMethod()>
<android.text.method.DialerKeyListener: void <init>()>
<android.net.sip.ISipService$Stub: android.os.IBinder asBinder()>
<android.view.accessibility.AccessibilityRecord: android.os.Parcelable getParcelableData()>
<android.view.GLES20Canvas: void drawCircle(float,float,float,android.graphics.Paint)>
<android.server.BluetoothPanProfileHandler: boolean isTetheringOn()>
<android.graphics.Rect$1: java.lang.Object[] newArray(int)>
<android.preference.PreferenceGroupAdapter: android.preference.Preference getItem(int)>
<com.android.server.pm.Installer: boolean connect()>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>
<android.view.View: void setScaleY(float)>
<android.test.mock.MockPackageManager: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int)>
<com.android.internal.os.BatteryStatsImpl: android.util.SparseArray getUidStats()>
<android.animation.ValueAnimator: long access$1000()>
<Wrapper_android_media_AudioTrack: void test_android_media_AudioTrack()>
<android.animation.Keyframe: boolean hasValue()>
<android.widget.ListPopupWindow: void setAnchorView(android.view.View)>
<android.database.sqlite.SQLiteDirectCursorDriver: java.lang.String toString()>
<android.net.wifi.WifiNative: java.lang.String startWpsWithPinFromDeviceCommand(java.lang.String)>
<android.widget.AutoCompleteTextView: boolean isPerformingCompletion()>
<android.webkit.WebView: void setGLRectViewport()>
<com.android.server.BackupManagerService$PerformFullRestoreTask$RestoreInstallObserver: void <init>(com.android.server.BackupManagerService$PerformFullRestoreTask)>
<android.net.wifi.p2p.WifiP2pInfo$1: android.net.wifi.p2p.WifiP2pInfo[] newArray(int)>
<android.view.textservice.SpellCheckerSubtype$1: android.view.textservice.SpellCheckerSubtype[] newArray(int)>
<android.widget.AbsListView: int getListPaddingRight()>
<android.view.PointerIcon: void validateHotSpot(android.graphics.Bitmap,float,float)>
<android.net.DhcpStateMachine: android.app.PendingIntent access$1500(android.net.DhcpStateMachine)>
<android.view.accessibility.AccessibilityNodeInfo$1: android.view.accessibility.AccessibilityNodeInfo[] newArray(int)>
<android.os.Debug: void resetGlobalFreedCount()>
<android.webkit.WebViewCore: void nativeScrollLayer(int,android.graphics.Rect)>
<android.app.Dialog: void onBackPressed()>
<com.android.server.accessibility.AccessibilityManagerService: void notifyAccessibilityServiceDelayedLocked(com.android.server.accessibility.AccessibilityManagerService$Service,android.view.accessibility.AccessibilityEvent)>
<android.net.wifi.SupplicantStateTracker$UninitializedState: void <init>(android.net.wifi.SupplicantStateTracker)>
<android.appwidget.AppWidgetProviderInfo: int describeContents()>
<android.view.accessibility.AccessibilityRecord: void setAddedCount(int)>
<android.widget.OverScroller$SplineOverScroller: double getSplineFlingDistance(int)>
<android.view.LayoutInflater$BlinkLayout: boolean access$000(android.view.LayoutInflater$BlinkLayout)>
<android.media.AudioService: void makeA2dpDeviceAvailable(java.lang.String)>
<android.telephony.PhoneStateListener: void onServiceStateChanged(android.telephony.ServiceState)>
<com.android.internal.os.BatteryStatsImpl$1: void <init>(com.android.internal.os.BatteryStatsImpl,java.lang.String)>
<android.view.ViewGroup: void cleanupLayoutState(android.view.View)>
<android.service.wallpaper.WallpaperService$Engine$4: void dispatchAppVisibility(boolean)>
<android.content.Loader: void onStartLoading()>
<android.net.http.IdleCache: void clear()>
<android.nfc.INfcTag$Stub$Proxy: void <init>(android.os.IBinder)>
<android.server.BluetoothHealthProfileHandler: android.server.BluetoothHealthProfileHandler$HealthChannel findChannelByPath(android.bluetooth.BluetoothDevice,java.lang.String)>
<com.android.server.UiModeManagerService: android.os.Handler access$400(com.android.server.UiModeManagerService)>
<android.graphics.drawable.BitmapDrawable$BitmapState: void <init>(android.graphics.drawable.BitmapDrawable$BitmapState)>
<android.widget.FrameLayout: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<android.app.Fragment: void onDestroyView()>
<android.os.storage.IMountShutdownObserver$Stub$Proxy: android.os.IBinder asBinder()>
<android.opengl.GLES11: void <clinit>()>
<android.net.wifi.WifiStateMachine$DriverStoppedState: void enter()>
<android.view.inputmethod.InputMethodManager$1: void setUsingInputMethod(boolean)>
<android.media.AudioService: void sendMsg(android.os.Handler,int,int,int,int,int,java.lang.Object,int)>
<com.android.internal.util.StateMachine$ProcessedMessageInfo: java.lang.String cn(java.lang.Object)>
<android.view.ViewGroup: void offsetChildrenTopAndBottom(int)>
<android.graphics.Matrix: boolean postSkew(float,float,float,float)>
<com.android.server.accessibility.TouchExplorer$PointerTracker: void handleReceivedPointerDown(int,android.view.MotionEvent)>
<android.app.WallpaperInfo$1: java.lang.Object[] newArray(int)>
<android.media.SoundPool: int play(int,float,float,int,int,float)>
<android.os.TokenWatcher: void <init>(android.os.Handler,java.lang.String)>
<android.widget.CalendarView$WeekView: void updateSelectionPositions()>
<android.webkit.LoadListener: java.lang.String url()>
<android.view.View: java.lang.Object getTag()>
<android.test.AndroidTestRunner: void setTest(junit.framework.Test,java.lang.Class)>
<android.app.Fragment$SavedState$1: java.lang.Object[] newArray(int)>
<android.test.mock.MockPackageManager: android.content.Intent getLaunchIntentForPackage(java.lang.String)>
<android.net.wifi.WifiWatchdogStateMachine: void log(java.lang.String)>
<android.webkit.JWebCoreJavaBridge: void setCacheSize(int)>
<android.hardware.usb.UsbDevice$1: void <init>()>
<com.android.internal.widget.ActionBarView: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void stopNetStatPoll()>
<android.view.ViewGroup: void clearDisappearingChildren()>
<com.android.internal.telephony.cat.ComprehensionTlv: java.util.List decodeMany(byte[],int)>
<android.os.storage.IObbActionListener$Stub: android.os.IBinder asBinder()>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getId()>
<android.test.AndroidTestRunner: void testFailed(int,junit.framework.Test,java.lang.Throwable)>
<android.webkit.WebViewCore: void nativeProvideVisitedHistory(java.lang.String[])>
<com.android.server.usb.UsbDeviceManager$UsbHandler: void updateState(java.lang.String)>
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State access$1000(com.android.internal.telephony.sip.SipPhone$SipConnection)>
<android.server.BluetoothAdapterStateMachine: android.server.BluetoothService access$2400(android.server.BluetoothAdapterStateMachine)>
<com.android.server.DropBoxManagerService$FileList: void <init>(com.android.server.DropBoxManagerService$1)>
<android.graphics.Bitmap: void checkRecycled(java.lang.String)>
<com.android.internal.telephony.IccCard: boolean access$700(com.android.internal.telephony.IccCard)>
<android.view.ScaleGestureDetector: float getRawY(android.view.MotionEvent,int)>
<android.provider.BrowserContract: void <clinit>()>
<android.widget.OverScroller: int getFinalX()>
<android.webkit.WebIconDatabase$EventHandler: void postMessage(android.os.Message)>
<android.app.Fragment: boolean isAdded()>
<android.text.method.PasswordTransformationMethod: char access$100()>
<Wrapper_android_security_KeyChainException: void test_android_security_KeyChainException()>
<android.webkit.WebViewCore$ReplaceTextData: void <init>()>
<GenerationGG: android.media.audiofx.EnvironmentalReverb$Settings get_androidmediaaudiofxEnvironmentalReverb__Settings()>
<android.widget.ExpandableListView$SavedState$1: void <init>()>
<com.android.internal.app.ActionBarImpl$TabImpl: android.app.ActionBar$TabListener getCallback()>
<com.android.server.am.ActivityRecord: void setTask(com.android.server.am.TaskRecord,com.android.server.am.ThumbnailHolder,boolean)>
<android.os.Parcel: java.lang.String readString()>
<android.view.inputmethod.InputMethodManager$1: void setActive(boolean)>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void queueNextSignalStrengthPoll()>
<com.android.internal.view.menu.MenuPopupHelper: com.android.internal.view.menu.MenuBuilder access$400(com.android.internal.view.menu.MenuPopupHelper)>
<com.android.internal.os.BatteryStatsImpl: void resetAllStatsLocked()>
<com.android.internal.view.IInputConnectionWrapper: android.os.Message obtainMessageII(int,int,int)>
<android.app.Instrumentation$Idler: boolean queueIdle()>
<android.webkit.JniUtil: void <clinit>()>
<com.android.internal.util.StateMachine: void <init>(java.lang.String,android.os.Looper)>
<android.renderscript.Matrix2f: void loadIdentity()>
<com.android.internal.content.PackageMonitor: void onPackageUpdateStarted(java.lang.String,int)>
<android.database.CursorWindow: void setStartPosition(int)>
<android.os.Parcel: void writeByteArray(byte[])>
<android.webkit.WebView: void access$5500(android.webkit.WebView)>
<com.android.internal.telephony.DataConnection: void access$2700(com.android.internal.telephony.DataConnection,com.android.internal.util.IState)>
<com.android.server.AlarmManagerService: void setLocked(com.android.server.AlarmManagerService$Alarm)>
<android.widget.RemoteViews: void setUri(int,java.lang.String,android.net.Uri)>
<android.os.ServiceManager: void <clinit>()>
<com.android.server.net.NetworkPolicyManagerService: void notifyUnderLimitLocked(android.net.NetworkTemplate)>
<android.app.ActivityThread$ContextCleanupInfo: void <init>()>
<android.graphics.Paint: int native_setColorFilter(int,int)>
<android.widget.AdapterView$SelectionNotifier: void <init>(android.widget.AdapterView)>
<android.webkit.WebSettings: java.lang.String getSansSerifFontFamily()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimSpnLoaded: void onRecordLoaded(android.os.AsyncResult)>
<android.bluetooth.BluetoothTetheringDataTracker$1: void onServiceConnected(int,android.bluetooth.BluetoothProfile)>
<com.android.internal.telephony.BaseCommands: void registerForDataNetworkStateChanged(android.os.Handler,int,java.lang.Object)>
<android.os.StrictMode$AndroidCloseGuardReporter: void <init>()>
<com.android.internal.view.menu.ActionMenuPresenter$PopupPresenterCallback: void <init>(com.android.internal.view.menu.ActionMenuPresenter,com.android.internal.view.menu.ActionMenuPresenter$1)>
<android.media.RingtoneManager: void setType(int)>
<com.android.server.wm.DragState: int getDragLayerLw()>
<com.android.server.location.LocationBasedCountryDetector$1: void onProviderEnabled(java.lang.String)>
<com.android.server.MountService$UmsEnableCallBack: void handleFinished()>
<android.test.suitebuilder.annotation.HasClassAnnotation: void <init>(java.lang.Class)>
<android.util.DisplayMetrics: java.lang.String toString()>
<android.net.wifi.WifiWatchdogStateMachine: java.lang.String access$1200(android.net.wifi.WifiInfo)>
<android.view.View: int getVerticalFadingEdgeLength()>
<com.android.server.pm.PackageManagerService: java.lang.String[] splitString(java.lang.String,char)>
<android.renderscript.RenderScript: void nContextSetSurfaceTexture(int,int,android.graphics.SurfaceTexture)>
<android.animation.Keyframe$ObjectKeyframe: android.animation.Keyframe$ObjectKeyframe clone()>
<android.preference.PreferenceGroupAdapter: void flattenPreferenceGroup(java.util.List,android.preference.PreferenceGroup)>
<android.webkit.WebChromeClient: void onGeolocationPermissionsHidePrompt()>
<android.graphics.Typeface: android.graphics.Typeface create(android.graphics.Typeface,int)>
<android.net.LocalSocketImpl: java.io.FileDescriptor create_native(boolean)>
<android.widget.ActivityChooserModel$ActivityResolveInfo: boolean equals(java.lang.Object)>
<android.animation.LayoutTransition$2: void onAnimationEnd(android.animation.Animator)>
<android.view.InputEventConsistencyVerifier: void onTrackballEvent(android.view.MotionEvent,int)>
<com.android.internal.os.ProcessStats: void getName(com.android.internal.os.ProcessStats$Stats,java.lang.String)>
<android.webkit.WebIconDatabase$EventHandler$1: void <init>(android.webkit.WebIconDatabase$EventHandler)>
<android.content.pm.IPackageInstallObserver$Stub: android.os.IBinder asBinder()>
<Wrapper_android_util_AndroidRuntimeException: void test_android_util_AndroidRuntimeException()>
<android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent: void <init>(android.view.ViewRootImpl,android.view.ViewRootImpl$1)>
<android.webkit.WebView: android.graphics.Rect access$5000(android.webkit.WebView)>
<android.widget.TextView: int extractRangeEndFromLong(long)>
<android.widget.NumberPicker: int getValue()>
<com.android.server.pm.Settings: int getApplicationEnabledSettingLPr(java.lang.String)>
<com.android.internal.telephony.cat.AppInterface$CommandType: void <init>(java.lang.String,int,int)>
<GenerationGG: android.media.effect.EffectContext get_androidmediaeffectEffectContext()>
<android.graphics.Matrix$1: boolean postRotate(float)>
<android.content.IntentSender: void <init>(android.os.IBinder)>
<android.widget.Toast: void setView(android.view.View)>
<android.content.Intent: android.content.Intent setAction(java.lang.String)>
<android.test.ActivityUnitTestCase$MockParent: void finishFromChild(android.app.Activity)>
<android.speech.tts.TextToSpeechService$CallbackMap: void setCallback(java.lang.String,android.speech.tts.ITextToSpeechCallback)>
<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState computeFocusedWindowLocked()>
<android.content.ContentService$ObserverNode: java.lang.String getUriSegment(android.net.Uri,int)>
<android.webkit.ZoomManager$ScaleDetectorListener: boolean isPanningOnly(android.view.ScaleGestureDetector)>
<android.app.LoaderManager: void <init>()>
<com.android.server.BatteryService: int access$300(com.android.server.BatteryService)>
<com.android.internal.util.TypedProperties: java.lang.Object get(java.lang.Object)>
<android.renderscript.Allocation: void data1DChecks(int,int,int,int)>
<android.widget.TimePicker: void setCurrentLocale(java.util.Locale)>
<com.android.internal.widget.ActionBarView: void setCollapsable(boolean)>
<android.webkit.WebView: void access$6800(android.webkit.WebView,int,java.lang.String)>
<android.widget.Spinner: void setPrompt(java.lang.CharSequence)>
<android.view.animation.GridLayoutAnimationController: float getRowDelay()>
<android.net.http.AndroidHttpClient: void finalize()>
<android.gesture.Instance: android.gesture.Instance createInstance(int,int,android.gesture.Gesture,java.lang.String)>
<android.widget.ShareActionProvider: boolean hasSubMenu()>
<android.widget.Switch: java.lang.CharSequence getTextOff()>
<java.lang.Object: void onConfigurationChanged(android.content.res.Configuration)>
<android.webkit.BrowserFrame: void loadUrl(java.lang.String,java.util.Map)>
<android.widget.MediaController: boolean access$602(android.widget.MediaController,boolean)>
<android.view.ViewRootImpl$TrackballAxis: void reset(int)>
<android.net.wifi.WifiNative: boolean startWpsPbcCommand(java.lang.String)>
<android.text.TextDirectionHeuristics$TextDirectionHeuristicImpl: boolean doCheck(char[],int,int)>
<android.view.accessibility.AccessibilityNodeInfo: void enforceNotSealed()>
<android.content.ContentProviderOperation: java.lang.String[] resolveSelectionArgsBackReferences(android.content.ContentProviderResult[],int)>
<android.text.style.EasyEditSpan: void <init>()>
<android.renderscript.RenderScript: void nAllocationRead(int,int[])>
<android.graphics.drawable.Drawable: int getLevel()>
<android.preference.DialogPreference: void setDialogLayoutResource(int)>
<android.widget.ListView: int getBottomSelectionPixel(int,int,int)>
<android.view.InputChannel: void writeToParcel(android.os.Parcel,int)>
<com.android.internal.telephony.cat.BerTlv: void <init>(int,java.util.List)>
<android.view.View$AttachInfo$InvalidateInfo$1: android.util.Poolable newInstance()>
<android.content.pm.IPackageMoveObserver$Stub: android.content.pm.IPackageMoveObserver asInterface(android.os.IBinder)>
<android.app.NativeActivity: byte[] onSaveInstanceStateNative(int)>
<android.app.SharedPreferencesImpl$EditorImpl: void notifyListeners(android.app.SharedPreferencesImpl$MemoryCommitResult)>
<android.os.StrictMode: boolean tooManyViolationsThisLoop()>
<android.os.Parcel: int dataPosition()>
<android.view.accessibility.AccessibilityRecord: boolean isSealed()>
<android.preference.TwoStatePreference$SavedState: void <clinit>()>
<android.location.Location: void setLongitude(double)>
<android.inputmethodservice.InputMethodService: void onConfigureWindow(android.view.Window,boolean,boolean)>
<android.widget.AutoCompleteTextView$PassThroughClickListener: android.view.View$OnClickListener access$302(android.widget.AutoCompleteTextView$PassThroughClickListener,android.view.View$OnClickListener)>
<com.android.internal.widget.LockPatternView: void setPattern(com.android.internal.widget.LockPatternView$DisplayMode,java.util.List)>
<com.android.internal.location.DummyLocationProvider: void setPowerRequirement(int)>
<android.speech.tts.TextToSpeech: java.util.Map access$400(android.speech.tts.TextToSpeech)>
<android.app.ContextImpl$7: java.lang.Object createService(android.app.ContextImpl)>
<android.content.Loader$ForceLoadContentObserver: void <init>(android.content.Loader)>
<GenerationGG: android.util.AndroidRuntimeException get_androidutilAndroidRuntimeException()>
<android.speech.tts.TextToSpeechService$1: boolean checkNonNull(java.lang.Object[])>
<android.net.NetworkPolicyManager: void snapToCycleDay(android.text.format.Time,int)>
<com.android.server.MountService$UnmountObbAction: void <init>(com.android.server.MountService,com.android.server.MountService$ObbState,boolean)>
<android.view.ViewRootImpl: void dispatchKey(android.view.KeyEvent,boolean)>
<android.view.inputmethod.ExtractedTextRequest: void <init>()>
<android.widget.AutoCompleteTextView: void setForceIgnoreOutsideTouch(boolean)>
<android.view.View$AttachInfo$InvalidateInfo: java.lang.Object getNextPoolable()>
<com.android.internal.telephony.DefaultPhoneNotifier: int convertCallState(com.android.internal.telephony.Phone$State)>
<android.telephony.ServiceState$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.widget.ListPopupWindow: int getSoftInputMode()>
<android.accounts.AccountManagerService: java.lang.Integer getSigninRequiredNotificationId(android.accounts.Account)>
<android.graphics.Path: boolean isInverseFillType()>
<GenerationGG: android.util.Base64InputStream get_androidutilBase64InputStream()>
<com.android.server.BackupManagerService$RunBackupReceiver: void <init>(com.android.server.BackupManagerService)>
<android.view.ViewRootImpl: boolean isLayoutRequested()>
<android.view.accessibility.AccessibilityRecord: int getWindowId()>
<android.renderscript.Matrix4f: boolean inverse()>
<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean canPerformActionLocked(com.android.server.accessibility.AccessibilityManagerService$Service,int,int)>
<android.view.ViewTreeObserver: void removeOnComputeInternalInsetsListener(android.view.ViewTreeObserver$OnComputeInternalInsetsListener)>
<android.net.EthernetDataTracker: boolean isAvailable()>
<android.net.sip.SipProfile: javax.sip.address.SipURI getUri()>
<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection: void onServiceDisconnected()>
<android.view.View: void debug(int)>
<android.hardware.usb.UsbDevice: int getDeviceProtocol()>
<android.media.TimedText: void readHighlight()>
<GenerationGG: android.content.pm.ServiceInfo get_androidcontentpmServiceInfo()>
<android.app.NativeActivity: void onConfigurationChangedNative(int)>
<com.android.server.LightsService$Light: void setBrightness(int,int)>
<android.widget.TabHost$TabSpec: android.widget.TabHost$ContentStrategy access$300(android.widget.TabHost$TabSpec)>
<android.text.method.ReplacementTransformationMethod$ReplacementCharSequence: char charAt(int)>
<android.nfc.NdefRecord$1: android.nfc.NdefRecord createFromParcel(android.os.Parcel)>
<android.view.GLES20Canvas: int nCreateTextureLayer(boolean,int[])>
<android.webkit.WebViewCore: void nativeSetSize(int,int,int,float,int,int,int,int,boolean)>
<android.graphics.LinearGradient: int nativePostCreate1(int,float,float,float,float,int[],float[],int)>
<android.content.res.CompatibilityInfo$Translator: void translateRegionInWindowToScreen(android.graphics.Region)>
<com.android.internal.telephony.DataConnectionTracker: boolean setInternalDataEnabled(boolean)>
<android.app.ActivityManager$RecentTaskInfo: void <init>()>
<android.renderscript.ProgramRaster$Builder: android.renderscript.ProgramRaster$Builder setCullMode(android.renderscript.ProgramRaster$CullMode)>
<Wrapper_android_location_GpsStatus: void test_android_location_GpsStatus()>
<GenerationGG: android.view.ActionMode$Callback get_androidviewActionMode__Callback()>
<android.renderscript.Allocation$MipmapControl: void <init>(java.lang.String,int,int)>
<android.webkit.HTML5VideoView$TimeupdateTask: void <init>(android.webkit.HTML5VideoViewProxy)>
<android.animation.ValueAnimator: android.animation.ValueAnimator setDuration(long)>
<com.android.server.location.PassiveProvider: boolean supportsAltitude()>
<android.graphics.drawable.GradientDrawable: boolean getPadding(android.graphics.Rect)>
<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect,android.graphics.Point)>
<android.animation.LayoutTransition: long access$314(android.animation.LayoutTransition,long)>
<android.test.ViewAsserts: void assertGroupIntegrity(android.view.ViewGroup)>
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: boolean isFilterStopped(android.content.IntentFilter)>
<com.android.server.location.LocationProviderProxy: android.os.Handler access$100(com.android.server.location.LocationProviderProxy)>
<android.net.wifi.SupplicantState: android.net.wifi.SupplicantState[] values()>
<android.graphics.Matrix: void setScale(float,float,float,float)>
<android.media.IMediaScannerService$Stub$Proxy: android.os.IBinder asBinder()>
<android.bluetooth.BluetoothClass$1: java.lang.Object[] newArray(int)>
<android.webkit.WebSettings: void addLocaleToHttpAcceptLanguage(java.lang.StringBuilder,java.util.Locale)>
<android.test.InstrumentationTestRunner: java.util.List getBuilderRequirements()>
<com.android.server.LocationManagerService: android.content.Context access$100(com.android.server.LocationManagerService)>
<android.accounts.GrantCredentialsPermissionActivity$1: void onError(int,java.lang.String)>
<com.android.server.pm.Settings: void addPackageSettingLPw(com.android.server.pm.PackageSetting,java.lang.String,com.android.server.pm.SharedUserSetting)>
<android.widget.ToggleButton: java.lang.CharSequence getTextOff()>
<android.webkit.HTML5VideoViewProxy: void nativeOnPaused(int)>
<android.os.StrictMode$1: void <init>()>
<com.android.server.sip.SipSessionGroup: void openToReceiveCalls(android.net.sip.ISipSessionListener)>
<com.android.internal.telephony.gsm.SpnOverride: void <init>()>
<com.android.internal.telephony.IccPhoneBookInterfaceManager$1: void notifyPending(android.os.AsyncResult)>
<android.view.MotionEvent: int getMetaState()>
<com.android.internal.util.StateMachine: void setDbg(boolean)>
<android.view.GLES20DisplayList: void <init>()>
<android.renderscript.Program$TextureType: void <clinit>()>
<android.server.BluetoothAdapterStateMachine: android.server.BluetoothAdapterStateMachine$HotOff access$2700(android.server.BluetoothAdapterStateMachine)>
<android.media.audiofx.Equalizer: void usePreset(short)>
<android.content.Intent: void <init>(java.lang.String,android.net.Uri)>
<android.view.MotionEvent: float getHistoricalTouchMajor(int)>
<android.content.ClipData: void <init>(android.content.ClipDescription,android.content.ClipData$Item)>
<android.view.View: void setOnDragListener(android.view.View$OnDragListener)>
<android.widget.TextView: boolean isCursorVisible()>
<android.webkit.WebView: void nativeCopyBaseContentToPicture(android.graphics.Picture)>
<android.widget.RemoteViews: void removeAllViews(int)>
<android.content.res.Configuration: boolean needNewResources(int,int)>
<android.telephony.SmsMessage$MessageClass: void <clinit>()>
<android.test.MoreAsserts: void assertEquals(double[],double[])>
<android.nfc.TransceiveResult: void <init>(int,byte[])>
<android.graphics.Region: void translate(int,int)>
<android.media.AudioService$2: void onServiceDisconnected(int)>
<com.android.internal.telephony.cat.ComprehensionTlv: com.android.internal.telephony.cat.ComprehensionTlv decode(byte[],int)>
<com.android.internal.telephony.IccCard$State: boolean iccCardExist()>
<android.view.accessibility.AccessibilityRecord: void setSealed(boolean)>
<android.webkit.CallbackProxy: boolean uiOverrideKeyEvent(android.view.KeyEvent)>
<android.webkit.WebView: int access$9200(android.webkit.WebView)>
<android.view.InputDevice$MotionRange: void <init>(int,int,float,float,float,float)>
<android.drm.DrmUtils: void <init>()>
<com.android.internal.telephony.sip.SipPhone$SipCall: android.net.rtp.AudioGroup getAudioGroup()>
<android.text.Annotation: void writeToParcel(android.os.Parcel,int)>
<android.net.LocalSocketImpl: java.io.InputStream getInputStream()>
<android.opengl.Matrix: void setLookAtM(float[],int,float,float,float,float,float,float,float,float,float)>
<com.android.internal.telephony.CallTracker: void pollCallsAfterDelay()>
<android.view.ViewConfiguration: int getScaledMinimumFlingVelocity()>
<com.android.internal.widget.LockPatternView$SavedState: void <init>(android.os.Parcelable,java.lang.String,int,boolean,boolean,boolean)>
<android.widget.AbsListView: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.util.MonthDisplayHelper: int getDayAt(int,int)>
<android.view.View$1: void <init>(android.view.View,java.lang.String)>
<android.media.AudioService$2: void <init>(android.media.AudioService)>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getContentDescription()>
<com.android.internal.os.BatteryStatsImpl$Uid: void noteWifiRunningLocked()>
<android.view.View$TransformationInfo: android.graphics.Matrix access$1000(android.view.View$TransformationInfo)>
<android.renderscript.Allocation: void copyTo(int[])>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.gsm.GsmCall getForegroundCall()>
<android.app.AlertDialog: void setButton2(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.app.ContextImpl$1: void <init>()>
<android.media.audiofx.EnvironmentalReverb: void setParameterListener(android.media.audiofx.EnvironmentalReverb$OnParameterChangeListener)>
<com.android.internal.telephony.cdma.sms.BearerData: void encodePriorityIndicator(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)>
<android.widget.StackView$StackSlider: float getDurationForOffscreenPosition()>
<android.webkit.CookieSyncManager: android.webkit.CookieSyncManager getInstance()>
<android.renderscript.FieldPacker: void addI32(android.renderscript.Int2)>
<android.test.ViewAsserts: void assertBottomAligned(android.view.View,android.view.View)>
<android.widget.AdapterView: int getPositionForView(android.view.View)>
<android.telephony.TelephonyManager: java.lang.String getSimOperator()>
<com.android.server.am.ActivityManagerService: java.util.ArrayList readLastDonePreBootReceivers()>
<android.location.Criteria: boolean access$702(android.location.Criteria,boolean)>
<android.view.View$TransformationInfo: android.graphics.Matrix access$300(android.view.View$TransformationInfo)>
<com.android.internal.os.BatteryStatsImpl$Timer: void detach()>
<android.view.GLES20RecordingCanvas: void drawTextOnPath(java.lang.String,android.graphics.Path,float,float,android.graphics.Paint)>
<android.hardware.SensorManager$LegacyListener: void onSensorChanged(android.hardware.SensorEvent)>
<com.android.server.wm.WindowManagerService: boolean access$102(com.android.server.wm.WindowManagerService,boolean)>
<com.android.server.AlarmManagerService: android.content.Context access$400(com.android.server.AlarmManagerService)>
<com.android.server.DevicePolicyManagerService: int getPasswordQuality(android.content.ComponentName)>
<android.webkit.SslErrorHandler: void cancel()>
<android.view.GLES20Canvas: void <init>(boolean)>
<android.net.Uri$StringUri: java.lang.String getAuthority()>
<com.android.server.ConnectivityService$RadioAttributes: void <init>(java.lang.String)>
<android.os.StrictMode$Span: long access$2002(android.os.StrictMode$Span,long)>
<android.widget.GridLayout$MutableInt: void <init>(int)>
<GenerationGG: android.text.format.Formatter get_androidtextformatFormatter()>
<android.graphics.Paint: int native_getTextRunCursor(int,java.lang.String,int,int,int,int,int)>
<com.android.server.sip.SipSessionGroup$KeepAliveProcessCallbackProxy: void onError(int,java.lang.String)>
<android.view.MotionEvent: float getToolMajor()>
<android.view.ViewRootImpl$W: void dispatchSystemUiVisibilityChanged(int,int,int,int)>
<com.android.server.usb.UsbDeviceManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)>
<android.bluetooth.BluetoothDeviceProfileState: android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp access$2900(android.bluetooth.BluetoothDeviceProfileState)>
<android.webkit.WebView: int access$9402(android.webkit.WebView,int)>
<android.webkit.HTML5VideoViewProxy$PosterDownloader: void endData()>
<android.util.SparseIntArray: void clear()>
<android.view.View: long getDrawingTime()>
<com.android.server.am.AppBindRecord: java.lang.String toString()>
<java.lang.Object: boolean areAllItemsEnabled()>
<com.android.internal.telephony.cat.RilMessageDecoder: void access$600(com.android.internal.telephony.cat.RilMessageDecoder,com.android.internal.telephony.cat.RilMessage)>
<android.renderscript.Matrix4f: float get(int,int)>
<android.mtp.MtpDevice: boolean native_import_file(int,java.lang.String)>
<com.android.server.sip.SipSessionListenerProxy: void onRegistrationDone(android.net.sip.ISipSession,int)>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$2: void <clinit>()>
<android.telephony.SignalStrength$1: java.lang.Object[] newArray(int)>
<android.text.method.MultiTapKeyListener: void onSpanRemoved(android.text.Spannable,java.lang.Object,int,int)>
<android.nfc.tech.Ndef: android.nfc.NdefMessage getCachedNdefMessage()>
<com.android.internal.telephony.gsm.SIMRecords: void log(java.lang.String)>
<android.media.AudioService: void access$4900(android.media.AudioService,int,boolean)>
<android.net.wifi.p2p.WifiP2pConfig$1: void <init>()>
<android.content.IIntentSender$Stub: android.content.IIntentSender asInterface(android.os.IBinder)>
<android.graphics.drawable.LevelListDrawable$LevelListState: int[] access$100(android.graphics.drawable.LevelListDrawable$LevelListState)>
<android.content.pm.PackageParser: android.content.pm.PackageInfo generatePackageInfo(android.content.pm.PackageParser$Package,int[],int,long,long)>
<com.android.internal.telephony.gsm.GsmConnection: void log(java.lang.String)>
<com.android.server.am.PendingIntentRecord: void <init>(com.android.server.am.ActivityManagerService,com.android.server.am.PendingIntentRecord$Key,int)>
<Wrapper_android_text_style_ForegroundColorSpan: void test_android_text_style_ForegroundColorSpan()>
<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollFooter()>
<android.view.View: boolean isVerticalFadingEdgeEnabled()>
<android.net.LinkAddress$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.os.ServiceManager: android.os.IServiceManager getIServiceManager()>
<GenerationGG: android.renderscript.Mesh get_androidrenderscriptMesh()>
<android.graphics.Paint: void getTextBounds(char[],int,int,android.graphics.Rect)>
<android.graphics.drawable.Drawable: void onBoundsChange(android.graphics.Rect)>
<android.test.InstrumentationTestCase$1: void <init>(android.test.InstrumentationTestCase,java.lang.Runnable,java.lang.Throwable[])>
<com.android.internal.widget.EditableInputConnection: android.text.Editable getEditable()>
<android.app.SearchManager: void setOnDismissListener(android.app.SearchManager$OnDismissListener)>
<android.view.ViewDebug: android.graphics.Bitmap performViewCapture(android.view.View,boolean)>
<com.android.server.PowerManagerService: java.lang.String dumpPowerState(int)>
<GenerationGG: com.android.internal.util.Predicate[] get_comandroidinternalutilPredicate_ARRAY_()>
<android.widget.AdapterViewFlipper$2: void <init>(android.widget.AdapterViewFlipper)>
<android.os.AsyncTask: android.os.AsyncTask execute(java.lang.Object[])>
<com.android.internal.telephony.AdnRecord: void <init>(java.lang.String,java.lang.String)>
<java.lang.Object: android.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence)>
<android.graphics.Path: int init1()>
<android.app.Fragment: void onResume()>
<android.media.AudioRecord: int getState()>
<android.view.PointerIcon: int describeContents()>
<android.net.Uri$PathPart: android.net.Uri$PathPart readFrom(android.os.Parcel)>
<android.content.Loader: void abandon()>
<android.net.sip.SimpleSessionDescription$Media: int getPort()>
<android.widget.TextView: boolean canSelectText()>
<com.android.internal.telephony.cat.GetInkeyInputResponseData: void <init>(boolean)>
<android.view.GLES20Canvas: void resume()>
<android.widget.CheckedTextView: boolean isChecked()>
<com.android.server.LocationManagerService: android.location.ILocationListener access$000(com.android.server.LocationManagerService)>
<android.view.AbsSavedState$2: android.view.AbsSavedState[] newArray(int)>
<android.hardware.usb.UsbDevice: int describeContents()>
<android.graphics.drawable.Drawable: void unscheduleSelf(java.lang.Runnable)>
<com.android.server.wm.WindowManagerService: boolean computeNewConfigurationLocked(android.content.res.Configuration)>
<GenerationGG: android.view.CollapsibleActionView get_androidviewCollapsibleActionView()>
<com.android.internal.view.menu.ActionMenuItemView: boolean needsDividerAfter()>
<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int,java.lang.Object)>
<com.android.server.LocationManagerService: com.android.server.location.LocationProviderInterface best(java.util.List)>
<android.net.wifi.WifiNative: boolean stopFilteringMulticastV4Packets()>
<android.renderscript.RenderScript: int nProgramStoreCreate(boolean,boolean,boolean,boolean,boolean,boolean,int,int,int)>
<android.app.ServiceConnectionLeaked: void <init>(java.lang.String)>
<android.server.BluetoothHealthProfileHandler$HealthChannel: int access$1200(android.server.BluetoothHealthProfileHandler$HealthChannel)>
<android.content.res.Resources: android.content.res.CompatibilityInfo getCompatibilityInfo()>
<android.media.MediaMetadataRetriever: void native_finalize()>
<com.android.server.connectivity.Tethering$TetherMasterSM: java.lang.String access$4602(com.android.server.connectivity.Tethering$TetherMasterSM,java.lang.String)>
<android.view.KeyEvent: int getFlags()>
<com.android.internal.telephony.cat.GetInkeyInputResponseData: void format(java.io.ByteArrayOutputStream)>
<Wrapper_android_net_LocalSocketAddress: void test_android_net_LocalSocketAddress()>
<android.content.res.XmlBlock$Parser: int getAttributeIntValue(java.lang.String,java.lang.String,int)>
<android.net.sip.SipProfile: java.lang.String getUserName()>
<com.android.server.pm.PackageManagerService$DefaultContainerConnection: void <init>(com.android.server.pm.PackageManagerService)>
<android.app.ActivityThread: android.content.res.Configuration applyCompatConfiguration()>
<android.widget.ScrollView: boolean isWithinDeltaOfScreen(android.view.View,int,int)>
<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder named(java.lang.String)>
<android.preference.MultiSelectListPreference: java.lang.CharSequence[] getEntryValues()>
<android.os.Parcel: void writeStringArray(java.lang.String[])>
<com.android.internal.telephony.gsm.UsimPhoneBookManager$PbrFile: void parseEf(com.android.internal.telephony.gsm.SimTlv,java.util.Map,int)>
<com.android.server.location.GpsLocationProvider$Listener: void <init>(com.android.server.location.GpsLocationProvider,android.location.IGpsStatusListener)>
<android.graphics.RectF: float centerX()>
<com.android.internal.os.BatteryStatsImpl: void readFromParcelLocked(android.os.Parcel)>
<android.net.NetworkStatsHistory: android.net.NetworkStatsHistory$Entry getValues(long,long,long,android.net.NetworkStatsHistory$Entry)>
<android.view.GLES20Canvas: void nGetMatrix(int,int)>
<android.os.SystemProperties: long native_get_long(java.lang.String,long)>
<GenerationGG: android.net.UrlQuerySanitizer get_androidnetUrlQuerySanitizer()>
<android.widget.AdapterViewAnimator: android.os.Parcelable onSaveInstanceState()>
<android.app.LocalActivityManager: java.lang.String getCurrentId()>
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor)>
<android.text.TextUtils: boolean isDigitsOnly(java.lang.CharSequence)>
<android.net.wifi.p2p.WifiP2pManager$Channel: int putListener(java.lang.Object)>
<GenerationGG: android.app.IntentService get_androidappIntentService()>
<android.util.Log: int i(java.lang.String,java.lang.String,java.lang.Throwable)>
<com.android.internal.telephony.RetryManager: void resetRetryCount()>
<com.android.server.connectivity.Vpn: java.lang.String access$200(com.android.server.connectivity.Vpn)>
<android.view.ViewRootImpl: android.view.ViewRootImpl$AccessibilityInteractionController getAccessibilityInteractionController()>
<android.media.MediaPlayer: void setOnCompletionListener(android.media.MediaPlayer$OnCompletionListener)>
<java.lang.Object: int getAttributeIntValue(java.lang.String,java.lang.String,int)>
<com.android.server.connectivity.Vpn: void interfaceAdded(java.lang.String)>
<android.view.Surface: void setPosition(float,float)>
<android.widget.TextView: int access$6500(android.widget.TextView)>
<android.media.AudioService: void setStreamVolumeIndex(int,int)>
<android.app.Instrumentation$ActivityGoing: boolean queueIdle()>
<android.text.method.ReplacementTransformationMethod$ReplacementCharSequence: void <init>(java.lang.CharSequence,char[],char[])>
<android.renderscript.RenderScript: void rsnAllocationResize1D(int,int,int)>
<android.graphics.Matrix: boolean native_postScale(int,float,float,float,float)>
<android.location.Criteria: void setPowerRequirement(int)>
<android.widget.StackView$HolographicHelper: void <init>(android.content.Context)>
<android.database.sqlite.SQLiteDirectCursorDriver: void cursorDeactivated()>
<com.android.internal.util.StateMachine$SmHandler: void <init>(android.os.Looper,com.android.internal.util.StateMachine,com.android.internal.util.StateMachine$1)>
<android.webkit.WebViewDatabase: boolean checkInitialized()>
<android.nfc.tech.MifareClassic: android.nfc.Tag getTag()>
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getPassphrase()>
<android.graphics.Region: int describeContents()>
<com.android.internal.widget.LockPatternView$SavedState: java.lang.String getSerializedPattern()>
<android.gesture.GestureOverlayView: boolean isGestureVisible()>
<android.app.ContextImpl$6: void <init>()>
<android.widget.HorizontalScrollView: boolean canScroll()>
<android.app.DialogFragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.internal.widget.EditableInputConnection: void <init>(android.widget.TextView)>
<android.widget.ZoomButtonsController: void access$500(android.widget.ZoomButtonsController,int)>
<com.android.server.accessibility.TouchExplorer$PointerTracker: void onInjectedMotionEvent(android.view.MotionEvent)>
<android.app.ActivityThread: void queueOrSendMessage(int,java.lang.Object,int,int)>
<GenerationGG: android.renderscript.Int2 get_androidrenderscriptInt2()>
<android.webkit.WebChromeClient: boolean onJsTimeout()>
<android.webkit.WebStorage: void access$200()>
<android.widget.StackView$StackSlider: float getDurationForOffscreenPosition(float)>
<android.webkit.CookieManager: void <clinit>()>
<android.net.wifi.WifiStateMachine: void access$600(android.net.wifi.WifiStateMachine,android.os.Message)>
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void log(java.lang.String)>
<com.android.internal.util.StateMachine: void deferMessage(android.os.Message)>
<android.preference.EditTextPreference: java.lang.String getText()>
<android.view.animation.AnimationSet: void <init>(boolean)>
<android.graphics.drawable.AnimatedRotateDrawable: int getOpacity()>
<android.net.UrlQuerySanitizer: void parseQuery(java.lang.String)>
<android.gesture.GestureStore: boolean hasChanged()>
<android.opengl.GLES11: void _nativeClassInit()>
<android.server.BluetoothA2dpService: boolean initNative()>
<android.server.BluetoothHealthProfileHandler: int getHealthDeviceConnectionState(android.bluetooth.BluetoothDevice)>
<android.webkit.WebView: void scrollFocusedTextInputX(float)>
<GenerationGG: android.webkit.CacheManager get_androidwebkitCacheManager()>
<android.test.mock.MockPackageManager: java.lang.CharSequence getText(java.lang.String,int,android.content.pm.ApplicationInfo)>
<android.inputmethodservice.ExtractEditText: boolean isInputMethodTarget()>
<android.speech.tts.TextToSpeechService$SynthHandler: android.speech.tts.TextToSpeechService$SpeechItem setCurrentSpeechItem(android.speech.tts.TextToSpeechService$SpeechItem)>
<android.telephony.CellLocation: void <init>()>
<android.net.wifi.WpsResult$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.text.style.SuperscriptSpan: void updateDrawState(android.text.TextPaint)>
<android.accounts.AccountManagerService$TestFeaturesSession: void <init>(android.accounts.AccountManagerService,android.accounts.IAccountManagerResponse,android.accounts.Account,java.lang.String[])>
<android.media.MediaMetadataRetriever: void finalize()>
<com.android.server.am.BatteryStatsService: android.bluetooth.BluetoothHeadset access$002(com.android.server.am.BatteryStatsService,android.bluetooth.BluetoothHeadset)>
<android.widget.TextView$CorrectionHighlighter: void <init>(android.widget.TextView)>
<android.graphics.drawable.ScaleDrawable: boolean getPadding(android.graphics.Rect)>
<android.graphics.drawable.ColorDrawable: int getChangingConfigurations()>
<android.net.LocalSocketImpl: void shutdownOutput()>
<android.net.wifi.SupplicantStateTracker$CompletedState: void <init>(android.net.wifi.SupplicantStateTracker)>
<android.view.accessibility.AccessibilityRecord: void setRemovedCount(int)>
<android.net.wifi.WifiStateTracker: android.net.NetworkInfo access$102(android.net.wifi.WifiStateTracker,android.net.NetworkInfo)>
<android.widget.Switch: void setTextOff(java.lang.CharSequence)>
<android.location.ICountryListener$Stub$Proxy: void <init>(android.os.IBinder)>
<GenerationGG: android.media.MediaPlayer$OnVideoSizeChangedListener get_androidmediaMediaPlayer__OnVideoSizeChangedListener()>
<android.graphics.Region$Op: void <clinit>()>
<GenerationGG: android.content.ReceiverCallNotAllowedException get_androidcontentReceiverCallNotAllowedException()>
<android.renderscript.ProgramStore$Builder: android.renderscript.ProgramStore$Builder setDepthMaskEnabled(boolean)>
<com.android.internal.telephony.DataConnection: void access$3200(com.android.internal.telephony.DataConnection,com.android.internal.util.IState)>
<android.content.ContentResolver$OpenResourceIdResult: void <init>(android.content.ContentResolver)>
<com.android.internal.backup.LocalTransport: int initializeDevice()>
<android.graphics.Region: int ni()>
<com.android.server.connectivity.Tethering$TetherMasterSM: void access$3900(com.android.server.connectivity.Tethering$TetherMasterSM,com.android.internal.util.IState)>
<com.android.internal.telephony.OperatorInfo: int describeContents()>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: void addForegroundTimeLocked(long)>
<com.android.server.LocationManagerService$ProximityListener: void onStatusChanged(java.lang.String,int,android.os.Bundle)>
<android.content.Intent: boolean hasCategory(java.lang.String)>
<android.app.LoadedApk: android.content.pm.ApplicationInfo getApplicationInfo()>
<com.android.internal.telephony.DataConnection: void resetRetryCount()>
<android.view.Surface: android.graphics.Bitmap screenshot(int,int,int,int)>
<android.graphics.Region: int access$000(android.os.Parcel)>
<android.widget.RelativeLayout$DependencyGraph$Node$1: void onAcquired(android.util.Poolable)>
<android.view.View: boolean isDrawingCacheEnabled()>
<android.view.inputmethod.InputBinding: void <init>(android.os.Parcel)>
<com.android.server.wm.WindowManagerService: boolean reportInjectionResult(int)>
<com.android.internal.telephony.DataConnection: void notifyConnectCompleted(com.android.internal.telephony.DataConnection$ConnectionParams,com.android.internal.telephony.DataConnection$FailCause)>
<android.text.format.DateFormat: java.lang.String zeroPad(int,int)>
<android.hardware.Camera: void finalize()>
<android.widget.Filter: void filter(java.lang.CharSequence,android.widget.Filter$FilterListener)>
<android.widget.PopupWindow: android.view.View access$900(android.widget.PopupWindow)>
<android.text.method.DateTimeKeyListener: void <init>()>
<android.graphics.Canvas: boolean native_clipRect(int,float,float,float,float,int)>
<android.content.pm.PackageStats: void <init>(java.lang.String)>
<android.widget.ImageView: int getResolvedLayoutDirection(android.graphics.drawable.Drawable)>
<android.net.VpnService$Callback: void <init>(android.net.VpnService)>
<android.content.SearchRecentSuggestionsProvider$DatabaseHelper: void <init>(android.content.Context,int)>
<android.view.View: int getMeasuredState()>
<android.net.http.Request: void setConnection(android.net.http.Connection)>
<com.android.internal.telephony.IccCardApplication$AppState: void <clinit>()>
<android.gesture.Instance: void normalize()>
<android.graphics.Paint: float getStrokeWidth()>
<android.inputmethodservice.InputMethodService: boolean onTrackballEvent(android.view.MotionEvent)>
<android.media.AudioService$RemoteControlStackEntry: void unlinkToRcClientDeath()>
<com.android.internal.view.BaseSurfaceHolder: android.graphics.Canvas lockCanvas(android.graphics.Rect)>
<android.view.DragEvent: int getAction()>
<android.net.wifi.p2p.WifiP2pGroup: java.util.Collection getClientList()>
<android.net.INetworkPolicyManager$Stub: android.os.IBinder asBinder()>
<android.webkit.LoadListener: void nativeError(int,java.lang.String,java.lang.String)>
<android.server.BluetoothAdapterStateMachine: void access$7100(android.server.BluetoothAdapterStateMachine,android.os.Message)>
<android.server.BluetoothHealthProfileHandler$HealthChannel: int access$1202(android.server.BluetoothHealthProfileHandler$HealthChannel,int)>
<android.text.style.QuoteSpan: int getSpanTypeId()>
<com.android.internal.telephony.ApnContext: void setDependencyMet(boolean)>
<com.android.internal.telephony.BaseCommands: void unregisterForAvailable(android.os.Handler)>
<android.net.http.Headers: java.lang.String getCacheControl()>
<android.app.NativeActivity: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>
<com.android.internal.telephony.sip.SipPhone: void setNetworkSelectionModeAutomatic(android.os.Message)>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void access$1900(com.android.server.connectivity.Tethering$TetherInterfaceSM,com.android.internal.util.IState)>
<android.webkit.CookieManager: void removeSessionCookie()>
<android.net.sip.SipProfile$Builder: void <init>(java.lang.String)>
<GenerationGG: android.renderscript.Float3 get_androidrenderscriptFloat3()>
<com.android.internal.app.AlertController$1: void <init>(com.android.internal.app.AlertController)>
<com.android.internal.statusbar.StatusBarIconList: void dump(java.io.PrintWriter)>
<android.app.ActivityManager$MemoryInfo: void <init>(android.os.Parcel,android.app.ActivityManager$1)>
<android.graphics.drawable.LevelListDrawable$LevelListState: int[] access$002(android.graphics.drawable.LevelListDrawable$LevelListState,int[])>
<android.drm.DrmManagerClient: android.drm.DrmInfoStatus _processDrmInfo(int,android.drm.DrmInfo)>
<android.media.SoundPool: int load(java.io.FileDescriptor,long,long,int)>
<android.widget.CalendarView: java.util.Calendar access$1500(android.widget.CalendarView)>
<android.app.backup.IRestoreObserver$Stub$Proxy: android.os.IBinder asBinder()>
<android.hardware.usb.UsbEndpoint$1: android.hardware.usb.UsbEndpoint createFromParcel(android.os.Parcel)>
<com.android.server.am.ActivityManagerService: void unregisterProcessObserver(android.app.IProcessObserver)>
<android.renderscript.RSTextureView: void resume()>
<Wrapper_android_content_res_ColorStateList: void test_android_content_res_ColorStateList()>
<com.android.internal.widget.LockPatternView$Cell: java.lang.String toString()>
<com.android.internal.telephony.RetryManager: void increaseRetryCount()>
<android.webkit.BrowserFrame: void nativeLoadData(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.os.StrictMode: void clearGatheredViolations()>
<android.webkit.WebSettings: boolean getNeedInitialFocus()>
<android.location.GeocoderParams: void writeToParcel(android.os.Parcel,int)>
<android.widget.RadioGroup$PassThroughHierarchyChangeListener: void <init>(android.widget.RadioGroup,android.widget.RadioGroup$1)>
<android.content.SyncStorageEngine$DayStats: void <init>(int)>
<android.text.method.MetaKeyKeyListener: int getMetaState(java.lang.CharSequence)>
<com.android.server.ConnectivityService: android.util.SparseIntArray access$500(com.android.server.ConnectivityService)>
<android.app.Instrumentation$ActivityMonitor: android.app.Activity waitForActivityWithTimeout(long)>
<android.text.style.SuggestionSpan$1: android.text.style.SuggestionSpan createFromParcel(android.os.Parcel)>
<com.android.server.sip.SipWakeupTimer$MyEventComparator: void <init>(com.android.server.sip.SipWakeupTimer$1)>
<android.test.AndroidTestRunner: void runTest(junit.framework.TestResult)>
<com.android.server.ThrottleService$InterfaceObserver: void interfaceLinkStateChanged(java.lang.String,boolean)>
<com.android.internal.telephony.OperatorInfo: void <init>(java.lang.String,java.lang.String,java.lang.String,com.android.internal.telephony.OperatorInfo$State)>
<GenerationGG: android.content.DialogInterface get_androidcontentDialogInterface()>
<android.content.pm.ApplicationInfo: void <init>(android.content.pm.ApplicationInfo)>
<android.view.MotionEvent: int getActionIndex()>
<android.widget.GridLayout$4: void <init>()>
<android.content.ClipData$1: java.lang.Object[] newArray(int)>
<android.widget.RemoteViews$SetPendingIntentTemplate: void writeToParcel(android.os.Parcel,int)>
<android.inputmethodservice.Keyboard$Row: android.inputmethodservice.Keyboard access$600(android.inputmethodservice.Keyboard$Row)>
<com.android.server.BackupManagerService$PerformInitializeTask: void <init>(com.android.server.BackupManagerService,java.util.HashSet)>
<android.view.KeyEvent: void <init>(android.os.Parcel)>
<android.util.PrintWriterPrinter: void <init>(java.io.PrintWriter)>
<android.content.pm.PackageParser$Activity: java.lang.String toString()>
<android.view.PointerIcon$1: void <init>()>
<android.os.Parcel: void readBinderList(java.util.List)>
<com.android.internal.view.menu.MenuItemImpl: boolean isActionViewExpanded()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: void unplug(long,long)>
<android.preference.PreferenceActivity$Header$1: java.lang.Object[] newArray(int)>
<com.android.internal.app.ActionBarImpl$2: void <init>(com.android.internal.app.ActionBarImpl)>
<android.appwidget.AppWidgetProviderInfo: void <init>()>
<GenerationGG: android.widget.TabHost$TabSpec get_androidwidgetTabHost__TabSpec()>
<android.net.wifi.WifiWatchdogStateMachine: boolean isWalledGardenConnection()>
<com.android.server.net.NetworkPolicyManagerService: long currentTimeMillis(boolean)>
<android.widget.TextView$InsertionHandleView: int getHotspotX(android.graphics.drawable.Drawable,boolean)>
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState: void enter()>
<android.drm.DrmManagerClient: boolean _canHandle(int,java.lang.String,java.lang.String)>
<android.content.UriMatcher: void <init>(int)>
<com.android.server.InputMethodManagerService$ImeSubtypeListAdapter: void <init>(android.content.Context,int,java.util.List,int)>
<android.net.wifi.ScanResult$1: android.net.wifi.ScanResult createFromParcel(android.os.Parcel)>
<android.widget.ArrayAdapter: java.lang.Object getItem(int)>
<android.widget.StackView$StackFrame: void setTransformAnimator(android.animation.ObjectAnimator)>
<android.view.accessibility.AccessibilityRecord: void setConnection(android.accessibilityservice.IAccessibilityServiceConnection)>
<com.android.server.pm.PackageManagerService: boolean performDexOpt(java.lang.String)>
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder setDefaultShowAsAction(int)>
<com.android.internal.app.ResolverActivity: android.widget.CheckBox access$100(com.android.internal.app.ResolverActivity)>
<android.text.SpannableStringInternal: void <clinit>()>
<com.android.server.location.GpsLocationProvider: int getPowerRequirement()>
<android.webkit.WebIconDatabase: void <init>()>
<GenerationGG: android.net.wifi.WpsInfo get_androidnetwifiWpsInfo()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$3800(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,android.os.Message)>
<com.android.internal.telephony.GsmAlphabet: com.android.internal.telephony.SmsMessageBase$TextEncodingDetails countGsmSeptets(java.lang.CharSequence,boolean)>
<com.android.server.sip.SipWakeupTimer$MyEvent: void <init>(int,java.lang.Runnable,long)>
<com.android.server.wm.InputFilter: void onInputEvent(android.view.InputEvent,int)>
<android.renderscript.RenderScript: void nScriptBindAllocation(int,int,int)>
<android.view.View: int getBaseline()>
<android.content.ContentProviderClient: boolean release()>
<android.telephony.gsm.GsmCellLocation: void setPsc(int)>
<android.graphics.PorterDuff$Mode: void <init>(java.lang.String,int,int)>
<android.webkit.CallbackProxy$3: void onCancel(android.content.DialogInterface)>
<android.webkit.LoadListener: void nativeSetResponseHeader(int,java.lang.String,java.lang.String)>
<android.widget.Scroller: float computeDeceleration(float)>
<android.text.method.DigitsKeyListener: char[] getAcceptedChars()>
<android.util.XmlPullAttributes: boolean getAttributeBooleanValue(int,boolean)>
<com.android.internal.telephony.DefaultPhoneNotifier: com.android.internal.telephony.Phone$State convertCallState(int)>
<junit.framework.TestSuite: junit.framework.Test createTest(java.lang.Class,java.lang.String)>
<com.android.server.PackageManagerBackupAgent: void parseStateFile(android.os.ParcelFileDescriptor)>
<android.util.LruCache: java.lang.Object put(java.lang.Object,java.lang.Object)>
<android.util.SparseBooleanArray: int indexOfValue(boolean)>
<android.webkit.WebView: java.lang.String nativeFocusCandidateText()>
<android.renderscript.Script: void setVar(int,android.renderscript.BaseObj)>
<android.widget.AdapterViewAnimator: int getWindowSize()>
<android.text.style.BulletSpan: int describeContents()>
<android.animation.AnimatorSet: long getStartDelay()>
<android.view.View: void offsetLeftAndRight(int)>
<com.android.internal.os.ProcessStats: int getLastSoftIrqTime()>
<com.android.internal.telephony.gsm.GsmMmiCode: boolean isErasure()>
<android.graphics.drawable.Drawable: android.graphics.Region getTransparentRegion()>
<android.app.LoaderManagerImpl: void finishRetain()>
<android.net.wifi.WifiApConfigStore: android.net.wifi.WifiConfiguration access$202(android.net.wifi.WifiConfiguration)>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.internal.util.State access$1200(com.android.server.connectivity.Tethering$TetherInterfaceSM)>
<android.widget.GridLayout: java.lang.Object[] append(java.lang.Object[],java.lang.Object[])>
<android.view.ViewRootImpl: void requestTransparentRegion(android.view.View)>
<android.filterfw.core.FinalPort: java.lang.String toString()>
<android.renderscript.RenderScript: android.renderscript.RenderScript create(android.content.Context)>
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setNumericShortcut(char)>
<android.graphics.Matrix: boolean native_postConcat(int,int)>
<android.graphics.Point: void <init>()>
<android.graphics.drawable.AnimationDrawable$AnimationState: int[] access$002(android.graphics.drawable.AnimationDrawable$AnimationState,int[])>
<android.graphics.Canvas: void native_drawCircle(int,float,float,float,int)>
<android.test.mock.MockApplication: void onTerminate()>
<com.android.server.WallpaperManagerService: int getWidthHint()>
<android.opengl.GLLogWrapper: void <init>(javax.microedition.khronos.opengles.GL,java.io.Writer,boolean)>
<android.test.mock.MockContext: void setWallpaper(java.io.InputStream)>
<java.lang.Object: float getAttributeFloatValue(int,float)>
<android.graphics.drawable.RotateDrawable: int getIntrinsicHeight()>
<android.provider.ContactsContract: boolean isProfileId(long)>
<android.gesture.Gesture: android.gesture.Gesture deserialize(java.io.DataInputStream)>
<com.android.internal.telephony.WspTypeDecoder: boolean decodeLongInteger(int)>
<android.text.style.ScaleXSpan: void writeToParcel(android.os.Parcel,int)>
<com.android.internal.telephony.ServiceStateTracker: void unregisterForPsRestrictedDisabled(android.os.Handler)>
<android.widget.TextView: boolean isSuggestionsEnabled()>
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHid: void <init>(android.bluetooth.BluetoothDeviceProfileState)>
<android.widget.CalendarView$WeekView: void drawBackground(android.graphics.Canvas)>
<android.text.method.BaseMovementMethod: boolean canSelectArbitrarily()>
<android.os.Environment: java.io.File getExternalStorageAppMediaDirectory(java.lang.String)>
<android.os.storage.StorageManager$MountServiceBinderListener: void onStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.LoadListener: void setRequestData(java.lang.String,java.util.Map,byte[])>
<android.renderscript.Element: android.renderscript.Element F64(android.renderscript.RenderScript)>
<android.graphics.Paint: android.graphics.Xfermode getXfermode()>
<Wrapper_android_provider_AlarmClock: void test_android_provider_AlarmClock()>
<android.net.LocalSocketImpl: void connectLocal(java.io.FileDescriptor,java.lang.String,int)>
<com.android.server.am.UsageStatsService: boolean scanArgs(java.lang.String[],java.lang.String)>
<com.android.internal.util.FastXmlSerializer: void escapeAndAppendString(java.lang.String)>
<android.content.ContextWrapper: java.lang.String getPackageName()>
<android.net.wifi.NetworkUpdateResult: void <init>(int)>
<android.preference.MultiSelectListPreference: boolean access$076(android.preference.MultiSelectListPreference,int)>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: void incWakeupsLocked()>
<android.os.PatternMatcher$1: void <init>()>
<android.net.NetworkIdentity: int hashCode()>
<com.android.server.am.UsageStatsService: java.lang.String scanArgsData(java.lang.String[],java.lang.String)>
<android.view.Surface: void <init>(android.os.Parcel,android.view.Surface$1)>
<com.android.server.WifiService$WifiLock: java.lang.String toString()>
<GenerationGG: android.drm.DrmRights get_androiddrmDrmRights()>
<android.renderscript.RenderScript: void contextDump()>
<android.renderscript.RenderScript: void rsnContextResume(int)>
<android.media.ToneGenerator: void <init>(int,int)>
<java.lang.Object: android.view.SubMenu addSubMenu(int,int,int,int)>
<com.android.server.IntentResolver$1: void <init>()>
<GenerationGG: android.content.pm.PackageStats get_androidcontentpmPackageStats()>
<android.security.IKeyChainService$Stub: android.security.IKeyChainService asInterface(android.os.IBinder)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void setVariablePadding(boolean)>
<android.content.res.AssetFileDescriptor$1: void <init>()>
<android.widget.TableLayout$PassThroughHierarchyChangeListener: void <init>(android.widget.TableLayout)>
<android.hardware.usb.UsbInterface: int getInterfaceClass()>
<android.content.SyncManager$7: void <init>(android.content.SyncManager)>
<android.graphics.drawable.LevelListDrawable$LevelListState: void growArray(int,int)>
<com.android.internal.util.StateMachine$SmHandler: void deferMessage(android.os.Message)>
<android.app.Activity: java.lang.String getLocalClassName()>
<android.test.AndroidTestRunner: junit.framework.TestResult createTestResult()>
<android.view.KeyEvent: void <init>(long,long,int,int,int)>
<android.os.Build: java.lang.String getString(java.lang.String)>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: void makeCall(android.net.sip.SipProfile,java.lang.String,int)>
<android.widget.ScrollView: float getTopFadingEdgeStrength()>
<com.android.server.am.ActivityManagerService: android.content.ComponentName getActivityClassForToken(android.os.IBinder)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setListener(android.animation.Animator$AnimatorListener)>
<android.view.ViewTreeObserver$InternalInsetsInfo: boolean equals(java.lang.Object)>
<android.graphics.Matrix: void setSkew(float,float)>
<com.android.internal.net.NetworkStatsFactory: int getParsedInt(java.util.HashMap,java.lang.String)>
<android.widget.ImageView: android.widget.ImageView$ScaleType getScaleType()>
<android.preference.RingtonePreference: int getRingtoneType()>
<android.net.LinkProperties: java.lang.String toString()>
<com.android.server.am.ActivityRecord: void removeUriPermissionsLocked()>
<android.webkit.WebViewWorker$CacheData: void <init>()>
<GenerationGG: android.graphics.BitmapShader get_androidgraphicsBitmapShader()>
<android.text.SpannableStringBuilder: void setFilters(android.text.InputFilter[])>
<android.database.sqlite.SQLiteDatabase: boolean amIInTransaction()>
<android.view.AbsSavedState: int describeContents()>
<android.view.GLES20Canvas: void drawPoints(float[],android.graphics.Paint)>
<android.util.XmlPullAttributes: boolean getAttributeBooleanValue(java.lang.String,java.lang.String,boolean)>
<android.view.FocusFinder: android.view.FocusFinder getInstance()>
<android.net.wifi.WifiStateMachine: void saveNetwork(android.net.wifi.WifiConfiguration)>
<android.view.View: int getSuggestedMinimumHeight()>
<android.content.BroadcastReceiver: android.content.BroadcastReceiver$PendingResult getPendingResult()>
<android.net.http.HttpsConnection: void closeConnection()>
<android.net.wifi.p2p.WifiP2pDeviceList: void <clinit>()>
<Wrapper_android_graphics_YuvImage: void test_android_graphics_YuvImage()>
<GenerationGG: android.widget.ZoomButtonsController$OnZoomListener get_androidwidgetZoomButtonsController__OnZoomListener()>
<com.android.server.WifiService: int access$3300(com.android.server.WifiService)>
<android.content.res.CompatibilityInfo: void writeToParcel(android.os.Parcel,int)>
<android.util.XmlPullAttributes: int getAttributeUnsignedIntValue(int,int)>
<android.webkit.URLUtil: boolean isAssetUrl(java.lang.String)>
<android.util.JsonWriter: android.util.JsonWriter endObject()>
<com.android.internal.telephony.DataConnectionTracker: boolean getAnyDataEnabled()>
<GenerationGG: java.net.Socket get_javanetSocket()>
<android.text.method.BaseMovementMethod: void onTakeFocus(android.widget.TextView,android.text.Spannable,int)>
<android.app.ContextImpl$22: void <init>()>
<com.android.internal.util.StateMachine: void halting()>
<android.content.res.AssetManager: int openXmlAssetNative(int,java.lang.String)>
<android.animation.AnimatorInflater: void <init>()>
<android.text.Layout$Alignment: android.text.Layout$Alignment[] values()>
<android.content.ComponentName: java.lang.String flattenToShortString()>
<android.app.ActivityManager$RunningTaskInfo: void <init>()>
<android.content.pm.ActivityInfo: void dump(android.util.Printer,java.lang.String)>
<android.content.SyncResult: boolean hasError()>
<Wrapper_android_net_wifi_WifiInfo: void test_android_net_wifi_WifiInfo()>
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(byte[],int,int,boolean)>
<android.view.View$MeasureSpec: int getSize(int)>
<android.net.wifi.WifiStateMachine$DriverFailedState: void <init>(android.net.wifi.WifiStateMachine)>
<Wrapper_android_graphics_drawable_shapes_ArcShape: void test_android_graphics_drawable_shapes_ArcShape()>
<android.net.http.RequestQueue: android.net.http.RequestHandle queueRequest(java.lang.String,android.net.WebAddress,java.lang.String,java.util.Map,android.net.http.EventHandler,java.io.InputStream,int)>
<android.os.WorkSource: int get(int)>
<GenerationGG: android.os.storage.StorageManager get_androidosstorageStorageManager()>
<com.android.server.ProcessMap: java.lang.Object get(java.lang.String,int)>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: java.lang.String trimWhitespace(java.lang.String)>
<android.widget.RemoteViews: void setImageViewResource(int,int)>
<android.widget.AbsListView: boolean isFastScrollEnabled()>
<android.view.View: android.view.inputmethod.InputConnection onCreateInputConnection(android.view.inputmethod.EditorInfo)>
<android.content.res.AssetManager: void access$400(android.content.res.AssetManager,int)>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: void detach()>
<com.android.internal.util.AsyncChannel$SyncMessenger: com.android.internal.util.AsyncChannel$SyncMessenger obtain()>
<android.drm.DrmManagerClient: java.lang.String[] getAvailableDrmEngines()>
<com.android.internal.app.ActionBarImpl: int getTabCount()>
<android.util.SparseArray: int keyAt(int)>
<android.net.NetworkStatsHistory$1: java.lang.Object[] newArray(int)>
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: java.util.List queryIntentForPackage(android.content.Intent,java.lang.String,int,java.util.ArrayList)>
<android.webkit.HTML5VideoFullScreen: boolean fullScreenExited()>
<android.app.Dialog: android.app.ActionBar getActionBar()>
<android.view.View: void setOverScrollMode(int)>
<android.net.DummyDataStateTracker: android.net.LinkProperties getLinkProperties()>
<android.widget.RemoteViews: int describeContents()>
<android.view.View: void invalidateParentCaches()>
<com.android.internal.content.PackageMonitor: void onPackageUpdateFinished(java.lang.String,int)>
<DumbClass: void DumbMethod3()>
<android.widget.NumberPicker: int getWrappedSelectorIndex(int)>
<com.android.server.NotificationManagerService: com.android.server.NotificationPlayer access$300(com.android.server.NotificationManagerService)>
<android.net.NetworkTemplate$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.widget.TextView: int getTotalPaddingBottom()>
<android.widget.ActivityChooserModel$HistoryPersister: void <init>(android.widget.ActivityChooserModel,android.widget.ActivityChooserModel$1)>
<com.android.internal.telephony.GsmAlphabet: void packSmsChar(byte[],int,int)>
<com.android.internal.widget.ActionBarView: int access$1200(com.android.internal.widget.ActionBarView)>
<android.os.RemoteCallback$1: java.lang.Object[] newArray(int)>
<android.net.wifi.WifiStateMachine: void access$11000(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.security.KeyChain: java.security.PrivateKey toPrivateKey(byte[])>
<android.filterfw.core.SimpleFrame: void releaseNativeAllocation()>
<android.content.ClipboardManager$1: void dispatchPrimaryClipChanged()>
<com.android.internal.app.ActionBarImpl$TabImpl: int getPosition()>
<android.os.Debug: int setAllocationLimit(int)>
<android.widget.AutoCompleteTextView$DropDownItemClickListener: void <init>(android.widget.AutoCompleteTextView,android.widget.AutoCompleteTextView$1)>
<android.widget.GridLayout: android.widget.GridLayout$Spec spec(int)>
<android.view.View: boolean isOpaque()>
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv getServiceStatsLocked(java.lang.String,java.lang.String)>
<android.view.PointerIcon: void <clinit>()>
<com.android.server.am.UriPermissionOwner$ExternalToken: void <init>(com.android.server.am.UriPermissionOwner)>
<android.view.textservice.SuggestionsInfo$1: android.view.textservice.SuggestionsInfo createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Call getRingingCall()>
<android.view.View$BaseSavedState: void <init>(android.os.Parcelable)>
<com.android.internal.telephony.gsm.SIMRecords: boolean isOnMatchingPlmn(java.lang.String)>
<android.security.IKeyChainService$Stub$Proxy: void <init>(android.os.IBinder)>
<GenerationGG: android.renderscript.Double2 get_androidrenderscriptDouble2()>
<android.graphics.Bitmap$1: void <init>()>
<com.android.server.sip.SipService: java.lang.String access$200(com.android.server.sip.SipService)>
<android.view.GestureDetector: void setIsLongpressEnabled(boolean)>
<android.preference.MultiSelectListPreference: void onPrepareDialogBuilder(android.app.AlertDialog$Builder)>
<android.widget.FrameLayout: void onSizeChanged(int,int,int,int)>
<android.graphics.Paint$FontMetricsInt: java.lang.String toString()>
<android.app.FragmentManagerImpl: void checkStateLoss()>
<android.provider.Settings$System: boolean hasInterestingConfigurationChanges(int)>
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimImpiLoaded: java.lang.String getEfName()>
<android.os.Message$1: void <init>()>
<android.test.suitebuilder.TestSuiteBuilder: void addSuiteIfNecessary(java.lang.String)>
<android.content.res.AssetManager: java.lang.String[] getResourceStringArray(int)>
<android.os.IPowerManager$Stub$Proxy: void <init>(android.os.IBinder)>
<android.drm.DrmManagerClient: int access$300(android.drm.DrmManagerClient,int)>
<android.util.JsonReader: android.util.JsonToken decodeNumber(char[],int,int)>
<Wrapper_android_text_style_RelativeSizeSpan: void test_android_text_style_RelativeSizeSpan()>
<android.view.MotionEvent: int getEdgeFlags()>
<android.widget.AdapterViewAnimator: int getDisplayedChild()>
<android.view.KeyEvent: int getAction()>
<GenerationGG: android.test.suitebuilder.annotation.LargeTest get_androidtestsuitebuilderannotationLargeTest()>
<com.android.internal.telephony.cdma.sms.BearerData: void decodeIs91(com.android.internal.telephony.cdma.sms.BearerData)>
<GenerationGG: java.lang.Throwable get_javalangThrowable()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getAllButNulAndAngleBracketsLegal()>
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getAddress()>
<android.renderscript.FieldPacker: void addU16(int)>
<com.android.internal.telephony.sip.SipCommandInterface: void setNetworkSelectionModeManual(java.lang.String,android.os.Message)>
<android.view.ScaleGestureDetector: void reset()>
<android.server.BluetoothService$RemoteService: boolean equals(java.lang.Object)>
<android.view.InputEvent: int describeContents()>
<junit.framework.TestCase: void assertEquals(java.lang.String,java.lang.String)>
<android.widget.TimePicker: void <clinit>()>
<android.app.ActivityManager$ProcessErrorStateInfo$1: android.app.ActivityManager$ProcessErrorStateInfo createFromParcel(android.os.Parcel)>
<android.app.ContextImpl$20: void <init>()>
<android.accessibilityservice.AccessibilityService$IEventListenerWrapper: void setConnection(android.accessibilityservice.IAccessibilityServiceConnection)>
<com.android.server.pm.PackageManagerService: boolean removeUser(int)>
<android.webkit.WebView: android.graphics.Rect nativeSubtractLayers(android.graphics.Rect)>
<android.database.sqlite.SQLiteFullException: void <init>(java.lang.String)>
<com.android.internal.telephony.gsm.SIMRecords: boolean getVoiceCallForwardingFlag()>
<android.webkit.WebChromeClient: void <init>()>
<com.android.server.pm.PackageManagerService: void access$600(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$InstallArgs,int)>
<android.database.sqlite.SQLiteDirectCursorDriver: void cursorRequeried(android.database.Cursor)>
<android.graphics.Paint: float descent()>
<android.media.RemoteControlClient: java.lang.Object access$600(android.media.RemoteControlClient)>
<android.text.style.MetricAffectingSpan: android.text.style.MetricAffectingSpan getUnderlying()>
<android.media.AudioService$AudioFocusDeathHandler: void <init>(android.media.AudioService,android.os.IBinder)>
<android.media.JetPlayer: boolean native_setMuteFlags(int,boolean)>
<android.net.sip.SipSession$Listener: void onRegistrationFailed(android.net.sip.SipSession,int,java.lang.String)>
<com.android.internal.view.menu.ActionMenuItem: int getOrder()>
<android.net.wifi.WifiStateMachine: int access$13500(android.net.wifi.WifiStateMachine)>
<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>
<android.webkit.WebViewCore$EventHub: void access$7800(android.webkit.WebViewCore$EventHub,int)>
<android.net.sip.SipSession$1: void onRegistering(android.net.sip.ISipSession)>
<android.media.MediaPlayer: android.media.MediaPlayer$OnInfoListener access$800(android.media.MediaPlayer)>
<android.widget.TextView: android.widget.TextView$PositionListener getPositionListener()>
<android.view.accessibility.AccessibilityRecord: int getItemCount()>
<android.content.SyncResult$1: java.lang.Object[] newArray(int)>
<android.view.View$CheckForTap: void <init>(android.view.View)>
<android.bluetooth.BluetoothDeviceProfileState: android.os.PowerManager$WakeLock access$1100(android.bluetooth.BluetoothDeviceProfileState)>
<android.text.TextUtils: boolean isGraphic(char)>
<android.view.accessibility.IAccessibilityManager$Stub: android.os.IBinder asBinder()>
<com.android.internal.telephony.sip.SipPhone$SipConnection: java.lang.String getAddress()>
<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.Drawable mutate()>
<android.app.ActivityManager$RecentTaskInfo$1: void <init>()>
<android.server.BluetoothService: boolean setAuthorizationNative(java.lang.String,boolean,int)>
<android.app.LoadedApk$WarningContextClassLoader: java.lang.Class loadClass(java.lang.String)>
<com.android.internal.os.BatteryStatsImpl$Uid$Wakelock: com.android.internal.os.BatteryStatsImpl$StopwatchTimer readTimerFromParcel(int,java.util.ArrayList,java.util.ArrayList,android.os.Parcel)>
<android.text.method.MetaKeyKeyListener: long clearMetaKeyState(long,int)>
<android.widget.SimpleExpandableListAdapter: android.view.View newChildView(boolean,android.view.ViewGroup)>
<android.app.SearchableInfo: int getVoiceLanguageModeId()>
<android.service.wallpaper.IWallpaperEngine$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.server.StatusBarManagerService$7: void <init>(com.android.server.StatusBarManagerService)>
<android.app.ListFragment$2: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
<android.graphics.drawable.shapes.ArcShape: void <init>(float,float)>
<android.os.Parcel: void writeNoException()>
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getFromServiceId()>
<android.net.RouteInfo: boolean isHostRoute()>
<com.android.server.sip.SipService: boolean isCallerRadio()>
<com.android.server.am.ActivityManagerService: void bumpServiceExecutingLocked(com.android.server.am.ServiceRecord,java.lang.String)>
<android.widget.AdapterView: void addView(android.view.View,int)>
<android.util.LruCache: int missCount()>
<com.android.internal.telephony.cat.CommandParamsFactory: void <init>(com.android.internal.telephony.cat.RilMessageDecoder,com.android.internal.telephony.IccFileHandler)>
<GenerationGG: android.view.WindowManager$LayoutParams get_androidviewWindowManager__LayoutParams()>
<android.widget.MediaController: android.os.Handler access$900(android.widget.MediaController)>
<android.telephony.ServiceState: void setStateOutOfService()>
<android.widget.TextView: int getCompoundPaddingLeft()>
<android.view.InputChannel$1: android.view.InputChannel[] newArray(int)>
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void <init>(com.android.internal.telephony.cat.RilMessageDecoder,com.android.internal.telephony.cat.RilMessageDecoder$1)>
<com.android.server.PowerManagerService: void access$1500(com.android.server.PowerManagerService,int)>
<android.test.mock.MockResources: java.lang.String getQuantityString(int,int)>
<android.widget.ExpandableListConnector$MyDataSetObserver: void <init>(android.widget.ExpandableListConnector)>
<android.media.JetPlayer: boolean native_setup(java.lang.Object,int,int)>
<android.nfc.TechListParcel$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.app.LoadedApk$ServiceDispatcher: void validate(android.content.Context,android.os.Handler)>
<android.speech.tts.TextToSpeechService$1: java.lang.String[] getLanguage()>
<android.net.wifi.WifiStateMachine: boolean access$200(android.net.wifi.WifiStateMachine)>
<android.widget.ExpandableListView: long getPackedPositionForChild(int,int)>
<android.database.DatabaseUtils: java.lang.String getCollationKey(java.lang.String)>
<java.lang.Object: short getShort(int)>
<android.content.pm.Signature: char[] toChars(char[],int[])>
<com.android.server.connectivity.Tethering: int access$4500(com.android.server.connectivity.Tethering)>
<android.telephony.PhoneNumberUtils: boolean matchTrunkPrefix(java.lang.String,int)>
<android.view.KeyCharacterMap: boolean isPrintingKey(int)>
<android.graphics.Canvas: void setDrawFilter(android.graphics.DrawFilter)>
<android.graphics.Canvas: boolean isOpaque()>
<android.telephony.PhoneNumberFormattingTextWatcher: void onTextChanged(java.lang.CharSequence,int,int,int)>
<android.app.Fragment$SavedState$1: java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader)>
<android.database.CursorWrapper: void <init>(android.database.Cursor)>
<android.util.TypedValue: float applyDimension(int,float,android.util.DisplayMetrics)>
<android.net.wifi.WifiWatchdogStateMachine: void loge(java.lang.String)>
<com.android.internal.view.InputConnectionWrapper$InputContextCallback: void <clinit>()>
<android.speech.tts.TextToSpeech: android.os.Bundle access$700(android.speech.tts.TextToSpeech)>
<android.widget.TextView: int getLastTapPosition()>
<android.media.RingtoneManager: void <init>(android.content.Context)>
<android.app.NativeActivity: void onSurfaceRedrawNeededNative(int,android.view.Surface)>
<android.view.View: int getLeftPaddingOffset()>
<android.text.format.Time: boolean nativeParse(java.lang.String)>
<android.media.MediaPlayer: void _release()>
<android.server.BluetoothInputProfileHandler: java.util.List getInputDevicesMatchingConnectionStates(int[])>
<GenerationGG: android.media.MediaMetadataRetriever get_androidmediaMediaMetadataRetriever()>
<android.view.Surface: android.graphics.Canvas lockCanvasNative(android.graphics.Rect)>
<android.animation.AnimatorListenerAdapter: void onAnimationEnd(android.animation.Animator)>
<android.view.MotionEvent: void writeToParcel(android.os.Parcel,int)>
<android.app.LoaderManagerImpl: void doStop()>
<android.media.RemoteControlClient: android.media.RemoteControlClient$EventHandler access$1300(android.media.RemoteControlClient)>
<android.animation.LayoutTransition: boolean isChangingLayout()>
<android.text.method.MetaKeyKeyListener: int getMetaState(long)>
<GenerationGG: android.text.AutoText get_androidtextAutoText()>
<android.app.backup.RestoreSession$RestoreObserverWrapper: void restoreSetsAvailable(android.app.backup.RestoreSet[])>
<com.android.internal.telephony.cat.PresentationType: com.android.internal.telephony.cat.PresentationType[] values()>
<android.content.ClipDescription: java.lang.String[] filterMimeTypes(java.lang.String)>
<android.widget.PopupMenu: void setOnMenuItemClickListener(android.widget.PopupMenu$OnMenuItemClickListener)>
<android.net.SSLSessionCache: void <init>(android.content.Context)>
<android.content.pm.PathPermission: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.ServiceInfo: void <clinit>()>
<android.view.accessibility.AccessibilityRecord: void setClassName(java.lang.CharSequence)>
<com.android.server.connectivity.Tethering$TetherMasterSM: java.util.ArrayList access$4700(com.android.server.connectivity.Tethering$TetherMasterSM)>
<com.android.internal.telephony.cat.LaunchBrowserMode: void <init>(java.lang.String,int)>
<android.app.backup.RestoreSet: void writeToParcel(android.os.Parcel,int)>
<android.app.ApplicationThreadProxy: void <init>(android.os.IBinder)>
<android.widget.AbsListView$AdapterDataSetObserver: void <init>(android.widget.AbsListView)>
<android.view.GLES20Canvas: void nDrawLines(int,float[],int,int,int)>
<com.android.internal.telephony.PhoneProxy: android.telephony.CellLocation getCellLocation()>
<android.content.pm.FeatureInfo: java.lang.String getGlEsVersion()>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int,int)>
<android.widget.ExpandableListView: void setOnGroupCollapseListener(android.widget.ExpandableListView$OnGroupCollapseListener)>
<android.view.GLES20TextureLayer: void end(android.graphics.Canvas)>
<android.view.View: float getTopFadingEdgeStrength()>
<android.view.VelocityTracker$1: void onAcquired(android.util.Poolable)>
<com.android.server.pm.SharedUserSetting: void <init>(java.lang.String,int)>
<android.os.HandlerThread: boolean quit()>
<android.net.Uri$HierarchicalUri: java.lang.String getFragment()>
<android.graphics.Bitmap: boolean nativeHasAlpha(int)>
<android.net.NetworkTemplate: android.net.NetworkTemplate buildTemplateWifi()>
<android.widget.RemoteViews: android.widget.RemoteViews clone()>
<android.graphics.Bitmap: android.graphics.Bitmap copy(android.graphics.Bitmap$Config,boolean)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$5: void onClick(android.content.DialogInterface,int)>
<android.location.LocationManager$GpsStatusListenerTransport$1: void <init>(android.location.LocationManager$GpsStatusListenerTransport)>
<android.webkit.LoadListener: void handleSslErrorResponse(boolean)>
<android.widget.Chronometer: boolean access$000(android.widget.Chronometer)>
<android.net.wifi.WifiStateMachine: android.net.wifi.ScanResult parseScanResult(java.lang.String)>
<android.os.Bundle: java.lang.String toString()>
<android.widget.AutoCompleteTextView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<android.media.AudioSystem: boolean isMicrophoneMuted()>
<android.view.animation.AnimationSet: boolean getTransformation(long,android.view.animation.Transformation)>
<android.net.rtp.AudioGroup: void <clinit>()>
<android.media.SoundPool: int _load(java.io.FileDescriptor,long,long,int)>
<android.widget.TextView: void setScroller(android.widget.Scroller)>
<GenerationGG: android.app.ActivityManager get_androidappActivityManager()>
<android.app.backup.BackupAgent: void onCreate()>
<android.telephony.gsm.SmsMessage: int[] calculateLength(java.lang.CharSequence,boolean)>
<android.app.FragmentManagerState$1: void <init>()>
<android.net.http.Headers: void setLocation(java.lang.String)>
<GenerationGG: android.content.IntentFilter[] get_androidcontentIntentFilter_ARRAY_()>
<android.webkit.WebChromeClient: boolean onConsoleMessage(android.webkit.ConsoleMessage)>
<android.widget.RadioGroup: void access$600(android.widget.RadioGroup,int)>
<android.telephony.SignalStrength: void <init>(int,int,int,int,int,int,int,boolean)>
<android.content.pm.Signature: int hashCode()>
<android.app.ApplicationPackageManager: void putCachedIcon(android.app.ApplicationPackageManager$ResourceName,android.graphics.drawable.Drawable)>
<android.webkit.ZoomManager: boolean access$1002(android.webkit.ZoomManager,boolean)>
<android.net.Uri$StringUri: java.lang.String getScheme()>
<android.webkit.WebViewWorker: android.webkit.WebViewWorker getHandler()>
<android.text.style.ScaleXSpan: int describeContents()>
<android.content.pm.PackageItemInfo: android.content.pm.ApplicationInfo getApplicationInfo()>
<android.net.http.Headers: int getConnectionType()>
<android.renderscript.FieldPacker: void addI8(android.renderscript.Byte4)>
<android.drm.DrmSupportInfo: java.lang.String getDescriprition()>
<android.hardware.SensorManager: float getAltitude(float,float)>
<android.opengl.GLSurfaceView: void setDebugFlags(int)>
<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection: boolean isConnected()>
<android.opengl.GLSurfaceView: void onPause()>
<android.widget.TextView$HandleView: boolean isShowing()>
<android.widget.RelativeLayout: void centerVertical(android.view.View,android.widget.RelativeLayout$LayoutParams,int)>
<android.view.GLES20Canvas: void nDrawPoints(int,float[],int,int,int)>
<android.os.ParcelFileDescriptor: void createPipeNative(java.io.FileDescriptor[])>
<com.android.server.AlarmManagerService$FilterStats: void <init>(com.android.server.AlarmManagerService$1)>
<android.hardware.usb.UsbEndpoint: int getType()>
<android.media.AudioRecord: int native_setup(java.lang.Object,int,int,int,int,int,int[])>
<GenerationGG: android.content.pm.ProviderInfo get_androidcontentpmProviderInfo()>
<android.app.LauncherActivity$ActivityAdapter: java.util.ArrayList access$102(android.app.LauncherActivity$ActivityAdapter,java.util.ArrayList)>
<android.test.mock.MockCursor: short getShort(int)>
<android.view.animation.AnimationSet: java.lang.Object clone()>
<android.graphics.Region$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.view.KeyEvent: boolean native_isSystemKey(int)>
<android.mtp.MtpObjectInfo: int getThumbFormat()>
<android.view.View: boolean isHorizontalScrollBarEnabled()>
<junit.runner.BaseTestRunner: java.lang.String elapsedTimeAsString(long)>
<android.database.sqlite.SQLiteQueryBuilder: void setStrict(boolean)>
<android.telephony.SmsManager: android.telephony.SmsManager getDefault()>
<Wrapper_android_database_sqlite_SQLiteException: void test_android_database_sqlite_SQLiteException()>
<android.bluetooth.BluetoothDeviceProfileState$2: void onServiceDisconnected(int)>
<android.bluetooth.BluetoothHealth: boolean checkAppParam(java.lang.String,int,int,android.bluetooth.BluetoothHealthCallback)>
<android.renderscript.Allocation: void generateMipmaps()>
<android.view.InputChannel: android.view.InputChannel[] nativeOpenInputChannelPair(java.lang.String)>
<com.android.server.pm.PackageManagerService: com.android.server.pm.BasePermission checkPermissionTreeLP(java.lang.String)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(android.util.Property,int[])>
<android.content.ContentProvider$Transport: java.lang.String getType(android.net.Uri)>
<android.webkit.WebSettings: void setAppCacheEnabled(boolean)>
<android.widget.ViewFlipper: void setFlipInterval(int)>
<com.android.internal.telephony.cat.Tone$1: void <init>()>
<android.widget.TextView: void setEms(int)>
<android.content.SyncManager: void sendCheckAlarmsMessage()>
<android.hardware.usb.UsbDevice: android.hardware.usb.UsbInterface getInterface(int)>
<android.text.Layout: int getLineForOffset(int)>
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.ApnSetting getApnSetting()>
<android.test.suitebuilder.TestSuiteBuilder$FailedToCreateTests: void <init>(java.lang.Exception)>
<android.speech.tts.SynthesisMessageParams: void <init>(int,int,int,int,float,float,android.speech.tts.TextToSpeechService$UtteranceCompletedDispatcher,java.lang.String,android.speech.tts.EventLogger)>
<com.android.internal.view.menu.MenuItemImpl: boolean isEnabled()>
<android.widget.AdapterView$SelectionNotifier: void <init>(android.widget.AdapterView,android.widget.AdapterView$1)>
<com.android.server.AttributeCache: void updateConfiguration(android.content.res.Configuration)>
<com.android.internal.telephony.RIL: void setPhoneType(int)>
<android.graphics.Matrix: void reset()>
<android.text.method.TimeKeyListener: char[] getAcceptedChars()>
<android.graphics.Paint: int native_getTextRunCursor(int,char[],int,int,int,int,int)>
<com.android.server.pm.PackageSignatures: void assignSignatures(android.content.pm.Signature[])>
<android.webkit.ZoomManager$FocusMovementQueue: float getSum()>
<com.android.server.pm.PackageManagerService: int[] appendInt(int[],int)>
<com.android.internal.telephony.cdma.RuimRecords: void loge(java.lang.String)>
<android.widget.AbsSeekBar: void onStartTrackingTouch()>
<android.opengl.GLES11: void glPointSizePointerOES(int,int,java.nio.Buffer)>
<android.speech.tts.TextToSpeechService$SynthesisToFileSpeechItem: boolean checkFile(java.io.File)>
<GenerationGG: android.widget.SlidingDrawer$OnDrawerOpenListener get_androidwidgetSlidingDrawer__OnDrawerOpenListener()>
<android.drm.DrmStore: void <init>()>
<android.media.audiofx.Visualizer: void native_finalize()>
<android.os.WorkSource: int describeContents()>
<com.android.internal.content.PackageMonitor: void onSomePackagesChanged()>
<android.widget.GridLayout$Axis: void invalidateValues()>
<android.webkit.WebSettings: int getDefaultFontSize()>
<Wrapper_android_database_CharArrayBuffer: void test_android_database_CharArrayBuffer()>
<android.net.http.RequestQueue$SyncFeeder: android.net.http.Request getRequest(org.apache.http.HttpHost)>
<GenerationGG: android.os.DropBoxManager get_androidosDropBoxManager()>
<com.android.internal.os.BatteryStatsImpl: long getAwakeTimePlugged()>
<android.widget.ScrollView: void requestDisallowInterceptTouchEvent(boolean)>
<android.text.method.DigitsKeyListener: int getInputType()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState access$4300(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<GenerationGG: android.content.IntentFilter get_androidcontentIntentFilter()>
<android.view.Gravity: void applyDisplay(int,android.graphics.Rect,android.graphics.Rect)>
<android.widget.CalendarView: int access$2300(android.widget.CalendarView)>
<android.text.method.NumberKeyListener: void <init>()>
<com.android.server.BackupManagerService$PerformFullRestoreTask$RestoreInstallObserver: void packageInstalled(java.lang.String,int)>
<com.android.server.usb.UsbSettingsManager: void setAccessoryPackage(android.hardware.usb.UsbAccessory,java.lang.String)>
<com.android.server.am.TransferPipe: void <init>()>
<android.view.textservice.SpellCheckerInfo: int describeContents()>
<com.android.server.sip.SipService: android.os.Looper createLooper()>
<android.widget.TableLayout: void requestRowsLayout()>
<android.content.BroadcastReceiver: void setOrderedHint(boolean)>
<com.android.internal.telephony.ServiceStateTracker: void registerForDataConnectionDetached(android.os.Handler,int,java.lang.Object)>
<com.android.server.usb.UsbSettingsManager$DeviceFilter: boolean equals(java.lang.Object)>
<android.text.TextDirectionHeuristics$TextDirectionHeuristicInternal: void <init>(android.text.TextDirectionHeuristics$TextDirectionAlgorithm,boolean)>
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.server.usb.UsbSettingsManager$DeviceFilter: boolean matches(android.hardware.usb.UsbDevice)>
<android.view.HardwareRenderer: void trimMemory(int)>
<android.webkit.CallbackProxy: boolean canShowAlertDialog()>
<android.gesture.GestureUtils: android.gesture.OrientedBoundingBox computeOrientedBoundingBox(float[],float[])>
<android.view.animation.AnimationUtils: long currentAnimationTimeMillis()>
<android.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: void <init>(android.widget.ShareActionProvider,android.widget.ShareActionProvider$1)>
<GenerationGG: android.gesture.GestureUtils get_androidgestureGestureUtils()>
<com.android.internal.view.menu.MenuBuilder: android.view.MenuItem getItem(int)>
<android.app.Application: void unregisterComponentCallbacks(android.content.ComponentCallbacks)>
<android.content.ContentProviderResult$1: java.lang.Object[] newArray(int)>
<android.media.CameraProfile: void <clinit>()>
<android.database.sqlite.SQLiteTableLockedException: void <init>()>
<android.preference.ListPreference: void setEntries(java.lang.CharSequence[])>
<android.graphics.Path: void native_rewind(int)>
<android.webkit.WebStorage: void nativeDeleteAllData()>
<com.android.internal.telephony.gsm.GsmMmiCode: void <init>(com.android.internal.telephony.gsm.GSMPhone)>
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void setState(com.android.internal.telephony.DataConnectionTracker$State)>
<android.os.UEventObserver: void finalize()>
<android.content.res.CompatibilityInfo$Translator: android.graphics.Region getTranslatedTouchableArea(android.graphics.Region)>
<DumbClass: void DumbMethod64()>
<android.graphics.drawable.DrawableContainer: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<android.util.StringBuilderPrinter: void <init>(java.lang.StringBuilder)>
<com.android.i18n.phonenumbers.PhoneNumberMatch: java.lang.String toString()>
<android.view.View: void dispatchSetSelected(boolean)>
<android.media.AudioRecord: int getNotificationMarkerPosition()>
<com.android.server.location.MockProvider: java.lang.String getName()>
<android.os.MemoryFile: void native_munmap(int,int)>
<android.view.View: java.lang.CharSequence getContentDescription()>
<android.webkit.WebSettings: void setPluginState(android.webkit.WebSettings$PluginState)>
<android.database.sqlite.SQLiteQueryBuilder: void setProjectionMap(java.util.Map)>
<com.android.server.accessibility.TouchExplorer$PointerTracker: void handleInjectedPointerUp(int,android.view.MotionEvent)>
<android.view.DragEvent: boolean getResult()>
<android.net.Uri$StringUri: java.lang.String parseScheme()>
<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipProfile access$800(com.android.internal.telephony.sip.SipPhone$SipConnection)>
<android.renderscript.Font$FontFamily: void <init>()>
<android.view.ViewRootImpl: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>
<android.renderscript.RenderScript: int nContextCreateGL(int,int,int,int,int,int,int,int,int,int,int,int,int,float,int)>
<android.os.Message$1: java.lang.Object[] newArray(int)>
<android.net.wifi.WifiStateMachine: void requestCmWakeLock()>
<android.gesture.GestureOverlayView: java.util.ArrayList getCurrentStroke()>
<android.hardware.SensorManager: int getLegacySensorType(int)>
<android.webkit.WebStorage$Origin: java.lang.String getOrigin()>
<android.content.res.AssetManager: boolean isUpToDate()>
<android.content.pm.PathPermission: void <clinit>()>
<com.android.server.am.ActivityManagerService: java.util.ArrayList collectProcesses(java.io.PrintWriter,int,java.lang.String[])>
<com.android.server.wm.Session: void getDisplayFrame(android.view.IWindow,android.graphics.Rect)>
<GenerationGG: android.view.Display get_androidviewDisplay()>
<com.android.server.location.GpsLocationProvider: boolean supportsAltitude()>
<android.widget.LinearLayout: void setShowDividers(int)>
<GenerationGG: android.content.pm.ApplicationInfo get_androidcontentpmApplicationInfo()>
<android.telephony.SmsMessage: android.telephony.SmsMessage$MessageClass getMessageClass()>
<android.app.Activity: boolean isChangingConfigurations()>
<android.view.accessibility.AccessibilityNodeInfo: void setFocused(boolean)>
<android.view.View: boolean dispatchUnhandledMove(android.view.View,int)>
<java.lang.Object: void registerContentObserver(android.database.ContentObserver)>
<android.telephony.cdma.CdmaCellLocation: void setCellLocationData(int,int,int)>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,int)>
<android.app.backup.FileBackupHelperBase: boolean writeFile(java.io.File,android.app.backup.BackupDataInputStream)>
<android.net.ProxyProperties: java.lang.String toString()>
<android.preference.DialogPreference$SavedState: void <init>(android.os.Parcelable)>
<android.graphics.drawable.LevelListDrawable$LevelListState: int[] access$102(android.graphics.drawable.LevelListDrawable$LevelListState,int[])>
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord findAppProcess(android.os.IBinder,java.lang.String)>
<android.graphics.Matrix: void setSinCos(float,float,float,float)>
<android.app.backup.RestoreSet$1: java.lang.Object[] newArray(int)>
<android.media.AudioService: boolean access$6000(android.media.AudioService)>
<android.content.ContentService$ObserverNode$ObserverEntry: void <init>(android.content.ContentService$ObserverNode,android.database.IContentObserver,boolean,java.lang.Object,int,int)>
<android.net.NetworkInfo: void setFailover(boolean)>
<android.app.LoaderManagerImpl$LoaderInfo: void finishRetain()>
<android.view.SurfaceView: void dispatchDraw(android.graphics.Canvas)>
<com.android.server.BackupManagerService$2: void <init>(com.android.server.BackupManagerService)>
<android.net.wifi.WifiStateMachine$DisconnectingState: void enter()>
<android.widget.LinearLayout: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>
<com.android.server.IntentResolver: void sortResults(java.util.List)>
<com.android.internal.util.AsyncChannel: void connect(android.content.Context,android.os.Handler,android.os.Handler)>
<android.app.ActivityThread$ApplicationThread: void setSchedulingGroup(int)>
<android.graphics.drawable.PictureDrawable: void setDither(boolean)>
<android.view.KeyEvent$DispatcherState: void handleUpEvent(android.view.KeyEvent)>
<android.net.wifi.WifiNative: boolean scanCommand(boolean)>
<android.util.XmlPullAttributes: int getStyleAttribute()>
<android.app.Dialog: void setOnShowListener(android.content.DialogInterface$OnShowListener)>
<android.os.BatteryStats$Timer: void <init>()>
<GenerationGG: android.widget.SlidingDrawer$OnDrawerCloseListener get_androidwidgetSlidingDrawer__OnDrawerCloseListener()>
<android.widget.SlidingDrawer: void setOnDrawerOpenListener(android.widget.SlidingDrawer$OnDrawerOpenListener)>
<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByCurrentThread()>
<android.app.Activity: android.view.LayoutInflater getLayoutInflater()>
<GenerationGG: android.accessibilityservice.AccessibilityService get_androidaccessibilityserviceAccessibilityService()>
<android.net.wifi.WifiStateMachine: android.os.INetworkManagementService access$1400(android.net.wifi.WifiStateMachine)>
<android.os.ParcelUuid: java.lang.String toString()>
<android.server.BluetoothAdapterStateMachine: android.os.Message access$5900(android.server.BluetoothAdapterStateMachine)>
<android.widget.GridLayout$Axis: int getMaxIndex()>
<android.webkit.WebViewCore: void sendMessage(int,int)>
<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageOO(int,java.lang.Object,java.lang.Object)>
<android.view.View$8: java.lang.Float get(android.view.View)>
<android.database.AbstractCursor$SelfContentObserver: void <init>(android.database.AbstractCursor)>
<android.net.EthernetDataTracker: void runDhcp()>
<android.net.sip.ISipSession$Stub: android.net.sip.ISipSession asInterface(android.os.IBinder)>
<android.net.wifi.WifiStateMachine$DriverLoadedState: void enter()>
<android.widget.ListPopupWindow$DropDownListView: boolean isFocused()>
<android.util.SparseIntArray: int binarySearch(int[],int,int,int)>
<com.android.server.location.GpsLocationProvider: void native_agps_ni_message(byte[],int)>
<com.android.internal.widget.ActionBarContainer: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<android.drm.mobile1.DrmRawContent: void <clinit>()>
<android.widget.SimpleCursorAdapter: android.widget.SimpleCursorAdapter$ViewBinder getViewBinder()>
<android.widget.ProgressBar: android.graphics.drawable.Drawable getCurrentDrawable()>
<android.util.Log: java.lang.String getStackTraceString(java.lang.Throwable)>
<android.hardware.SensorManager$SensorThread: void finalize()>
<android.widget.TextView$Marquee: boolean isRunning()>
<android.graphics.Picture$RecordingCanvas: void setBitmap(android.graphics.Bitmap)>
<android.os.storage.IMountShutdownObserver$Stub$Proxy: void <init>(android.os.IBinder)>
<android.media.JetPlayer: void finalize()>
<android.graphics.BitmapFactory: android.graphics.Bitmap nativeDecodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options)>
<android.widget.ImageView$ScaleType: void <init>(java.lang.String,int,int)>
<android.app.ActivityThread$BindServiceData: void <init>()>
<com.android.server.am.CompatModePackages: android.content.res.CompatibilityInfo compatibilityInfoForPackageLocked(android.content.pm.ApplicationInfo)>
<android.view.View$TransformationInfo: android.graphics.Matrix access$800(android.view.View$TransformationInfo)>
<android.test.RenamingDelegatingContext: android.content.ContentProvider providerWithRenamedContext(java.lang.Class,android.content.Context,java.lang.String,boolean)>
<android.webkit.WebViewCore: int access$700(android.webkit.WebViewCore)>
<com.android.server.BackupManagerService: void prepareOperationTimeout(int,long,com.android.server.BackupManagerService$BackupRestoreTask)>
<android.widget.AbsListView: void setVelocityScale(float)>
<android.widget.ViewAnimator: int getDisplayedChild()>
<Wrapper_android_renderscript_RSRuntimeException: void test_android_renderscript_RSRuntimeException()>
<android.net.http.LoggingEventHandler: boolean handleSslErrorRequest(android.net.http.SslError)>
<com.android.server.location.GpsLocationProvider: void native_delete_aiding_data(int)>
<android.net.http.Headers: long getContentLength()>
<android.inputmethodservice.Keyboard$Key: boolean isInside(int,int)>
<android.app.ActivityThread$ServiceArgsData: void <init>()>
<android.graphics.Bitmap: int getByteCount()>
<android.view.ViewGroup$MarginLayoutParams: void <init>(int,int)>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: int getLaunches(int)>
<android.app.WallpaperManager$FastBitmapDrawable: void setDither(boolean)>
<android.view.textservice.SpellCheckerInfo: java.lang.String getPackageName()>
<android.content.IntentFilter: int matchDataAuthority(android.net.Uri)>
<com.android.internal.app.ActionBarImpl: com.android.internal.widget.ActionBarContextView access$500(com.android.internal.app.ActionBarImpl)>
<android.telephony.ServiceState: java.lang.String radioTechnologyToString(int)>
<com.android.server.accessibility.TouchExplorer$PointerTracker: void handleReceivedPointerUp(int,android.view.MotionEvent)>
<android.webkit.WebViewCore: void nativeDumpRenderTree(boolean)>
<android.preference.Preference: int getOrder()>
<android.widget.AbsListView: void access$2100(android.widget.AbsListView)>
<android.graphics.drawable.ShapeDrawable: int getChangingConfigurations()>
<android.net.wifi.WifiConfiguration: void writeBitSet(android.os.Parcel,java.util.BitSet)>
<android.opengl.Matrix: void setRotateM(float[],int,float,float,float,float)>
<android.widget.PopupWindow: void setTouchInterceptor(android.view.View$OnTouchListener)>
<android.view.View: boolean willNotDraw()>
<android.util.JsonReader: boolean nextBoolean()>
<com.android.server.pm.Settings: void insertPackageSettingLPw(com.android.server.pm.PackageSetting,android.content.pm.PackageParser$Package)>
<android.text.style.StyleSpan: void <init>(android.os.Parcel)>
<android.view.View: void setOnGenericMotionListener(android.view.View$OnGenericMotionListener)>
<android.renderscript.RenderScript: void rsnAllocationCopyToBitmap(int,int,android.graphics.Bitmap)>
<com.android.internal.telephony.IccIoResult: boolean success()>
<android.widget.RemoteViews: void <clinit>()>
<android.nfc.NfcFragment: void <clinit>()>
<android.net.wifi.WifiStateMachine: android.net.wifi.SupplicantState access$6400(android.net.wifi.WifiStateMachine,android.os.Message)>
<android.accounts.AuthenticatorDescription: void <init>(java.lang.String,java.lang.String,int,int,int,int,boolean)>
<android.widget.ImageView: void resizeFromDrawable()>
<com.android.internal.view.IInputMethodSession$Stub$Proxy: android.os.IBinder asBinder()>
<android.graphics.Canvas: void checkRange(int,int,int)>
<com.android.server.wm.InputManager: boolean transferTouchFocus(android.view.InputChannel,android.view.InputChannel)>
<android.webkit.WebSyncManager: void sync()>
<com.android.internal.telephony.cat.CommandParams: void <init>(com.android.internal.telephony.cat.CommandDetails)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$Callback getCallback()>
<android.media.RingtoneManager: boolean isDefault(android.net.Uri)>
<com.android.server.connectivity.Tethering$TetherMasterSM$SetDnsForwardersErrorState: void <init>(com.android.server.connectivity.Tethering$TetherMasterSM)>
<android.view.ViewDebug: long getViewInstanceCount()>
<android.content.res.AssetManager: java.lang.String getResourcePackageName(int)>
<android.content.ContentProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>
<com.android.internal.telephony.cdma.sms.BearerData: boolean decodeDisplayMode(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)>
<com.android.server.pm.Settings: boolean isEnabledLPr(android.content.pm.ComponentInfo,int)>
<android.app.ActivityManager$MemoryInfo$1: android.app.ActivityManager$MemoryInfo createFromParcel(android.os.Parcel)>
<GenerationGG: android.gesture.GestureOverlayView$OnGesturingListener get_androidgestureGestureOverlayView__OnGesturingListener()>
<android.net.UrlQuerySanitizer: void setUnregisteredParameterValueSanitizer(android.net.UrlQuerySanitizer$ValueSanitizer)>
<com.android.internal.telephony.cdma.SmsMessage: boolean isMWIClearMessage()>
<android.widget.GridLayout$Axis: void computeMargins(boolean)>
<android.webkit.WebStorage$Origin: long getQuota()>
<android.widget.TableRow: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<android.bluetooth.BluetoothHeadset: boolean isValidDevice(android.bluetooth.BluetoothDevice)>
<android.content.pm.ConfigurationInfo: void <init>(android.os.Parcel,android.content.pm.ConfigurationInfo$1)>
<android.content.pm.RegisteredServicesCache: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.view.VolumePanel: int access$202(android.view.VolumePanel,int)>
<android.widget.TableRow$LayoutParams: int[] access$200(android.widget.TableRow$LayoutParams)>
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void <init>(com.android.internal.telephony.DataConnection,com.android.internal.telephony.DataConnection$1)>
<com.android.internal.statusbar.StatusBarNotification$1: com.android.internal.statusbar.StatusBarNotification[] newArray(int)>
<android.os.Looper: java.lang.String toString()>
<com.android.internal.telephony.sip.SipCommandInterface: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>
<android.content.AbstractThreadedSyncAdapter$ISyncAdapterImpl: void cancelSync(android.content.ISyncContext)>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getPackageName()>
<GenerationGG: android.view.View$OnLayoutChangeListener get_androidviewView__OnLayoutChangeListener()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: java.lang.String access$600(com.android.internal.telephony.cdma.CdmaLteUiccRecords)>
<android.gesture.GestureOverlayView: void setGestureVisible(boolean)>
<android.widget.TextView: boolean access$3100(android.widget.TextView)>
<android.accounts.AccountAuthenticatorCache$MySerializer: void writeAsXml(java.lang.Object,org.xmlpull.v1.XmlSerializer)>
<android.app.PendingIntent$1: android.app.PendingIntent[] newArray(int)>
<android.view.GLES20RecordingCanvas: int end(int)>
<android.app.Dialog$1: void <init>(android.app.Dialog)>
<android.webkit.HTML5VideoView: boolean isPlaying()>
<android.opengl.Matrix: void scaleM(float[],int,float,float,float)>
<GenerationGG: java.lang.Byte get_javalangByte()>
<android.renderscript.Matrix3f: void set(int,int,float)>
<android.animation.ValueAnimator$4: void <init>()>
<android.view.inputmethod.InputMethodSubtype: boolean isAuxiliary()>
<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder includeAllPackagesUnderHere()>
<com.android.server.connectivity.Vpn: void <init>(android.content.Context,com.android.server.ConnectivityService$VpnCallback)>
<com.android.server.sip.SipService$SipSessionGroupExt: boolean containsSession(java.lang.String)>
<android.media.AudioService$ScoClient: android.os.IBinder getBinder()>
<android.animation.PropertyValuesHolder: int nGetIntMethod(java.lang.Class,java.lang.String)>
<android.app.ActivityManager$RecentTaskInfo: void <clinit>()>
<android.widget.Space: void draw(android.graphics.Canvas)>
<android.net.wifi.p2p.WifiP2pService: com.android.internal.util.AsyncChannel access$500(android.net.wifi.p2p.WifiP2pService)>
<android.content.SyncManager: android.content.SyncStorageEngine getSyncStorageEngine()>
<android.filterfw.core.CachedFrameManager: void dropOldestFrame()>
<android.graphics.PathMeasure: boolean nextContour()>
<android.preference.PreferenceManager: void setSharedPreferencesMode(int)>
<com.android.internal.telephony.sip.SipCommandInterface: void getDataCallList(android.os.Message)>
<android.view.inputmethod.EditorInfo: int describeContents()>
<android.webkit.WebViewCore: void access$6300(android.webkit.WebViewCore,java.lang.String,boolean,boolean)>
<android.widget.ZoomButtonsController$4: void <init>(android.widget.ZoomButtonsController)>
<android.server.BluetoothAdapterStateMachine: android.server.BluetoothAdapterStateMachine$WarmUp access$700(android.server.BluetoothAdapterStateMachine)>
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean equals(java.lang.Object)>
<android.telephony.SmsMessage: boolean isMWIClearMessage()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: android.graphics.drawable.Drawable[] getChildren()>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataKSC5601(int)>
<android.view.SoundEffectConstants: int getContantForFocusDirection(int)>
<android.view.accessibility.AccessibilityNodeInfo$1: java.lang.Object[] newArray(int)>
<com.android.internal.location.DummyLocationProvider: void setHasMonetaryCost(boolean)>
<com.android.server.am.AppNotRespondingDialog: com.android.server.am.ProcessRecord access$000(com.android.server.am.AppNotRespondingDialog)>
<android.renderscript.RenderScript: void nContextBindProgramStore(int)>
<Wrapper_android_animation_TimeInterpolator: void test_android_animation_TimeInterpolator()>
<android.net.WebAddress: java.lang.String getScheme()>
<android.content.res.AssetManager: android.os.ParcelFileDescriptor openNonAssetFdNative(int,java.lang.String,long[])>
<android.view.HardwareRenderer$GlRenderer: boolean createSurface(android.view.SurfaceHolder)>
<android.preference.PreferenceScreen$SavedState$1: android.preference.PreferenceScreen$SavedState[] newArray(int)>
<GenerationGG: android.net.TrafficStats get_androidnetTrafficStats()>
<android.app.IWallpaperManager$Stub: android.app.IWallpaperManager asInterface(android.os.IBinder)>
<android.net.wifi.WifiStateMachine$ConnectedState: void <init>(android.net.wifi.WifiStateMachine)>
<android.view.ViewRootImpl$W: void dispatchAppVisibility(boolean)>
<android.view.View: void onRestoreInstanceState(android.os.Parcelable)>
<com.android.internal.statusbar.StatusBarNotification: int describeContents()>
<android.graphics.drawable.ShapeDrawable: boolean getPadding(android.graphics.Rect)>
<android.view.KeyEvent: android.view.KeyEvent copy()>
<android.os.BatteryStats$HistoryItem: boolean same(android.os.BatteryStats$HistoryItem)>
<android.gesture.GesturePoint: void <init>(float,float,long)>
<android.speech.tts.AudioPlaybackHandler: java.util.concurrent.atomic.AtomicLong access$600(android.speech.tts.AudioPlaybackHandler)>
<android.graphics.drawable.GradientDrawable$GradientState: void setGradientType(int)>
<android.widget.TableRow: int measureNullChild(int)>
<android.graphics.Rect: void writeToParcel(android.os.Parcel,int)>
<android.renderscript.RenderScriptGL: void bindProgramVertex(android.renderscript.ProgramVertex)>
<android.widget.GridLayout$Interval: boolean equals(java.lang.Object)>
<android.view.View$PerformClick: void <init>(android.view.View)>
<android.widget.CalendarView: int access$2700(android.widget.CalendarView)>
<android.net.rtp.AudioStream: int getDtmfType()>
<android.widget.TabHost: android.widget.FrameLayout access$100(android.widget.TabHost)>
<com.android.internal.util.FastXmlSerializer: void endDocument()>
<android.text.method.CharacterPickerDialog: java.lang.String access$100(android.text.method.CharacterPickerDialog)>
<android.app.ActivityThread$StopInfo: void <init>(android.app.ActivityThread$1)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>
<com.android.internal.widget.LockPatternView$DisplayMode: void <clinit>()>
<android.content.IntentFilter: void addDataType(java.lang.String)>
<android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodImpl: void setSessionEnabled(android.view.inputmethod.InputMethodSession,boolean)>
<com.android.internal.telephony.SmsMessageBase$TextEncodingDetails: java.lang.String toString()>
<android.os.SystemProperties: void set(java.lang.String,java.lang.String)>
<android.preference.GenericInflater: android.content.Context getContext()>
<android.service.wallpaper.IWallpaperConnection$Stub: android.service.wallpaper.IWallpaperConnection asInterface(android.os.IBinder)>
<android.text.style.QuoteSpan: void <init>(android.os.Parcel)>
<GenerationGG: android.location.GpsStatus$NmeaListener get_androidlocationGpsStatus__NmeaListener()>
<android.gesture.GestureUtils: float[] computeCentroid(float[])>
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean,byte[],int,int,int)>
<android.graphics.drawable.GradientDrawable$GradientState: float access$300(android.graphics.drawable.GradientDrawable$GradientState)>
<android.renderscript.RenderScript: int rsnProgramStoreCreate(int,boolean,boolean,boolean,boolean,boolean,boolean,int,int,int)>
<com.android.internal.os.BatteryStatsImpl$Timer: int getCountLocked(int)>
<android.view.ViewRootImpl$TrackballAxis: int generate(float)>
<com.android.internal.telephony.DataConnectionAc: java.util.Collection rspApnList(android.os.Message)>
<android.view.KeyEvent: boolean isSystem()>
<com.android.internal.telephony.cdma.sms.BearerData: boolean decodeDeferredDeliveryAbs(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)>
<android.view.MotionEvent: void finalize()>
<GenerationGG: org.apache.http.HttpEntity get_orgapachehttpHttpEntity()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: com.android.internal.telephony.PhoneBase access$800(com.android.internal.telephony.cdma.CdmaLteUiccRecords)>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String[] computeProjection(java.lang.String[])>
<android.widget.TextView: android.graphics.drawable.Drawable[] getCompoundDrawables()>
<android.webkit.WebViewCore: void pauseUpdatePicture(android.webkit.WebViewCore)>
<com.android.internal.telephony.OperatorInfo$1: com.android.internal.telephony.OperatorInfo createFromParcel(android.os.Parcel)>
<com.android.internal.app.ActionBarImpl$TabImpl: java.lang.CharSequence getText()>
<android.text.method.TextKeyListener: java.lang.ref.WeakReference access$000(android.text.method.TextKeyListener)>
<android.widget.AbsListView: int getVerticalScrollbarWidth()>
<android.drm.DrmInfoRequest: java.util.Iterator keyIterator()>
<android.net.sip.SimpleSessionDescription$Media: java.lang.String[] getFormats()>
<android.graphics.BitmapRegionDecoder: void nativeClean(int)>
<com.android.internal.telephony.cat.SelectItemResponseData: void <init>(int)>
<android.media.Metadata: boolean parse(android.os.Parcel)>
<android.bluetooth.BluetoothProfileState: void access$600(android.bluetooth.BluetoothProfileState,com.android.internal.util.IState)>
<android.os.StrictMode$5: void <init>()>
<GenerationGG: android.database.AbstractWindowedCursor get_androiddatabaseAbstractWindowedCursor()>
<com.android.internal.widget.LockPatternView: void clearPatternDrawLookup()>
<android.webkit.WebViewCore: void access$4400(android.webkit.WebViewCore,int,int,int,int)>
<android.app.Application: void unregisterActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>
<com.android.internal.telephony.MccTable: void <clinit>()>
<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo findPreferredActivity(android.content.Intent,java.lang.String,int,java.util.List,int)>
<android.drm.DrmManagerClient: java.lang.String getOriginalMimeType(java.lang.String)>
<android.os.StrictMode: java.lang.Object trackActivity(java.lang.Object)>
<android.app.Activity: void performUserLeaving()>
<android.preference.PreferenceGroup: boolean isOrderingAsAdded()>
<android.os.ParcelFormatException: void <init>()>
<com.android.internal.view.BaseSurfaceHolder: int getRequestedHeight()>
<android.database.sqlite.SQLiteDatabaseLockedException: void <init>(java.lang.String)>
<android.webkit.HttpAuthHandlerImpl: boolean useHttpAuthUsernamePassword()>
<android.filterfw.core.FilterContext: void setFrameManager(android.filterfw.core.FrameManager)>
<android.bluetooth.BluetoothHeadset: android.bluetooth.BluetoothProfile$ServiceListener access$100(android.bluetooth.BluetoothHeadset)>
<android.hardware.Camera$Parameters: void <init>(android.hardware.Camera)>
<android.text.format.DateUtils: char toDigitChar(long)>
<android.widget.CalendarView: long getDate()>
<android.location.Address: boolean access$1500(android.location.Address)>
<android.webkit.WebSettings$EventHandler: void access$300(android.webkit.WebSettings$EventHandler)>
<android.widget.ExpandableListConnector: android.widget.ExpandableListConnector$PositionMetadata getUnflattenedPos(int)>
<android.app.ContextImpl: boolean deleteDatabase(java.lang.String)>
<android.app.Fragment: int getId()>
<android.content.IOnPrimaryClipChangedListener$Stub$Proxy: void <init>(android.os.IBinder)>
<android.gesture.Learner: void removeInstance(long)>
<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler)>
<android.view.GLES20Canvas: void drawText(java.lang.String,int,int,float,float,android.graphics.Paint)>
<com.android.server.am.TransferPipe: void closeFd(int)>
<android.app.WallpaperInfo: int describeContents()>
<android.app.BackStackRecord: void addOp(android.app.BackStackRecord$Op)>
<android.view.ViewGroup: void removeFromArray(int,int)>
<com.android.server.Watchdog: com.android.server.Watchdog getInstance()>
<android.content.res.XmlBlock: int nativeGetLineNumber(int)>
<android.nfc.tech.NfcV: byte getResponseFlags()>
<android.app.Instrumentation$SyncRunnable: void waitForComplete()>
<android.app.backup.IBackupManager$Stub: android.app.backup.IBackupManager asInterface(android.os.IBinder)>
<Wrapper_android_util_LruCache: void test_android_util_LruCache()>
<android.graphics.Picture: void writeToStream(java.io.OutputStream)>
<com.android.server.pm.UserManager: boolean removePackageFolders(int)>
<android.view.View: boolean isSaveFromParentEnabled()>
<android.renderscript.Matrix3f: void load(android.renderscript.Matrix3f)>
<android.app.admin.DeviceAdminReceiver: void <clinit>()>
<android.view.KeyEvent: boolean metaStateHasModifiers(int,int)>
<android.webkit.CookieSyncManager: void startSync()>
<android.content.IntentFilter: android.content.IntentFilter$AuthorityEntry getDataAuthority(int)>
<android.graphics.drawable.Drawable: int resolveOpacity(int,int)>
<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState getSupplicantState()>
<android.widget.Scroller: boolean isFinished()>
<android.graphics.drawable.GradientDrawable: void draw(android.graphics.Canvas)>
<android.widget.ExpandableListConnector: android.widget.ExpandableListAdapter getAdapter()>
<android.content.SyncStorageEngine: android.content.SyncStatusInfo getStatusByAccountAndAuthority(android.accounts.Account,java.lang.String)>
<com.android.internal.telephony.cdma.sms.BearerData$TimeStamp: com.android.internal.telephony.cdma.sms.BearerData$TimeStamp fromByteArray(byte[])>
<android.view.ViewGroup: java.util.ArrayList access$400(android.view.ViewGroup)>
<android.bluetooth.BluetoothHealth: void log(java.lang.String)>
<android.renderscript.RenderScript: void nAllocationResize1D(int,int)>
<android.net.DnsPinger$ActivePing: void <init>(android.net.DnsPinger,android.net.DnsPinger$1)>
<com.android.server.PowerManagerService$LockList: void addLock(com.android.server.PowerManagerService$WakeLock)>
<com.android.server.sip.SipSessionGroup: boolean isClosed()>
<android.app.FragmentManagerImpl: void dispatchTrimMemory(int)>
<android.widget.AbsListView$RecycleBin: android.view.View getActiveView(int)>
<android.service.wallpaper.WallpaperService$Engine$2: void onRelayoutContainer()>
<android.widget.NumberPicker: android.widget.EditText access$000(android.widget.NumberPicker)>
<android.app.ProgressDialog: void setProgressStyle(int)>
<android.bluetooth.BluetoothDeviceProfileState: android.os.Message access$8700(android.bluetooth.BluetoothDeviceProfileState)>
<android.app.NativeActivity: void access$100(android.app.NativeActivity,int,int,boolean)>
<com.android.server.am.ActivityManagerService: boolean testIsSystemReady()>
<android.view.IRotationWatcher$Stub$Proxy: void <init>(android.os.IBinder)>
<android.database.BulkCursorProxy: void <init>(android.os.IBinder)>
<android.widget.MediaController$4: void <init>(android.widget.MediaController)>
<com.android.internal.util.StateMachine: void initStateMachine(java.lang.String,android.os.Looper)>
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void handleMessage(android.os.Message)>
<com.android.internal.telephony.cdma.sms.BearerData: void <init>()>
<android.test.InstrumentationTestCase: void injectInstrumentation(android.app.Instrumentation)>
<com.android.internal.telephony.PhoneBase: boolean getCallForwardingIndicator()>
<com.android.internal.telephony.CallTracker: void <init>()>
<android.webkit.CallbackProxy$8: void onClick(android.content.DialogInterface,int)>
<android.widget.ListPopupWindow: int getWidth()>
<GenerationGG: android.app.NativeActivity get_androidappNativeActivity()>
<com.android.server.LocationManagerService: long getMinTimeLocked(java.lang.String)>
<com.android.server.pm.PackageManagerService: boolean isFirstBoot()>
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.CallTracker getCallTracker()>
<android.widget.GridLayout$LayoutParams: void <init>()>
<android.webkit.WebView$ViewSizeData: void <init>()>
<android.webkit.ZoomManager: float getScale()>
<android.widget.NumberPicker$2: void <init>(android.widget.NumberPicker)>
<android.content.CursorLoader: java.lang.String getSortOrder()>
<android.server.BluetoothA2dpService: void cleanupNative()>
<android.webkit.URLUtil: boolean isCookielessProxyUrl(java.lang.String)>
<GenerationGG: android.mtp.MtpConstants get_androidmtpMtpConstants()>
<android.app.LoadedApk: android.content.IIntentReceiver getReceiverDispatcher(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimDomainLoaded: void onRecordLoaded(android.os.AsyncResult)>
<com.android.server.usb.UsbSettingsManager: void grantDevicePermission(android.hardware.usb.UsbDevice,int)>
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getLeadingDigitsPattern(int)>
<Wrapper_android_webkit_JsPromptResult: void test_android_webkit_JsPromptResult()>
<android.os.MessageQueue: void removeIdleHandler(android.os.MessageQueue$IdleHandler)>
<android.media.AudioService: int access$5600(android.media.AudioService)>
<android.renderscript.Element: android.renderscript.Element F32_2(android.renderscript.RenderScript)>
<android.app.Instrumentation: boolean isProfiling()>
<android.opengl.GLSurfaceView$GLThread: boolean ableToDraw()>
<android.graphics.Bitmap: void setDensity(int)>
<android.view.View: void setScrollContainer(boolean)>
<com.android.i18n.phonenumbers.RegexCache$LRUCache: java.lang.Object get(java.lang.Object)>
<android.widget.ZoomControls: boolean hasFocus()>
<com.android.server.sip.SipService$SipSessionGroupExt: void onError(android.net.sip.ISipSession,int,java.lang.String)>
<android.widget.ViewAnimator: void setInAnimation(android.view.animation.Animation)>
<android.media.audiofx.Visualizer: int native_setup(java.lang.Object,int,int[])>
<android.view.ViewGroup: int getPersistentDrawingCache()>
<android.os.MessageQueue: boolean enqueueMessage(android.os.Message,long)>
<android.test.ClassPathPackageInfoSource$1: android.test.ClassPathPackageInfo load(java.lang.String)>
<android.view.ViewRootImpl: void onHardwarePostDraw(android.view.HardwareCanvas)>
<Wrapper_android_os_MemoryFile: void test_android_os_MemoryFile()>
<android.view.Surface: void readFromParcel(android.os.Parcel)>
<com.android.internal.util.BitwiseInputStream: void skip(int)>
<android.opengl.ETC1: void decodeImage(java.nio.Buffer,java.nio.Buffer,int,int,int,int)>
<android.inputmethodservice.AbstractInputMethodService: void <init>()>
<android.widget.SimpleAdapter: void <init>(android.content.Context,java.util.List,int,java.lang.String[],int[])>
<android.webkit.WebIconDatabase: void nativeClose()>
<android.widget.SlidingDrawer: void unlock()>
<android.database.sqlite.SQLiteDebug: void notifyActiveCursorFinalized()>
<android.net.RouteInfo: void writeToParcel(android.os.Parcel,int)>
<com.android.server.BackupManagerService: void dataChangedImpl(java.lang.String,java.util.HashSet)>
<android.content.res.ObbInfo: java.lang.String toString()>
<android.bluetooth.BluetoothDeviceProfileState: android.os.Message access$5900(android.bluetooth.BluetoothDeviceProfileState)>
<android.os.Message: android.os.Message obtain(android.os.Message)>
<android.content.IntentFilter: android.os.PatternMatcher getDataPath(int)>
<com.android.internal.telephony.WspTypeDecoder: java.util.HashMap getContentParameters()>
<android.speech.tts.TextToSpeechService$1: int loadLanguage(java.lang.String,java.lang.String,java.lang.String)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,android.util.Property,float[])>
<Wrapper_android_util_MalformedJsonException: void test_android_util_MalformedJsonException()>
<android.webkit.WebViewCore: void reducePriority()>
<android.net.Uri: java.lang.String getQueryParameter(java.lang.String)>
<android.content.SyncStorageEngine: void removeStatusChangeListener(android.content.ISyncStatusObserver)>
<android.test.mock.MockResources: java.lang.CharSequence getQuantityText(int,int)>
<android.media.AudioService: boolean access$000(android.media.AudioService)>
<android.view.animation.AnimationSet: void init()>
<android.view.animation.Transformation: int getTransformationType()>
<com.android.server.connectivity.Tethering: int getLastTetherError(java.lang.String)>
<android.accessibilityservice.AccessibilityServiceInfo: void updateDynamicallyConfigurableProperties(android.accessibilityservice.AccessibilityServiceInfo)>
<android.view.ViewDebug: void requestLayout(android.view.View,java.lang.String)>
<android.os.Parcel: void init(int)>
<android.media.AudioService$SetModeDeathHandler: void <init>(android.media.AudioService,android.os.IBinder,int)>
<com.android.internal.telephony.cdma.RuimFileHandler: void dispose()>
<android.database.sqlite.SQLiteProgram: void native_clear_bindings()>
<android.util.SparseBooleanArray: void put(int,boolean)>
<com.android.internal.app.AlertController$AlertParams$2: android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup)>
<android.widget.Toast: android.view.View getView()>
<com.android.server.wm.WindowManagerService: void notifyFocusChanged()>
<android.util.TimeUtils: int printField(char[],int,char,int,boolean,int)>
<com.android.internal.telephony.sip.SipPhone: java.lang.String getSubscriberId()>
<android.net.wifi.WifiStateMachine: void access$3300(android.net.wifi.WifiStateMachine,android.os.Message)>
<com.android.server.pm.PackageManagerService$FileInstallArgs: void createCopyFile()>
<android.widget.ToggleButton: void setTextOn(java.lang.CharSequence)>
<GenerationGG: android.content.SyncStats get_androidcontentSyncStats()>
<com.android.server.am.UsageStatsService$1: void <init>(com.android.server.am.UsageStatsService,java.lang.String)>
<android.net.DnsPinger: void loge(java.lang.String)>
<com.android.internal.telephony.cdma.sms.BearerData: void encodeLanguageIndicator(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)>
<android.animation.Animator: boolean isStarted()>
<android.widget.RelativeLayout$DependencyGraph$Node$1: void onReleased(android.util.Poolable)>
<android.renderscript.Matrix4f: void loadPerspective(float,float,float,float)>
<android.media.MediaPlayer: void setOnSeekCompleteListener(android.media.MediaPlayer$OnSeekCompleteListener)>
<android.media.audiofx.Visualizer: void native_init()>
<android.graphics.Bitmap: android.graphics.Bitmap$Config getConfig()>
<android.net.wifi.p2p.WifiP2pService: int access$6400()>
<GenerationGG: android.app.backup.BackupAgent get_androidappbackupBackupAgent()>
<com.android.internal.widget.ActionBarView: com.android.internal.widget.ScrollingTabContainerView access$900(com.android.internal.widget.ActionBarView)>
<android.widget.AutoCompleteTextView: void setDropDownWidth(int)>
<android.util.TypedValue: java.lang.String toString()>
<android.net.Uri$AbstractHierarchicalUri: int parsePort()>
<android.widget.FastScroller: void <clinit>()>
<android.graphics.drawable.ShapeDrawable: void onDraw(android.graphics.drawable.shapes.Shape,android.graphics.Canvas,android.graphics.Paint)>
<android.graphics.drawable.GradientDrawable: void <init>()>
<android.opengl.Matrix: void setRotateEulerM(float[],int,float,float,float)>
<com.android.internal.os.BatteryStatsImpl: void noteWifiRunningChangedLocked(android.os.WorkSource,android.os.WorkSource)>
<com.android.org.bouncycastle.asn1.x509.X509Name: void <init>(java.lang.String)>
<android.widget.TextView: int getFadeTop(boolean)>
<android.net.IThrottleManager$Stub$Proxy: void <init>(android.os.IBinder)>
<android.app.admin.DeviceAdminInfo: android.content.pm.ActivityInfo getActivityInfo()>
<android.widget.EditText: boolean getDefaultEditable()>
<android.database.AbstractWindowedCursor: boolean hasWindow()>
<GenerationGG: android.widget.SectionIndexer get_androidwidgetSectionIndexer()>
<com.android.server.wm.WindowManagerService: boolean isSystemSecure()>
<android.net.sip.SipSessionAdapter: void onCallEstablished(android.net.sip.ISipSession,java.lang.String)>
<com.android.server.location.LocationProviderProxy: boolean requestSingleShotFix()>
<android.view.View$4: void <init>(java.lang.String)>
<com.android.server.wm.WindowManagerService: void setWallpaperAnimLayerAdjustmentLocked(int)>
<android.content.ContentResolver$CursorWrapperInner: void <init>(android.content.ContentResolver,android.database.Cursor,android.content.IContentProvider)>
<android.location.Location: int describeContents()>
<android.test.suitebuilder.TestMethod: void <init>(java.lang.String,java.lang.Class)>
<android.view.Gravity: int getAbsoluteGravity(int,int)>
<com.android.server.ConnectivityService: int access$1100(com.android.server.ConnectivityService)>
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedPath()>
<android.widget.AutoCompleteTextView: void setThreshold(int)>
<android.graphics.Paint: void finalize()>
<android.view.animation.AnticipateOvershootInterpolator: float o(float,float)>
<android.widget.LinearLayout: void setVerticalGravity(int)>
<android.webkit.CacheManager: void appendAsHex(int,java.lang.StringBuffer)>
<android.accounts.Account: int hashCode()>
<com.android.server.pm.PackageManagerService: int getApplicationEnabledSetting(java.lang.String)>
<android.server.BluetoothAdapterStateMachine: void access$2600(android.server.BluetoothAdapterStateMachine,int)>
<android.database.ContentObservable: void <init>()>
<android.view.ViewConfiguration: int getTouchSlop()>
<android.nfc.NfcFragment: void attach(android.app.Activity)>
<GenerationGG: android.view.View$OnAttachStateChangeListener get_androidviewView__OnAttachStateChangeListener()>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setSignalStrengthDefaultValues()>
<GenerationGG: android.view.accessibility.AccessibilityNodeInfo get_androidviewaccessibilityAccessibilityNodeInfo()>
<android.graphics.drawable.ShapeDrawable$ShapeState: int getChangingConfigurations()>
<android.animation.FloatEvaluator: java.lang.Float evaluate(float,java.lang.Number,java.lang.Number)>
<com.android.internal.statusbar.StatusBarIconList$1: void <init>()>
<android.webkit.WebView$HitTestResult: void access$1000(android.webkit.WebView$HitTestResult,java.lang.String)>
<com.android.internal.telephony.sip.SipCommandInterface: void acknowledgeLastIncomingGsmSms(boolean,int,android.os.Message)>
<android.opengl.GLU: java.lang.String gluErrorString(int)>
<android.content.res.Configuration$1: void <init>()>
<android.view.View: void addTouchables(java.util.ArrayList)>
<com.android.server.am.ActivityStack$2: void <init>(com.android.server.am.ActivityStack,com.android.server.am.TaskAccessInfo)>
<android.os.FileObserver$ObserverThread: int init()>
<android.test.ComparisonFailure: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<android.text.format.Time: void set(int,int,int,int,int,int)>
<com.android.server.MountService: void finishMediaUpdate()>
<android.view.ViewPropertyAnimator$AnimatorEventListener: void <init>(android.view.ViewPropertyAnimator)>
<android.location.LocationProvider: java.lang.String getName()>
<com.android.internal.telephony.cat.CatCmdMessage$CallSettings: void <init>(com.android.internal.telephony.cat.CatCmdMessage)>
<com.android.server.usb.UsbSettingsManager: void grantAccessoryPermission(android.hardware.usb.UsbAccessory,int)>
<android.view.HardwareRenderer$GlRenderer: int getWidth()>
<android.animation.Keyframe$FloatKeyframe: void <init>(float)>
<android.renderscript.RenderScript: void nAllocationData2D(int,int,int,int,int,int,int,float[],int)>
<com.android.server.wm.AppWindowToken: void updateReportedVisibilityLocked()>
<android.widget.GridLayout: void onDraw(android.graphics.Canvas)>
<com.android.internal.view.menu.ActionMenuItem: android.view.ActionProvider getActionProvider()>
<com.android.server.ClipboardService: void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener)>
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$1)>
<android.app.Instrumentation: void callActivityOnNewIntent(android.app.Activity,android.content.Intent)>
<com.android.server.UiModeManagerService: boolean access$000(com.android.server.UiModeManagerService)>
<com.android.server.PowerManagerService$1: void onLooperPrepared()>
<com.android.server.wm.WindowManagerService: int getOrientationFromWindowsLocked()>
<GenerationGG: android.renderscript.Byte4 get_androidrenderscriptByte4()>
<android.view.MotionEvent: float getY()>
<android.view.inputmethod.EditorInfo: void <init>()>
<android.view.ViewRootImpl$RunQueue$HandlerAction: void <init>(android.view.ViewRootImpl$1)>
<android.appwidget.AppWidgetProviderInfo$1: java.lang.Object[] newArray(int)>
<com.android.server.am.AppWaitingForDebuggerDialog$1: void <init>(com.android.server.am.AppWaitingForDebuggerDialog)>
<android.app.IInstrumentationWatcher$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.internal.telephony.cdma.EriManager: void loadEriFileFromFileSystem()>
<android.media.audiofx.Equalizer$BaseParameterListener: void <init>(android.media.audiofx.Equalizer)>
<android.widget.StackView: int access$100(android.widget.StackView)>
<android.widget.TextView: android.text.InputFilter[] getFilters()>
<android.app.ExpandableListActivity: long getSelectedId()>
<android.renderscript.RenderScriptGL: void pause()>
<com.android.internal.os.BatteryStatsImpl$Uid: void noteStartWakeLocked(int,java.lang.String,int)>
<com.android.server.wm.WindowManagerService: void monitor()>
<android.widget.NumberPicker: void access$1300(android.widget.NumberPicker,int,int)>
<android.content.ContentProviderOperation$Builder: void <init>(int,android.net.Uri,android.content.ContentProviderOperation$1)>
<android.content.pm.Signature: int parseHexDigit(int)>
<com.android.server.AppWidgetService: boolean writeStateToFileLocked(java.io.FileOutputStream)>
<android.os.ResultReceiver$1: android.os.ResultReceiver createFromParcel(android.os.Parcel)>
<android.os.IVibratorService$Stub$Proxy: void <init>(android.os.IBinder)>
<DumbClass: void DumbMethod34()>
<android.widget.BaseExpandableListAdapter: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.server.BluetoothHealthProfileHandler: android.server.BluetoothHealthProfileHandler getInstance(android.content.Context,android.server.BluetoothService)>
<com.android.server.sip.SipSessionGroup$SipSessionImpl$SessionTimer: void <init>(com.android.server.sip.SipSessionGroup$SipSessionImpl)>
<android.view.HardwareRenderer$Gl20Renderer: android.view.HardwareLayer createHardwareLayer(int,int,boolean)>
<DumbClass: void DumbMethod72()>
<android.view.animation.AccelerateDecelerateInterpolator: void <init>()>
<com.android.internal.view.IInputContext$Stub: android.os.IBinder asBinder()>
<GenerationGG: android.text.method.KeyListener get_androidtextmethodKeyListener()>
<android.view.VelocityTracker: void setPooled(boolean)>
<android.content.SyncStorageEngine: int getCurrentDayLocked()>
<com.android.server.accessibility.TouchExplorer: void sendUpForInjectedDownPointers(android.view.MotionEvent,int)>
<android.graphics.Path: void close()>
<android.renderscript.Element$DataType: void <clinit>()>
<android.os.PowerManager$WakeLock: boolean isHeld()>
<android.net.wifi.p2p.WifiP2pInfo: java.lang.String toString()>
<android.inputmethodservice.InputMethodService: void onUpdateCursor(android.graphics.Rect)>
<android.net.wifi.WifiWatchdogStateMachine$OnlineWatchState: void exit()>
<com.android.internal.location.DummyLocationProvider: boolean requiresNetwork()>
<android.widget.DatePicker: void setImeOptions(android.widget.NumberPicker,int,int)>
<android.widget.AbsListView: int getBottomPaddingOffset()>
<android.nfc.NfcAdapter$LegacyCallbackWrapper: android.nfc.NdefMessage createNdefMessage(android.nfc.NfcEvent)>
<GenerationGG: android.hardware.SensorEventListener get_androidhardwareSensorEventListener()>
<com.android.server.am.ActivityManagerService: int getFrontActivityScreenCompatMode()>
<com.android.server.StatusBarManagerService$DisableRecord: void <init>(com.android.server.StatusBarManagerService)>
<DumbClass: void DumbMethod20()>
<android.text.MeasuredText: void <init>()>
<com.android.internal.telephony.cdma.CdmaConnection: void onHangupLocal()>
<GenerationGG: android.os.BadParcelableException get_androidosBadParcelableException()>
<android.view.HardwareRenderer: boolean isAvailable()>
<android.media.AudioManager$1: void <init>(android.media.AudioManager)>
<com.android.internal.view.BaseSurfaceHolder: void ungetCallbacks()>
<android.media.audiofx.EnvironmentalReverb: void setReflectionsDelay(int)>
<android.opengl.GLSurfaceView$BaseConfigChooser: int[] filterConfigSpec(int[])>
<com.android.internal.util.Predicates$OrPredicate: void <init>(java.lang.Iterable,com.android.internal.util.Predicates$1)>
<com.android.internal.view.menu.MenuItemImpl: boolean isVisible()>
<android.app.ActivityThread: android.content.res.Configuration applyConfigCompatMainThread(android.content.res.Configuration,android.content.res.CompatibilityInfo)>
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: java.lang.String packageForFilter(android.content.pm.PackageParser$ServiceIntentInfo)>
<android.net.http.AndroidHttpClient: java.io.InputStream getUngzippedContent(org.apache.http.HttpEntity)>
<com.android.internal.widget.ActionBarContextView: android.animation.Animator makeOutAnimation()>
<android.view.View$11: java.lang.Object get(java.lang.Object)>
<android.gesture.GestureOverlayView: void setOrientation(int)>
<com.android.server.sip.SipSessionGroup$SipSessionCallReceiverImpl: void <init>(com.android.server.sip.SipSessionGroup,android.net.sip.ISipSessionListener)>
<GenerationGG: android.media.audiofx.Equalizer$OnParameterChangeListener get_androidmediaaudiofxEqualizer__OnParameterChangeListener()>
<android.webkit.WebView$OnTrimMemoryListener: void onConfigurationChanged(android.content.res.Configuration)>
<Wrapper_android_os_NetworkOnMainThreadException: void test_android_os_NetworkOnMainThreadException()>
<android.view.KeyEvent: int keyCodeFromString(java.lang.String)>
<android.opengl.GLES10: void glColorPointerBounds(int,int,int,java.nio.Buffer,int)>
<android.bluetooth.BluetoothDeviceProfileState: void access$5200(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.util.FastImmutableArraySet: void <init>(java.lang.Object[])>
<android.text.Layout$SpannedEllipsizer: int nextSpanTransition(int,int,java.lang.Class)>
<android.os.PowerManager$WakeLock: java.lang.String toString()>
<android.nfc.NdefRecord: android.nfc.NdefRecord createUri(android.net.Uri)>
<android.drm.DrmManagerClient: int getErrorType(int)>
<android.app.BackStackRecord: void <init>(android.app.FragmentManagerImpl)>
<android.widget.Spinner$DropdownPopup: java.lang.CharSequence getHintText()>
<android.telephony.gsm.SmsMessage: int getStatus()>
<com.android.server.ThrottleService: long access$1414(com.android.server.ThrottleService,long)>
<android.database.sqlite.SQLiteDatabase: void verifyDbIsOpen()>
<android.widget.Gallery: boolean moveNext()>
<com.android.server.pm.UserManager: int getNextAvailableId()>
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: void logd(java.lang.String)>
<android.content.Intent: void <init>(java.lang.String,android.net.Uri,android.content.Context,java.lang.Class)>
<android.speech.tts.FileSynthesisCallback: void stop()>
<android.net.Proxy: void <clinit>()>
<com.android.internal.telephony.SmsHeader: byte[] toByteArray(com.android.internal.telephony.SmsHeader)>
<android.app.ContextImpl: void setFilePermissionsFromMode(java.lang.String,int,int)>
<android.graphics.PathEffect: void finalize()>
<android.bluetooth.BluetoothDeviceProfileState: void access$6600(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.net.wifi.WifiInfo: void <init>(android.net.wifi.WifiInfo)>
<android.renderscript.RenderScript: void nElementGetSubElements(int,int[],java.lang.String[])>
<java.lang.Object: boolean onKeyDown(int,android.view.KeyEvent)>
<com.android.server.MountService: com.android.server.MountService$ObbActionHandler access$000(com.android.server.MountService)>
<android.widget.ActivityChooserView: boolean access$602(android.widget.ActivityChooserView,boolean)>
<android.hardware.usb.UsbEndpoint: int describeContents()>
<com.android.internal.telephony.gsm.GsmServiceStateTracker$3: void <init>(com.android.internal.telephony.gsm.GsmServiceStateTracker,android.os.Handler)>
<GenerationGG: android.net.wifi.p2p.WifiP2pDevice get_androidnetwifip2pWifiP2pDevice()>
<android.net.EthernetDataTracker: android.net.LinkCapabilities getLinkCapabilities()>
<android.os.BatteryStats: void formatTimeMs(java.lang.StringBuilder,long)>
<android.widget.ListPopupWindow$PopupTouchInterceptor: boolean onTouch(android.view.View,android.view.MotionEvent)>
<GenerationGG: android.os.Build get_androidosBuild()>
<android.bluetooth.BluetoothClass: int getMajorDeviceClass()>
<android.graphics.Interpolator: void <init>(int)>
<android.app.DialogFragment: void dismiss()>
<android.view.InputChannel: java.lang.String toString()>
<android.webkit.WebViewCore: void access$5400(android.webkit.WebViewCore,boolean[],int)>
<GenerationGG: android.text.BoringLayout$Metrics get_androidtextBoringLayout__Metrics()>
<android.text.Layout: int getOffsetAtStartOf(int)>
<android.widget.TextView$Marquee: float getGhostOffset()>
<android.content.pm.RegisteredServicesCache$ServiceInfo: java.lang.String toString()>
<android.drm.DrmSupportInfo: void setDescription(java.lang.String)>
<android.appwidget.AppWidgetHost$UpdateHandler: void <init>(android.appwidget.AppWidgetHost,android.os.Looper)>
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: java.util.List queryIntentForPackage(android.content.Intent,java.lang.String,int,java.util.ArrayList)>
<android.renderscript.Element: android.renderscript.Element U16_3(android.renderscript.RenderScript)>
<android.content.PeriodicSync$1: java.lang.Object[] newArray(int)>
<android.location.Criteria: void <init>()>
<android.view.View$AttachInfo$InvalidateInfo$1: void onAcquired(android.view.View$AttachInfo$InvalidateInfo)>
<android.app.BackStackRecord: android.app.FragmentTransaction replace(int,android.app.Fragment)>
<android.preference.DialogPreference: void setNegativeButtonText(java.lang.CharSequence)>
<com.android.internal.telephony.IccPhoneBookInterfaceManager$1: void <init>(com.android.internal.telephony.IccPhoneBookInterfaceManager)>
<android.widget.RadioGroup: int getCheckedRadioButtonId()>
<android.accounts.AccountManagerService$5: void <init>(android.accounts.AccountManagerService,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,android.accounts.Account,android.os.Bundle)>
<android.graphics.drawable.LevelListDrawable: android.graphics.drawable.Drawable mutate()>
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String[] access$200(com.android.internal.telephony.ims.IsimUiccRecords)>
<android.text.style.DrawableMarginSpan: void <init>(android.graphics.drawable.Drawable)>
<com.android.internal.telephony.IPhoneStateListener$Stub: com.android.internal.telephony.IPhoneStateListener asInterface(android.os.IBinder)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$1700(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,com.android.internal.util.IState)>
<android.net.sip.SipSession$Listener: void onCallChangeFailed(android.net.sip.SipSession,int,java.lang.String)>
<android.os.MemoryFile: boolean isDeactivated()>
<android.content.UriMatcher: int match(android.net.Uri)>
<android.view.ViewGroup: android.view.View findFrontmostDroppableChildAt(float,float,android.graphics.PointF)>
<com.android.server.wm.WindowManagerService: void dumpInput(java.io.FileDescriptor,java.io.PrintWriter,boolean)>
<android.net.wifi.NetworkUpdateResult: void setNetworkId(int)>
<com.android.internal.telephony.cat.ToneSettings$1: com.android.internal.telephony.cat.ToneSettings[] newArray(int)>
<android.widget.AdapterViewFlipper: void setAutoStart(boolean)>
<android.view.IWindowManager$Stub: android.os.IBinder asBinder()>
<android.filterfw.core.FrameFormat: int bytesPerSampleOf(int)>
<android.hardware.Camera: void stopPreview()>
<android.app.IActivityController$Stub$Proxy: android.os.IBinder asBinder()>
<android.content.pm.RegisteredServicesCache: void setListener(android.content.pm.RegisteredServicesCacheListener,android.os.Handler)>
<Wrapper_android_net_ParseException: void test_android_net_ParseException()>
<android.test.mock.MockContext: void enforceCallingOrSelfUriPermission(android.net.Uri,int,java.lang.String)>
<android.renderscript.BaseObj: java.lang.String getName()>
<android.bluetooth.BluetoothDeviceProfileState: android.bluetooth.BluetoothPbap access$1502(android.bluetooth.BluetoothDeviceProfileState,android.bluetooth.BluetoothPbap)>
<com.android.internal.telephony.cdma.CDMAPhone: android.telephony.ServiceState getServiceState()>
<android.app.Activity: void runOnUiThread(java.lang.Runnable)>
<java.lang.Object: void setGroupEnabled(int,boolean)>
<android.graphics.drawable.GradientDrawable$GradientState: boolean access$102(android.graphics.drawable.GradientDrawable$GradientState,boolean)>
<android.text.PackedIntVector: int width()>
<com.android.server.net.NetworkPolicyManagerService: void access$500(com.android.server.net.NetworkPolicyManagerService)>
<android.os.Handler: android.os.Message obtainMessage(int,java.lang.Object)>
<junit.framework.TestSuite: int testCount()>
<android.security.SystemKeyStore: java.lang.String retrieveKeyHexString(java.lang.String)>
<android.animation.LayoutTransition: void setAnimateParentHierarchy(boolean)>
<android.nfc.tech.MifareClassic: int getBlockCount()>
<android.view.accessibility.IAccessibilityManagerClient$Stub: void <init>()>
<android.net.sip.SipProfile$1: java.lang.Object createFromParcel(android.os.Parcel)>
<java.lang.Object: boolean moveToLast()>
<android.net.http.HttpAuthHeader: java.lang.String getNonce()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: java.lang.String access$1202(com.android.internal.telephony.cdma.CdmaLteUiccRecords,java.lang.String)>
<android.graphics.drawable.TransitionDrawable: boolean isCrossFadeEnabled()>
<GenerationGG: android.net.wifi.p2p.WifiP2pManager$PeerListListener get_androidnetwifip2pWifiP2pManager__PeerListListener()>
<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context)>
<android.view.GLES20Canvas: void nPrepare(int,boolean)>
<android.widget.TextView$SelectionStartHandleView: int getHotspotX(android.graphics.drawable.Drawable,boolean)>
<android.os.MemoryFile$MemoryInputStream: void reset()>
<com.android.server.DeviceStorageMonitorService: void postCheckMemoryMsg(boolean,long)>
<android.app.Activity: android.os.IBinder getActivityToken()>
<com.android.server.pm.PackageVerificationState: boolean isVerificationComplete()>
<android.content.res.Configuration: int hashCode()>
<android.net.UrlQuerySanitizer: void registerParameters(java.lang.String[],android.net.UrlQuerySanitizer$ValueSanitizer)>
<android.opengl.GLDebugHelper: javax.microedition.khronos.opengles.GL wrap(javax.microedition.khronos.opengles.GL,int,java.io.Writer)>
<android.gesture.GestureStroke: void clearPath()>
<android.media.JetPlayer: boolean native_triggerClip(int)>
<android.app.ExpandableListActivity: boolean onChildClick(android.widget.ExpandableListView,android.view.View,int,int,long)>
<android.util.SparseBooleanArray: boolean valueAt(int)>
<android.widget.RemoteViews$Action: void <init>(android.widget.RemoteViews$1)>
<android.util.LruCache: int evictionCount()>
<android.content.pm.ComponentInfo: void dumpFront(android.util.Printer,java.lang.String)>
<android.app.ActivityThread: void handleDumpActivity(android.app.ActivityThread$DumpComponentInfo)>
<com.android.server.sip.SipSessionGroup: java.util.EventObject access$1700()>
<android.bluetooth.BluetoothClass$1: void <init>()>
<com.android.server.sip.SipSessionListenerProxy$13: void <init>(com.android.server.sip.SipSessionListenerProxy,android.net.sip.ISipSession)>
<android.app.admin.IDevicePolicyManager$Stub$Proxy: void <init>(android.os.IBinder)>
<android.graphics.Paint: float getTextScaleX()>
<GenerationGG: android.text.style.StyleSpan get_androidtextstyleStyleSpan()>
<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimationForView(android.view.View)>
<android.content.SyncManager$SyncHandlerMessagePayload: void <init>(android.content.SyncManager,android.content.SyncManager$ActiveSyncContext,android.content.SyncResult)>
<android.app.backup.BackupAgentHelper: void <init>()>
<android.renderscript.RenderScript: void nProgramBindTexture(int,int,int)>
<android.content.SyncManager: void dumpTimeSec(java.io.PrintWriter,long)>
<com.android.server.wm.Session: void dragRecipientExited(android.view.IWindow)>
<com.android.server.ConnectivityService: android.net.ProxyProperties getProxy()>
<android.widget.AbsSpinner$RecycleBin: android.view.View get(int)>
<android.location.IGpsStatusProvider$Stub: android.os.IBinder asBinder()>
<android.widget.TableRow: int getVirtualChildCount()>
<android.mtp.MtpDevice: int[] getStorageIds()>
<com.android.server.PowerManagerService: long access$6300(com.android.server.PowerManagerService)>
<android.net.LocalSocket: boolean isBound()>
<android.view.HardwareRenderer$Gl20Renderer: android.graphics.SurfaceTexture createSurfaceTexture(android.view.HardwareLayer)>
<GenerationGG: android.provider.UserDictionary get_androidproviderUserDictionary()>
<com.android.internal.os.BatteryStatsImpl: long getPhoneSignalStrengthTime(int,long,int)>
<android.content.ISyncContext$Stub: void <init>()>
<android.media.audiofx.EnvironmentalReverb: void <clinit>()>
<android.graphics.Matrix$1: boolean preTranslate(float,float)>
<com.android.server.wm.WindowState: void getTouchableRegion(android.graphics.Region)>
<com.android.internal.os.BatteryStatsImpl: void readSummaryFromParcel(android.os.Parcel)>
<android.app.FragmentManager: void invalidateOptionsMenu()>
<android.app.INotificationManager$Stub: android.app.INotificationManager asInterface(android.os.IBinder)>
<Wrapper_android_util_JsonReader: void test_android_util_JsonReader()>
<com.android.internal.telephony.cat.Menu$1: com.android.internal.telephony.cat.Menu[] newArray(int)>
<android.test.mock.MockContentProvider$InversionIContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.text.style.BulletSpan: void <clinit>()>
<android.bluetooth.BluetoothDeviceProfileState: void writeTimerValue(long)>
<android.renderscript.Sampler: void <init>(int,android.renderscript.RenderScript)>
<Wrapper_android_test_TestSuiteProvider: void test_android_test_TestSuiteProvider()>
<Wrapper_android_database_sqlite_SQLiteCantOpenDatabaseException: void test_android_database_sqlite_SQLiteCantOpenDatabaseException()>
<android.view.GLES20Canvas: void setupFinalizer()>
<com.android.internal.telephony.SmsMessageBase: byte[] getUserData()>
<android.media.MediaRecorder: void <init>()>
<com.android.server.location.MockProvider: boolean requestSingleShotFix()>
<com.android.server.pm.PackageManagerService$MoveParams: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$InstallArgs,android.content.pm.IPackageMoveObserver,int,java.lang.String,java.lang.String)>
<android.app.FragmentManagerImpl$4: void <init>(android.app.FragmentManagerImpl,int,int)>
<android.app.backup.RestoreSet$1: void <init>()>
<android.renderscript.RenderScript: void validate()>
<com.android.internal.os.BatteryStatsImpl$StopwatchTimer: void startRunningLocked(com.android.internal.os.BatteryStatsImpl)>
<GenerationGG: android.text.style.QuoteSpan get_androidtextstyleQuoteSpan()>
<android.inputmethodservice.KeyboardView: android.inputmethodservice.Keyboard getKeyboard()>
<android.view.View$AttachInfo$InvalidateInfo: void release()>
<com.android.server.pm.UserManager: void <init>(java.io.File,java.io.File)>
<android.graphics.Canvas: void <init>()>
<android.test.mock.MockContext: java.lang.String[] databaseList()>
<com.android.server.pm.PackageManagerService$SdInstallArgs: java.lang.String getCodePath()>
<com.android.server.wm.AppWindowToken: void setDummyAnimation()>
<android.app.ApplicationErrorReport$AnrInfo: void <init>()>
<android.content.SyncManager$8: void <init>(android.content.SyncManager)>
<android.widget.ListPopupWindow$2: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)>
<android.renderscript.RenderScript: void nScriptSetVarObj(int,int,int)>
<android.graphics.drawable.shapes.RoundRectShape: android.graphics.drawable.shapes.RoundRectShape clone()>
<android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristics$TriState isRtlText(int)>
<android.net.http.HttpAuthHeader: boolean isSupportedScheme()>
<android.os.IRemoteCallback$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.internal.telephony.IntRangeManager$IntRange: void <init>(com.android.internal.telephony.IntRangeManager,com.android.internal.telephony.IntRangeManager$IntRange,int)>
<com.android.server.LocationManagerService$UpdateRecord: void <init>(com.android.server.LocationManagerService,java.lang.String,long,float,boolean,com.android.server.LocationManagerService$Receiver,int)>
<android.net.Uri$1: java.lang.Object[] newArray(int)>
<android.webkit.WebTextView$AutoCompleteAdapter: void setTextView(android.widget.TextView)>
<com.android.server.wm.ScreenRotationAnimation: void setSnapshotTransform(android.graphics.Matrix,float)>
<android.view.View: void invalidateParentIfNeeded()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimMdnLoaded: java.lang.String getEfName()>
<Wrapper_android_util_PrintWriterPrinter: void test_android_util_PrintWriterPrinter()>
<android.net.wifi.WifiStateMachine: void setWifiApConfiguration(android.net.wifi.WifiConfiguration)>
<com.android.internal.util.StateMachine$SmHandler: void access$1000(com.android.internal.util.StateMachine$SmHandler,com.android.internal.util.IState)>
<android.widget.RadioGroup: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)>
<android.widget.ListPopupWindow$PopupDataSetObserver: void <init>(android.widget.ListPopupWindow,android.widget.ListPopupWindow$1)>
<com.android.server.wm.Session: void wallpaperCommandComplete(android.os.IBinder,android.os.Bundle)>
<android.net.EthernetDataTracker: android.net.NetworkInfo access$200(android.net.EthernetDataTracker)>
<android.graphics.Bitmap$Config: void <clinit>()>
<DumbClass: void DumbMethod24()>
<android.renderscript.Long2: void <init>()>
<android.content.IntentFilter: boolean hasCategory(java.lang.String)>
<android.view.View: int computeVerticalScrollRange()>
<android.app.KeyguardManager$KeyguardLock: void <init>(android.app.KeyguardManager,java.lang.String)>
<com.android.internal.os.BatteryStatsImpl: void noteWifiRunningLocked(android.os.WorkSource)>
<android.media.AudioTrack$NativeEventHandlerDelegate$1: void <init>(android.media.AudioTrack$NativeEventHandlerDelegate,android.os.Looper,android.media.AudioTrack)>
<android.opengl.GLU: void gluLookAt(javax.microedition.khronos.opengles.GL10,float,float,float,float,float,float,float,float,float)>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean isApnTypeEnabled(java.lang.String)>
<android.content.res.TypedArray: int getIndexCount()>
<android.content.ContentProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>
<android.webkit.DeviceOrientationService: void getOrientationUsingGetRotationMatrix()>
<android.os.StrictMode$2: void <init>()>
<android.webkit.CacheLoader: void <clinit>()>
<android.inputmethodservice.InputMethodService: boolean isExtractViewShown()>
<android.widget.RemoteViews: int getLayoutId()>
<android.renderscript.FileA3D: android.renderscript.FileA3D createFromAsset(android.renderscript.RenderScript,android.content.res.AssetManager,java.lang.String)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: android.net.wifi.p2p.WifiP2pGroup access$7800(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<android.webkit.WebViewCore$2: void updateQuota(long)>
<android.net.Uri$Builder: android.net.Uri$Builder authority(android.net.Uri$Part)>
<GenerationGG: android.os.MessageQueue$IdleHandler get_androidosMessageQueue__IdleHandler()>
<android.graphics.drawable.ColorDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.test.ClassPathPackageInfoSource: android.test.ClassPathPackageInfo getPackageInfo(java.lang.String)>
<android.renderscript.RenderScript: int nFileA3DCreateFromAssetStream(int)>
<android.view.CompatibilityInfoHolder: void set(android.content.res.CompatibilityInfo)>
<android.view.OrientationEventListener: android.view.OrientationListener access$000(android.view.OrientationEventListener)>
<android.text.AndroidBidi: android.text.Layout$Directions directions(int,byte[],int,char[],int,int)>
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.io.InputStream,boolean)>
<android.net.Uri$StringUri: android.net.Uri$PathPart getPathPart()>
<com.android.internal.view.menu.ActionMenuPresenter: com.android.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu access$302(com.android.internal.view.menu.ActionMenuPresenter,com.android.internal.view.menu.ActionMenuPresenter$ActionButtonSubmenu)>
<com.android.internal.telephony.gsm.SIMRecords: void setVoiceMailByCountry(java.lang.String)>
<com.android.internal.telephony.IccCard: boolean access$500(com.android.internal.telephony.IccCard)>
<android.widget.AbsListView$MultiChoiceModeWrapper: void <init>(android.widget.AbsListView)>
<android.widget.TimePicker: void onConfigurationChanged(android.content.res.Configuration)>
<GenerationGG: android.content.res.Configuration get_androidcontentresConfiguration()>
<android.test.RenamingDelegatingContext: void makeExistingFilesAndDbsAccessible()>
<android.app.admin.DeviceAdminInfo: android.content.ComponentName getComponent()>
<android.widget.PopupMenu: boolean onMenuItemSelected(com.android.internal.view.menu.MenuBuilder,android.view.MenuItem)>
<android.widget.MediaController: android.widget.MediaController$MediaPlayerControl access$700(android.widget.MediaController)>
<android.widget.ListView: boolean isViewAncestorOf(android.view.View,android.view.View)>
<com.android.internal.telephony.sip.SipCommandInterface: void getNetworkSelectionMode(android.os.Message)>
<android.webkit.WebViewCore: android.webkit.BrowserFrame access$1102(android.webkit.WebViewCore,android.webkit.BrowserFrame)>
<android.graphics.drawable.RotateDrawable: int getIntrinsicWidth()>
<com.android.server.pm.PackageManagerService: android.content.pm.PermissionInfo generatePermissionInfo(com.android.server.pm.BasePermission,int)>
<android.telephony.PhoneNumberUtils: boolean isOneNanp(java.lang.String)>
<android.view.GLES20RecordingCanvas: void drawText(java.lang.String,float,float,android.graphics.Paint)>
<com.android.internal.telephony.ApnContext: void setWaitingApns(java.util.ArrayList)>
<android.appwidget.AppWidgetHostView: android.appwidget.AppWidgetProviderInfo getAppWidgetInfo()>
<com.android.server.WallpaperManagerService$WallpaperConnection: void <init>(com.android.server.WallpaperManagerService,android.app.WallpaperInfo)>
<android.widget.SearchView$4: void <init>(android.widget.SearchView)>
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getVoiceMailAlphaTag()>
<android.webkit.WebView: boolean access$7500(android.webkit.WebView)>
<android.graphics.Canvas: void native_drawBitmap(int,int[],int,int,float,float,int,int,boolean,int)>
<android.view.ViewRootImpl$3: android.graphics.Rect getSurfaceFrame()>
<com.android.server.usb.UsbService: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>
<android.nfc.NdefRecord$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.widget.TextView$EasyEditSpanController: void <init>(android.widget.TextView,android.widget.TextView$1)>
<android.view.GLES20Canvas: boolean clipPath(android.graphics.Path)>
<android.content.SyncManager: boolean access$2000(android.content.SyncManager,android.content.SyncManager$ActiveSyncContext)>
<android.location.Address: java.lang.String getUrl()>
<android.content.res.XmlBlock: void close()>
<android.accounts.AccountAuthenticatorResponse$1: void <init>()>
<com.android.internal.view.IInputConnectionWrapper: android.os.Message obtainMessageIISC(int,int,int,int,com.android.internal.view.IInputContextCallback)>
<android.content.ClipData$Item: void <init>(android.net.Uri)>
<android.view.View$BaseSavedState$1: android.view.View$BaseSavedState[] newArray(int)>
<android.widget.AbsListView: void setRecyclerListener(android.widget.AbsListView$RecyclerListener)>
<android.os.StrictMode$7: void <init>()>
<android.app.AlertDialog: void setButton2(java.lang.CharSequence,android.os.Message)>
<GenerationGG: android.os.PowerManager get_androidosPowerManager()>
<android.net.wifi.WifiConfiguration$IpAssignment: void <init>(java.lang.String,int)>
<android.text.format.Time: boolean before(android.text.format.Time)>
<android.content.SyncManager$SyncHandler$SyncNotificationInfo: void toString(java.lang.StringBuilder)>
<android.app.BackStackRecord: void bumpBackStackNesting(int)>
<android.test.AndroidTestRunner: java.lang.String getTestClassName()>
<com.android.server.accessibility.TouchExplorer: void clear(android.view.MotionEvent,int)>
<com.android.server.NotificationManagerService: android.os.Vibrator access$400(com.android.server.NotificationManagerService)>
<android.net.wifi.p2p.WifiP2pService: boolean access$4702(android.net.wifi.p2p.WifiP2pService,boolean)>
<com.android.server.BackupManagerService$BackupHandler: void <init>(com.android.server.BackupManagerService,android.os.Looper)>
<android.database.ContentObserver$Transport: void releaseContentObserver()>
<android.webkit.JWebCoreJavaBridge: void updateProxy(android.net.ProxyProperties)>
<android.view.inputmethod.InputMethodSubtype: int describeContents()>
<android.test.mock.MockContentProvider$InversionIContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])>
<com.android.internal.telephony.IccUtils: int cdmaBcdByteToInt(byte)>
<android.webkit.WebViewCore: void nativeSetFocusControllerActive(boolean)>
<com.android.internal.telephony.BaseCommands: void registerForRUIMLockedOrAbsent(android.os.Handler,int,java.lang.Object)>
<android.graphics.drawable.Drawable: android.graphics.Rect getBounds()>
<com.android.internal.telephony.gsm.GSMPhone: android.telephony.ServiceState getServiceState()>
<com.android.internal.os.BatteryStatsImpl: void noteProcessDiedLocked(int,int)>
<android.app.NativeActivity: void onStopNative(int)>
<android.view.accessibility.AccessibilityNodeInfo: void clear()>
<android.app.DownloadManager$CursorTranslator: void <init>(android.database.Cursor,android.net.Uri)>
<android.text.AndroidBidi: int bidi(int,char[],byte[],int,boolean)>
<android.widget.AbsListView: int getCheckedItemCount()>
<android.view.GestureDetector$GestureHandler: void <init>(android.view.GestureDetector)>
<android.test.MoreAsserts: void assertEquals(java.lang.String,java.util.Set,java.util.Set)>
<com.android.internal.telephony.sip.SipCommandInterface: void getSignalStrength(android.os.Message)>
<com.android.internal.telephony.cat.RilMessage: void <init>(com.android.internal.telephony.cat.RilMessage)>
<android.content.pm.PermissionGroupInfo: void <clinit>()>
<android.graphics.PathEffect: void <init>()>
<android.widget.PopupMenu: void onCloseMenu(com.android.internal.view.menu.MenuBuilder,boolean)>
<GenerationGG: java.lang.Boolean get_javalangBoolean()>
<android.net.wifi.WifiConfiguration: void <init>()>
<android.net.http.HttpAuthHeader: void setUsername(java.lang.String)>
<android.net.wifi.NetworkUpdateResult: boolean hasIpChanged()>
<android.webkit.WebView: int viewToContentX(int)>
<android.content.SyncManager$ActiveSyncContext: void sendHeartbeat()>
<android.net.wifi.p2p.WifiP2pDevice: void writeToParcel(android.os.Parcel,int)>
<GenerationGG: android.media.AudioRecord$OnRecordPositionUpdateListener get_androidmediaAudioRecord__OnRecordPositionUpdateListener()>
<android.server.BluetoothPanProfileHandler$BluetoothPanDevice: java.lang.String access$500(android.server.BluetoothPanProfileHandler$BluetoothPanDevice)>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: com.android.server.sip.SipSessionGroup$SipSessionImpl duplicate()>
<android.webkit.WebIconDatabase: android.webkit.WebIconDatabase getInstance()>
<android.view.GLES20Layer: void destroy()>
<android.content.pm.PackageParser$Service: void setPackageName(java.lang.String)>
<android.webkit.WebView$InnerGlobalLayoutListener: void onGlobalLayout()>
<android.widget.CalendarView: void <clinit>()>
<android.view.animation.Animation: void setAnimationListener(android.view.animation.Animation$AnimationListener)>
<android.graphics.drawable.shapes.PathShape: void <init>(android.graphics.Path,float,float)>
<com.android.internal.util.StateMachine$SmHandler: void quit()>
<android.app.Instrumentation$ActivityMonitor: boolean isBlocking()>
<android.media.JetPlayer: boolean native_setMuteFlag(int,boolean,boolean)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator setDuration(long)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState$1: void <init>(android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState)>
<android.net.http.ConnectionThread: void <init>(android.content.Context,int,android.net.http.RequestQueue$ConnectionManager,android.net.http.RequestFeeder)>
<android.widget.ListView: void setItemsCanFocus(boolean)>
<android.app.backup.IRestoreSession$Stub: android.os.IBinder asBinder()>
<Wrapper_android_accounts_AccountsException: void test_android_accounts_AccountsException()>
<android.content.res.AssetManager: int newTheme()>
<java.lang.Object: int getChildrenCount(int)>
<android.test.mock.MockResources: java.lang.CharSequence getText(int)>
<android.os.Parcel: void readStringArray(java.lang.String[])>
<android.net.http.Headers: void parseHeader(org.apache.http.util.CharArrayBuffer)>
<android.app.LoaderManagerImpl: android.app.LoaderManagerImpl$LoaderInfo createLoader(int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)>
<android.widget.AdapterView: void removeViewAt(int)>
<android.view.View: void setPivotY(float)>
<com.android.server.net.NetworkPolicyManagerService: java.io.File getSystemDir()>
<android.view.MotionEvent: void ensureSharedTempPointerCapacity(int)>
<android.graphics.Matrix: void setScale(float,float)>
<com.android.internal.telephony.gsm.SIMFileHandler: void loge(java.lang.String)>
<android.database.CursorWindow: int nativeCreate(java.lang.String,int,boolean)>
<com.android.internal.telephony.gsm.GSMPhone$2: void <clinit>()>
<android.media.SoundPool: int _load(java.lang.String,int)>
<android.view.View: boolean isLongClickable()>
<com.android.server.net.NetworkPolicyManagerService: void dumpSparseBooleanArray(java.io.PrintWriter,android.util.SparseBooleanArray)>
<android.view.View: int resolveSizeAndState(int,int,int)>
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: boolean processMessage(android.os.Message)>
<android.webkit.JWebCoreJavaBridge: void setActiveWebView(android.webkit.WebView)>
<android.location.Location: android.os.Bundle access$1102(android.location.Location,android.os.Bundle)>
<com.android.server.LightsService$Light: void access$500(com.android.server.LightsService$Light)>
<android.renderscript.ProgramStore$BlendDstFunc: void <init>(java.lang.String,int,int)>
<android.net.http.SslCertificate: void <clinit>()>
<android.widget.Gallery$2: void <init>(android.widget.Gallery)>
<android.content.IntentFilter: void addCategory(java.lang.String)>
<android.renderscript.RenderScript: int nFontCreateFromAsset(android.content.res.AssetManager,java.lang.String,float,int)>
<android.net.DhcpStateMachine: void registerForPreDhcpNotification()>
<android.widget.Chronometer: void setOnChronometerTickListener(android.widget.Chronometer$OnChronometerTickListener)>
<com.android.internal.telephony.gsm.GsmDataConnection: void log(java.lang.String)>
<GenerationGG: android.test.TestSuiteProvider get_androidtestTestSuiteProvider()>
<android.bluetooth.BluetoothDeviceProfileState: void access$9300(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<com.android.server.IntentResolver$IteratorWrapper: void <init>(com.android.server.IntentResolver,java.util.Iterator)>
<android.graphics.Rect: boolean contains(int,int)>
<android.graphics.Rect: void offsetTo(int,int)>
<android.webkit.HTML5VideoViewProxy: boolean onInfo(android.media.MediaPlayer,int,int)>
<android.widget.TextView: void setAutoLinkMask(int)>
<android.test.mock.MockContext: boolean startInstrumentation(android.content.ComponentName,java.lang.String,android.os.Bundle)>
<android.preference.PreferenceGroup: boolean isOnSameScreenAsChildren()>
<com.android.internal.telephony.WspTypeDecoder: java.lang.String getValueString()>
<com.android.internal.app.AlertController$1: void onClick(android.view.View)>
<android.view.MenuInflater$MenuState: boolean hasAddedItem()>
<android.mtp.MtpObjectInfo: java.lang.String getKeywords()>
<com.android.internal.telephony.IccCard$3: void <clinit>()>
<android.webkit.BrowserFrame: void nativeAuthenticationProceed(int,java.lang.String,java.lang.String)>
<android.net.wifi.WifiStateMachine: java.util.List syncGetScanResultsList()>
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: boolean containsMetaDataAt(int)>
<android.accounts.AccountAuthenticatorCache$MySerializer: void writeAsXml(android.accounts.AuthenticatorDescription,org.xmlpull.v1.XmlSerializer)>
<android.content.SyncAdapterType: int describeContents()>
<android.content.pm.LabeledIntent: void <init>(java.lang.String,int,int)>
<com.android.internal.telephony.sip.SipCommandInterface: void setLocationUpdates(boolean,android.os.Message)>
<android.database.CursorWrapper: int getPosition()>
<com.android.internal.app.AlertController$AlertParams$3: void <init>(com.android.internal.app.AlertController$AlertParams,com.android.internal.app.AlertController)>
<android.widget.RadioGroup$CheckedStateTracker: void <init>(android.widget.RadioGroup)>
<android.view.View: android.os.Handler getHandler()>
<android.location.Location: void setLatitude(double)>
<android.view.ViewRootImpl: void createContextMenu(android.view.ContextMenu)>
<android.content.pm.FeatureInfo$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.view.ViewRootImpl$TrackballAxis: void <init>()>
<android.view.textservice.SuggestionsInfo: void <init>(android.os.Parcel)>
<android.content.pm.IPackageDataObserver$Stub: android.content.pm.IPackageDataObserver asInterface(android.os.IBinder)>
<com.android.internal.telephony.DataConnection$DcDefaultState: void <init>(com.android.internal.telephony.DataConnection,com.android.internal.telephony.DataConnection$1)>
<android.webkit.BrowserFrame: void nativeGoBackOrForward(int)>
<com.android.server.am.ActivityManagerService: int getTaskForActivityLocked(android.os.IBinder,boolean)>
<android.view.TextureView: android.view.TextureView$SurfaceTextureListener getSurfaceTextureListener()>
<android.widget.ListView$FixedViewInfo: void <init>(android.widget.ListView)>
<android.net.TrafficStats: void <clinit>()>
<android.animation.LayoutTransition: void setInterpolator(int,android.animation.TimeInterpolator)>
<android.app.ActivityThread: void handleProfilerControl(boolean,android.app.ActivityThread$ProfilerControlData,int)>
<android.app.ApplicationErrorReport$RunningServiceInfo: void writeToParcel(android.os.Parcel,int)>
<Wrapper_android_graphics_ColorMatrix: void test_android_graphics_ColorMatrix()>
<android.net.wifi.WifiStateTracker: android.net.NetworkInfo access$100(android.net.wifi.WifiStateTracker)>
<android.view.GLES20Canvas: void resetDisplayListRenderer()>
<android.app.ApplicationLoaders: java.lang.ClassLoader getClassLoader(java.lang.String,java.lang.String,java.lang.ClassLoader)>
<com.android.server.WifiService$Multicaster: int getUid()>
<android.database.DatabaseUtils: void <init>()>
<android.util.SynchronizedPool: android.util.Poolable acquire()>
<android.view.ViewGroup$LayoutParams: java.lang.String sizeToString(int)>
<com.android.internal.telephony.cat.Input: void <init>()>
<android.graphics.Paint: void setClassVariablesFrom(android.graphics.Paint)>
<com.android.server.am.ActivityManagerService: boolean dumpPendingIntentsLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean)>
<android.view.View: void getHitRect(android.graphics.Rect)>
<android.widget.TextView: void setMinHeight(int)>
<android.view.accessibility.AccessibilityEvent: java.lang.String toString()>
<android.content.CursorLoader: void setSelection(java.lang.String)>
<android.app.Dialog: void setCancelable(boolean)>
<com.android.server.ThrottleService: long access$1302(com.android.server.ThrottleService,long)>
<android.net.wifi.WifiStateMachine: int access$4102(android.net.wifi.WifiStateMachine,int)>
<com.android.server.wm.WindowManagerService: void getDisplaySize(android.graphics.Point)>
<junit.framework.TestCase: void fail()>
<com.android.server.wm.WindowManagerService: boolean isWallpaperVisible(com.android.server.wm.WindowState)>
<android.util.JsonReader: android.util.JsonToken advance()>
<android.content.res.AssetFileDescriptor: void <clinit>()>
<com.android.server.wm.WindowManagerService: int computeSmallestWidth(boolean,int,int,float)>
<android.net.http.RequestQueue$ActivePool: void startup()>
<Wrapper_android_opengl_GLES10Ext: void test_android_opengl_GLES10Ext()>
<GenerationGG: android.media.JetPlayer get_androidmediaJetPlayer()>
<android.test.mock.MockPackageManager: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int)>
<android.webkit.ZoomManager: boolean isZoomAnimating()>
<android.view.ViewRootImpl$3: void setType(int)>
<android.provider.Telephony$Carriers: void <clinit>()>
<android.opengl.Matrix: void <init>()>
<android.os.Handler: boolean postAtTime(java.lang.Runnable,long)>
<android.widget.PopupWindow: void setAnimationStyle(int)>
<com.android.internal.telephony.ims.IsimUiccRecords: void log(java.lang.String)>
<android.hardware.usb.UsbAccessory: void writeToParcel(android.os.Parcel,int)>
<android.app.ContextImpl$ApplicationContentResolver: android.content.IContentProvider acquireExistingProvider(android.content.Context,java.lang.String)>
<com.android.internal.telephony.cat.SelectItemParams: boolean setIcon(android.graphics.Bitmap)>
<GenerationGG: android.os.RemoteException get_androidosRemoteException()>
<android.widget.GridLayout$5: android.widget.GridLayout$Bounds getBounds()>
<android.graphics.Point: void offset(int,int)>
<android.test.mock.MockContext: int checkUriPermission(android.net.Uri,int,int,int)>
<android.view.MotionEvent: float nativeGetAxisValue(int,int,int,int)>
<android.webkit.WebViewClient: void onPageFinished(android.webkit.WebView,java.lang.String)>
<android.webkit.WebView: android.webkit.SearchBox getSearchBox()>
<android.os.WorkSource$1: java.lang.Object[] newArray(int)>
<android.app.WallpaperManager: void setWallpaper(java.io.InputStream,java.io.FileOutputStream)>
<android.net.wifi.WifiConfigStore: void addIpSettingsFromConfig(android.net.LinkProperties,android.net.wifi.WifiConfiguration)>
<android.media.MediaPlayer: void native_init()>
<com.android.internal.telephony.IIccPhoneBook$Stub: android.os.IBinder asBinder()>
<android.content.pm.IPackageStatsObserver$Stub: android.content.pm.IPackageStatsObserver asInterface(android.os.IBinder)>
<android.renderscript.Element: int getSizeBytes()>
<com.android.server.net.NetworkStatsService: int access$1000(com.android.server.net.NetworkStatsService)>
<android.widget.Switch: boolean hitThumb(float,float)>
<android.server.BluetoothAdapterStateMachine: void access$4200(android.server.BluetoothAdapterStateMachine,com.android.internal.util.IState)>
<android.widget.SuggestionsAdapter$ChildViewCache: void <init>(android.view.View)>
<android.util.LruCache: int sizeOf(java.lang.Object,java.lang.Object)>
<android.content.Intent$ShortcutIconResource: void <clinit>()>
<com.android.server.location.MockProvider: boolean requiresNetwork()>
<GenerationGG: android.media.effect.EffectUpdateListener get_androidmediaeffectEffectUpdateListener()>
<android.opengl.Matrix: void rotateM(float[],int,float,float,float,float)>
<android.webkit.GeolocationPermissions: void getAllowed(java.lang.String,android.webkit.ValueCallback)>
<android.graphics.Matrix: void mapPoints(float[],float[])>
<android.os.BatteryStats$HistoryPrinter: void printNextItem(java.io.PrintWriter,android.os.BatteryStats$HistoryItem,long)>
<GenerationGG: android.widget.ExpandableListView$OnGroupCollapseListener get_androidwidgetExpandableListView__OnGroupCollapseListener()>
<android.app.LoaderManagerImpl$LoaderInfo: void <init>(android.app.LoaderManagerImpl,int,android.os.Bundle,android.app.LoaderManager$LoaderCallbacks)>
<android.view.MotionEvent: int getPointerId(int)>
<android.server.BluetoothHealthProfileHandler$HealthChannel: void <init>(android.server.BluetoothHealthProfileHandler,android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration,android.os.ParcelFileDescriptor,boolean,java.lang.String)>
<android.text.TextPaint: void set(android.text.TextPaint)>
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityRecord getRecord(int)>
<android.net.LocalSocket: boolean isInputShutdown()>
<android.graphics.YuvImage: int getYuvFormat()>
<android.app.LoaderManagerImpl$LoaderInfo: void callOnLoadFinished(android.content.Loader,java.lang.Object)>
<android.net.NetworkUtils: java.net.InetAddress getNetworkPart(java.net.InetAddress,int)>
<android.net.wifi.WifiStateMachine: com.android.internal.util.State access$9600(android.net.wifi.WifiStateMachine)>
<android.os.Handler$MessengerImpl: void <init>(android.os.Handler)>
<android.test.suitebuilder.AssignableFrom: void <init>(java.lang.Class)>
<android.widget.ExpandableListPosition: android.widget.ExpandableListPosition obtain(int,int,int,int)>
<android.widget.BaseAdapter: void registerDataSetObserver(android.database.DataSetObserver)>
<Wrapper_android_appwidget_AppWidgetProviderInfo: void test_android_appwidget_AppWidgetProviderInfo()>
<com.android.server.pm.PackageManagerService: java.io.File getDataPathForPackage(java.lang.String,int)>
<android.webkit.WebSettings: void setUseDoubleTree(boolean)>
<android.bluetooth.BluetoothDeviceProfileState: void access$5000(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.animation.PropertyValuesHolder: void setupSetterAndGetter(java.lang.Object)>
<android.nfc.NfcActivityManager$NfcActivityState: java.lang.String toString()>
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean isItalianLeadingZero()>
<android.text.util.Rfc822Token: int hashCode()>
<com.android.server.pm.Installer: int dexopt(java.lang.String,int,boolean)>
<android.media.AudioTrack: void audioParamCheck(int,int,int,int,int)>
<android.mtp.MtpDevice: int[] getObjectHandles(int,int,int)>
<android.webkit.WebResourceResponse$Loader: void buildHeaders(android.net.http.Headers)>
<android.app.Dialog: android.view.LayoutInflater getLayoutInflater()>
<android.net.Uri$PathPart: java.lang.String getEncoded()>
<android.content.ComponentName: java.lang.String getShortClassName()>
<android.view.InputDevice: void readFromParcel(android.os.Parcel)>
<com.android.server.ThrottleService$1: void onReceive(android.content.Context,android.content.Intent)>
<com.android.server.pm.PackageManagerService: void setInstallerPackageName(java.lang.String,java.lang.String)>
<Wrapper_android_database_sqlite_SQLiteDoneException: void test_android_database_sqlite_SQLiteDoneException()>
<android.widget.PopupWindow: boolean isSplitTouchEnabled()>
<com.android.internal.telephony.cdma.CDMAPhone: void unregisterForEriFileLoaded(android.os.Handler)>
<android.webkit.AccessibilityInjector$AccessibilityWebContentKeyBinding: int getActionCount()>
<com.android.internal.telephony.sip.SipCommandInterface: void getDeviceIdentity(android.os.Message)>
<java.lang.Object: boolean isAfterLast()>
<android.app.ProgressDialog: void setProgressNumberFormat(java.lang.String)>
<android.media.MediaRecorder: void setAudioEncoder(int)>
<android.view.Surface: void setFlags(int,int)>
<android.net.DhcpInfo$1: void <init>()>
<android.net.Uri$HierarchicalUri: java.lang.String getSchemeSpecificPart()>
<android.net.wifi.WifiWatchdogStateMachine: int access$2200(android.net.wifi.WifiWatchdogStateMachine)>
<android.os.Debug: void resetGlobalExternalFreedCount()>
<android.widget.GridLayout: int getMargin1(android.view.View,boolean,boolean)>
<android.widget.HeaderViewListAdapter: int getHeadersCount()>
<android.animation.LayoutTransition: void removeTransitionListener(android.animation.LayoutTransition$TransitionListener)>
<android.view.animation.Animation: boolean hasAlpha()>
<android.app.ReceiverRestrictedContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>
<com.android.internal.telephony.cdma.CdmaMmiCode: boolean isRegister()>
<android.hardware.Camera$Size: boolean equals(java.lang.Object)>
<com.android.server.DevicePolicyManagerService: long getPasswordExpirationLocked(android.content.ComponentName)>
<android.app.SearchableInfo: int getVoicePromptTextId()>
<android.graphics.drawable.LayerDrawable: boolean getPadding(android.graphics.Rect)>
<android.app.backup.RestoreSet: void <clinit>()>
<android.net.http.RequestHandle: java.lang.String authorizationHeader(boolean)>
<android.text.Html$HtmlParser: void <clinit>()>
<android.server.BluetoothService: boolean createChannelNative(java.lang.String,java.lang.String,java.lang.String,int)>
<android.hardware.usb.UsbRequest: void finalize()>
<android.graphics.Interpolator: void finalize()>
<android.net.sip.SipProfile$1: java.lang.Object[] newArray(int)>
<android.webkit.WebViewDatabase: void <init>(android.content.Context)>
<android.server.BluetoothService: java.lang.String registerHealthApplicationNative(int,java.lang.String,java.lang.String)>
<android.preference.PreferenceManager: int getSharedPreferencesMode()>
<android.inputmethodservice.KeyboardView$SwipeTracker: void clear()>
<android.webkit.WebIconDatabase$EventHandler: void <init>(android.webkit.WebIconDatabase$1)>
<com.android.server.sip.SipService$SipSessionGroupExt: void setIncomingCallPendingIntent(android.app.PendingIntent)>
<android.telephony.PhoneNumberUtils: boolean isSeparator(char)>
<com.android.internal.telephony.IIccPhoneBook$Stub: void <init>()>
<android.webkit.WebView: void setSelection(int,int)>
<android.view.WindowManager$LayoutParams: int copyFrom(android.view.WindowManager$LayoutParams)>
<android.view.View: float getAlpha()>
<android.text.method.BaseMovementMethod: boolean leftWord(android.widget.TextView,android.text.Spannable)>
<android.graphics.drawable.BitmapDrawable: int getIntrinsicWidth()>
<android.view.Surface: void finalize()>
<android.content.ContentValues$1: void <init>()>
<android.view.Surface: void setOrientation(int,int)>
<android.widget.NumberPicker: void fling(int)>
<android.os.Debug: int getGlobalExternalFreedCount()>
<android.app.ProgressDialog: android.widget.TextView access$400(android.app.ProgressDialog)>
<GenerationGG: android.webkit.WebViewDatabase get_androidwebkitWebViewDatabase()>
<android.widget.StackView$LayoutParams: void <init>(android.widget.StackView,android.view.View)>
<android.telephony.NeighboringCellInfo: void <clinit>()>
<android.net.wifi.WifiInfo: void setLinkSpeed(int)>
<android.net.wifi.WifiWatchdogStateMachine: int access$008(android.net.wifi.WifiWatchdogStateMachine)>
<android.os.AsyncTask: android.os.AsyncTask$Status getStatus()>
<com.android.internal.os.BatteryStatsImpl: void commitPendingDataToDisk()>
<android.widget.AutoCompleteTextView$MyWatcher: void <init>(android.widget.AutoCompleteTextView,android.widget.AutoCompleteTextView$1)>
<android.graphics.Region: void scale(float,android.graphics.Region)>
<com.android.internal.telephony.cdma.sms.BearerData: int countAsciiSeptets(java.lang.CharSequence,boolean)>
<android.view.MotionEvent: float getPressure()>
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: void ensureFit(int)>
<android.graphics.PathMeasure: boolean isClosed()>
<android.database.CursorJoiner$Result: android.database.CursorJoiner$Result[] values()>
<android.content.pm.ParceledListSlice$1: void <init>()>
<android.app.admin.DevicePolicyManager: int getPasswordMaximumLength(int)>
<com.android.server.wm.InputManager: void nativeGetInputConfiguration(android.content.res.Configuration)>
<android.text.PackedObjectVector: void deleteAt(int,int)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfPlLoaded: void <init>(com.android.internal.telephony.cdma.CdmaLteUiccRecords)>
<android.nfc.NfcAdapter: android.nfc.NfcAdapter getDefaultAdapter(android.content.Context)>
<android.webkit.LoadListener: void status(int,int,int,java.lang.String)>
<android.graphics.PathMeasure: void setPath(android.graphics.Path,boolean)>
<android.content.res.CompatibilityInfo$Translator: void translateEventInScreenToAppWindow(android.view.MotionEvent)>
<android.app.Activity: void setFeatureDrawableResource(int,int)>
<GenerationGG: android.renderscript.Float2 get_androidrenderscriptFloat2()>
<android.widget.CursorAdapter: void setFilterQueryProvider(android.widget.FilterQueryProvider)>
<android.text.style.UnderlineSpan: void <init>(android.os.Parcel)>
<android.app.Instrumentation$EmptyRunnable: void <init>(android.app.Instrumentation$1)>
<android.app.ContextImpl: java.lang.String getPackageResourcePath()>
<android.view.textservice.SpellCheckerInfo: android.content.pm.ServiceInfo getServiceInfo()>
<android.graphics.Bitmap: void checkXYSign(int,int)>
<com.android.server.AttributeCache$Package: void <init>(android.content.Context)>
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(android.view.accessibility.AccessibilityEvent)>
<android.renderscript.Element: android.renderscript.Element U8_4(android.renderscript.RenderScript)>
<com.android.internal.widget.ActionBarView: com.android.internal.view.menu.ActionMenuItem access$200(com.android.internal.widget.ActionBarView)>
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain(int)>
<android.security.KeyChain$1: void onServiceDisconnected(android.content.ComponentName)>
<android.bluetooth.BluetoothProfileState: int access$200(android.bluetooth.BluetoothProfileState)>
<GenerationGG: java.lang.String[][] get_javalangString_ARRAY__ARRAY_()>
<android.text.method.TextKeyListener$Capitalize: void <init>(java.lang.String,int)>
<android.webkit.WebView: void nativeShowCursorTimed()>
<java.lang.Object: java.lang.String getNamespaceUri(int)>
<android.text.style.BulletSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)>
<android.location.Criteria$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.view.KeyEvent: void <init>(android.view.KeyEvent,long,int)>
<android.widget.GridLayout$5: void <init>()>
<android.view.KeyEvent: boolean isCapsLockOn()>
<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.Drawable getDrawable()>
<android.widget.TextView$Marquee: void stop()>
<android.app.Fragment$SavedState$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.accounts.AccountManager: void ensureNotOnMainThread()>
<android.graphics.Matrix: boolean native_preSkew(int,float,float)>
<android.view.HardwareRenderer$GlRenderer: boolean validate()>
<android.graphics.drawable.ScaleDrawable: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
<android.os.Debug: int getGlobalFreedCount()>
<GenerationGG: android.view.KeyCharacterMap get_androidviewKeyCharacterMap()>
<android.content.SyncStorageEngine: boolean isSyncActive(android.accounts.Account,java.lang.String)>
<android.net.sip.SipProfile: java.lang.String access$800(android.net.sip.SipProfile)>
<com.android.server.CountryDetectorService: void removeListener(android.os.IBinder)>
<android.view.View: boolean isInScrollingContainer()>
<android.os.IVibratorService$Stub: android.os.IBinder asBinder()>
<android.widget.AutoCompleteTextView: void setDropDownAnchor(int)>
<android.util.LruCache: int createCount()>
<com.android.server.AlarmManagerService: android.os.PowerManager$WakeLock access$1500(com.android.server.AlarmManagerService)>
<android.widget.SimpleExpandableListAdapter: boolean hasStableIds()>
<android.webkit.SearchBoxImpl: void handleIsSupportedCallback(boolean)>
<android.widget.ExpandableListConnector$PositionMetadata: void resetState()>
<android.database.CursorWindow: boolean nativePutDouble(int,double,int,int)>
<android.graphics.drawable.LayerDrawable: void ensurePadding()>
<android.view.MotionEvent: void nativeDispose(int)>
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getLine1AlphaTag()>
<android.app.ActivityThread$ApplicationThread: void scheduleLaunchActivity(android.content.Intent,android.os.IBinder,int,android.content.pm.ActivityInfo,android.content.res.Configuration,android.content.res.CompatibilityInfo,android.os.Bundle,java.util.List,java.util.List,boolean,boolean,java.lang.String,android.os.ParcelFileDescriptor,boolean)>
<android.app.backup.SharedPreferencesBackupHelper: void performBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>
<android.test.mock.MockContext: void enforceCallingUriPermission(android.net.Uri,int,java.lang.String)>
<com.android.internal.telephony.cdma.sms.BearerData: java.lang.String decodeDtmfSmsAddress(byte[],int)>
<android.app.ProgressDialog: android.widget.TextView access$200(android.app.ProgressDialog)>
<android.widget.DigitalClock$1: void <init>(android.widget.DigitalClock)>
<GenerationGG: android.accounts.OnAccountsUpdateListener get_androidaccountsOnAccountsUpdateListener()>
<android.view.WindowManager$LayoutParams: java.lang.CharSequence getTitle()>
<android.service.wallpaper.IWallpaperService$Stub: android.service.wallpaper.IWallpaperService asInterface(android.os.IBinder)>
<android.renderscript.Matrix4f: void loadIdentity()>
<com.android.server.sip.SipSessionListenerProxy: void onCallEstablished(android.net.sip.ISipSession,java.lang.String)>
<android.widget.Toast: void setDuration(int)>
<android.widget.RelativeLayout$DependencyGraph: void <init>(android.widget.RelativeLayout$1)>
<android.view.View: int getDefaultSize(int,int)>
<android.os.RegistrantList: void removeCleared()>
<com.android.internal.net.NetworkStatsFactory: android.net.NetworkStats readNetworkStatsSummarySingleFile()>
<com.android.internal.telephony.WspTypeDecoder: void <clinit>()>
<android.widget.RelativeLayout$LayoutParams: int access$200(android.widget.RelativeLayout$LayoutParams)>
<android.widget.Scroller: void setFinalX(int)>
<android.view.KeyEvent: int getMetaState()>
<android.content.Intent: int getFlags()>
<android.webkit.WebSettings: void setJavaScriptEnabled(boolean)>
<android.content.res.CompatibilityInfo: boolean neverSupportsScreen()>
<android.app.TabActivity: void <init>()>
<android.nfc.tech.NdefFormatable: android.nfc.Tag getTag()>
<android.content.res.StringBlock$StyleIDs: int access$502(android.content.res.StringBlock$StyleIDs,int)>
<android.app.ActivityGroup: void dispatchActivityResult(java.lang.String,int,int,android.content.Intent)>
<android.content.IntentFilter$AuthorityEntry: void <init>(java.lang.String,java.lang.String)>
<android.net.wifi.WifiNative: boolean setBluetoothCoexistenceScanModeCommand(boolean)>
<android.app.FragmentState: void <clinit>()>
<android.net.RouteInfo: java.net.InetAddress getGateway()>
<com.android.server.NotificationManagerService$SettingsObserver: void <init>(com.android.server.NotificationManagerService,android.os.Handler)>
<GenerationGG: android.graphics.PathMeasure get_androidgraphicsPathMeasure()>
<android.media.MediaPlayer: void setOnBufferingUpdateListener(android.media.MediaPlayer$OnBufferingUpdateListener)>
<android.bluetooth.BluetoothDeviceProfileState: android.os.Message access$7300(android.bluetooth.BluetoothDeviceProfileState)>
<android.database.AbstractCursor: byte[] getBlob(int)>
<android.text.format.Time: java.lang.String format1(java.lang.String)>
<GenerationGG: android.view.inputmethod.ExtractedText get_androidviewinputmethodExtractedText()>
<android.text.Layout: void increaseWidthTo(int)>
<android.app.ActivityManagerProxy: void <init>(android.os.IBinder)>
<com.android.internal.telephony.sip.SipCommandInterface: void getPreferredNetworkType(android.os.Message)>
<com.android.internal.util.StateMachine$SmHandler: android.os.Message access$700(com.android.internal.util.StateMachine$SmHandler)>
<android.media.audiofx.Equalizer: void setProperties(android.media.audiofx.Equalizer$Settings)>
<GenerationGG: android.content.ComponentCallbacks2 get_androidcontentComponentCallbacks2()>
<android.os.MemoryFile: void deactivate()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState: void enter()>
<com.android.server.am.ActivityManagerService: boolean switchUser(int)>
<android.nfc.NdefMessage: byte[] toByteArray()>
<android.widget.ListPopupWindow: void setInputMethodMode(int)>
<android.app.Fragment: void <init>()>
<android.opengl.ETC1Util$ETC1Texture: void <init>(int,int,java.nio.ByteBuffer)>
<android.net.wifi.WifiStateMachine$SoftApStartingState$1: void <init>(android.net.wifi.WifiStateMachine$SoftApStartingState,android.net.wifi.WifiConfiguration)>
<android.net.NetworkUtils: java.net.InetAddress hexToInet6Address(java.lang.String)>
<com.android.server.sip.SipSessionGroup$SipSessionImpl$SessionTimer$1: void <init>(com.android.server.sip.SipSessionGroup$SipSessionImpl$SessionTimer,int)>
<android.graphics.drawable.GradientDrawable: int getIntrinsicHeight()>
<com.android.internal.widget.ScrollingTabContainerView: void setContentHeight(int)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofObject(java.lang.Object,java.lang.String,android.animation.TypeEvaluator,java.lang.Object[])>
<android.widget.StackView$1: void <init>(android.widget.StackView,android.view.View)>
<android.graphics.Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>
<com.android.server.PowerManagerService: android.content.ContentQueryMap access$1200(com.android.server.PowerManagerService)>
<android.test.mock.MockApplication: void <init>()>
<android.widget.TextView$SavedState: void <clinit>()>
<com.android.internal.widget.LockPatternUtils: void <clinit>()>
<android.filterfw.core.FieldPort: java.lang.String toString()>
<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs createInstallArgs(android.net.Uri,int,java.lang.String,java.lang.String)>
<android.graphics.Canvas: void native_drawBitmap(int,int,android.graphics.Rect,android.graphics.RectF,int,int,int)>
<android.bluetooth.BluetoothDeviceProfileState: android.bluetooth.BluetoothHeadset access$1300(android.bluetooth.BluetoothDeviceProfileState)>
<android.widget.NumberPicker: java.lang.String formatNumber(int)>
<android.net.sip.SipAudioCall: void throwSipException(java.lang.Throwable)>
<android.content.res.XmlBlock$Parser: boolean getFeature(java.lang.String)>
<android.widget.AbsListView: void onRemoteAdapterDisconnected()>
<android.app.backup.BackupAgent$BackupServiceBinder: void <init>(android.app.backup.BackupAgent)>
<android.mtp.MtpDevice: android.mtp.MtpStorageInfo native_get_storage_info(int)>
<com.android.server.net.NetworkStatsService: android.os.Handler access$800(com.android.server.net.NetworkStatsService)>
<Wrapper_android_graphics_Rasterizer: void test_android_graphics_Rasterizer()>
<com.android.internal.app.ActionBarImpl: android.view.View access$000(com.android.internal.app.ActionBarImpl)>
<android.view.HardwareRenderer$GlRenderer: int checkCurrent()>
<com.android.internal.os.BatteryStatsImpl: long getPhoneSignalScanningTime(long,int)>
<com.android.server.accessibility.AccessibilityManagerService$3: void <init>(com.android.server.accessibility.AccessibilityManagerService,android.os.Handler)>
<android.net.wifi.WifiStateMachine: android.os.PowerManager$WakeLock access$1600(android.net.wifi.WifiStateMachine)>
<android.os.WorkSource: void set(int)>
<android.server.BluetoothService: int[] addReservedServiceRecordsNative(int[])>
<com.android.internal.telephony.gsm.SmsMessage: boolean isReplyPathPresent()>
<android.graphics.Canvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)>
<android.os.storage.IObbActionListener$Stub: void <init>()>
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub: android.os.IBinder asBinder()>
<android.inputmethodservice.KeyboardView: int access$1000(android.inputmethodservice.KeyboardView)>
<com.android.internal.os.BatteryStatsImpl: int getInputEventCount(int)>
<android.os.Parcel: void restoreAllowFds(boolean)>
<android.animation.ArgbEvaluator: java.lang.Object evaluate(float,java.lang.Object,java.lang.Object)>
<android.widget.AbsListView: void deferNotifyDataSetChanged()>
<android.view.View: boolean canAcceptDrag()>
<com.android.internal.telephony.SmsMessageBase: byte[] getPdu()>
<android.util.Base64: java.lang.String encodeToString(byte[],int,int,int)>
<com.android.internal.telephony.cdma.sms.CdmaSmsAddress: void <clinit>()>
<android.view.MotionEvent: int nativeGetButtonState(int)>
<android.os.DropBoxManager$Entry: void <init>(java.lang.String,long)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setPositiveButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.graphics.Rect: boolean intersect(int,int,int,int)>
<android.app.LocalActivityManager: android.app.Activity getActivity(java.lang.String)>
<android.text.TextUtils$SimpleStringSplitter: java.lang.String next()>
<android.graphics.PointF$1: void <init>()>
<android.content.SyncManager$7: void onStatusChanged(int)>
<android.os.storage.IMountService$Stub$Proxy: android.os.IBinder asBinder()>
<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.widget.AbsListView: int getLeftPaddingOffset()>
<android.animation.AnimatorSet$AnimatorSetListener: void <init>(android.animation.AnimatorSet,android.animation.AnimatorSet)>
<com.android.internal.widget.ActionBarView$SavedState: void <clinit>()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: java.lang.String access$900(com.android.internal.telephony.cdma.CdmaLteUiccRecords)>
<GenerationGG: android.content.pm.PermissionGroupInfo get_androidcontentpmPermissionGroupInfo()>
<android.app.ContextImpl: void enforceForUri(int,int,boolean,int,android.net.Uri,java.lang.String)>
<android.net.Uri$StringUri: java.lang.String parsePath()>
<android.net.http.Headers: java.lang.String getLocation()>
<com.android.server.NativeDaemonConnector: void monitor()>
<android.location.Address: double getLatitude()>
<android.widget.RatingBar: void onStopTrackingTouch()>
<android.content.IContentService$Stub$Proxy: android.os.IBinder asBinder()>
<android.test.suitebuilder.TestGrouping$SortBySimpleName: void <init>(android.test.suitebuilder.TestGrouping$1)>
<com.android.server.UiModeManagerService: int getNightMode()>
<android.content.ContextWrapper: android.content.ContentResolver getContentResolver()>
<android.text.Layout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,android.text.TextDirectionHeuristic,float,float)>
<java.lang.Object: java.lang.Object getItem(int)>
<com.android.server.LocationManagerService$LpPowerComparator: void <init>(com.android.server.LocationManagerService,com.android.server.LocationManagerService$1)>
<junit.framework.TestCase: void runBare()>
<android.view.ActionMode: java.lang.Object getTag()>
<android.app.AppGlobals: java.lang.String getInitialPackage()>
<com.android.server.DeviceStorageMonitorService: boolean isMemoryLow()>
<android.app.AlertDialog: void setCustomTitle(android.view.View)>
<android.content.res.AssetManager: int loadThemeAttributeValue(int,int,android.util.TypedValue,boolean)>
<android.graphics.Matrix: boolean native_preRotate(int,float,float,float)>
<android.media.audiofx.EnvironmentalReverb: void setDecayHFRatio(short)>
<com.android.internal.widget.LockPatternView$SavedState$1: java.lang.Object[] newArray(int)>
<android.text.TextUtils: int getTrimmedLength(java.lang.CharSequence)>
<com.android.internal.telephony.Phone$DataState: void <init>(java.lang.String,int)>
<com.android.internal.net.VpnConfig: void <clinit>()>
<android.app.Fragment: void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle)>
<android.widget.TextView$Marquee: void tick()>
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: boolean processMessage(android.os.Message)>
<com.android.internal.telephony.sip.SipCommandInterface: void setPreferredNetworkType(int,android.os.Message)>
<android.accounts.AccountAuthenticatorActivity: void <init>()>
<android.app.IInstrumentationWatcher$Stub: android.app.IInstrumentationWatcher asInterface(android.os.IBinder)>
<com.android.server.connectivity.Vpn$LegacyVpnRunner: void exit()>
<android.view.ViewRootImpl: void addConfigCallback(android.content.ComponentCallbacks)>
<android.content.SyncStatusInfo: long getPeriodicSyncTime(int)>
<android.net.NetworkPolicy$1: android.net.NetworkPolicy[] newArray(int)>
<android.media.AudioTrack: void native_flush()>
<android.bluetooth.BluetoothDevice: void <clinit>()>
<com.android.server.LightsService$Light: void turnOff()>
<com.android.internal.os.ProcessStats: com.android.internal.os.ProcessStats$Stats getWorkingStats(int)>
<android.appwidget.AppWidgetHost$Callbacks: void providerChanged(int,android.appwidget.AppWidgetProviderInfo)>
<android.media.AudioRecord: int read(byte[],int,int)>
<android.location.LocationManager$GpsStatusListenerTransport: android.location.GpsStatus$NmeaListener access$400(android.location.LocationManager$GpsStatusListenerTransport)>
<com.android.server.DevicePolicyManagerService$1$1: void <init>(com.android.server.DevicePolicyManagerService$1)>
<android.content.res.AssetFileDescriptor: void close()>
<android.drm.DrmInfoRequest: void <init>(int,java.lang.String)>
<android.widget.TextView: int access$400(android.widget.TextView)>
<android.view.WindowManagerImpl$CompatModeWrapper: void <init>(android.view.WindowManager,android.view.CompatibilityInfoHolder)>
<com.android.server.pm.PackageManagerService: boolean isSystemApp(android.content.pm.ApplicationInfo)>
<android.os.Parcel: void readCharArray(char[])>
<android.webkit.WebViewCore: void nativeDumpNavTree()>
<android.webkit.HTML5VideoViewProxy: void onCompletion(android.media.MediaPlayer)>
<android.net.wifi.IWifiManager$Stub: void <init>()>
<android.content.pm.ConfigurationInfo: void <init>()>
<com.android.internal.telephony.ServiceStateTracker: void <clinit>()>
<android.os.storage.IMountServiceListener$Stub$Proxy: void <init>(android.os.IBinder)>
<android.app.Instrumentation: void onDestroy()>
<android.app.ActivityThread: java.lang.String getProcessName()>
<com.android.server.ConnectivityService: java.lang.String access$1300(com.android.server.ConnectivityService)>
<android.graphics.Canvas: void native_getCTM(int,int)>
<android.telephony.gsm.GsmCellLocation: void setLacAndCid(int,int)>
<android.view.MotionEvent: void nativeWriteToParcel(int,android.os.Parcel)>
<com.android.internal.os.ProcessStats$Stats: void <init>(int,int,boolean)>
<android.app.Fragment: int hashCode()>
<android.graphics.drawable.BitmapDrawable$BitmapState: int getChangingConfigurations()>
<android.view.MotionEvent: boolean isWithinBoundsNoHistory(float,float,float,float)>
<android.view.animation.AnticipateOvershootInterpolator: float getInterpolation(float)>
<android.graphics.Paint: void setStrokeWidth(float)>
<android.webkit.LoadListener: void notifyError()>
<android.media.Ringtone: void <init>(android.content.Context)>
<android.net.Uri$Builder: android.net.Uri$Builder scheme(java.lang.String)>
<GenerationGG: android.os.IBinder[] get_androidosIBinder_ARRAY_()>
<GenerationGG: android.app.AlertDialog get_androidappAlertDialog()>
<android.util.JsonWriter: android.util.JsonWriter beginArray()>
<android.text.DynamicLayout: int getParagraphDirection(int)>
<android.widget.OverScroller$SplineOverScroller: float getDeceleration(int)>
<android.net.NetworkStats: java.lang.String toString()>
<android.widget.RelativeLayout$LayoutParams: int access$102(android.widget.RelativeLayout$LayoutParams,int)>
<android.view.View: boolean isLayoutRequested()>
<com.android.server.DeviceStorageMonitorService$CachePackageDataObserver: void <init>(com.android.server.DeviceStorageMonitorService)>
<android.media.audiofx.AudioEffect: int getParameter(int[],int[])>
<com.android.server.location.GeocoderProxy$Connection: void onServiceDisconnected(android.content.ComponentName)>
<android.filterfw.core.CachedFrameManager: void <init>()>
<android.animation.KeyframeSet: void setEvaluator(android.animation.TypeEvaluator)>
<com.android.internal.telephony.cat.Tone$1: java.lang.Object[] newArray(int)>
<com.android.internal.telephony.sip.SipPhoneBase: boolean getMessageWaitingIndicator()>
<android.text.method.PasswordTransformationMethod: void <init>()>
<com.android.internal.widget.LockPatternUtils$PasswordFileObserver: void <init>(java.lang.String,int)>
<java.lang.Object: java.lang.String getAttributePrefix(int)>
<android.graphics.Rect: void <init>(android.graphics.Rect)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$5: void <init>(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<android.util.JsonReader: int getLineNumber()>
<android.view.GLES20RecordingCanvas: android.view.GLES20RecordingCanvas obtain(android.view.GLES20DisplayList)>
<android.hardware.Camera$Size: int hashCode()>
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: boolean isDisconnected()>
<android.test.ViewAsserts: void assertHasScreenCoordinates(android.view.View,android.view.View,int,int)>
<android.view.animation.AnimationSet: long getStartTime()>
<com.android.server.am.ActivityManagerService: void removeReceiverLocked(com.android.server.am.ReceiverList)>
<com.android.server.WallpaperManagerService$MyPackageMonitor: void onPackageUpdateStarted(java.lang.String,int)>
<android.view.View: android.view.View findViewById(int)>
<android.widget.TextView: android.content.Context access$5400(android.widget.TextView)>
<android.util.LocaleUtil: int getLayoutDirectionFromLocale(java.util.Locale)>
<android.webkit.CallbackProxy$UploadFile: void onReceiveValue(java.lang.Object)>
<android.server.BluetoothService: boolean setAdapterPropertyBooleanNative(java.lang.String,int)>
<android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs: void <init>(android.view.ViewRootImpl$AccessibilityInteractionController)>
<android.os.HandlerThread: android.os.Looper getLooper()>
<com.android.internal.app.IBatteryStats$Stub: void <init>()>
<android.appwidget.AppWidgetHostView$Padding: void <init>(android.appwidget.AppWidgetHostView$1)>
<android.os.Parcel: int dataSize()>
<android.database.sqlite.SQLiteAccessPermException: void <init>()>
<android.os.Parcel: void writeBooleanArray(boolean[])>
<DumbClass: void DumbMethod48()>
<android.media.audiofx.AudioEffect: boolean native_hasControl()>
<android.media.MediaPlayer$EventHandler: void <init>(android.media.MediaPlayer,android.media.MediaPlayer,android.os.Looper)>
<android.graphics.Canvas: void restoreToCount(int)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,android.graphics.Bitmap$Config)>
<android.opengl.GLSurfaceView: void setEGLConfigChooser(android.opengl.GLSurfaceView$EGLConfigChooser)>
<android.view.animation.LayoutAnimationController: void setOrder(int)>
<android.widget.PopupWindow: int access$200(android.widget.PopupWindow)>
<android.graphics.Matrix: void native_setValues(int,float[])>
<android.net.DummyDataStateTracker: boolean teardown()>
<android.view.MotionEvent: java.lang.String actionToString(int)>
<android.opengl.GLSurfaceView: void setRenderer(android.opengl.GLSurfaceView$Renderer)>
<android.media.AudioTrack: void pause()>
<com.android.internal.view.menu.ActionMenuPresenter$SavedState$1: java.lang.Object[] newArray(int)>
<android.net.Uri: java.lang.String access$600()>
<com.android.internal.view.BaseSurfaceHolder: android.view.SurfaceHolder$Callback[] getCallbacks()>
<android.graphics.Canvas: void translate(float,float)>
<android.graphics.Bitmap: void writeToParcel(android.os.Parcel,int)>
<android.view.Surface: void initFromSurfaceTexture(android.graphics.SurfaceTexture)>
<android.media.audiofx.PresetReverb: java.lang.Object access$000(android.media.audiofx.PresetReverb)>
<android.media.audiofx.Visualizer: void release()>
<android.content.pm.ComponentInfo: android.content.pm.ApplicationInfo getApplicationInfo()>
<android.text.style.SubscriptSpan: void writeToParcel(android.os.Parcel,int)>
<android.os.Process: boolean parseProcLine(byte[],int,int,int[],java.lang.String[],long[],float[])>
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: android.widget.RemoteViews getViewAt(int)>
<android.content.ContentProviderOperation$1: java.lang.Object[] newArray(int)>
<android.hardware.usb.UsbDevice: java.lang.String getDeviceName()>
<android.provider.BrowserContract$Combined: void <clinit>()>
<android.bluetooth.BluetoothDeviceProfileState$PbapServiceListener: void onServiceConnected()>
<android.graphics.Path: void setLastPoint(float,float)>
<GenerationGG: android.renderscript.Matrix4f get_androidrenderscriptMatrix4f()>
<android.net.http.Headers: java.lang.String getExpires()>
<android.text.Spannable$Factory: void <init>()>
<com.android.internal.telephony.DataConnectionAc: android.app.PendingIntent rspReconnectIntent(android.os.Message)>
<android.net.http.HttpResponseCache: void close()>
<android.text.Layout$Ellipsizer: int length()>
<com.android.server.location.MockProvider: void enableLocationTracking(boolean)>
<android.view.accessibility.AccessibilityInteractionClient: void clearResultLocked()>
<android.view.MotionEvent: float clamp(float,float,float)>
<com.android.server.WifiService: int access$400(com.android.server.WifiService)>
<android.text.method.PasswordTransformationMethod: void <clinit>()>
<android.widget.StackView$StackSlider: float getDurationForNeutralPosition(float)>
<android.net.LinkAddress: int hashCode()>
<android.app.IThumbnailReceiver$Stub$Proxy: android.os.IBinder asBinder()>
<android.mtp.MtpObjectInfo: int getAssociationDesc()>
<com.android.server.pm.PackageManagerService$7: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,int,android.content.pm.IPackageDeleteObserver)>
<android.net.Uri$Builder: android.net.Uri$Builder encodedAuthority(java.lang.String)>
<android.net.EthernetDataTracker$InterfaceObserver: void interfaceAdded(java.lang.String)>
<com.android.server.PowerManagerService: java.lang.Runnable access$6500(com.android.server.PowerManagerService)>
<Wrapper_android_media_ThumbnailUtils: void test_android_media_ThumbnailUtils()>
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void finalize()>
<android.widget.PopupWindow: void setTouchable(boolean)>
<android.util.JsonReader: void setLenient(boolean)>
<android.view.HardwareRenderer: void setEnabled(boolean)>
<android.util.XmlPullAttributes: int getAttributeUnsignedIntValue(java.lang.String,java.lang.String,int)>
<android.appwidget.AppWidgetHostView$ParcelableSparseArray$1: android.appwidget.AppWidgetHostView$ParcelableSparseArray[] newArray(int)>
<com.android.internal.telephony.RestrictedState: void setPsRestricted(boolean)>
<android.view.ViewGroup$LayoutParams: void <init>(int,int)>
<android.os.MemoryFile: boolean isClosed()>
<com.android.server.PowerManagerService: int access$900(com.android.server.PowerManagerService)>
<android.bluetooth.BluetoothProfileState$PendingCommandState: void <init>(android.bluetooth.BluetoothProfileState,android.bluetooth.BluetoothProfileState$1)>
<com.android.server.connectivity.Vpn: void limitReached(java.lang.String,java.lang.String)>
<com.android.internal.telephony.BaseCommands: void unSetOnIccSmsFull(android.os.Handler)>
<android.webkit.WebView$InvokeListBox$4: void onCancel(android.content.DialogInterface)>
<com.android.server.UiModeManagerService: void <clinit>()>
<android.widget.Scroller: void setFinalY(int)>
<android.drm.mobile1.DrmRawContent: int access$100(android.drm.mobile1.DrmRawContent,byte[],int,int,int)>
<android.media.AudioService$SetModeDeathHandler: void setMode(int)>
<com.android.server.am.ActivityManagerService: boolean dumpProcessesToGc(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean,boolean)>
<com.android.server.am.ActivityStack: com.android.server.am.ActivityRecord topRunningNonDelayedActivityLocked(com.android.server.am.ActivityRecord)>
<GenerationGG: android.widget.SearchView$OnCloseListener get_androidwidgetSearchView__OnCloseListener()>
<com.android.server.pm.PackageManagerService: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>
<android.widget.TableLayout: boolean isColumnStretchable(int)>
<android.webkit.HTML5VideoViewProxy$PosterDownloader: void status(int,int,int,java.lang.String)>
<GenerationGG: android.opengl.GLDebugHelper get_androidopenglGLDebugHelper()>
<android.os.storage.StorageManager$ObbListenerDelegate$1: void <init>(android.os.storage.StorageManager$ObbListenerDelegate,android.os.Looper,android.os.storage.StorageManager)>
<GenerationGG: android.net.Uri get_androidnetUri()>
<android.view.GLES20Layer$Finalizer: void <init>(int)>
<com.android.internal.telephony.DataConnectionTracker$2: void <clinit>()>
<com.android.server.wm.WindowManagerService: void dumpWindowsLocked()>
<com.android.server.UiModeManagerService: void setCarModeLocked(boolean)>
<android.content.res.AssetFileDescriptor: java.io.FileDescriptor getFileDescriptor()>
<android.widget.TextView$PositionListener: void <init>(android.widget.TextView)>
<android.content.ContentProvider: android.content.IContentProvider getIContentProvider()>
<android.text.style.URLSpan: int describeContents()>
<android.net.LocalSocketImpl: void listen_native(java.io.FileDescriptor,int)>
<com.android.server.CountryDetectorService: void removeCountryListener(android.location.ICountryListener)>
<android.text.style.SuggestionSpan: int getSpanTypeId()>
<android.view.accessibility.AccessibilityEvent: void <init>()>
<android.text.TextLine: float nextTab(float)>
<com.android.internal.telephony.ApnContext: java.lang.String toString()>
<android.nfc.NfcAdapter$LegacyCallbackWrapper: void onNdefPushComplete(android.nfc.NfcEvent)>
<android.view.View: boolean isPaddingOffsetRequired()>
<android.webkit.Plugin$DefaultClickHandler: void onClick(android.content.DialogInterface,int)>
<com.android.internal.telephony.IccPhoneBookInterfaceManagerProxy: void setmIccPhoneBookInterfaceManager(com.android.internal.telephony.IccPhoneBookInterfaceManager)>
<android.content.BroadcastReceiver: android.content.BroadcastReceiver$PendingResult goAsync()>
<android.content.pm.ManifestDigest: boolean equals(java.lang.Object)>
<junit.runner.BaseTestRunner: java.lang.String extractClassName(java.lang.String)>
<android.net.wifi.WifiInfo: boolean getHiddenSSID()>
<android.os.Looper: android.os.MessageQueue myQueue()>
<android.view.SurfaceView: void onMeasure(int,int)>
<android.view.ViewGroup: void setDescendantFocusability(int)>
<android.webkit.JsResult: void setReady()>
<com.android.internal.view.menu.MenuPopupHelper: void setForceShowIcon(boolean)>
<android.net.wifi.WifiConfiguration$EnterpriseField: void <init>(android.net.wifi.WifiConfiguration,java.lang.String)>
<android.widget.DatePicker: android.widget.NumberPicker access$300(android.widget.DatePicker)>
<android.view.animation.AnimationSet: long getDuration()>
<android.inputmethodservice.InputMethodService: void onAppPrivateCommand(java.lang.String,android.os.Bundle)>
<android.server.BluetoothService: boolean isApplicationStateChangeTrackerEmpty()>
<com.android.internal.telephony.sip.SipCommandInterface: void setPhoneType(int)>
<android.os.Binder: int getCallingUid()>
<android.speech.tts.AudioMessageParams: int getType()>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: int getLastError()>
<android.server.BluetoothAdapterStateMachine: void access$6200(android.server.BluetoothAdapterStateMachine,com.android.internal.util.IState)>
<android.net.wifi.WifiMonitor: void <clinit>()>
<GenerationGG: android.net.wifi.p2p.WifiP2pManager$ChannelListener get_androidnetwifip2pWifiP2pManager__ChannelListener()>
<android.content.res.ColorStateList$1: java.lang.Object[] newArray(int)>
<android.content.res.XmlBlock: int nativeGetClassAttribute(int)>
<com.android.internal.app.IBatteryStats$Stub: android.os.IBinder asBinder()>
<android.graphics.TemporaryBuffer: char[] obtain(int)>
<com.android.internal.app.AlertController: android.os.Message access$100(com.android.internal.app.AlertController)>
<android.widget.AdapterView: int getCount()>
<android.app.Activity: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.app.Dialog: boolean onCreateOptionsMenu(android.view.Menu)>
<android.accounts.AccountManager$BaseFutureTask$Response: void onError(int,java.lang.String)>
<android.os.Process: android.os.Process$ProcessStartResult startViaZygote(java.lang.String,java.lang.String,int,int,int[],int,int,java.lang.String[])>
<android.test.mock.MockCursor: byte[] getBlob(int)>
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: int resultToCause(int)>
<android.view.ViewGroup: int getChildCount()>
<Wrapper_android_bluetooth_BluetoothClass: void test_android_bluetooth_BluetoothClass()>
<android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int,int)>
<android.graphics.YuvImage: boolean nativeCompressToJpeg(byte[],int,int,int,int[],int[],int,java.io.OutputStream,byte[])>
<android.net.http.IdleCache$Entry: void <init>(android.net.http.IdleCache)>
<android.app.Dialog: void setContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.database.sqlite.SQLiteDatabase: int releaseMemory()>
<android.graphics.Picture: void finalize()>
<android.os.PatternMatcher$1: android.os.PatternMatcher[] newArray(int)>
<android.widget.ExpandableListConnector$PositionMetadata: android.widget.ExpandableListConnector$PositionMetadata obtain(int,int,int,int,android.widget.ExpandableListConnector$GroupMetadata,int)>
<android.view.HardwareRenderer$GlRenderer: void setup(int,int)>
<android.graphics.LinearGradient: int nativeCreate1(float,float,float,float,int[],float[],int)>
<android.graphics.Matrix: boolean native_setPolyToPoly(int,float[],int,float[],int,int)>
<android.graphics.LinearGradient: void <init>(float,float,float,float,int,int,android.graphics.Shader$TileMode)>
<android.app.ActivityThread$ApplicationThread: void getMemoryInfo(android.os.Debug$MemoryInfo)>
<android.view.animation.Animation: boolean willChangeTransformationMatrix()>
<android.view.HardwareRenderer: void initializeIfNeeded(int,int,android.view.View$AttachInfo,android.view.SurfaceHolder)>
<com.android.internal.telephony.IccUtils: java.lang.String bcdToString(byte[],int,int)>
<android.graphics.Bitmap: byte[] getNinePatchChunk()>
<android.webkit.HTML5VideoView: int getCurrentState()>
<android.location.Location: boolean access$302(android.location.Location,boolean)>
<android.graphics.Canvas: int save()>
<android.content.res.XmlBlock: android.content.res.XmlResourceParser newParser()>
<Wrapper_android_renderscript_Float4: void test_android_renderscript_Float4()>
<android.media.audiofx.EnvironmentalReverb: void setDensity(short)>
<android.media.JetPlayer: boolean native_playJet()>
<android.graphics.Bitmap: int nativeConfig(int)>
<android.content.Loader: boolean isAbandoned()>
<android.app.Activity: boolean dispatchTrackballEvent(android.view.MotionEvent)>
<android.net.http.HttpResponseCache: void <init>(java.io.File,long)>
<android.graphics.drawable.PictureDrawable: int getOpacity()>
<android.view.VelocityTracker: void <clinit>()>
<GenerationGG: android.media.AudioFormat get_androidmediaAudioFormat()>
<com.android.server.TextServicesManagerService$SpellCheckerBindGroup: com.android.server.TextServicesManagerService$InternalServiceConnection access$700(com.android.server.TextServicesManagerService$SpellCheckerBindGroup)>
<android.net.LocalSocketImpl: void close_native(java.io.FileDescriptor)>
<GenerationGG: android.graphics.Matrix get_androidgraphicsMatrix()>
<android.graphics.RectF: void <init>(float,float,float,float)>
<android.net.sip.SipSession$1: void onRegistrationFailed(android.net.sip.ISipSession,int,java.lang.String)>
<android.view.View$4: java.lang.Object get(java.lang.Object)>
<android.security.KeyChain$AliasResponse: void alias(java.lang.String)>
<android.net.wifi.WifiApConfigStore: void initialize(android.content.Context)>
<android.webkit.CookieSyncManager: void resetSync()>
<android.graphics.drawable.DrawableContainer: void setConstantState(android.graphics.drawable.DrawableContainer$DrawableContainerState)>
<android.view.animation.LinearInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.internal.telephony.WspTypeDecoder: boolean decodeValueLength(int)>
<com.android.internal.telephony.ServiceStateTracker: void unregisterForRoamingOff(android.os.Handler)>
<android.webkit.SslErrorHandler: void proceed()>
<android.view.IWindowSession$Stub: void <init>()>
<android.webkit.WebView: void access$7800(android.webkit.WebView,int,int,int,int)>
<android.speech.tts.TextToSpeech$6: void <init>(android.speech.tts.TextToSpeech)>
<GenerationGG: android.app.backup.BackupDataInput get_androidappbackupBackupDataInput()>
<android.app.ContextImpl: void setActivityToken(android.os.IBinder)>
<android.database.sqlite.SQLiteClosable: void acquireReference()>
<com.android.server.pm.Installer: int install(java.lang.String,int,int)>
<android.graphics.Paint: void setTextSkewX(float)>
<android.net.sip.SipProfile: void <init>(android.os.Parcel,android.net.sip.SipProfile$1)>
<android.widget.SearchView$5: void <init>(android.widget.SearchView)>
<com.android.server.AlarmManagerService$FilterStats: void <init>()>
<android.webkit.WebViewCore: void access$6100(android.webkit.WebViewCore,java.lang.String)>
<com.android.internal.location.DummyLocationProvider: boolean supportsSpeed()>
<android.webkit.WebViewCore$DrawData: void <init>()>
<android.widget.GridView: int findMotionRow(int)>
<android.database.CursorJoiner$1: void <clinit>()>
<android.telephony.PhoneNumberUtils: int minPositive(int,int)>
<android.renderscript.Allocation: void copy1DRangeFrom(int,int,int[])>
<android.accounts.AccountManager$7: void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.Account,android.os.Bundle,android.app.Activity)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: android.net.wifi.WifiMonitor access$2800(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<android.net.NetworkQuotaInfo$1: void <init>()>
<android.location.LocationManager$ListenerTransport: void onProviderDisabled(java.lang.String)>
<Wrapper_android_hardware_GeomagneticField: void test_android_hardware_GeomagneticField()>
<android.content.ContentService$ObserverNode: int countUriSegments(android.net.Uri)>
<android.drm.DrmManagerClient: android.drm.DrmInfo acquireDrmInfo(android.drm.DrmInfoRequest)>
<android.os.Debug$MemoryInfo: int getOtherSharedDirty(int)>
<com.android.server.pm.PackageManagerService: void addPackageToPreferred(java.lang.String)>
<com.android.server.pm.GrantedPermissions: void <init>(int)>
<android.widget.QuickContactBadge$QueryHandler: void <init>(android.widget.QuickContactBadge,android.content.ContentResolver)>
<android.view.FocusFinder: boolean isToDirectionOf(int,android.graphics.Rect,android.graphics.Rect)>
<com.android.server.am.ActivityRecord: void addResultLocked(com.android.server.am.ActivityRecord,java.lang.String,int,int,android.content.Intent)>
<android.database.CursorWindow: int describeContents()>
<com.android.internal.telephony.cat.CommandDetails: void <init>(android.os.Parcel)>
<android.renderscript.RenderScript: int nFileA3DCreateFromFile(java.lang.String)>
<android.media.audiofx.Equalizer: short getBandLevel(short)>
<android.net.Uri$AbstractHierarchicalUri: java.lang.String parseHost()>
<com.android.internal.telephony.Connection$DisconnectCause: void <init>(java.lang.String,int)>
<android.gesture.GestureLibraries$ResourceGestureLibrary: boolean isReadOnly()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$3200(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,com.android.internal.util.IState)>
<com.android.internal.telephony.ITelephonyRegistry$Stub: android.os.IBinder asBinder()>
<android.media.AudioService$VolumeStreamState: int access$900(android.media.AudioService$VolumeStreamState)>
<android.widget.ListPopupWindow: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<android.net.wifi.SupplicantState$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.AdnRecord$1: com.android.internal.telephony.AdnRecord createFromParcel(android.os.Parcel)>
<android.os.StrictMode$Span: void <init>(android.os.StrictMode$ThreadSpanState)>
<android.location.Country$1: android.location.Country[] newArray(int)>
<android.view.MotionEvent: android.view.MotionEvent obtain(android.view.MotionEvent)>
<android.view.accessibility.AccessibilityNodeInfo: void <clinit>()>
<android.webkit.WebChromeClient: boolean onCreateWindow(android.webkit.WebView,boolean,boolean,android.os.Message)>
<com.android.internal.statusbar.IStatusBarService$Stub: android.os.IBinder asBinder()>
<android.net.MobileDataStateTracker: com.android.internal.telephony.Phone$DataState access$400(android.net.MobileDataStateTracker)>
<android.widget.ExpandableListPosition: android.widget.ExpandableListPosition obtainGroupPosition(int)>
<GenerationGG: android.content.ContextWrapper get_androidcontentContextWrapper()>
<android.content.SyncManager: void <clinit>()>
<android.net.EthernetDataTracker: java.lang.String access$000()>
<android.content.ContextWrapper: java.lang.String[] databaseList()>
<android.net.wifi.WpsStateMachine$DefaultState: void <init>(android.net.wifi.WpsStateMachine)>
<android.widget.ListView: int findMotionRow(int)>
<android.database.sqlite.SQLiteBlobTooBigException: void <init>()>
<android.net.rtp.AudioStream: android.net.rtp.AudioCodec getCodec()>
<android.media.MediaPlayer: void setOnInfoListener(android.media.MediaPlayer$OnInfoListener)>
<android.net.IConnectivityManager$Stub: void <init>()>
<android.telephony.ServiceState: void setNullState(int)>
<android.graphics.ColorMatrix: void postConcat(android.graphics.ColorMatrix)>
<android.widget.OverScroller$SplineOverScroller: void extendDuration(int)>
<GenerationGG: android.app.ApplicationErrorReport get_androidappApplicationErrorReport()>
<android.view.View$BaseSavedState$1: void <init>()>
<com.android.server.usb.UsbDeviceManager$UsbHandler: android.hardware.usb.UsbAccessory getCurrentAccessory()>
<android.media.AudioRecord: int native_get_marker_pos()>
<com.android.server.accessibility.TouchExplorer$PointerTracker: int getReceivedPointerDownCount()>
<android.bluetooth.BluetoothTetheringDataTracker: void setPolicyDataEnable(boolean)>
<android.view.TextureView: void draw(android.graphics.Canvas)>
<android.renderscript.Matrix3f: void loadScale(float,float)>
<com.android.internal.telephony.DataConnectionTracker: java.lang.String getReryConfig(boolean)>
<android.media.AudioTrack: int getStreamType()>
<com.android.server.PowerManagerService: void cancelTimerLocked()>
<android.test.ProviderTestCase2$MockContext2: android.content.res.Resources getResources()>
<Wrapper_android_renderscript_RSIllegalArgumentException: void test_android_renderscript_RSIllegalArgumentException()>
<android.os.Parcel: void writeInt(int)>
<android.app.IntentService$ServiceHandler: void handleMessage(android.os.Message)>
<android.graphics.Rect$1: void <init>()>
<android.location.Country: int hashCode()>
<com.android.server.pm.PackageManagerService: java.io.File access$2800(com.android.server.pm.PackageManagerService,java.io.File)>
<com.android.server.pm.Installer: int createUserData(java.lang.String,int,int)>
<junit.framework.TestSuite: junit.framework.Test testAt(int)>
<android.text.util.Rfc822Token: void setAddress(java.lang.String)>
<android.webkit.WebSettings: boolean getNavDump()>
<android.view.accessibility.AccessibilityEvent: void recycle()>
<android.webkit.PluginManager: void <init>(android.content.Context)>
<android.webkit.WebView$InvokeListBox$2: void onClick(android.content.DialogInterface,int)>
<android.net.http.Headers: void setContentType(java.lang.String)>
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: boolean processMessage(android.os.Message)>
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(java.lang.String)>
<android.view.TextureView: void unlockCanvasAndPost(android.graphics.Canvas)>
<android.content.ContentProviderResult: void writeToParcel(android.os.Parcel,int)>
<android.webkit.WebViewCore: void viewSizeChanged(android.webkit.WebView$ViewSizeData)>
<GenerationGG: android.view.animation.BounceInterpolator get_androidviewanimationBounceInterpolator()>
<android.gesture.GestureOverlayView: void setGesture(android.gesture.Gesture)>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall access$300(com.android.internal.telephony.sip.SipPhone)>
<android.net.NetworkInfo$1: android.net.NetworkInfo createFromParcel(android.os.Parcel)>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void access$1300(com.android.server.connectivity.Tethering$TetherInterfaceSM,com.android.internal.util.IState)>
<android.view.View: boolean isSelected()>
<android.os.storage.StorageManager: void registerListener(android.os.storage.StorageEventListener)>
<android.net.http.Headers: void <clinit>()>
<com.android.internal.widget.IRemoteViewsAdapterConnection$Stub: void <init>()>
<android.app.LoaderManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.view.View: boolean fitsSystemWindows()>
<android.util.SparseBooleanArray: void delete(int)>
<android.widget.SearchView$2: void <init>(android.widget.SearchView)>
<android.net.wifi.WifiStateMachine: java.lang.String access$1300(android.net.wifi.WifiStateMachine)>
<android.view.View: int computeHorizontalScrollExtent()>
<com.android.server.UiModeManagerService$6: void onStatusChanged(java.lang.String,int,android.os.Bundle)>
<android.graphics.Movie: android.graphics.Movie decodeTempStream(java.io.InputStream)>
<android.widget.ZoomButtonsController: android.view.View getZoomControls()>
<GenerationGG: android.net.http.HttpResponseCache get_androidnethttpHttpResponseCache()>
<android.graphics.Bitmap: boolean isMutable()>
<android.os.Debug: int getBinderDeathObjectCount()>
<com.android.server.accessibility.AccessibilityManagerService: com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy access$1400(com.android.server.accessibility.AccessibilityManagerService)>
<Wrapper_android_provider_UserDictionary: void test_android_provider_UserDictionary()>
<android.widget.AbsListView: void requestLayout()>
<android.media.IAudioService$Stub: android.os.IBinder asBinder()>
<android.view.SurfaceSession: void finalize()>
<android.location.Address: int getMaxAddressLineIndex()>
<android.view.View$AttachInfo$InvalidateInfo: void setNextPoolable(java.lang.Object)>
<android.widget.DatePicker: long getMinDate()>
<android.database.sqlite.SQLiteMisuseException: void <init>()>
<android.view.GLES20Canvas: boolean clipRegion(android.graphics.Region)>
<android.provider.BrowserContract$Bookmarks: void <clinit>()>
<android.media.AudioTrack: int native_write_byte(byte[],int,int,int)>
<android.drm.DrmRights: boolean isValid()>
<android.widget.NumberPicker: int getSelectedPos(java.lang.String)>
<java.lang.Object: android.view.MenuItem getItem(int)>
<android.net.wifi.WifiStateTracker: android.net.NetworkInfo getNetworkInfo()>
<com.android.internal.telephony.gsm.GsmCallTracker: android.os.Message obtainCompleteMessage(int)>
<android.view.View: boolean isHorizontalFadingEdgeEnabled()>
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: boolean isCreated()>
<android.animation.Keyframe$FloatKeyframe: void setValue(java.lang.Object)>
<android.view.InputEventConsistencyVerifier: void <init>(java.lang.Object,int,java.lang.String)>
<android.net.DhcpStateMachine$RunningState: void enter()>
<com.android.internal.telephony.gsm.SpnOverride: boolean containsCarrier(java.lang.String)>
<android.webkit.WebView: android.webkit.WebView$HitTestResult hitTestResult(android.webkit.WebView$HitTestResult)>
<android.view.animation.Transformation: void clear()>
<android.util.XmlPullAttributes: int getAttributeIntValue(java.lang.String,java.lang.String,int)>
<android.os.DropBoxManager$Entry: void <init>(java.lang.String,long,byte[],int)>
<android.test.suitebuilder.TestGrouping$TestCasePredicate: boolean apply(java.lang.Object)>
<android.media.Metadata: boolean checkMetadataId(int)>
<java.lang.Object: int getNamespaceCount(int)>
<com.android.server.ThrottleService: long access$1000(com.android.server.ThrottleService)>
<android.net.Uri$Builder: android.net.Uri$Builder opaquePart(android.net.Uri$Part)>
<android.app.NativeActivity: int access$000(android.app.NativeActivity)>
<com.android.server.LocationManagerService$LpCapabilityComparator: void <init>(com.android.server.LocationManagerService)>
<android.graphics.Paint: int native_init()>
<android.view.MotionEvent: void setAction(int)>
<android.webkit.WebViewCore: void access$900(android.webkit.WebViewCore)>
<android.inputmethodservice.InputMethodService: android.view.View onCreateCandidatesView()>
<android.test.mock.MockCursor: boolean moveToNext()>
<android.nfc.NdefRecord: short getTnf()>
<android.content.ISyncAdapter$Stub$Proxy: android.os.IBinder asBinder()>
<GenerationGG: android.content.DialogInterface$OnShowListener get_androidcontentDialogInterface__OnShowListener()>
<android.webkit.HTML5VideoViewProxy: void access$300(android.webkit.HTML5VideoViewProxy,android.graphics.Bitmap)>
<android.webkit.DeviceMotionService: void createHandler()>
<android.widget.SearchView$9: void <init>(android.widget.SearchView)>
<GenerationGG: android.media.FaceDetector$Face[] get_androidmediaFaceDetector__Face_ARRAY_()>
<android.gesture.GestureUtils: float[] translate(float[],float,float)>
<com.android.internal.os.AtomicFile: void truncate()>
<android.renderscript.Type: void updateFromNative()>
<android.test.IsolatedContext: java.io.File getFilesDir()>
<android.net.wifi.WifiStateMachine: long access$9202(android.net.wifi.WifiStateMachine,long)>
<android.opengl.GLSurfaceView$GLThread: void requestRender()>
<android.renderscript.Byte2: void <init>()>
<android.graphics.Matrix: boolean mapRect(android.graphics.RectF)>
<android.text.BoringLayout: void ellipsized(int,int)>
<android.telephony.PhoneStateListener$1: void onOtaspChanged(int)>
<android.service.textservice.SpellCheckerService$SpellCheckerServiceBinder: com.android.internal.textservice.ISpellCheckerSession getISpellCheckerSession(java.lang.String,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>
<android.view.ViewGroup: void addInArray(android.view.View,int)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(android.util.Property,float[])>
<android.graphics.RectF: void readFromParcel(android.os.Parcel)>
<android.graphics.drawable.AnimationDrawable$AnimationState: int[] access$000(android.graphics.drawable.AnimationDrawable$AnimationState)>
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub: void <init>()>
<android.widget.Gallery: int getCenterOfView(android.view.View)>
<android.content.pm.PathPermission: void <init>(android.os.Parcel)>
<com.android.server.pm.PackageManagerService: void enterSafeMode()>
<android.net.rtp.RtpStream: boolean isBusy()>
<com.android.server.sip.SipService: boolean isCallerCreator(com.android.server.sip.SipService$SipSessionGroupExt)>
<android.net.wifi.p2p.WifiP2pDeviceList: void update(android.net.wifi.p2p.WifiP2pDevice)>
<android.view.textservice.SpellCheckerSubtype: void <clinit>()>
<android.webkit.WebView: boolean shouldForwardTouchEvent()>
<android.renderscript.Short2: void <init>()>
<android.webkit.Network: void setProxyPassword(java.lang.String)>
<android.net.wifi.p2p.WifiP2pConfig: java.lang.String toString()>
<android.webkit.WebView: void nativeSetHeightCanMeasure(boolean)>
<com.android.server.NotificationManagerService$NotificationRecord: java.lang.String toString()>
<android.os.Messenger: void <init>(android.os.IBinder)>
<android.net.Uri: boolean equals(java.lang.Object)>
<android.view.Surface: android.graphics.Matrix access$200(android.view.Surface)>
<android.view.View$5: void <init>(java.lang.String)>
<android.content.PeriodicSync$1: android.content.PeriodicSync[] newArray(int)>
<android.view.ViewGroup$1: void <init>(android.view.ViewGroup)>
<android.app.ContextImpl: java.io.File getPreferencesDir()>
<com.android.server.net.NetworkPolicyManagerService$XmlUtils: void writeBooleanAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,boolean)>
<java.lang.Object: long getItemId(int)>
<android.bluetooth.BluetoothDeviceProfileState: void access$10900(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.test.RenamingDelegatingContext: java.lang.String[] fileList()>
<android.media.AudioManager: void setParameters(java.lang.String)>
<android.content.Entity$NamedContentValues: void <init>(android.net.Uri,android.content.ContentValues)>
<android.net.INetworkManagementEventObserver$Stub$Proxy: void <init>(android.os.IBinder)>
<android.text.method.QwertyKeyListener: android.text.method.QwertyKeyListener getInstance(boolean,android.text.method.TextKeyListener$Capitalize)>
<android.app.Notification$Builder: android.app.Notification$Builder setTicker(java.lang.CharSequence)>
<com.android.server.connectivity.Tethering$TetherMasterSM: com.android.internal.util.State access$4000(com.android.server.connectivity.Tethering$TetherMasterSM)>
<android.app.ApplicationPackageManager: void handlePackageBroadcast(int,java.lang.String[],boolean)>
<android.widget.ExpandableListView$SavedState$1: java.lang.Object[] newArray(int)>
<com.android.server.wm.Session: void killSessionLocked()>
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void <init>(com.android.server.connectivity.Tethering$TetherMasterSM)>
<android.app.FragmentBreadCrumbs: android.app.BackStackRecord createBackStackEntry(java.lang.CharSequence,java.lang.CharSequence)>
<android.net.RouteInfo: android.net.RouteInfo selectBestRoute(java.util.Collection,java.net.InetAddress)>
<com.android.internal.telephony.DataConnection$DcActiveState: void setEnterNotificationParams(com.android.internal.telephony.DataConnection$ConnectionParams,com.android.internal.telephony.DataConnection$FailCause)>
<com.android.server.accessibility.TouchExplorer$PointerTracker: int getPrimaryActivePointerId()>
<android.app.SearchableInfo$ActionKeyInfo: void <init>(android.os.Parcel)>
<android.app.LoadedApk$WarningContextClassLoader: void warn(java.lang.String)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofObject(java.lang.String,android.animation.TypeEvaluator,java.lang.Object[])>
<android.net.wifi.p2p.WifiP2pInfo$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.preference.PreferenceManager: long getNextId()>
<android.server.BluetoothInputProfileHandler: java.util.List lookupInputDevicesMatchingStates(int[])>
<android.view.TextureView: void applyUpdate()>
<android.provider.AlarmClock: void <init>()>
<android.widget.TextView: void setMaxEms(int)>
<com.android.server.accessibility.AccessibilityManagerService: int getState()>
<GenerationGG: org.apache.http.protocol.HttpContext get_orgapachehttpprotocolHttpContext()>
<android.text.style.SuperscriptSpan: void <init>(android.os.Parcel)>
<android.view.View: java.lang.String printPrivateFlags(int)>
<android.database.sqlite.SQLiteDebug: void <clinit>()>
<android.content.IntentFilter$AuthorityEntry: java.lang.String access$000(android.content.IntentFilter$AuthorityEntry)>
<com.android.server.EntropyService: void <init>()>
<android.view.GLES20Canvas: void scale(float,float)>
<com.android.server.connectivity.Tethering: java.lang.String[] getErroredIfaces()>
<android.mtp.MtpStorageInfo: java.lang.String getVolumeIdentifier()>
<com.android.internal.telephony.sip.SipCommandInterface: void getCurrentCalls(android.os.Message)>
<android.media.AudioSystem: int setParameters(java.lang.String)>
<com.android.server.LocationManagerService$Receiver: java.lang.String toString()>
<com.android.internal.telephony.cat.CommandDetails: void writeToParcel(android.os.Parcel,int)>
<android.renderscript.RenderScript: java.lang.String nGetName(int)>
<com.android.server.LocationManagerService: void log(java.lang.String)>
<android.net.Uri$OpaqueUri: void <init>(java.lang.String,android.net.Uri$Part,android.net.Uri$Part,android.net.Uri$1)>
<com.android.server.net.NetworkStatsService$UidStatsKey: void <init>(com.android.server.net.NetworkIdentitySet,int,int,int)>
<java.lang.Object: java.lang.String getAttributeNamespace(int)>
<android.widget.ExpandableListView: android.widget.Adapter getAdapter()>
<android.view.inputmethod.EditorInfo$1: void <init>()>
<com.android.internal.telephony.CommandsInterface$RadioState: boolean isAvailable()>
<android.text.format.DateUtils: java.lang.String formatElapsedTime(java.lang.StringBuilder,java.lang.String,long,long,long)>
<android.util.MalformedJsonException: void <init>(java.lang.String)>
<android.view.animation.Animation: java.lang.Object clone()>
<com.android.server.wm.InputFilter: android.view.InputEventConsistencyVerifier access$200(com.android.server.wm.InputFilter)>
<android.animation.ValueAnimator: void removeUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>
<android.net.http.LoggingEventHandler: void endData()>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void setCdmaTechnology(int)>
<android.content.SyncManager$ServiceConnectionData: void <init>(android.content.SyncManager,android.content.SyncManager$ActiveSyncContext,android.content.ISyncAdapter)>
<android.view.ViewRootImpl: boolean isTypingKey(android.view.KeyEvent)>
<android.os.BatteryStats: void formatTime(java.lang.StringBuilder,long)>
<com.android.server.pm.PackageManagerService: void readPermissions()>
<android.webkit.WebView$OnTrimMemoryListener: void init(android.content.Context)>
<com.android.server.wm.InputManager: int[] nativeGetInputDeviceIds()>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: com.android.internal.telephony.gsm.GsmSmsAddress getAddress()>
<com.android.internal.telephony.gsm.SmsMessage: boolean isMWISetMessage()>
<com.android.server.am.ActivityManagerService: void setImmersive(android.os.IBinder,boolean)>
<com.android.server.PowerManagerService: void setTimeoutLocked(long,long,int)>
<GenerationGG: android.hardware.usb.UsbDevice get_androidhardwareusbUsbDevice()>
<android.text.method.TextKeyListener$NullKeyListener: int getInputType()>
<android.graphics.Point$1: java.lang.Object[] newArray(int)>
<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean access$900(com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy,android.view.accessibility.AccessibilityEvent)>
<android.view.GLES20Canvas: int nSave(int,int)>
<android.graphics.Matrix: void getValues(float[])>
<android.graphics.Path: void rQuadTo(float,float,float,float)>
<android.widget.AdapterViewAnimator: void checkForAndHandleDataChanged()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getNationalPrefixForParsing()>
<android.mtp.MtpDevice: void <init>(android.hardware.usb.UsbDevice)>
<android.media.JetPlayer: boolean closeJetFile()>
<com.android.internal.telephony.gsm.GsmCall: void clearDisconnected()>
<android.os.storage.StorageVolume: void <init>(java.lang.String,java.lang.String,boolean,boolean,int,boolean,long)>
<android.webkit.ZoomManager: float access$400(android.webkit.ZoomManager)>
<android.view.ContextThemeWrapper: void setTheme(int)>
<android.widget.CalendarView: void onScrollStateChanged(android.widget.AbsListView,int)>
<android.widget.SearchView: android.view.View access$700(android.widget.SearchView)>
<android.view.View: void updateLocalSystemUiVisibility(int,int)>
<android.location.Address: java.util.HashMap access$000(android.location.Address)>
<com.android.internal.telephony.gsm.SIMFileHandler: java.lang.String getEFPath(int)>
<android.text.style.SuggestionSpan: void setFlags(int)>
<android.util.SparseIntArray: android.util.SparseIntArray clone()>
<android.view.ViewGroup: void dispatchSystemUiVisibilityChanged(int)>
<android.content.pm.PathPermission$1: java.lang.Object[] newArray(int)>
<com.android.server.location.GpsLocationProvider: int access$1872(com.android.server.location.GpsLocationProvider,int)>
<android.webkit.WebChromeClient: void setInstallableWebApp()>
<android.widget.GridLayout: void setUseDefaultMargins(boolean)>
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void log(java.lang.String)>
<com.android.internal.http.HttpDateTime: void <clinit>()>
<com.android.server.WifiService: int access$3200(com.android.server.WifiService)>
<android.webkit.WebViewCore: void access$3600(android.webkit.WebViewCore,int)>
<android.accounts.AuthenticatorDescription: void <init>(android.os.Parcel)>
<android.text.TextUtils$Reverser: int length()>
<android.accounts.AccountManagerService: void removeAccountFromCacheLocked(android.accounts.Account)>
<com.android.internal.view.IInputMethod$Stub: void <init>()>
<com.android.server.am.ActivityManagerService$ServiceRestarter: void <init>(com.android.server.am.ActivityManagerService)>
<android.location.Location$1: android.location.Location createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.UUSInfo: int getDcs()>
<android.filterfw.core.Filter: void performTearDown(android.filterfw.core.FilterContext)>
<android.os.Debug: boolean isDebuggerConnected()>
<android.mtp.MtpDevice: int[] native_get_object_handles(int,int,int)>
<android.database.MatrixCursor: android.database.MatrixCursor$RowBuilder newRow()>
<android.util.LruCache: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>
<com.android.internal.telephony.ServiceStateTracker: boolean getDesiredPowerState()>
<android.media.AudioService$VolumeStreamState$VolumeDeathHandler: void mute(boolean)>
<android.widget.ListPopupWindow: void setListSelector(android.graphics.drawable.Drawable)>
<android.widget.TextView: boolean hasPasswordTransformationMethod()>
<android.webkit.LoadListener: android.net.http.SslError sslError()>
<android.widget.GridLayout$Axis: void addComponentSizes(java.util.List,android.widget.GridLayout$PackedMap)>
<android.content.pm.UserInfo: java.lang.String toString()>
<android.net.sip.SipProfile: int getPort()>
<android.os.MessageQueue: void removeMessages(android.os.Handler,java.lang.Runnable,java.lang.Object)>
<android.content.IIntentReceiver$Stub: android.os.IBinder asBinder()>
<android.view.animation.LayoutAnimationController: boolean willOverlap()>
<com.android.server.UiModeManagerService$7: void onLocationChanged(android.location.Location)>
<android.database.sqlite.SQLiteQuery: java.lang.String toString()>
<android.util.TypedValue: float getFloat()>
<android.test.mock.MockPackageManager: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>
<android.net.DummyDataStateTracker: boolean setRadio(boolean)>
<com.android.server.StatusBarManagerService$1: void <init>(com.android.server.StatusBarManagerService,int)>
<com.android.internal.telephony.cdma.EriManager$EriDisplayInformation: void <init>(com.android.internal.telephony.cdma.EriManager,int,int,java.lang.String)>
<android.net.rtp.RtpStream: void associate(java.net.InetAddress,int)>
<android.widget.SimpleAdapter: int[] access$300(android.widget.SimpleAdapter)>
<GenerationGG: android.renderscript.RenderScriptGL$SurfaceConfig get_androidrenderscriptRenderScriptGL__SurfaceConfig()>
<com.android.internal.os.AtomicFile: java.io.FileInputStream openRead()>
<android.content.IntentFilter$MalformedMimeTypeException: void <init>(java.lang.String)>
<com.android.server.pm.UserManager: boolean createPackageFolders(int,java.io.File,java.util.List)>
<android.opengl.GLSurfaceView: void setEGLWindowSurfaceFactory(android.opengl.GLSurfaceView$EGLWindowSurfaceFactory)>
<GenerationGG: android.text.style.DynamicDrawableSpan get_androidtextstyleDynamicDrawableSpan()>
<android.app.Dialog: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>
<android.speech.SpeechRecognizer$InternalListener: void <init>(android.speech.SpeechRecognizer)>
<com.android.internal.view.menu.ListMenuItemView: android.view.LayoutInflater getInflater()>
<android.view.GLES20Canvas: int saveLayerAlpha(float,float,float,float,int,int)>
<android.widget.SimpleExpandableListAdapter: void <init>(android.content.Context,java.util.List,int,int,java.lang.String[],int[],java.util.List,int,int,java.lang.String[],int[])>
<android.preference.Preference: android.preference.Preference$OnPreferenceClickListener getOnPreferenceClickListener()>
<android.content.SyncManager$SyncTimeTracker: void <init>(android.content.SyncManager,android.content.SyncManager$1)>
<com.android.internal.os.BatteryStatsImpl: int getDischargeStartLevelLocked()>
<android.content.pm.VerifierInfo: void <init>(android.os.Parcel,android.content.pm.VerifierInfo$1)>
<android.view.InputEvent$1: android.view.InputEvent[] newArray(int)>
<android.view.KeyEvent: void setSource(int)>
<android.app.WallpaperManager$Globals: android.app.IWallpaperManager access$300(android.app.WallpaperManager$Globals)>
<android.database.sqlite.DatabaseConnectionPool: java.util.ArrayList getConnectionList()>
<android.media.AsyncPlayer: void <init>(java.lang.String)>
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedFragment()>
<GenerationGG: android.view.inputmethod.InputConnection get_androidviewinputmethodInputConnection()>
<android.test.mock.MockResources: android.content.res.AssetFileDescriptor openRawResourceFd(int)>
<android.graphics.PorterDuffXfermode: void <init>(android.graphics.PorterDuff$Mode)>
<android.view.ViewTreeObserver: void <init>()>
<android.app.ActivityManager: void <init>(android.content.Context,android.os.Handler)>
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void <init>(android.content.res.AssetFileDescriptor)>
<com.android.internal.widget.LockPatternView$SavedState$1: void <init>()>
<android.view.ViewGroup: boolean requestChildRectangleOnScreen(android.view.View,android.graphics.Rect,boolean)>
<android.net.LinkProperties: boolean isIdenticalRoutes(android.net.LinkProperties)>
<android.graphics.drawable.ColorDrawable: void <init>(android.graphics.drawable.ColorDrawable$ColorState,android.graphics.drawable.ColorDrawable$1)>
<android.app.Dialog: void openOptionsMenu()>
<Wrapper_android_animation_FloatEvaluator: void test_android_animation_FloatEvaluator()>
<com.android.server.am.ActivityManagerService: android.app.ApplicationErrorReport createAppErrorReportLocked(com.android.server.am.ProcessRecord,long,android.app.ApplicationErrorReport$CrashInfo)>
<com.android.server.CountryDetectorService: void addCountryListener(android.location.ICountryListener)>
<android.location.Location$1: java.lang.Object[] newArray(int)>
<android.view.inputmethod.ExtractedText: int describeContents()>
<android.app.SearchDialog$3: void <init>(android.app.SearchDialog)>
<android.widget.AdapterViewAnimator$SavedState: void <clinit>()>
<android.os.Looper: void setMessageLogging(android.util.Printer)>
<android.graphics.Paint: int native_setShader(int,int)>
<android.widget.TextView: int getCompoundDrawablePadding()>
<com.android.internal.content.PackageMonitor: void onPackageRemoved(java.lang.String,int)>
<android.view.GLES20Canvas: int nCreateDisplayListRenderer()>
<android.net.wifi.WifiInfo: java.lang.String getBSSID()>
<android.text.method.PasswordTransformationMethod: void afterTextChanged(android.text.Editable)>
<com.android.internal.os.BinderInternal: void handleGc()>
<android.media.audiofx.AudioEffect: void release()>
<com.android.internal.telephony.BaseCommands: void registerForVoiceNetworkStateChanged(android.os.Handler,int,java.lang.Object)>
<android.webkit.WebView: android.webkit.WebView$HitTestResult access$5402(android.webkit.WebView,android.webkit.WebView$HitTestResult)>
<android.gesture.GestureLibraries$FileGestureLibrary: boolean save()>
<android.os.storage.StorageManager: void unregisterListener(android.os.storage.StorageEventListener)>
<com.android.internal.os.BatteryStatsImpl$Counter: void <init>(java.util.ArrayList)>
<android.test.mock.MockResources: android.content.res.Configuration getConfiguration()>
<android.graphics.PathMeasure: boolean native_getSegment(int,float,float,int,boolean)>
<android.view.View$TransformationInfo: int access$600(android.view.View$TransformationInfo)>
<android.text.style.TypefaceSpan: void updateDrawState(android.text.TextPaint)>
<com.android.internal.telephony.gsm.GsmSmsAddress: java.lang.String getAddressString()>
<android.webkit.AccessibilityInjector$AccessibilityWebContentKeyBinding: int getActionCode(int)>
<android.graphics.TableMaskFilter: void <init>(int)>
<android.graphics.drawable.GradientDrawable$GradientState: void setCornerRadii(float[])>
<android.hardware.SensorManager: void unregisterLegacyListener(int,int,android.hardware.SensorListener,int)>
<com.android.internal.os.BatteryStatsImpl: void noteScanWifiLockAcquiredFromSourceLocked(android.os.WorkSource)>
<android.widget.RadioGroup: void setCheckedId(int)>
<android.view.VelocityTracker: void <init>(android.view.VelocityTracker$1)>
<GenerationGG: android.widget.Filter get_androidwidgetFilter()>
<GenerationGG: android.accounts.NetworkErrorException get_androidaccountsNetworkErrorException()>
<com.android.internal.telephony.cdma.CdmaCall: java.lang.String toString()>
<android.widget.VideoView: int getCurrentPosition()>
<android.net.wifi.p2p.WifiP2pDeviceList$1: java.lang.Object[] newArray(int)>
<GenerationGG: java.lang.Object get_javalangObject()>
<android.renderscript.RenderScript: void nContextBindProgramRaster(int)>
<DumbClass: void DumbMethod50()>
<com.android.internal.telephony.sip.SipCommandInterface: void sendDtmf(char,android.os.Message)>
<com.android.server.PowerManagerService$TimeoutTask: void <init>(com.android.server.PowerManagerService,com.android.server.PowerManagerService$1)>
<android.webkit.WebView$InvokeListBox$1: void onClick(android.content.DialogInterface,int)>
<android.view.SurfaceView$MyWindow: void dispatchAppVisibility(boolean)>
<android.filterfw.core.GLFrame: boolean nativeDeallocate()>
<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean waitForState(java.lang.String)>
<android.media.FaceDetector: void nativeClassInit()>
<android.view.textservice.TextServicesManager: void <clinit>()>
<android.view.View: void setOnSystemUiVisibilityChangeListener(android.view.View$OnSystemUiVisibilityChangeListener)>
<android.graphics.drawable.GradientDrawable: void <init>(android.graphics.drawable.GradientDrawable$GradientState,android.graphics.drawable.GradientDrawable$1)>
<android.os.Message: android.os.Bundle peekData()>
<android.view.InputDevice$MotionRange: float access$700(android.view.InputDevice$MotionRange)>
<android.text.method.PasswordTransformationMethod$Visible: void <init>(android.text.Spannable,android.text.method.PasswordTransformationMethod)>
<com.android.server.pm.PackageManagerService: boolean access$1200(java.lang.String)>
<GenerationGG: android.view.accessibility.AccessibilityRecord get_androidviewaccessibilityAccessibilityRecord()>
<android.accounts.AccountManagerService$3: void <init>(android.accounts.AccountManagerService,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,android.os.Bundle,android.accounts.Account,java.lang.String,boolean,boolean,int,boolean)>
<com.android.server.IntentResolver: void buildResolveList(android.content.Intent,android.util.FastImmutableArraySet,boolean,boolean,java.lang.String,java.lang.String,java.util.List,java.util.List)>
<android.view.MotionEvent: void offsetLocation(float,float)>
<android.server.BluetoothService: boolean removeReservedServiceRecordsNative(int[])>
<android.widget.TabHost: void setup(android.app.LocalActivityManager)>
<android.opengl.GLSurfaceView: int getDebugFlags()>
<android.content.pm.ParceledListSlice: void <init>(android.os.Parcel,int,boolean)>
<com.android.server.pm.PackageManagerService: java.lang.String getApkName(java.lang.String)>
<android.text.BoringLayout: int getBottomPadding()>
<android.app.SearchableInfo$1: android.app.SearchableInfo createFromParcel(android.os.Parcel)>
<android.renderscript.RenderScript: void nScriptSetTimeZone(int,byte[])>
<android.view.accessibility.AccessibilityEvent: java.lang.String eventTypeToString(int)>
<android.drm.DrmManagerClient: android.content.ContentValues getConstraints(java.lang.String,int)>
<android.bluetooth.BluetoothHealthAppConfiguration$1: android.bluetooth.BluetoothHealthAppConfiguration[] newArray(int)>
<android.app.admin.DeviceAdminInfo$1: android.app.admin.DeviceAdminInfo[] newArray(int)>
<android.filterfw.core.Frame: void onFrameStore()>
<android.webkit.AccessibilityInjector$AccessibilityWebContentKeyBinding: int getSecondArgument(int)>
<android.graphics.Canvas: int native_saveLayer(int,android.graphics.RectF,int,int)>
<android.widget.Scroller: int timePassed()>
<com.android.server.am.UsageStatsService$TimeStats: void <init>()>
<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: void <init>(com.android.server.accessibility.AccessibilityManagerService)>
<android.os.Bundle: void <clinit>()>
<com.android.internal.os.BatteryStatsImpl: int getHighDischargeAmountSinceCharge()>
<android.hardware.SensorManager: void unregisterListener(java.lang.Object,android.hardware.Sensor)>
<android.text.style.ScaleXSpan: void <init>(android.os.Parcel)>
<android.os.StrictMode$Span: void <init>()>
<android.view.View: int getHeight()>
<android.bluetooth.BluetoothPbap: android.bluetooth.BluetoothPbap$ServiceListener access$100(android.bluetooth.BluetoothPbap)>
<android.gesture.Learner: void addInstance(android.gesture.Instance)>
<com.android.internal.os.BatteryStatsImpl$Timer: void readSummaryFromParcelLocked(android.os.Parcel)>
<android.os.BatteryStats: java.lang.String formatBytesLocked(long)>
<android.net.http.RequestQueue$ActivePool: int access$408(android.net.http.RequestQueue$ActivePool)>
<android.media.AsyncPlayer$Thread: void <init>(android.media.AsyncPlayer)>
<android.media.AudioTrack: int native_attachAuxEffect(int)>
<android.view.InputQueue: void <clinit>()>
<android.nfc.tech.MifareClassic: int getSectorCount()>
<com.android.server.CountryDetectorService$Receiver: boolean equals(java.lang.Object)>
<android.nfc.tech.MifareUltralight: android.nfc.Tag getTag()>
<android.graphics.drawable.ClipDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<android.text.style.ImageSpan: java.lang.String getSource()>
<android.media.audiofx.AudioEffect: void createNativeEventHandler()>
<android.content.pm.ResolveInfo: int getIconResource()>
<android.net.DhcpStateMachine: void access$2000(android.net.DhcpStateMachine,com.android.internal.util.IState)>
<android.os.DropBoxManager$Entry: void <clinit>()>
<android.location.Criteria$1: java.lang.Object[] newArray(int)>
<android.speech.tts.EventLogger: void onEngineDataReceived()>
<android.net.DhcpStateMachine$DhcpAction: void <init>(java.lang.String,int)>
<android.webkit.WebViewCore: void nativeResume()>
<android.app.IWallpaperManagerCallback$Stub$Proxy: void <init>(android.os.IBinder)>
<android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiWatchdogStateMachine$WatchdogDisabledState access$900(android.net.wifi.WifiWatchdogStateMachine)>
<com.android.server.am.ActivityManagerService$ItemMatcher: void build(java.lang.String)>
<android.graphics.drawable.AnimatedRotateDrawable: int getIntrinsicWidth()>
<android.test.InstrumentationTestCase: void runTestOnUiThread(java.lang.Runnable)>
<android.widget.Filter: android.os.Handler access$400(android.widget.Filter)>
<android.graphics.drawable.NinePatchDrawable: int getChangingConfigurations()>
<GenerationGG: android.test.mock.MockDialogInterface get_androidtestmockMockDialogInterface()>
<android.test.mock.MockCursor: android.os.Bundle respond(android.os.Bundle)>
<android.view.KeyEvent: void writeToParcel(android.os.Parcel,int)>
<android.app.SharedPreferencesImpl: void awaitLoadedLocked()>
<android.app.ApplicationErrorReport$AnrInfo: void dump(android.util.Printer,java.lang.String)>
<android.graphics.EmbossMaskFilter: int nativeConstructor(float[],float,float,float)>
<android.widget.ExpandableListPosition: android.widget.ExpandableListPosition getRecycledOrCreate()>
<android.os.MemoryFile$MemoryOutputStream: void <init>(android.os.MemoryFile)>
<com.android.server.LocationManagerService: boolean shouldBroadcastSafe(android.location.Location,android.location.Location,com.android.server.LocationManagerService$UpdateRecord)>
<android.graphics.Canvas: void nativeDrawVertices(int,int,int,float[],int,float[],int,int[],int,short[],int,int,int)>
<android.content.pm.ActivityInfo: int activityInfoConfigToNative(int)>
<android.view.GLES20RecordingCanvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>
<android.renderscript.Long4: void <init>()>
<GenerationGG: android.webkit.WebIconDatabase get_androidwebkitWebIconDatabase()>
<android.text.Layout: int getLineForVertical(int)>
<android.view.GLES20RecordingCanvas: void drawTextOnPath(char[],int,int,android.graphics.Path,float,float,android.graphics.Paint)>
<android.appwidget.AppWidgetProviderInfo$1: android.appwidget.AppWidgetProviderInfo createFromParcel(android.os.Parcel)>
<android.widget.TextView: int access$1500(android.widget.TextView)>
<android.widget.AbsSpinner: android.widget.SpinnerAdapter getAdapter()>
<android.widget.ListPopupWindow: void setModal(boolean)>
<android.renderscript.Element$DataKind: android.renderscript.Element$DataKind[] values()>
<android.text.method.CharacterPickerDialog$OptionsAdapter: java.lang.Object getItem(int)>
<android.widget.AbsListView$RecycleBin: void markChildrenDirty()>
<android.widget.LinearLayout: int getShowDividers()>
<com.android.internal.statusbar.StatusBarIconList: void defineSlots(java.lang.String[])>
<android.renderscript.Matrix3f: void scale(float,float,float)>
<android.webkit.CookieManager$CookieComparator: void <init>(android.webkit.CookieManager$1)>
<android.media.audiofx.AudioEffect: int setParameter(byte[],byte[])>
<android.graphics.Point: boolean equals(java.lang.Object)>
<android.renderscript.Element: android.renderscript.Element TYPE(android.renderscript.RenderScript)>
<android.view.KeyEvent: void <clinit>()>
<android.net.MailTo: java.lang.String getTo()>
<com.android.server.am.ActivityManagerService$GraphicsBinder: void <init>(com.android.server.am.ActivityManagerService)>
<com.android.internal.telephony.gsm.SmsCbHeader: java.lang.String toString()>
<android.graphics.Picture: void <init>(int)>
<android.webkit.ZoomManager: boolean canZoomOut()>
<android.net.NetworkStats: android.net.NetworkStats$Entry getTotal(android.net.NetworkStats$Entry,java.util.HashSet)>
<com.android.internal.telephony.cdma.sms.BearerData: boolean decodeMsgStatus(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)>
<GenerationGG: android.app.ActionBar$Tab get_androidappActionBar__Tab()>
<android.media.AudioManager: boolean isBluetoothA2dpOn()>
<android.service.wallpaper.WallpaperService$Engine: android.os.Bundle onCommand(java.lang.String,int,int,int,android.os.Bundle,boolean)>
<android.text.BoringLayout$Metrics: void <init>()>
<android.webkit.WebSettings: java.lang.String getSerifFontFamily()>
<android.graphics.TemporaryBuffer: void recycle(char[])>
<android.text.util.Linkify: void gatherLinks(java.util.ArrayList,android.text.Spannable,java.util.regex.Pattern,java.lang.String[],android.text.util.Linkify$MatchFilter,android.text.util.Linkify$TransformFilter)>
<android.net.Uri$StringUri: void writeToParcel(android.os.Parcel,int)>
<android.app.backup.BackupAgent$BackupServiceBinder: void <init>(android.app.backup.BackupAgent,android.app.backup.BackupAgent$1)>
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int available()>
<android.view.IWindowManager$Stub$Proxy: android.os.IBinder asBinder()>
<android.ddm.DdmHandleExit: void <clinit>()>
<com.android.server.am.UsageStatsService: void <clinit>()>
<android.accounts.AccountsException: void <init>(java.lang.Throwable)>
<android.graphics.RectF: float height()>
<android.graphics.RectF: void setEmpty()>
<com.android.internal.statusbar.StatusBarIconList: com.android.internal.statusbar.StatusBarIcon getIcon(int)>
<com.android.server.am.UriPermissionOwner: android.os.Binder getExternalTokenLocked()>
<android.text.util.Rfc822Token: java.lang.String getAddress()>
<com.android.server.location.GpsLocationProvider: boolean requiresNetwork()>
<com.android.server.accessibility.TouchExplorer: void sendActionDownAndUp(android.view.MotionEvent,int)>
<android.view.ScaleGestureDetector: float getCurrentSpanX()>
<android.view.GLES20Layer$Finalizer: void destroy()>
<android.content.res.AssetManager: int openNonAssetNative(int,java.lang.String,int)>
<android.test.MoreAsserts: void failContains(java.lang.String,java.lang.String,java.lang.String)>
<android.widget.SearchView: void setQueryRefinementEnabled(boolean)>
<com.android.server.AlarmManagerService$ClockReceiver: void scheduleDateChangedEvent()>
<java.lang.Object: java.lang.String getColumnName(int)>
<android.media.audiofx.AudioEffect: boolean hasControl()>
<android.media.AudioTrack: void audioBuffSizeCheck(int)>
<Wrapper_android_graphics_RectF: void test_android_graphics_RectF()>
<android.os.Debug: void resetGlobalExternalFreedSize()>
<com.android.server.usb.UsbSettingsManager: void checkPermission(android.hardware.usb.UsbAccessory)>
<android.content.ComponentName: java.lang.String toShortString()>
<android.net.wifi.WifiStateMachine$TetheredState: void enter()>
<android.widget.AbsListView: boolean isInFilterMode()>
<android.app.WallpaperManager$FastBitmapDrawable: void draw(android.graphics.Canvas)>
<android.app.ActivityThread: android.content.IContentProvider acquireExistingProvider(android.content.Context,java.lang.String)>
<android.view.View: void forceLayout()>
<android.app.Activity: java.lang.Object getLastNonConfigurationInstance()>
<android.net.wifi.WifiWatchdogStateMachine: int access$2300(android.net.wifi.WifiWatchdogStateMachine)>
<android.os.TokenWatcher: void acquire(android.os.IBinder,java.lang.String)>
<android.app.Service: int onStartCommand(android.content.Intent,int,int)>
<com.android.server.am.UriPermissionOwner: com.android.server.am.UriPermissionOwner fromExternalToken(android.os.IBinder)>
<android.media.AudioRecord: void audioParamCheck(int,int,int,int)>
<com.android.server.UiModeManagerService$6: void onProviderDisabled(java.lang.String)>
<com.android.internal.widget.ScrollingTabContainerView: void onNothingSelected(android.widget.AdapterView)>
<android.view.View: boolean canHaveDisplayList()>
<android.view.IWindowManager$Stub$Proxy: void <init>(android.os.IBinder)>
<android.graphics.Canvas: boolean clipRegion(android.graphics.Region,android.graphics.Region$Op)>
<android.graphics.Matrix: boolean setConcat(android.graphics.Matrix,android.graphics.Matrix)>
<com.android.server.UiModeManagerService$4: void <init>(com.android.server.UiModeManagerService)>
<android.os.StrictMode: android.os.StrictMode$Span enterCriticalSpan(java.lang.String)>
<GenerationGG: android.text.SpanWatcher get_androidtextSpanWatcher()>
<android.view.inputmethod.BaseInputConnection: boolean beginBatchEdit()>
<GenerationGG: android.sax.RootElement get_androidsaxRootElement()>
<android.inputmethodservice.KeyboardView: void setOnKeyboardActionListener(android.inputmethodservice.KeyboardView$OnKeyboardActionListener)>
<android.view.animation.TranslateAnimation: void applyTransformation(float,android.view.animation.Transformation)>
<android.widget.CalendarView$1: void <init>(android.widget.CalendarView)>
<android.app.SharedPreferencesImpl$EditorImpl: void <init>(android.app.SharedPreferencesImpl)>
<android.widget.CalendarView: java.util.Calendar access$1900(android.widget.CalendarView)>
<com.android.internal.telephony.gsm.GsmCallTracker: android.os.Message obtainCompleteMessage()>
<android.widget.ExpandableListConnector$PositionMetadata: void recycle()>
<android.animation.Keyframe$FloatKeyframe: java.lang.Object clone()>
<com.android.server.WifiService: boolean access$2402(com.android.server.WifiService,boolean)>
<android.renderscript.Matrix4f: void <init>(float[])>
<android.renderscript.Font: android.renderscript.Font create(android.renderscript.RenderScript,android.content.res.Resources,java.lang.String,android.renderscript.Font$Style,float)>
<android.opengl.GLSurfaceView: void requestRender()>
<android.content.ContentProviderClient: android.content.ContentProvider getLocalContentProvider()>
<android.hardware.usb.UsbDeviceConnection: android.hardware.usb.UsbRequest native_request_wait()>
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>
<android.gesture.GestureOverlayView: void setCurrentColor(int)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void logd(java.lang.String)>
<android.app.LauncherActivity$ActivityAdapter: long getItemId(int)>
<android.renderscript.Allocation: void <init>(int,android.renderscript.RenderScript,android.renderscript.Type,int)>
<android.speech.tts.TextToSpeech: java.lang.String access$302(android.speech.tts.TextToSpeech,java.lang.String)>
<android.speech.tts.TextToSpeech: java.lang.String getPackageName()>
<com.android.internal.telephony.gsm.GsmCallTracker: void registerForVoiceCallStarted(android.os.Handler,int,java.lang.Object)>
<android.provider.SyncStateContract: void <init>()>
<android.webkit.WebView: int getViewHeightWithTitle()>
<android.test.ClassPathPackageInfoSource$1: java.lang.Object load(java.lang.Object)>
<android.text.DynamicLayout: int getBottomPadding()>
<com.android.server.NetworkManagementSocketTagger: int getThreadSocketStatsTag()>
<android.content.SyncContext: android.os.IBinder getSyncContextBinder()>
<android.widget.TextView$1: void <init>(android.widget.TextView,java.lang.CharSequence)>
<android.widget.TableRow: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)>
<android.net.MailTo: boolean isMailTo(java.lang.String)>
<com.android.internal.telephony.cdma.RuimCard: void dispose()>
<android.preference.Preference: android.content.Context getContext()>
<com.android.server.wm.InputManager: void nativeSetInputFilterEnabled(boolean)>
<android.graphics.drawable.NinePatchDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<android.view.WindowManagerImpl: void finishRemoveViewLocked(android.view.View,int)>
<android.text.method.BaseMovementMethod: boolean right(android.widget.TextView,android.text.Spannable)>
<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection: void <init>(android.widget.RemoteViewsAdapter)>
<android.test.mock.MockPackageManager: int checkSignatures(java.lang.String,java.lang.String)>
<android.location.Address: void setUrl(java.lang.String)>
<android.app.Application: void <init>()>
<android.animation.KeyframeSet: android.animation.KeyframeSet ofObject(java.lang.Object[])>
<android.view.View: void setY(float)>
<android.animation.ValueAnimator: android.animation.TimeInterpolator getInterpolator()>
<android.media.audiofx.Equalizer$Settings: void <init>()>
<com.android.internal.telephony.PhoneProxy: android.content.Context getContext()>
<android.net.wifi.WifiWatchdogStateMachine: int access$2400(android.net.wifi.WifiWatchdogStateMachine)>
<com.android.server.pm.PackageManagerService: boolean hasPermission(android.content.pm.PackageParser$Package,java.lang.String)>
<com.android.internal.telephony.PhoneFactory: int getPhoneType(int)>
<android.widget.CalendarView: java.util.Calendar access$1400(android.widget.CalendarView)>
<android.test.RenamingDelegatingContext: void <init>(android.content.Context,android.content.Context,java.lang.String)>
<com.android.internal.telephony.CallStateException: void <init>(java.lang.String)>
<android.bluetooth.BluetoothDeviceProfileState: boolean access$1702(android.bluetooth.BluetoothDeviceProfileState,boolean)>
<android.location.ILocationManager$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.server.pm.PackageVerificationState: void <init>(int,com.android.server.pm.PackageManagerService$InstallArgs)>
<Wrapper_android_content_pm_PathPermission: void test_android_content_pm_PathPermission()>
<android.content.res.ColorStateList: void <init>()>
<android.app.ContextImpl: void init(android.content.res.Resources,android.app.ActivityThread)>
<junit.framework.TestSuite: java.lang.String toString()>
<android.bluetooth.IBluetoothA2dp$Stub: android.os.IBinder asBinder()>
<com.android.internal.telephony.gsm.VoiceMailConstants: void loadVoiceMail()>
<android.webkit.WebView$OnTrimMemoryListener: void <clinit>()>
<com.android.internal.http.HttpDateTime: int getMonth(java.lang.String)>
<android.net.sip.SipProfile: void <init>(android.os.Parcel)>
<android.app.SearchableInfo: boolean getVoiceSearchLaunchWebSearch()>
<android.mtp.MtpDevice: byte[] getObject(int,int)>
<com.android.internal.telephony.IccIoResult: com.android.internal.telephony.IccException getException()>
<android.server.BluetoothService: boolean cancelPairingUserInputNative(java.lang.String,int)>
<com.android.server.accessibility.AccessibilityManagerService: int addClient(android.view.accessibility.IAccessibilityManagerClient)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState: void <init>(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<android.widget.ListPopupWindow: void setContentWidth(int)>
<android.graphics.RadialGradient: int nativeCreate2(float,float,float,int,int,int)>
<com.android.server.wm.InputWindowHandle: void finalize()>
<android.view.MotionEvent: float getHistoricalX(int,int)>
<android.graphics.ComposePathEffect: int nativeCreate(int,int)>
<android.os.ParcelFileDescriptor$AutoCloseInputStream: void <init>(android.os.ParcelFileDescriptor)>
<android.view.TextureView$1: void onFrameAvailable(android.graphics.SurfaceTexture)>
<com.android.internal.telephony.ServiceStateTracker: void unregisterForNetworkAttached(android.os.Handler)>
<android.widget.LinearLayout: int getOrientation()>
<android.view.VolumePanel$4: void onReceive(android.content.Context,android.content.Intent)>
<android.widget.TextView: int getSelectionStart()>
<android.media.IAudioService$Stub$Proxy: android.os.IBinder asBinder()>
<android.hardware.usb.UsbDeviceConnection: java.lang.String native_get_serial()>
<java.lang.Object: void require(int,java.lang.String,java.lang.String)>
<com.android.internal.telephony.DataConnection: boolean configureRetry(int,int,int)>
<Wrapper_android_media_audiofx_Equalizer: void test_android_media_audiofx_Equalizer()>
<android.app.ActivityThread$ApplicationThread: void dumpActivity(java.io.FileDescriptor,android.os.IBinder,java.lang.String,java.lang.String[])>
<GenerationGG: android.renderscript.Matrix2f get_androidrenderscriptMatrix2f()>
<android.nfc.TransceiveResult: void <clinit>()>
<android.graphics.Region: boolean setPath(android.graphics.Path,android.graphics.Region)>
<com.android.server.accessibility.TouchExplorer$PerformLongPressDelayed: boolean access$200(com.android.server.accessibility.TouchExplorer$PerformLongPressDelayed)>
<android.bluetooth.BluetoothDeviceProfileState: void access$7600(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.IState)>
<android.widget.GridLayout$Alignment: void <init>()>
<android.text.TextDirectionHeuristics$TextDirectionHeuristicInternal: void <init>(android.text.TextDirectionHeuristics$TextDirectionAlgorithm,boolean,android.text.TextDirectionHeuristics$1)>
<android.renderscript.RenderScript: void nAllocationData1D(int,int,int,int,float[],int)>
<android.app.Activity: void stopManagingCursor(android.database.Cursor)>
<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCDWithLength(java.lang.String)>
<android.text.AutoText: void add(java.lang.String,char)>
<android.app.Activity: java.lang.Object onRetainNonConfigurationInstance()>
<com.android.server.connectivity.Tethering$TetherMasterSM: com.android.internal.util.State access$4800(com.android.server.connectivity.Tethering$TetherMasterSM)>
<android.os.Parcel: void finalize()>
<com.android.internal.telephony.sip.SipCommandInterface: void getOperator(android.os.Message)>
<android.accounts.AccountAuthenticatorResponse: int describeContents()>
<android.view.KeyEvent: long getEventTimeNano()>
<GenerationGG: android.hardware.usb.UsbConstants get_androidhardwareusbUsbConstants()>
<com.android.internal.os.BatteryStatsImpl: boolean getNextOldHistoryLocked(android.os.BatteryStats$HistoryItem)>
<android.widget.ActivityChooserModel$DataModelPackageMonitor: void <init>(android.widget.ActivityChooserModel)>
<com.android.server.pm.PackageManagerService: java.lang.String getNextCodePath(java.lang.String,java.lang.String,java.lang.String)>
<android.widget.FrameLayout: boolean gatherTransparentRegion(android.graphics.Region)>
<android.media.audiofx.Visualizer: void <clinit>()>
<GenerationGG: android.graphics.ColorMatrix get_androidgraphicsColorMatrix()>
<android.net.wifi.WifiWatchdogStateMachine: void access$3600(android.net.wifi.WifiWatchdogStateMachine,com.android.internal.util.IState)>
<android.graphics.Canvas: void native_drawText(int,char[],int,int,float,float,int,int)>
<android.accounts.IAccountAuthenticatorResponse$Stub: void <init>()>
<android.media.AudioRecord: int getPositionNotificationPeriod()>
<android.hardware.SensorManager: android.hardware.SensorManager$SensorEventPool access$200()>
<com.android.internal.telephony.cdma.CDMAPhone: void unsetOnEcbModeExitResponse(android.os.Handler)>
<android.widget.Gallery: void onShowPress(android.view.MotionEvent)>
<android.webkit.WebStorage: void access$300(android.webkit.WebStorage)>
<android.content.ContentService: void unregisterContentObserver(android.database.IContentObserver)>
<android.widget.NumberPicker$InputTextFilter: void <init>(android.widget.NumberPicker)>
<android.animation.FloatKeyframeSet: java.lang.Object clone()>
<android.content.AsyncQueryHandler: void onQueryComplete(int,java.lang.Object,android.database.Cursor)>
<android.content.res.CompatibilityInfo: void <init>(android.content.res.CompatibilityInfo$1)>
<com.android.internal.os.BatteryStatsImpl$Uid: void noteWifiStoppedLocked()>
<android.widget.AbsListView: boolean verifyDrawable(android.graphics.drawable.Drawable)>
<android.app.Instrumentation: android.app.Activity waitForMonitorWithTimeout(android.app.Instrumentation$ActivityMonitor,long)>
<com.android.internal.telephony.BaseCommands: void registerForIccRefresh(android.os.Handler,int,java.lang.Object)>
<com.android.server.BackupManagerService$FileMetadata: java.lang.String toString()>
<android.text.format.DateFormat: void <init>()>
<android.app.LauncherActivity$ActivityAdapter: java.util.ArrayList access$100(android.app.LauncherActivity$ActivityAdapter)>
<android.media.AudioSystem: int initStreamVolume(int,int,int)>
<android.telephony.PhoneNumberFormattingTextWatcher: java.lang.String reformat(java.lang.CharSequence,int)>
<android.graphics.Paint: android.graphics.Paint$FontMetrics getFontMetrics()>
<android.speech.tts.TtsEngines: void <init>(android.content.Context)>
<android.app.ISearchManager$Stub: void <init>()>
<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: void enforceCanRetrieveWindowContent(com.android.server.accessibility.AccessibilityManagerService$Service)>
<android.util.JsonReader: android.util.JsonToken objectValue()>
<android.webkit.WebViewCore: void nativeDumpDomTree(boolean)>
<com.android.server.accessibility.TouchExplorer: void sendMotionEvent(android.view.MotionEvent,int,int,int)>
<android.content.SyncStats$1: java.lang.Object[] newArray(int)>
<android.gesture.GestureOverlayView: float getGestureStrokeWidth()>
<android.webkit.BrowserFrame: void nativeDestroyFrame()>
<android.widget.OverScroller: void setFinalX(int)>
<com.android.server.WifiService$4: void <clinit>()>
<android.net.http.SslError: boolean hasError(int)>
<com.android.internal.view.menu.MenuItemImpl: int getGroupId()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: long getStartTime(long,int)>
<android.renderscript.BaseObj: void <init>(int,android.renderscript.RenderScript)>
<android.opengl.Matrix: float length(float,float,float)>
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean hasItalianLeadingZero()>
<GenerationGG: android.widget.SimpleAdapter get_androidwidgetSimpleAdapter()>
<android.view.DragEvent: float getY()>
<android.content.pm.UserInfo$1: android.content.pm.UserInfo[] newArray(int)>
<Wrapper_android_hardware_usb_UsbDeviceConnection: void test_android_hardware_usb_UsbDeviceConnection()>
<Wrapper_android_database_sqlite_SQLiteAccessPermException: void test_android_database_sqlite_SQLiteAccessPermException()>
<com.android.internal.util.ArrayUtils: int idealByteArraySize(int)>
<android.test.mock.MockContext: void setWallpaper(android.graphics.Bitmap)>
<android.graphics.Canvas: android.graphics.Rect getClipBounds()>
<com.android.internal.view.menu.MenuItemImpl: java.lang.String toString()>
<com.android.server.wm.WindowManagerService: boolean canStatusBarHide()>
<android.animation.AnimatorSet: java.util.ArrayList access$000(android.animation.AnimatorSet)>
<Wrapper_android_accounts_AuthenticatorException: void test_android_accounts_AuthenticatorException()>
<android.webkit.WebViewCore: void sendMessageDelayed(int,java.lang.Object,long)>
<android.content.pm.PackageInfoLite: int describeContents()>
<android.renderscript.Element: android.renderscript.Element F32_3(android.renderscript.RenderScript)>
<android.content.pm.PackageParser$PermissionGroup: void <init>(android.content.pm.PackageParser$Package)>
<GenerationGG: android.view.InflateException get_androidviewInflateException()>
<android.media.ExifInterface: void loadAttributes()>
<android.webkit.BrowserFrame$2: void cancel()>
<com.android.internal.telephony.BaseCommands: void registerForRadioStateChanged(android.os.Handler,int,java.lang.Object)>
<android.widget.GridLayout: void procrusteanFill(int[],int,int,int)>
<android.webkit.WebBackForwardList: java.lang.Object clone()>
<android.view.ViewPropertyAnimator: android.animation.Animator$AnimatorListener access$200(android.view.ViewPropertyAnimator)>
<android.telephony.NeighboringCellInfo$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.graphics.Path: void native_addRoundRect(int,android.graphics.RectF,float,float,int)>
<android.filterfw.core.Filter: void tearDown(android.filterfw.core.FilterContext)>
<android.animation.AnimatorSet$DependencyListener: void <init>(android.animation.AnimatorSet,android.animation.AnimatorSet$Node,int)>
<android.text.method.TextKeyListener: void onSpanRemoved(android.text.Spannable,java.lang.Object,int,int)>
<android.app.backup.BackupHelperDispatcher: void <init>()>
<android.database.sqlite.DatabaseConnectionPool$PoolObj: void acquire()>
<android.nfc.tech.NfcA: android.nfc.Tag getTag()>
<android.webkit.WebSettings: java.lang.String getCurrentAcceptLanguage()>
<android.net.wifi.WifiStateMachine$TetheredState: boolean processMessage(android.os.Message)>
<com.android.server.wm.WindowState: java.lang.String makeInputChannelName()>
<android.net.wifi.WpsInfo$1: android.net.wifi.WpsInfo[] newArray(int)>
<android.media.RemoteControlClient$MetadataEditor: void <init>(android.media.RemoteControlClient,android.media.RemoteControlClient$1)>
<android.view.inputmethod.InputMethodInfo: java.lang.String getId()>
<com.android.internal.telephony.BaseCommands: com.android.internal.telephony.CommandsInterface$RadioState getSimState()>
<android.webkit.WebViewCore$3: void onReceiveValue(java.lang.String[])>
<android.view.ViewConfiguration: int getDoubleTapTimeout()>
<android.net.Uri$StringUri: java.lang.String toString()>
<android.content.res.StringBlock$StyleIDs: int access$300(android.content.res.StringBlock$StyleIDs)>
<android.net.http.HttpAuthHeader: boolean getStale()>
<android.os.AsyncResult: void <init>(java.lang.Object,java.lang.Object,java.lang.Throwable)>
<android.os.FileObserver$ObserverThread: void stopWatching(int)>
<android.webkit.WebView$QueuedTouch: void <init>(android.webkit.WebView$1)>
<android.renderscript.RSTextureView: void pause()>
<android.webkit.CookieManager: void signalCookieOperationsStart()>
<com.android.internal.widget.ActionBarContextView: void onAnimationRepeat(android.animation.Animator)>
<android.webkit.WebView$5: void onClick(android.content.DialogInterface,int)>
<android.server.BluetoothService: boolean unregisterHealthApplicationNative(java.lang.String)>
<android.widget.Gallery: void detachOffScreenChildren(boolean)>
<com.android.internal.telephony.cdma.sms.BearerData: void encodeReplyOption(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)>
<android.text.style.MetricAffectingSpan$Passthrough: void updateMeasureState(android.text.TextPaint)>
<android.graphics.SurfaceTexture: void updateTexImage()>
<android.view.animation.GridLayoutAnimationController: void setColumnDelay(float)>
<android.animation.LayoutTransition$3: void <init>(android.animation.LayoutTransition,android.animation.Animator,int,long,android.view.View,android.view.ViewGroup)>
<android.widget.ListPopupWindow$ResizePopupRunnable: void <init>(android.widget.ListPopupWindow)>
<android.app.LoadedApk$ServiceDispatcher: android.app.IServiceConnection getIServiceConnection()>
<GenerationGG: android.gesture.Prediction get_androidgesturePrediction()>
<com.android.internal.widget.LockPatternView$Cell: void checkRange(int,int)>
<android.content.ComponentName$1: android.content.ComponentName[] newArray(int)>
<android.os.SystemClock: long currentThreadTimeMicro()>
<android.widget.ListPopupWindow: long getSelectedItemId()>
<android.os.Handler: android.os.Message obtainMessage(int)>
<GenerationGG: android.os.Parcelable$Creator get_androidosParcelable__Creator()>
<com.android.server.location.PassiveProvider: void updateNetworkState(int,android.net.NetworkInfo)>
<android.widget.SimpleExpandableListAdapter: void <init>(android.content.Context,java.util.List,int,java.lang.String[],int[],java.util.List,int,java.lang.String[],int[])>
<android.widget.AdapterView: int getSelectedItemPosition()>
<android.app.INotificationManager$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.server.am.UsageStatsService: android.os.Parcel getParcelForFile(java.io.File)>
<android.renderscript.Int2: void <init>(int,int)>
<com.android.server.am.ContentProviderRecord: void <init>(com.android.server.am.ContentProviderRecord)>
<android.graphics.Region: void <init>(android.graphics.Region)>
<android.graphics.Path: boolean native_isRect(int,android.graphics.RectF)>
<android.media.JetPlayer: boolean native_closeJetFile()>
<android.content.BroadcastReceiver: java.lang.String getResultData()>
<android.location.Location: void <init>(android.location.Location)>
<android.app.AlertDialog: void setButton3(java.lang.CharSequence,android.os.Message)>
<android.view.animation.OvershootInterpolator: void <init>(float)>
<com.android.server.location.PassiveProvider: long getStatusUpdateTime()>
<android.graphics.Region: boolean union(android.graphics.Rect)>
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.StateMachine$SmHandler$StateInfo setupTempStateStackWithStatesToEnter(com.android.internal.util.State)>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: boolean isAvailable()>
<android.graphics.drawable.NinePatchDrawable: int getMinimumHeight()>
<android.widget.ListPopupWindow: android.widget.ListPopupWindow$ResizePopupRunnable access$800(android.widget.ListPopupWindow)>
<android.app.ContextImpl: android.content.res.Resources$Theme getTheme()>
<android.app.admin.DeviceAdminInfo: int describeContents()>
<com.android.server.pm.PackageManagerService: java.lang.String access$2700(java.lang.String,java.lang.String,java.lang.String)>
<android.location.Address: android.os.Bundle getExtras()>
<com.android.server.am.ActivityRecord: com.android.server.am.UriPermissionOwner getUriPermissionsLocked()>
<android.view.WindowManager$LayoutParams: void restore()>
<android.content.res.Resources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>
<android.drm.ProcessedData: byte[] getData()>
<android.widget.PopupWindow: int[] access$700()>
<com.android.internal.view.InputBindResult: void <init>(com.android.internal.view.IInputMethodSession,java.lang.String,int)>
<android.speech.RecognitionService: void access$300(android.speech.RecognitionService)>
<android.content.SyncManager$AuthoritySyncStats: void <init>(java.lang.String)>
<android.widget.HorizontalScrollView: boolean isWithinDeltaOfScreen(android.view.View,int)>
<android.filterfw.core.NativeFrame: int getCapacity()>
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiver(android.location.ILocationListener)>
<android.location.Criteria: int getAccuracy()>
<android.webkit.WebViewCore: boolean nativeKey(int,int,int,boolean,boolean,boolean,boolean)>
<android.test.mock.MockCursor: int getPosition()>
<com.android.server.am.BroadcastFilter: void <init>(android.content.IntentFilter,com.android.server.am.ReceiverList,java.lang.String,java.lang.String)>
<android.view.MotionEvent: void nativeSetEdgeFlags(int,int)>
<android.app.admin.DeviceAdminReceiver: android.app.admin.DevicePolicyManager getManager(android.content.Context)>
<android.webkit.DeviceMotionAndOrientationManager: void <clinit>()>
<com.android.internal.view.menu.ActionMenuItem: boolean isActionViewExpanded()>
<android.widget.NumberPicker: void ensureCachedScrollSelectorValue(int)>
<android.widget.AbsListView: void setSmoothScrollbarEnabled(boolean)>
<android.net.LocalSocketImpl: android.net.LocalSocketAddress getSockAddress()>
<android.accounts.AccountManagerService$Session: void cancelTimeout()>
<android.widget.ListPopupWindow: int getVerticalOffset()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: boolean isProvisioned()>
<android.text.Layout$SpannedEllipsizer: java.lang.Object[] getSpans(int,int,java.lang.Class)>
<com.android.server.AttributeCache: void <clinit>()>
<DumbClass: void DumbMethod15()>
<android.media.RemoteControlClient: android.app.PendingIntent getRcMediaIntent()>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>
<android.renderscript.AllocationAdapter: void initLOD(int)>
<Wrapper_android_database_sqlite_SQLiteConstraintException: void test_android_database_sqlite_SQLiteConstraintException()>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getRingingCall()>
<android.view.SurfaceView$4: void removeCallback(android.view.SurfaceHolder$Callback)>
<com.android.server.connectivity.Tethering: void limitReached(java.lang.String,java.lang.String)>
<com.android.internal.view.menu.ActionMenuPresenter$PopupPresenterCallback: boolean onOpenSubMenu(com.android.internal.view.menu.MenuBuilder)>
<GenerationGG: android.graphics.Shader get_androidgraphicsShader()>
<android.test.mock.MockContentResolver: boolean releaseProvider(android.content.IContentProvider)>
<android.graphics.Matrix: boolean preConcat(android.graphics.Matrix)>
<android.net.rtp.AudioCodec: void <init>(int,java.lang.String,java.lang.String)>
<GenerationGG: android.hardware.SensorListener get_androidhardwareSensorListener()>
<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageOOOO(int,java.lang.Object,java.lang.Object,java.lang.Object,java.lang.Object)>
<com.android.server.MountService$ObbState: java.lang.String toString()>
<android.os.Parcel: boolean[] createBooleanArray()>
<android.database.sqlite.SQLiteOutOfMemoryException: void <init>(java.lang.String)>
<android.renderscript.ProgramStore$Builder: void <init>(android.renderscript.RenderScript)>
<android.net.NetworkTemplate: int describeContents()>
<android.net.wifi.WifiStateMachine$SoftApStartedState: void <init>(android.net.wifi.WifiStateMachine)>
<android.location.GpsSatellite: boolean usedInFix()>
<android.media.AudioTrack: int getNotificationMarkerPosition()>
<android.media.effect.EffectFactory: boolean isEffectSupported(java.lang.String)>
<android.net.wifi.WifiStateMachine$DriverFailedState: void enter()>
<android.widget.VideoView: int access$900(android.widget.VideoView)>
<android.media.AudioTrack: void native_setAuxEffectSendLevel(float)>
<android.webkit.WebView: android.graphics.Point nativeCursorPosition()>
<android.widget.OverScroller$SplineOverScroller: void finish()>
<android.content.Entity: void <init>(android.content.ContentValues)>
<android.appwidget.AppWidgetHostView$ParcelableSparseArray$1: void <init>()>
<android.webkit.WebViewCore: int nativeRecordContent(android.graphics.Region,android.graphics.Point)>
<android.appwidget.AppWidgetProvider: void <init>()>
<android.view.animation.LayoutAnimationController: void start()>
<Wrapper_android_renderscript_BaseObj: void test_android_renderscript_BaseObj()>
<android.net.EthernetDataTracker: void access$300(android.net.EthernetDataTracker,java.lang.String)>
<android.widget.AdapterViewAnimator: void deferNotifyDataSetChanged()>
<android.widget.AbsoluteLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.util.JsonWriter: android.util.JsonWriter value(double)>
<android.preference.Preference: void setLayoutResource(int)>
<android.app.Activity: boolean onKeyShortcut(int,android.view.KeyEvent)>
<android.text.format.Time: int getJulianMondayFromWeeksSinceEpoch(int)>
<android.content.res.StringBlock$StyleIDs: int access$302(android.content.res.StringBlock$StyleIDs,int)>
<android.content.pm.PackageInfoLite$1: java.lang.Object[] newArray(int)>
<android.content.Intent: java.lang.String toInsecureString()>
<android.text.method.ArrowKeyMovementMethod: boolean canSelectArbitrarily()>
<android.net.Uri$OpaqueUri: android.net.Uri readFrom(android.os.Parcel)>
<android.net.DhcpStateMachine: com.android.internal.util.StateMachine access$500(android.net.DhcpStateMachine)>
<android.graphics.Path: void offset(float,float,android.graphics.Path)>
<Wrapper_android_database_sqlite_SQLiteDatatypeMismatchException: void test_android_database_sqlite_SQLiteDatatypeMismatchException()>
<android.util.SparseArray: void gc()>
<android.text.style.MaskFilterSpan: android.graphics.MaskFilter getMaskFilter()>
<android.widget.ActivityChooserView: android.widget.PopupWindow$OnDismissListener access$1200(android.widget.ActivityChooserView)>
<android.animation.ArgbEvaluator: void <init>()>
<android.webkit.WebStorage: void getUsageForOrigin(java.lang.String,android.webkit.ValueCallback)>
<android.graphics.drawable.LayerDrawable: int getIntrinsicWidth()>
<android.os.Build: void <clinit>()>
<android.graphics.Picture: boolean nativeWriteToStream(int,java.io.OutputStream,byte[])>
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: boolean isConcurrentVoiceAndDataAllowed()>
<android.opengl.GLUtils: int native_getType(android.graphics.Bitmap)>
<android.widget.RelativeLayout$TopToBottomLeftToRightComparator: void <init>(android.widget.RelativeLayout)>
<android.app.ActivityManager$ProcessErrorStateInfo: void <init>(android.os.Parcel,android.app.ActivityManager$1)>
<android.widget.RelativeLayout$DependencyGraph: void getSortedViews(android.view.View[],int[])>
<android.telephony.PhoneNumberUtils: java.lang.String getStrippedReversed(java.lang.String)>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: void writeExcessivePowerToParcelLocked(android.os.Parcel)>
<android.widget.LinearLayout: void setBaselineAlignedChildIndex(int)>
<android.drm.mobile1.DrmRawContent$DrmInputStream: boolean markSupported()>
<android.view.GLES20Canvas: void nDrawBitmap(int,int,byte[],float,float,int)>
<android.server.BluetoothA2dpService: boolean checkSinkSuspendState(int)>
<com.android.i18n.phonenumbers.AsYouTypeFormatter: java.lang.String attemptToChooseFormattingPattern()>
<android.view.TextureView: boolean isAvailable()>
<android.test.SimpleCache: void <init>()>
<Wrapper_android_content_ContentUris: void test_android_content_ContentUris()>
<android.webkit.WebResourceResponse: java.lang.String getEncoding()>
<android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree: void <init>(android.bluetooth.BluetoothDeviceProfileState,android.bluetooth.BluetoothDeviceProfileState$1)>
<android.nfc.Tag: byte[] readBytesWithNull(android.os.Parcel)>
<android.view.GLES20Canvas: boolean isOpaque()>
<android.net.wifi.p2p.WifiP2pManager$Channel: java.lang.Object getListener(int)>
<com.android.internal.app.IUsageStats$Stub: android.os.IBinder asBinder()>
<GenerationGG: android.telephony.PhoneStateListener get_androidtelephonyPhoneStateListener()>
<android.net.NetworkInfo: void <init>(android.net.NetworkInfo)>
<android.graphics.Canvas: boolean isHardwareAccelerated()>
<android.net.http.HttpAuthHeader: java.lang.String parseScheme(java.lang.String)>
<com.android.server.accessibility.AccessibilityManagerService: android.util.SparseArray access$1700(com.android.server.accessibility.AccessibilityManagerService)>
<android.hardware.GeomagneticField: float getZ()>
<android.renderscript.Type$Builder: android.renderscript.Type$Builder setFaces(boolean)>
<android.text.style.CharacterStyle: android.text.style.CharacterStyle wrap(android.text.style.CharacterStyle)>
<android.view.HardwareRenderer: boolean isEnabled()>
<android.widget.RelativeLayout$DependencyGraph$Node: void release()>
<android.widget.TextView: void resetErrorChangedFlag()>
<android.animation.ValueAnimator: android.animation.ValueAnimator ofPropertyValuesHolder(android.animation.PropertyValuesHolder[])>
<android.util.StateSet: boolean isWildCard(int[])>
<android.content.SearchRecentSuggestionsProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.view.ViewRootImpl: void handleGetNewSurface()>
<android.net.wifi.WifiStateMachine: android.os.Message access$13900(android.net.wifi.WifiStateMachine)>
<android.nfc.NdefRecord: android.nfc.NdefRecord createApplicationRecord(java.lang.String)>
<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation,float)>
<android.view.SurfaceView$4: android.view.Surface getSurface()>
<com.android.server.PackageManagerBackupAgent: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)>
<com.android.server.MountService: void monitor()>
<android.preference.ListPreference: int getValueIndex()>
<android.widget.HorizontalScrollView: boolean isSmoothScrollingEnabled()>
<com.android.internal.app.ActionBarImpl: android.app.ActionBar$Tab newTab()>
<android.webkit.ByteArrayBuilder: java.util.LinkedList access$000()>
<com.android.internal.location.DummyLocationProvider: void setRequiresNetwork(boolean)>
<android.net.Uri$Part: boolean isEmpty()>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void saveNitzTimeZone(java.lang.String)>
<android.widget.PopupWindow: void update(int,int,int,int,boolean)>
<android.text.SpannableStringInternal: java.lang.String region(int,int)>
<android.graphics.drawable.ColorDrawable: void <init>()>
<android.inputmethodservice.InputMethodService: android.view.View onCreateExtractTextView()>
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: boolean processMessage(android.os.Message)>
<android.net.DhcpInfo: int describeContents()>
<GenerationGG: android.app.AliasActivity get_androidappAliasActivity()>
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: void addActivity(android.content.pm.PackageParser$Activity,java.lang.String)>
<android.content.ClipData: android.content.ClipData newPlainText(java.lang.CharSequence,java.lang.CharSequence)>
<android.webkit.LoadListener: void nativeFinished()>
<android.widget.GridLayout$Bounds: void include(int,int)>
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.StateMachine$SmHandler$StateInfo addState(com.android.internal.util.State,com.android.internal.util.State)>
<GenerationGG: android.animation.ValueAnimator$AnimatorUpdateListener get_androidanimationValueAnimator__AnimatorUpdateListener()>
<android.net.wifi.WifiStateTracker: void setDependencyMet(boolean)>
<com.android.server.LocationManagerService$Receiver: boolean isPendingIntent()>
<android.widget.QuickContactBadge: void setMode(int)>
<android.widget.Switch: void setSwitchTypeface(android.graphics.Typeface)>
<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo resolveService(android.content.Intent,java.lang.String,int)>
<android.widget.ScrollView: void setSmoothScrollingEnabled(boolean)>
<android.bluetooth.BluetoothDeviceProfileState: void access$6100(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.database.sqlite.SQLiteDatabase: int getCacheMissNum()>
<android.content.res.StringBlock$StyleIDs: int access$700(android.content.res.StringBlock$StyleIDs)>
<com.android.internal.telephony.DataConnectionAc: void <init>(com.android.internal.telephony.DataConnection,java.lang.String)>
<android.graphics.Matrix: boolean postConcat(android.graphics.Matrix)>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: int constructUserData(boolean,boolean)>
<android.test.ViewAsserts: void assertOffScreenBelow(android.view.View,android.view.View)>
<android.view.ViewRootImpl$AccessibilityInteractionConnection: void findAccessibilityNodeInfoByViewId(int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,long)>
<com.android.internal.telephony.cat.CatLog: void d(java.lang.String,java.lang.String)>
<com.android.internal.util.StateMachine$SmHandler: void access$1800(com.android.internal.util.StateMachine$SmHandler)>
<com.android.server.am.ServiceRecord$1: void <init>(com.android.server.am.ServiceRecord,java.lang.String,int,int,int,android.app.Notification)>
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil getInstance(java.lang.String,java.util.Map)>
<com.android.internal.telephony.cat.RilMessageDecoder: void <clinit>()>
<android.content.res.Resources: android.content.res.AssetManager getAssets()>
<android.content.SyncStorageEngine: void addStatusChangeListener(int,android.content.ISyncStatusObserver)>
<com.android.server.am.TransferPipe: void setBufferPrefix(java.lang.String)>
<android.telephony.SmsMessage: java.lang.String getDisplayOriginatingAddress()>
<android.app.Activity: android.app.FragmentManager getFragmentManager()>
<android.media.AudioManager: void setRouting(int,int,int)>
<com.android.server.usb.UsbSettingsManager$DeviceFilter: void write(org.xmlpull.v1.XmlSerializer)>
<com.android.server.NotificationManagerService: int indexOfToastLocked(java.lang.String,android.app.ITransientNotification)>
<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable findDrawableByLayerId(int)>
<com.android.server.pm.PackageManagerService$DumpState: void setSharedUser(com.android.server.pm.SharedUserSetting)>
<android.graphics.Matrix$1: void setSkew(float,float,float,float)>
<GenerationGG: android.test.mock.MockApplication get_androidtestmockMockApplication()>
<com.android.internal.telephony.BaseCommands: void setOnSmsOnSim(android.os.Handler,int,java.lang.Object)>
<android.net.DhcpInfoInternal: java.util.Collection getRoutes()>
<android.accounts.AccountManagerService: java.lang.Integer getCredentialPermissionNotificationId(android.accounts.Account,java.lang.String,int)>
<android.text.style.IconMarginSpan: void <init>(android.graphics.Bitmap)>
<com.android.server.VibratorService$2: void onReceive(android.content.Context,android.content.Intent)>
<com.android.server.pm.PackageManagerService: boolean isPackageFilename(java.lang.String)>
<android.content.res.Resources: android.content.res.ColorStateList getCachedColorStateList(int)>
<android.os.ParcelUuid: int hashCode()>
<android.media.MediaRecorder: void setLocation(float,float)>
<com.android.internal.telephony.cdma.CdmaConnection: boolean isConnectingInOrOut()>
<android.renderscript.RenderScript: java.lang.String rsnGetName(int,int)>
<android.location.Location: boolean hasAccuracy()>
<android.accounts.AuthenticatorDescription$1: android.accounts.AuthenticatorDescription createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.DataCallState$SetupResult: void <init>(java.lang.String,int)>
<android.content.pm.PackageParser: void <init>(java.lang.String)>
<android.media.MediaPlayer: int getDuration()>
<com.android.internal.telephony.cdma.CdmaCallTracker: void unregisterForVoiceCallStarted(android.os.Handler)>
<android.graphics.BlurMaskFilter: void <init>(float,android.graphics.BlurMaskFilter$Blur)>
<android.telephony.ServiceState: int getCdmaRoamingIndicator()>
<com.android.server.PowerManagerService: long timeSinceScreenOn()>
<android.app.ContextImpl: android.content.ContentResolver getContentResolver()>
<com.android.i18n.phonenumbers.AsYouTypeFormatter: boolean createFormattingTemplate(com.android.i18n.phonenumbers.Phonemetadata$NumberFormat)>
<android.os.StatFs: void finalize()>
<com.android.internal.telephony.SmsRawData: void writeToParcel(android.os.Parcel,int)>
<android.webkit.ByteArrayBuilder$Chunk: void release()>
<android.widget.AutoCompleteTextView$PopupDataSetObserver: void <init>(android.widget.AutoCompleteTextView,android.widget.AutoCompleteTextView$1)>
<GenerationGG: android.graphics.drawable.ShapeDrawable get_androidgraphicsdrawableShapeDrawable()>
<android.widget.FrameLayout: boolean getMeasureAllChildren()>
<android.net.rtp.RtpStream: void setMode(int)>
<android.app.Notification$Builder: android.app.Notification$Builder setSmallIcon(int)>
<com.android.server.StatusBarManagerService: void manageDisableListLocked(int,android.os.IBinder,java.lang.String)>
<android.preference.Preference: boolean getShouldDisableView()>
<android.location.Criteria$1: android.location.Criteria[] newArray(int)>
<com.android.internal.app.AlertController: android.widget.ListView getListView()>
<android.animation.PropertyValuesHolder: void setPropertyName(java.lang.String)>
<android.widget.HorizontalScrollView: boolean inChild(int,int)>
<android.widget.SearchView: boolean isIconified()>
<android.view.MenuInflater: java.lang.Class[] access$200()>
<android.server.BluetoothPanProfileHandler$1: void <init>(android.server.BluetoothPanProfileHandler)>
<android.net.sip.SipSessionAdapter: void onCallTransferring(android.net.sip.ISipSession,java.lang.String)>
<android.view.WindowManagerImpl$CompatModeWrapper: android.view.Display getDefaultDisplay()>
<android.preference.DialogPreference: android.graphics.drawable.Drawable getDialogIcon()>
<android.widget.AbsoluteLayout: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<android.widget.ExpandableListView: void setAdapter(android.widget.ListAdapter)>
<android.webkit.SslErrorHandlerImpl: void <init>()>
<com.android.internal.os.ProcessStats: long[] getLastCpuSpeedTimes()>
<android.inputmethodservice.Keyboard$Key: int squaredDistanceFrom(int,int)>
<android.content.IntentFilter: int countCategories()>
<android.graphics.Matrix: void native_setSinCos(int,float,float)>
<android.renderscript.FieldPacker: void addI64(android.renderscript.Long2)>
<android.webkit.WebView$OnTrimMemoryListener: void onTrimMemory(int)>
<android.widget.VideoView$4: void <init>(android.widget.VideoView)>
<android.hardware.Camera: void setPreviewCallbackWithBuffer(android.hardware.Camera$PreviewCallback)>
<android.webkit.WebTextView: android.os.ResultReceiver getResultReceiver()>
<android.speech.tts.TextToSpeech: void dispatchOnInit(int)>
<com.android.internal.telephony.cat.CommandDetails: boolean compareTo(com.android.internal.telephony.cat.CommandDetails)>
<android.app.ContextImpl: java.io.File getFileStreamPath(java.lang.String)>
<android.widget.Gallery: void setGravity(int)>
<com.android.internal.telephony.SmsStorageMonitor: boolean isStorageAvailable()>
<android.net.SntpClient: boolean requestTime(java.lang.String,int)>
<com.android.internal.net.DomainNameValidator: boolean matchIpAddress(java.security.cert.X509Certificate,java.lang.String)>
<com.android.server.LocationManagerService: java.util.List getAllProviders()>
<com.android.internal.view.menu.MenuBuilder: int size()>
<android.app.Instrumentation: android.app.Application newApplication(java.lang.Class,android.content.Context)>
<com.android.internal.telephony.cdma.CdmaInformationRecords: java.lang.String idToString(int)>
<android.net.Uri$StringUri: java.lang.String parseSsp()>
<android.net.ProxyProperties: void <init>(java.lang.String,int,java.lang.String,java.lang.String[])>
<android.accounts.AccountManager$3: void <init>(android.accounts.AccountManager,android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.Account)>
<android.test.AndroidTestCase: void <init>()>
<com.android.server.InputMethodManagerService: void hideInputMethodMenuLocked()>
<android.text.style.IconMarginSpan: void chooseHeight(java.lang.CharSequence,int,int,int,int,android.graphics.Paint$FontMetricsInt)>
<com.android.server.wm.WindowManagerService$PolicyThread: void <init>(android.view.WindowManagerPolicy,com.android.server.wm.WindowManagerService,android.content.Context,com.android.server.PowerManagerService)>
<android.content.res.AssetManager$AssetInputStream: void <init>(android.content.res.AssetManager,int,android.content.res.AssetManager$1)>
<android.net.wifi.WpsInfo: void <init>(android.net.wifi.WpsInfo)>
<android.util.TypedValue: float complexToDimension(int,android.util.DisplayMetrics)>
<android.graphics.drawable.InsetDrawable: boolean isStateful()>
<android.server.search.Searchables: void <init>(android.content.Context)>
<android.graphics.Paint: android.graphics.Rasterizer setRasterizer(android.graphics.Rasterizer)>
<android.widget.TextView: int access$7000(android.widget.TextView)>
<GenerationGG: android.graphics.Paint$FontMetricsInt get_androidgraphicsPaint__FontMetricsInt()>
<Wrapper_android_text_Spannable: void test_android_text_Spannable()>
<android.util.EventLogTags: void <init>(java.io.BufferedReader)>
<android.app.backup.BackupDataOutput: int writeEntityData_native(int,byte[],int)>
<android.graphics.drawable.Drawable: void <init>()>
<android.view.ViewRootImpl: void dispatchSystemUiVisibilityChanged(int,int,int,int)>
<android.view.CompatibilityInfoHolder: void <init>()>
<android.os.StrictMode: void setBlockGuardPolicy(int)>
<android.test.mock.MockContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.net.wifi.WifiStateMachine: com.android.internal.util.State access$3400(android.net.wifi.WifiStateMachine)>
<android.content.pm.PermissionInfo: void <clinit>()>
<com.android.internal.app.ActionBarImpl$TabImpl: java.lang.CharSequence getContentDescription()>
<Wrapper_android_os_IInterface: void test_android_os_IInterface()>
<android.net.wifi.WifiStateMachine$ConnectedState: void enter()>
<com.android.server.pm.PackageManagerService: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])>
<android.server.BluetoothBondState: android.bluetooth.BluetoothA2dp access$002(android.server.BluetoothBondState,android.bluetooth.BluetoothA2dp)>
<android.os.FileObserver: void <clinit>()>
<android.view.View: android.os.Parcelable onSaveInstanceState()>
<android.view.ContextThemeWrapper: void <init>()>
<android.text.LoginFilter$UsernameFilterGeneric: boolean isAllowed(char)>
<android.content.res.Resources$Theme: void applyStyle(int,boolean)>
<android.net.rtp.RtpStream: void <init>(java.net.InetAddress)>
<android.animation.IntKeyframeSet: void <init>(android.animation.Keyframe$IntKeyframe[])>
<android.webkit.URLUtil: boolean isHttpUrl(java.lang.String)>
<android.webkit.WebViewCore: void sendMessage(int)>
<GenerationGG: android.util.AndroidException get_androidutilAndroidException()>
<com.android.server.MountService$5: void <init>(com.android.server.MountService)>
<com.android.server.ClipboardService: void removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener)>
<android.content.pm.PackageParser$Permission: java.lang.String toString()>
<android.view.View$CheckForLongPress: void rememberWindowAttachCount()>
<android.view.ViewRootImpl$2: void <init>(android.view.ViewRootImpl)>
<android.animation.ValueAnimator: boolean isRunning()>
<com.android.internal.view.menu.ActionMenuPresenter: void setWidthLimit(int,boolean)>
<com.android.server.accessibility.TouchExplorer$SendHoverDelayed: void <init>(com.android.server.accessibility.TouchExplorer)>
<android.widget.Toast: int getGravity()>
<com.android.internal.telephony.gsm.GsmConnection$MyHandler: void <init>(com.android.internal.telephony.gsm.GsmConnection,android.os.Looper)>
<android.widget.StackView: android.widget.ImageView access$000(android.widget.StackView)>
<android.util.JsonReader: void endArray()>
<android.content.AsyncTaskLoader: boolean cancelLoad()>
<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo resolveIntent(android.content.Intent,java.lang.String,int)>
<android.media.AudioService: void updateRemoteControlDisplay_syncAfRcs(int)>
<android.telephony.SignalStrength: int getCdmaDbm()>
<android.server.BluetoothService: void access$100(android.server.BluetoothService,int,int)>
<android.net.LocalSocketAddress: void <init>(java.lang.String)>
<com.android.server.usb.UsbSettingsManager$DeviceFilter: void <init>(android.hardware.usb.UsbDevice)>
<Wrapper_android_graphics_CornerPathEffect: void test_android_graphics_CornerPathEffect()>
<android.app.backup.IFullBackupRestoreObserver$Stub$Proxy: android.os.IBinder asBinder()>
<android.bluetooth.BluetoothAdapter$1: void <init>(android.bluetooth.BluetoothAdapter,android.os.Looper)>
<android.inputmethodservice.InputMethodService: void onStartInput(android.view.inputmethod.EditorInfo,boolean)>
<android.widget.RemoteViewsAdapter: android.content.Intent getRemoteViewsServiceIntent()>
<android.inputmethodservice.InputMethodService: android.view.View onCreateInputView()>
<android.text.SpannableStringInternal: void getChars(int,int,char[],int)>
<android.net.LocalSocketImpl$SocketOutputStream: void write(byte[],int,int)>
<android.webkit.WebHistoryItem: void inflate(int,byte[])>
<android.net.EthernetDataTracker: void setDependencyMet(boolean)>
<android.os.Parcel: float[] createFloatArray()>
<com.android.server.wm.WindowManagerService: void access$700(com.android.server.wm.WindowManagerService)>
<android.provider.Telephony$Mms: java.lang.String extractAddrSpec(java.lang.String)>
<android.app.Fragment$SavedState: void <clinit>()>
<android.location.ILocationListener$Stub: android.location.ILocationListener asInterface(android.os.IBinder)>
<com.android.internal.telephony.AdnRecordCache: void <init>(com.android.internal.telephony.PhoneBase)>
<android.widget.TextView$CharWrapper: int getTextRunCursor(int,int,int,int,int,android.graphics.Paint)>
<android.graphics.Bitmap$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.test.ClassPathPackageInfoSource: void <init>()>
<android.animation.Keyframe$IntKeyframe: java.lang.Object getValue()>
<android.renderscript.Type$Builder: void <init>(android.renderscript.RenderScript,android.renderscript.Element)>
<GenerationGG: android.app.ActionBar$OnNavigationListener get_androidappActionBar__OnNavigationListener()>
<android.app.Activity: void setTitleColor(int)>
<android.os.Process: void killProcess(int)>
<android.content.Intent: android.content.Intent setDataAndType(android.net.Uri,java.lang.String)>
<android.widget.TextView$CharWrapper: int getTextWidths(int,int,float[],android.graphics.Paint)>
<android.os.ResultReceiver: void <init>(android.os.Parcel)>
<android.view.View: boolean isDuplicateParentStateEnabled()>
<android.filterfw.core.NativeFrame: java.lang.String toString()>
<com.android.server.usb.UsbHostManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)>
<com.android.server.accessibility.AccessibilityManagerService$Service: void onServiceDisconnected(android.content.ComponentName)>
<android.webkit.CallbackProxy$1: void onCancel(android.content.DialogInterface)>
<android.content.ContentValues: java.util.Set valueSet()>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getCdmaMin()>
<com.android.internal.os.BatteryStatsImpl: void updateKernelWakelocksLocked()>
<com.android.internal.telephony.cat.CommandDetails$1: com.android.internal.telephony.cat.CommandDetails createFromParcel(android.os.Parcel)>
<android.nfc.tech.IsoDep: byte[] getHiLayerResponse()>
<android.accounts.AccountManagerResponse: int describeContents()>
<android.view.GLES20RecordingCanvas: void drawBitmap(int[],int,int,int,int,int,int,boolean,android.graphics.Paint)>
<DumbClass: void DumbMethod37()>
<DumbClass: void DumbMethod41()>
<com.android.server.am.ActivityManagerService$8: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean)>
<android.view.ScaleGestureDetector: float getRawX(android.view.MotionEvent,int)>
<android.renderscript.RenderScript: void nContextDump(int)>
<android.filterfw.core.StreamPort: void clear()>
<android.media.JetPlayer: void setEventListener(android.media.JetPlayer$OnJetEventListener,android.os.Handler)>
<GenerationGG: android.telephony.PhoneNumberFormattingTextWatcher get_androidtelephonyPhoneNumberFormattingTextWatcher()>
<android.os.Bundle: java.lang.Object clone()>
<android.graphics.Paint: int native_getTextWidths(int,java.lang.String,int,int,float[])>
<com.android.internal.telephony.IccCardStatus$CardState: void <clinit>()>
<android.webkit.WebViewClient: void onTooManyRedirects(android.webkit.WebView,android.os.Message,android.os.Message)>
<android.view.VelocityTracker: float nativeGetYVelocity(int,int)>
<android.view.animation.LayoutAnimationController$AnimationParameters: void <init>()>
<android.app.ContextImpl: android.content.Context getOuterContext()>
<android.content.pm.PermissionGroupInfo: void <init>()>
<android.service.wallpaper.WallpaperService: android.os.Looper access$200(android.service.wallpaper.WallpaperService)>
<android.content.pm.PackageParser: java.security.cert.Certificate[] loadCertificates(java.util.jar.JarFile,java.util.jar.JarEntry,byte[])>
<android.graphics.Path: void transform(android.graphics.Matrix)>
<android.app.Service: void onRebind(android.content.Intent)>
<android.media.MediaRecorder: void setOnInfoListener(android.media.MediaRecorder$OnInfoListener)>
<android.util.EventLog: int writeEvent(int,java.lang.Object[])>
<android.webkit.GeolocationPermissions: void createHandler()>
<android.webkit.ConsoleMessage: java.lang.String sourceId()>
<android.view.ViewGroup: void updateLocalSystemUiVisibility(int,int)>
<android.os.Looper: android.os.Looper getMainLooper()>
<android.view.animation.LayoutAnimationController: void setAnimation(android.view.animation.Animation)>
<GenerationGG: android.widget.ResourceCursorAdapter get_androidwidgetResourceCursorAdapter()>
<com.android.internal.app.AlertController: android.os.Message access$300(com.android.internal.app.AlertController)>
<android.app.SharedPreferencesImpl$EditorImpl$1: void <init>(android.app.SharedPreferencesImpl$EditorImpl,android.app.SharedPreferencesImpl$MemoryCommitResult)>
<com.android.internal.telephony.MmiCode$State: void <clinit>()>
<com.android.internal.util.StateMachine$SmHandler: int moveTempStateStackToStateStack()>
<android.app.ActivityThread: void handleSetCoreSettings(android.os.Bundle)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimSpnLoaded: java.lang.String getEfName()>
<android.test.mock.MockContentProvider$InversionIContentProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>
<android.app.ActivityThread$Profiler: void startProfiling()>
<android.gesture.GestureStore: int getOrientationStyle()>
<android.webkit.ZoomManager: float getDefaultMinZoomScale()>
<com.android.server.wm.BlackFrame$BlackSurface: void setMatrix(android.graphics.Matrix)>
<com.android.server.pm.PackageManagerService$HandlerParams: void <init>(com.android.server.pm.PackageManagerService)>
<android.server.BluetoothService: int convertToAdapterState(int)>
<android.widget.LinearLayout: boolean shouldDelayChildPressedState()>
<android.widget.TextView: int getExtendedPaddingTop()>
<android.net.http.SslCertificate$DName: java.lang.String getDName()>
<android.bluetooth.BluetoothProfileState: void access$900(android.bluetooth.BluetoothProfileState,com.android.internal.util.IState)>
<com.android.internal.view.InputConnectionWrapper: void <init>(com.android.internal.view.IInputContext)>
<android.graphics.PathMeasure: int native_create(int,boolean)>
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: java.lang.Object getAnimatedValue()>
<android.server.BluetoothAdapterStateMachine: void access$5400(android.server.BluetoothAdapterStateMachine,com.android.internal.util.IState)>
<android.graphics.Paint: void setDither(boolean)>
<android.server.BluetoothAdapterStateMachine: void access$3100(android.server.BluetoothAdapterStateMachine,android.os.Message)>
<android.renderscript.RenderScript: int nAllocationCreateFromBitmap(int,int,android.graphics.Bitmap,int)>
<android.renderscript.Allocation: void validateIsInt32()>
<android.media.audiofx.AudioEffect: boolean isError(int)>
<android.text.StaticLayout: int getEllipsisStart(int)>
<android.renderscript.RenderScript: int rsnFontCreateFromAsset(int,android.content.res.AssetManager,java.lang.String,float,int)>
<android.widget.CalendarView: int access$2500(android.widget.CalendarView)>
<com.android.server.EntropyService$1: void <init>(com.android.server.EntropyService)>
<android.content.pm.ProviderInfo: void <clinit>()>
<android.speech.SpeechRecognizer: void access$300(android.speech.SpeechRecognizer,android.speech.RecognitionListener)>
<android.server.BluetoothAdapterStateMachine: void access$6900(android.server.BluetoothAdapterStateMachine,int)>
<android.widget.SimpleExpandableListAdapter: java.lang.Object getChild(int,int)>
<android.os.MemoryFile: void native_pin(java.io.FileDescriptor,boolean)>
<android.net.Uri$StringUri: boolean isHierarchical()>
<com.android.server.wm.WindowManagerService: boolean injectKeyEvent(android.view.KeyEvent,boolean)>
<android.view.InputDevice: java.lang.String toString()>
<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder addRequirements(java.util.List)>
<android.content.res.CompatibilityInfo$2: java.lang.Object[] newArray(int)>
<android.webkit.WebBackForwardList: android.webkit.WebBackForwardList clone()>
<android.widget.TabWidget: void setStripEnabled(boolean)>
<com.android.server.connectivity.Vpn: void jniReset(java.lang.String)>
<android.telephony.PhoneNumberUtils: char bcdToChar(byte)>
<com.android.server.accessibility.TouchExplorer$PointerTracker: boolean isReceivedPointerDown(int)>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getBackgroundCall()>
<android.app.backup.FullBackup: void restoreFile(android.os.ParcelFileDescriptor,long,int,long,long,java.io.File)>
<android.graphics.Typeface: int getStyle()>
<com.android.internal.telephony.IccUtils: int gsmBcdByteToInt(byte)>
<android.hardware.Camera: android.hardware.Camera$OnZoomChangeListener access$900(android.hardware.Camera)>
<android.location.Address: void setThoroughfare(java.lang.String)>
<android.mtp.MtpObjectInfo: int getImagePixWidth()>
<android.graphics.Point: void <init>(android.graphics.Point)>
<com.android.server.LocationManagerService$2: void <init>(com.android.server.LocationManagerService)>
<com.android.internal.view.menu.ActionMenuItemView: void setItemInvoker(com.android.internal.view.menu.MenuBuilder$ItemInvoker)>
<Wrapper_android_view_Gravity: void test_android_view_Gravity()>
<com.android.internal.telephony.gsm.GsmServiceStateTracker: boolean isRoamingBetweenOperators(boolean,android.telephony.ServiceState)>
<android.content.pm.PackageManager$NameNotFoundException: void <init>(java.lang.String)>
<com.android.server.IntentResolver: void <clinit>()>
<android.net.Uri$PathPart: android.net.Uri$PathPart 'from'(java.lang.String,java.lang.String)>
<android.view.TextureView: void setSurfaceTextureListener(android.view.TextureView$SurfaceTextureListener)>
<com.android.server.am.CompatModePackages: void setPackageAskCompatModeLocked(java.lang.String,boolean)>
<com.android.server.PowerManagerService: boolean access$5202(com.android.server.PowerManagerService,boolean)>
<android.media.MediaRecorder: void setVideoEncoder(int)>
<android.view.GLES20TextureLayer: void resize(int,int)>
<com.android.server.pm.PackageManagerService$FileInstallArgs: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$InstallParams)>
<android.graphics.Canvas: boolean quickReject(android.graphics.RectF,android.graphics.Canvas$EdgeType)>
<android.view.KeyEvent$DispatcherState: void reset(java.lang.Object)>
<GenerationGG: android.text.Editable$Factory get_androidtextEditable__Factory()>
<android.widget.LinearLayout$LayoutParams: java.lang.String debug(java.lang.String)>
<android.app.LoadedApk$ServiceDispatcher: void <init>(android.content.ServiceConnection,android.content.Context,android.os.Handler,int)>
<android.content.BroadcastReceiver: void checkSynchronousHint()>
<android.net.sip.SipSessionAdapter: void onRegistrationFailed(android.net.sip.ISipSession,int,java.lang.String)>
<android.renderscript.Matrix3f: void rotate(float)>
<android.net.Uri$OpaqueUri: java.lang.String getLastPathSegment()>
<android.filterfw.core.FrameFormat: java.lang.String targetToString(int)>
<com.android.server.BackupManagerService$PerformFullRestoreTask: void <init>(com.android.server.BackupManagerService,android.os.ParcelFileDescriptor,java.lang.String,java.lang.String,android.app.backup.IFullBackupRestoreObserver,java.util.concurrent.atomic.AtomicBoolean)>
<android.net.wifi.WpsResult: void <clinit>()>
<android.bluetooth.BluetoothDeviceProfileState: android.os.Message access$9700(android.bluetooth.BluetoothDeviceProfileState)>
<com.android.internal.view.menu.ListMenuItemView: boolean prefersCondensedTitle()>
<android.test.mock.MockPackageManager: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)>
<com.android.internal.appwidget.IAppWidgetHost$Stub: android.os.IBinder asBinder()>
<android.view.animation.AnticipateInterpolator: void <init>()>
<android.net.sip.SipAudioCall: boolean isInCall()>
<android.location.LocationManager$GpsStatusListenerTransport: void onFirstFix(int)>
<android.graphics.Typeface: int nativeCreateFromAsset(android.content.res.AssetManager,java.lang.String)>
<android.net.wifi.WifiStateMachine: android.net.NetworkInfo access$5000(android.net.wifi.WifiStateMachine)>
<android.net.NetworkInfo$1: java.lang.Object[] newArray(int)>
<GenerationGG: android.util.Property get_androidutilProperty()>
<android.content.pm.PackageParser$Package: java.lang.String toString()>
<java.lang.Object: void removeView(android.view.View)>
<android.widget.ZoomButtonsController: android.os.Handler access$100(android.widget.ZoomButtonsController)>
<android.renderscript.Matrix4f: void loadTranslate(float,float,float)>
<android.security.KeyStore: java.util.ArrayList execute(int,byte[][])>
<android.view.ViewConfiguration: int getScaledMaximumFlingVelocity()>
<android.content.res.Configuration: void <init>(android.os.Parcel,android.content.res.Configuration$1)>
<android.app.Dialog: void onDetachedFromWindow()>
<com.android.internal.widget.LockPatternView$SavedState: boolean isInStealthMode()>
<GenerationGG: android.test.ServiceTestCase get_androidtestServiceTestCase()>
<android.widget.AbsListView$CheckForTap: void <init>(android.widget.AbsListView)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState: void <init>(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<android.nfc.INfcAdapter$Stub$Proxy: android.os.IBinder asBinder()>
<android.telephony.NeighboringCellInfo: void <init>()>
<android.database.sqlite.SQLiteTableLockedException: void <init>(java.lang.String)>
<android.webkit.WebView: void nativeUpdateCachedTextfield(java.lang.String,int)>
<android.widget.VideoView: android.media.MediaPlayer$OnCompletionListener access$1300(android.widget.VideoView)>
<android.accounts.GrantCredentialsPermissionActivity: void setAccountAuthenticatorResult(android.os.Bundle)>
<android.content.SyncManager$2: void <init>(android.content.SyncManager)>
<android.nfc.INdefPushCallback$Stub: android.os.IBinder asBinder()>
<android.net.wifi.WifiNative: boolean setSuspendOptimizationsCommand(boolean)>
<android.net.wifi.WifiStateTracker: android.net.LinkProperties access$202(android.net.wifi.WifiStateTracker,android.net.LinkProperties)>
<com.android.server.ProcessMap: void <init>()>
<com.android.internal.telephony.ISms$Stub$Proxy: android.os.IBinder asBinder()>
<android.animation.Keyframe$IntKeyframe: void <init>(float,int)>
<com.android.server.PowerManagerService: boolean shouldDeferScreenOnLocked()>
<com.android.internal.telephony.RIL: com.android.internal.telephony.RILRequest access$100(com.android.internal.telephony.RIL,int)>
<android.graphics.Paint$Align: void <init>(java.lang.String,int,int)>
<android.widget.GridLayout$Bounds: void <init>(android.widget.GridLayout$1)>
<com.android.server.am.TaskAccessInfo$SubTask: void <init>()>
<GenerationGG: android.database.CharArrayBuffer get_androiddatabaseCharArrayBuffer()>
<android.drm.DrmManagerClient: android.drm.DrmConvertedStatus closeConvertSession(int)>
<android.net.sip.SimpleSessionDescription$Media: void setAttribute(java.lang.String,java.lang.String)>
<android.view.InputEventConsistencyVerifier$KeyState: void <init>()>
<com.android.server.location.LocationProviderProxy$Connection: void <init>(com.android.server.location.LocationProviderProxy,com.android.server.location.LocationProviderProxy$1)>
<android.renderscript.Element: android.renderscript.Element I64_4(android.renderscript.RenderScript)>
<android.widget.AbsListView$WindowRunnnable: boolean sameWindow()>
<android.webkit.WebSettings: void setLayoutAlgorithm(android.webkit.WebSettings$LayoutAlgorithm)>
<android.media.RemoteControlClient: void onUnplugDisplay(android.media.IRemoteControlDisplay)>
<android.database.IContentObserver$Stub: void <init>()>
<com.android.internal.telephony.sip.SipConnectionBase: com.android.internal.telephony.Connection$DisconnectCause getDisconnectCause()>
<android.graphics.Typeface: int nativeCreateFromFile(java.lang.String)>
<android.net.NetworkInfo: boolean isAvailable()>
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void reset()>
<android.view.View: float getScaleX()>
<android.net.Uri$Builder: android.net.Uri$Builder path(android.net.Uri$PathPart)>
<android.os.StrictMode$ThreadPolicy$Builder: void <init>()>
<android.net.sip.SipAudioCall: android.net.rtp.AudioGroup getAudioGroup()>
<android.net.wifi.WifiNative: boolean startP2pSupplicant()>
<android.content.pm.Signature$1: java.lang.Object[] newArray(int)>
<android.webkit.WebView: java.util.Set access$400()>
<com.android.server.wm.WindowManagerService: void setTransparentRegionWindow(com.android.server.wm.Session,android.view.IWindow,android.graphics.Region)>
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.ServiceState getServiceState()>
<com.android.server.am.ActivityManagerService$CpuBinder: void <init>(com.android.server.am.ActivityManagerService)>
<GenerationGG: android.media.audiofx.PresetReverb$OnParameterChangeListener get_androidmediaaudiofxPresetReverb__OnParameterChangeListener()>
<com.android.internal.telephony.sip.SipCommandInterface: void deactivateDataCall(int,int,android.os.Message)>
<android.animation.PropertyValuesHolder: void setFloatValues(float[])>
<android.content.res.AssetManager: void applyThemeStyle(int,int,boolean)>
<android.net.sip.SimpleSessionDescription$Fields: void parse(java.lang.String)>
<android.renderscript.FieldPacker: void addU8(android.renderscript.Short2)>
<com.android.internal.telephony.GsmAlphabet: void stringToGsm8BitUnpackedField(java.lang.String,byte[],int,int)>
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: android.animation.PropertyValuesHolder$IntPropertyValuesHolder clone()>
<android.net.RouteInfo: boolean equals(java.lang.Object)>
<android.util.XmlPullAttributes: float getAttributeFloatValue(int,float)>
<android.webkit.CookieManager: java.lang.Object clone()>
<android.media.RemoteControlClient: void access$1900(android.media.RemoteControlClient,android.media.IRemoteControlDisplay)>
<com.android.internal.os.BatteryStatsImpl: long getBluetoothOnTime(long,int)>
<android.renderscript.RSSurfaceView: void setRenderScriptGL(android.renderscript.RenderScriptGL)>
<android.content.Loader: void onAbandon()>
<com.android.server.EventLogTags: void writeNetstatsMobileSample(long,long,long,long,long,long,long,long,long,long,long,long,long)>
<Wrapper_android_content_SyncInfo: void test_android_content_SyncInfo()>
<android.inputmethodservice.Keyboard$Key: void <clinit>()>
<android.webkit.HTML5VideoInline: void decideDisplayMode()>
<android.net.wifi.WifiStateMachine: int access$3604(android.net.wifi.WifiStateMachine)>
<com.android.server.accessibility.TouchExplorer$PointerTracker: java.lang.String toString()>
<com.android.server.pm.Settings: com.android.server.pm.PackageSetting peekPackageLPr(java.lang.String)>
<android.widget.DatePicker: android.os.Parcelable onSaveInstanceState()>
<android.content.Loader: boolean takeContentChanged()>
<android.net.wifi.WifiConfigStore: java.lang.String convertToQuotedString(java.lang.String)>
<android.os.Parcel: void writeCharArray(char[])>
<android.animation.ValueAnimator: void addUpdateListener(android.animation.ValueAnimator$AnimatorUpdateListener)>
<android.widget.RemoteViews: void addAction(android.widget.RemoteViews$Action)>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.util.TimeZone findTimeZone(int,boolean,long)>
<android.webkit.WebView: int computeVerticalScrollRange()>
<android.os.BatteryStats$Uid$Proc: void <init>()>
<Wrapper_android_drm_DrmSupportInfo: void test_android_drm_DrmSupportInfo()>
<android.app.AliasActivity: void <init>()>
<android.graphics.Camera: void restore()>
<android.app.PendingIntent: void <init>(android.content.IIntentSender)>
<android.net.wifi.WifiStateMachine$SoftApStartedState: void enter()>
<android.net.LocalSocketImpl: void access$600(android.net.LocalSocketImpl,byte[],int,int,java.io.FileDescriptor)>
<android.view.GLES20Layer: void update(int,int,boolean)>
<android.media.AudioService: boolean access$6800(android.media.AudioService)>
<android.animation.LayoutTransition$4: void onAnimationCancel(android.animation.Animator)>
<android.test.TouchUtils: void getStartLocation(android.view.View,int,int[])>
<android.nfc.TechListParcel: void <clinit>()>
<android.server.BluetoothService$1: void <init>(android.server.BluetoothService)>
<android.net.LocalSocketImpl: void setFileDescriptorsForSend(java.io.FileDescriptor[])>
<com.android.internal.os.ProcessStats: void <init>(boolean)>
<android.bluetooth.BluetoothDeviceProfileState: void access$5400(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.text.format.Time: int getJulianDay(long,long)>
<android.app.SearchDialog$4: void <init>(android.app.SearchDialog)>
<android.app.Activity: android.app.LoaderManagerImpl getLoaderManager(int,boolean,boolean)>
<android.webkit.WebChromeClient: void onGeolocationPermissionsShowPrompt(java.lang.String,android.webkit.GeolocationPermissions$Callback)>
<android.net.sip.SimpleSessionDescription$Media: void access$300(android.net.sip.SimpleSessionDescription$Media,java.lang.StringBuilder)>
<android.gesture.GestureUtils: android.gesture.OrientedBoundingBox computeOrientedBoundingBox(float[])>
<android.content.ComponentName: android.content.ComponentName unflattenFromString(java.lang.String)>
<android.view.animation.GridLayoutAnimationController: float getColumnDelay()>
<com.android.server.LocationManagerService: java.util.HashMap access$1400(com.android.server.LocationManagerService)>
<android.media.audiofx.PresetReverb: android.media.audiofx.PresetReverb$OnParameterChangeListener access$100(android.media.audiofx.PresetReverb)>
<com.android.server.pm.Installer: int rmdex(java.lang.String)>
<android.widget.CalendarView: int access$3100(android.widget.CalendarView)>
<com.android.server.sip.SipSessionGroup: void <clinit>()>
<android.text.method.ReplacementTransformationMethod$SpannedReplacementCharSequence: int nextSpanTransition(int,int,java.lang.Class)>
<android.net.http.Request: java.lang.String getUri()>
<android.widget.TextView: int viewportToContentVerticalOffset()>
<com.android.server.PowerManagerService: boolean access$2002(com.android.server.PowerManagerService,boolean)>
<android.view.GLES20Canvas: int getMaximumBitmapHeight()>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: boolean isSidsAllZeros()>
<android.bluetooth.BluetoothProfileState$StableState: void enter()>
<android.media.audiofx.Equalizer: java.lang.Object access$000(android.media.audiofx.Equalizer)>
<android.net.wifi.p2p.WifiP2pGroup: void addClient(android.net.wifi.p2p.WifiP2pDevice)>
<android.test.LoaderTestCase: void <init>()>
<com.android.server.wm.BlackFrame$BlackSurface: void clearMatrix()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.DataConnectionTracker$State getState(java.lang.String)>
<android.view.View: android.view.ViewRootImpl getViewRootImpl()>
<android.hardware.SensorManager: void nativeClassInit()>
<android.database.sqlite.SQLiteDatabase: void lock(java.lang.String,boolean)>
<android.bluetooth.BluetoothClass: java.lang.String toString()>
<android.webkit.WebViewCore: void nativeSetBackgroundColor(int)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$2300(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,com.android.internal.util.IState)>
<android.media.AudioRecord: void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener,android.os.Handler)>
<com.android.internal.telephony.CommandsInterface$RadioState: com.android.internal.telephony.CommandsInterface$RadioState[] values()>
<com.android.internal.textservice.ISpellCheckerSession$Stub$Proxy: void <init>(android.os.IBinder)>
<android.database.DatabaseUtils: int getSqlStatementType(java.lang.String)>
<android.view.GLES20Canvas: void interrupt()>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Phone$State getState()>
<android.renderscript.Element: void <init>(int,android.renderscript.RenderScript)>
<GenerationGG: android.app.LoaderManager get_androidappLoaderManager()>
<com.android.server.am.ActivityManagerService: void updateCpuStats()>
<android.graphics.LinearGradient: int nativeCreate2(float,float,float,float,int,int,int)>
<android.server.BluetoothA2dpService: boolean avrcpVolumeDownNative(java.lang.String)>
<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String,int)>
<android.content.res.XmlBlock$Parser: int getColumnNumber()>
<android.gesture.GestureLibraries$ResourceGestureLibrary: boolean save()>
<android.widget.VideoView: boolean isPlaying()>
<com.android.internal.telephony.IccCard: boolean access$400(com.android.internal.telephony.IccCard)>
<android.app.Instrumentation$ActivityMonitor: android.app.Instrumentation$ActivityResult getResult()>
<android.webkit.WebStorage$Origin: void <init>(java.lang.String,long,android.webkit.WebStorage$1)>
<android.widget.GridLayout: void setColumnCount(int)>
<android.widget.StackView$LayoutParams: void setOffsets(int,int)>
<android.filterfw.core.ProgramPort: java.lang.String toString()>
<android.net.LocalSocketImpl$SocketOutputStream: void close()>
<com.android.server.wm.WindowToken: void <init>(com.android.server.wm.WindowManagerService,android.os.IBinder,int,boolean)>
<android.widget.PopupWindow: android.graphics.drawable.Drawable getBackground()>
<android.net.wifi.WifiInfo: void setInetAddress(java.net.InetAddress)>
<com.android.server.wm.InputWindowHandle: void <init>(com.android.server.wm.InputApplicationHandle,android.view.WindowManagerPolicy$WindowState)>
<android.renderscript.BaseObj: void updateFromNative()>
<android.widget.GridLayout$Alignment: android.widget.GridLayout$Bounds getBounds()>
<android.test.IsolatedContext: void sendBroadcast(android.content.Intent)>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: void <init>(com.android.server.sip.SipSessionGroup,android.net.sip.ISipSessionListener)>
<android.server.BluetoothAdapterStateMachine: void access$1800(android.server.BluetoothAdapterStateMachine,com.android.internal.util.IState)>
<android.os.Parcel: java.util.ArrayList createStringArrayList()>
<android.os.MemoryFile: void native_write(java.io.FileDescriptor,int,byte[],int,int,int,boolean)>
<android.graphics.drawable.NinePatchDrawable: void draw(android.graphics.Canvas)>
<android.database.IContentObserver$Stub: android.database.IContentObserver asInterface(android.os.IBinder)>
<Wrapper_android_opengl_ETC1: void test_android_opengl_ETC1()>
<android.graphics.Canvas: boolean native_quickReject(int,float,float,float,float,int)>
<android.webkit.WebResourceResponse: void setEncoding(java.lang.String)>
<com.android.server.InputMethodManagerService$MethodCallback: void finishedEvent(int,boolean)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setInternationalPrefix(java.lang.String)>
<android.hardware.GeomagneticField: void <clinit>()>
<android.bluetooth.IBluetoothA2dp$Stub: void <init>()>
<GenerationGG: android.content.ContentValues[] get_androidcontentContentValues_ARRAY_()>
<android.content.CursorLoader: void setSortOrder(java.lang.String)>
<android.os.BadParcelableException: void <init>(java.lang.String)>
<com.android.server.TextServicesManagerService$TextServicesMonitor: void <init>(com.android.server.TextServicesManagerService)>
<android.content.pm.LabeledIntent: java.lang.CharSequence getNonLocalizedLabel()>
<android.net.LinkProperties: void <init>()>
<android.app.Dialog: android.view.Window getWindow()>
<com.android.internal.telephony.BaseCommands: void unSetOnCatSessionEnd(android.os.Handler)>
<com.android.server.am.ActivityManagerService: void logBroadcastReceiverDiscardLocked(com.android.server.am.BroadcastRecord)>
<GenerationGG: android.util.TypedValue get_androidutilTypedValue()>
<android.graphics.Matrix$1: boolean preScale(float,float,float,float)>
<com.android.internal.os.BatteryStatsImpl: long getRadioDataUptime()>
<android.webkit.BrowserFrame$ConfigCallback: void onLowMemory()>
<android.renderscript.FieldPacker: void addI64(android.renderscript.Long3)>
<android.view.Display: void <clinit>()>
<com.android.internal.util.StateMachine: android.os.Message obtainMessage(int,int,int)>
<android.media.AudioRecord: void native_finalize()>
<android.widget.TextView$Blink: void <init>(android.widget.TextView)>
<android.drm.DrmSupportInfo: int hashCode()>
<android.media.Metadata: boolean has(int)>
<com.android.server.wm.WindowState: boolean isAnimating()>
<GenerationGG: android.test.mock.MockPackageManager get_androidtestmockMockPackageManager()>
<android.gesture.GestureUtils: float[] computeOrientation(float[][])>
<com.android.server.wm.WindowManagerService$2: void onReceive(android.content.Context,android.content.Intent)>
<android.renderscript.FieldPacker: void addU64(android.renderscript.Long4)>
<android.view.GLES20Canvas: void nSetMatrix(int,int)>
<android.server.BluetoothAdapterStateMachine: android.server.BluetoothAdapterStateMachine$PerProcessState access$3600(android.server.BluetoothAdapterStateMachine)>
<GenerationGG: android.security.KeyChainException get_androidsecurityKeyChainException()>
<android.view.MotionEvent$PointerProperties: void clear()>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.server.accessibility.AccessibilityManagerService$2: void <init>(com.android.server.accessibility.AccessibilityManagerService)>
<GenerationGG: android.drm.DrmManagerClient$OnInfoListener get_androiddrmDrmManagerClient__OnInfoListener()>
<android.os.SystemClock: long currentTimeMicro()>
<android.graphics.RectF: java.lang.String toString()>
<android.net.wifi.WifiStateMachine: void access$9000(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<com.android.internal.telephony.IccCard: boolean access$602(com.android.internal.telephony.IccCard,boolean)>
<com.android.server.MountService$ObbState: void <init>(com.android.server.MountService,java.lang.String,int,android.os.storage.IObbActionListener,int)>
<android.webkit.WebIconDatabase: void bulkRequestIconForPageUrl(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener)>
<android.view.InputEventConsistencyVerifier: void onKeyEvent(android.view.KeyEvent,int)>
<android.view.View: void setMinimumHeight(int)>
<android.opengl.GLSurfaceView$GLThread: void onPause()>
<GenerationGG: android.text.Spannable get_androidtextSpannable()>
<GenerationGG: android.test.TouchUtils get_androidtestTouchUtils()>
<android.graphics.DiscretePathEffect: int nativeCreate(float,float)>
<android.view.ViewDebug: long getViewRootImplCount()>
<android.accounts.AccountManager$AmsTask: void set(android.os.Bundle)>
<android.widget.OverScroller: void notifyHorizontalEdgeReached(int,int,int)>
<android.app.FragmentManagerImpl: boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>
<android.webkit.CallbackProxy$9: void onClick(android.content.DialogInterface,int)>
<android.service.wallpaper.IWallpaperConnection$Stub: android.os.IBinder asBinder()>
<com.android.server.pm.PackageSettingBase: void init(java.io.File,java.io.File,java.lang.String,int)>
<android.location.Criteria: void setSpeedAccuracy(int)>
<android.text.style.StyleSpan: void <init>(int)>
<android.opengl.GLES11Ext: void glWeightPointerOESBounds(int,int,int,java.nio.Buffer,int)>
<com.android.internal.telephony.cdma.sms.CdmaSmsAddress: byte[] parseToDtmf(java.lang.String)>
<android.net.http.Connection: void setCanPersist(boolean)>
<android.webkit.WebView$4: void <init>(android.webkit.WebView,android.os.Message)>
<android.widget.Gallery$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.net.NetworkInfo: void writeToParcel(android.os.Parcel,int)>
<android.os.RegistrantList: void notifyRegistrants(android.os.AsyncResult)>
<android.widget.AbsSeekBar: boolean verifyDrawable(android.graphics.drawable.Drawable)>
<android.widget.StackView$LayoutParams: void invalidateGlobalRegion(android.view.View,android.graphics.Rect)>
<android.os.MessageQueue: void nativeWake(int)>
<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName,int)>
<android.content.Intent: boolean filterEquals(android.content.Intent)>
<com.android.server.sip.SipWakeupTimer$MyEventComparator: void <init>()>
<android.provider.SearchRecentSuggestions$1: void <init>(android.provider.SearchRecentSuggestions,java.lang.String,java.lang.String,java.lang.String)>
<Wrapper_android_renderscript_Short2: void test_android_renderscript_Short2()>
<android.app.ApplicationErrorReport$AnrInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.IntentFilter: boolean debugCheck()>
<android.app.ActivityManager$MemoryInfo: void <init>(android.os.Parcel)>
<android.media.MediaRecorder: void setAuxiliaryOutputFile(java.io.FileDescriptor)>
<android.test.mock.MockContext: android.content.SharedPreferences getSharedPreferences(java.lang.String,int)>
<com.android.internal.telephony.gsm.GsmSMSDispatcher: java.lang.String getFormat()>
<android.view.KeyEvent: char getNumber()>
<android.widget.RelativeLayout$DependencyGraph: java.util.LinkedList findRoots(int[])>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: void writeToParcelLocked(android.os.Parcel)>
<android.widget.TabHost$ViewIndicatorStrategy: android.view.View createIndicatorView()>
<GenerationGG: android.view.View$AccessibilityDelegate get_androidviewView__AccessibilityDelegate()>
<android.test.suitebuilder.TestGrouping$SortByFullyQualifiedName: void <init>()>
<android.widget.SimpleAdapter: java.lang.Object getItem(int)>
<android.webkit.WebView: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<com.android.internal.telephony.sip.SipPhone: android.content.Context access$400(com.android.internal.telephony.sip.SipPhone)>
<android.speech.tts.TextToSpeech$10: void <init>(android.speech.tts.TextToSpeech,java.lang.String,java.lang.String,java.util.HashMap)>
<com.android.internal.telephony.CommandsInterface$RadioState: boolean isNVReady()>
<com.android.server.location.MockProvider: void disable()>
<android.net.http.HttpAuthHeader: void setPassword(java.lang.String)>
<android.widget.HeaderViewListAdapter: void <init>(java.util.ArrayList,java.util.ArrayList,android.widget.ListAdapter)>
<android.util.Log: int w(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.database.sqlite.SQLiteStatement: java.lang.String native_1x1_string()>
<android.app.IProcessObserver$Stub: android.os.IBinder asBinder()>
<android.app.ReceiverRestrictedContext: void <init>(android.content.Context)>
<android.database.sqlite.SQLiteQuery: int nativeColumnCount(int)>
<android.webkit.WebView: float access$2802(android.webkit.WebView,float)>
<android.net.wifi.WifiStateMachine: void access$5300(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.content.SyncStats$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.widget.AbsListView$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: java.lang.String getSid()>
<android.filterfw.core.Filter: void closePorts()>
<android.widget.CompoundButton: boolean isChecked()>
<android.graphics.drawable.DrawableContainer: boolean getPadding(android.graphics.Rect)>
<android.graphics.Paint: void native_reset(int)>
<android.widget.SimpleAdapter: int getCount()>
<android.view.AbsSavedState: void <init>()>
<android.widget.RelativeLayout$DependencyGraph$Node$1: void onAcquired(android.widget.RelativeLayout$DependencyGraph$Node)>
<android.app.Activity: void onNewIntent(android.content.Intent)>
<android.view.ViewStub: void setInflatedId(int)>
<android.net.http.HttpAuthHeader: void parseParameters(java.lang.String)>
<android.widget.FrameLayout$LayoutParams: void <init>(int,int,int)>
<android.view.GLES20Canvas: void drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)>
<android.app.admin.DeviceAdminReceiver: void onPasswordFailed(android.content.Context,android.content.Intent)>
<android.database.DatabaseUtils: void writeExceptionToParcel(android.os.Parcel,java.lang.Exception)>
<android.net.wifi.SupplicantStateTracker: void access$900(android.net.wifi.SupplicantStateTracker,com.android.internal.util.IState)>
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: void <init>(android.os.IBinder)>
<android.app.WallpaperManager$Globals: android.graphics.Bitmap access$102(android.app.WallpaperManager$Globals,android.graphics.Bitmap)>
<android.app.Dialog: boolean onTrackballEvent(android.view.MotionEvent)>
<android.widget.ListPopupWindow$PopupTouchInterceptor: void <init>(android.widget.ListPopupWindow,android.widget.ListPopupWindow$1)>
<android.gesture.GestureOverlayView: void addOnGestureListener(android.gesture.GestureOverlayView$OnGestureListener)>
<android.net.wifi.WpsResult$1: android.net.wifi.WpsResult[] newArray(int)>
<android.media.AudioService: android.media.AudioSystem$ErrorCallback access$4400(android.media.AudioService)>
<android.app.NativeActivity: void dispatchKeyEventNative(int,android.view.KeyEvent)>
<android.widget.TextView: int getInputType()>
<DumbClass: void DumbMethod11()>
<android.webkit.WebView: float getDefaultZoomScale()>
<android.server.BluetoothHealthProfileHandler$HealthChannel: boolean access$1402(android.server.BluetoothHealthProfileHandler$HealthChannel,boolean)>
<android.view.TextureView: void nLockCanvas(int,android.graphics.Canvas,android.graphics.Rect)>
<android.content.pm.IPackageDeleteObserver$Stub: android.os.IBinder asBinder()>
<android.animation.Keyframe: void setFraction(float)>
<android.app.LoadedApk: android.app.Application getApplication()>
<android.view.View: void setMeasuredDimension(int,int)>
<android.os.BatteryStats: java.lang.String printWakeLockCheckin(java.lang.StringBuilder,android.os.BatteryStats$Timer,long,java.lang.String,int,java.lang.String)>
<android.gesture.GestureOverlayView: void cancelClearAnimation()>
<android.media.AudioService: int getRingerMode()>
<android.net.wifi.WifiInfo: void setRssi(int)>
<android.content.res.Resources$Theme: void finalize()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.DataConnection checkForConnectionForApnContext(com.android.internal.telephony.ApnContext)>
<android.renderscript.ProgramStore: android.renderscript.ProgramStore BLEND_ALPHA_DEPTH_NONE(android.renderscript.RenderScript)>
<android.graphics.drawable.shapes.PathShape: java.lang.Object clone()>
<android.animation.ObjectAnimator: android.animation.Animator setDuration(long)>
<android.util.XmlPullAttributes: int getAttributeCount()>
<android.content.IntentFilter: int countDataPaths()>
<android.nfc.TransceiveResult: int describeContents()>
<GenerationGG: android.net.SSLCertificateSocketFactory get_androidnetSSLCertificateSocketFactory()>
<android.test.AndroidTestRunner: void setInstrumentation(android.app.Instrumentation)>
<android.content.ContentService$ObserverNode: boolean removeObserverLocked(android.database.IContentObserver)>
<GenerationGG: android.graphics.drawable.shapes.RectShape get_androidgraphicsdrawableshapesRectShape()>
<android.app.QueuedWork: void <clinit>()>
<android.accounts.AccountManagerService$7: java.lang.String toDebugString(long)>
<com.android.internal.content.PackageMonitor: int isPackageDisappearing(java.lang.String)>
<android.text.method.CharacterPickerDialog$OptionsAdapter: long getItemId(int)>
<android.view.Surface: void setOrientation(int,int,int)>
<com.android.internal.telephony.IccCard$2: void <init>(com.android.internal.telephony.IccCard)>
<android.net.LocalServerSocket: void <init>(java.lang.String)>
<android.os.Binder: java.lang.String getInterfaceDescriptor()>
<android.webkit.WebStorage: void syncValues()>
<android.renderscript.Matrix4f: void multiply(android.renderscript.Matrix4f)>
<android.graphics.SurfaceTexture: void <init>(int)>
<android.view.WindowManager$LayoutParams: int describeContents()>
<com.android.server.am.AppErrorDialog: com.android.server.am.AppErrorResult access$100(com.android.server.am.AppErrorDialog)>
<android.bluetooth.BluetoothSocket$SdpHelper: void onRfcommChannelFound(int)>
<android.widget.GridLayout$Axis$1: android.widget.GridLayout$Arc[] sort()>
<android.opengl.Visibility: void <init>()>
<android.database.AbstractWindowedCursor: android.database.CursorWindow getWindow()>
<android.widget.TextView$SavedState$1: void <init>()>
<android.graphics.ColorMatrix: void set(float[])>
<android.webkit.WebView: int pinLocX(int)>
<com.android.server.wm.StartingData: void <init>(java.lang.String,int,android.content.res.CompatibilityInfo,java.lang.CharSequence,int,int,int)>
<com.android.server.WifiService$LockList: void <init>(com.android.server.WifiService)>
<android.net.Uri$OpaqueUri: java.lang.String getEncodedSchemeSpecificPart()>
<android.widget.RelativeLayout$DependencyGraph$Node$1: void onReleased(android.widget.RelativeLayout$DependencyGraph$Node)>
<android.view.TextureView: void nCreateNativeWindow(android.graphics.SurfaceTexture)>
<com.android.server.net.NetworkStatsService$7: void onDataConnectionStateChanged(int,int)>
<android.net.wifi.WifiNative: boolean setBandCommand(int)>
<android.widget.TextView$TextAlign: void <clinit>()>
<android.app.admin.DeviceAdminInfo: java.lang.String toString()>
<com.android.internal.backup.IBackupTransport$Stub$Proxy: android.os.IBinder asBinder()>
<DumbClass: void DumbMethod16()>
<android.graphics.ComposeShader: int nativeCreate1(int,int,int)>
<android.webkit.WebView: int findIndex()>
<GenerationGG: android.media.SoundPool$OnLoadCompleteListener get_androidmediaSoundPool__OnLoadCompleteListener()>
<com.android.server.pm.PackageManagerService: int getPackageUid(java.lang.String)>
<android.media.audiofx.PresetReverb: void <init>(int,int)>
<junit.framework.TestSuite: void setName(java.lang.String)>
<android.widget.Toast: float getHorizontalMargin()>
<GenerationGG: android.net.wifi.SupplicantState get_androidnetwifiSupplicantState()>
<com.android.server.ConnectivityService: boolean writePidDns(java.util.Collection,int)>
<android.content.SyncStorageEngine: boolean getMasterSyncAutomatically()>
<android.preference.PreferenceActivity: android.preference.PreferenceActivity$Header access$400(android.preference.PreferenceActivity)>
<android.net.wifi.WifiStateMachine$SoftApStartingState: void enter()>
<android.net.wifi.p2p.WifiP2pService: int access$6404()>
<android.view.inputmethod.ExtractedText: void <init>()>
<GenerationGG: android.media.audiofx.Visualizer get_androidmediaaudiofxVisualizer()>
<android.database.MatrixCursor: boolean isNull(int)>
<com.android.internal.telephony.DataConnection$DcInactiveState: void setEnterNotificationParams(com.android.internal.telephony.DataConnection$ConnectionParams,com.android.internal.telephony.DataConnection$FailCause,int)>
<GenerationGG: android.content.res.ColorStateList get_androidcontentresColorStateList()>
<android.net.NetworkInfo$DetailedState: void <clinit>()>
<com.android.server.AlarmManagerService: void close(int)>
<android.nfc.NdefMessage: int parseNdefMessage(byte[])>
<android.app.DownloadManager$CursorTranslator: long getReason(int)>
<GenerationGG: android.service.wallpaper.WallpaperService get_androidservicewallpaperWallpaperService()>
<android.app.SearchableInfo$ActionKeyInfo: java.lang.String getSuggestActionMsg()>
<com.android.internal.os.HandlerCaller: void <init>(android.content.Context,com.android.internal.os.HandlerCaller$Callback)>
<android.app.Instrumentation: void addMonitor(android.app.Instrumentation$ActivityMonitor)>
<android.opengl.GLES11: void glPointSizePointerOESBounds(int,int,java.nio.Buffer,int)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$2: void onClick(android.content.DialogInterface,int)>
<android.widget.GridLayout$LayoutParams: void <clinit>()>
<com.android.server.DevicePolicyManagerService: int getCurrentFailedPasswordAttempts()>
<android.graphics.LightingColorFilter: int nCreateLightingFilter(int,int,int)>
<com.android.internal.telephony.sip.SipCommandInterface: void getLastDataCallFailCause(android.os.Message)>
<android.database.sqlite.SQLiteStatement: void native_executeSql(java.lang.String)>
<com.android.server.MountService$ObbState: void link()>
<android.view.accessibility.AccessibilityNodeInfo: void setLongClickable(boolean)>
<android.graphics.Bitmap: int getRowBytes()>
<com.android.internal.telephony.BaseCommands: void setEmergencyCallbackMode(android.os.Handler,int,java.lang.Object)>
<android.widget.TextView$EasyEditSpanController: android.text.style.EasyEditSpan getSpan(android.text.Spanned)>
<android.view.InputDevice$MotionRange: float access$600(android.view.InputDevice$MotionRange)>
<android.view.ViewDebug$RecyclerTrace: void <init>()>
<android.net.NetworkStats: void <init>(long,int)>
<android.webkit.WebView: android.webkit.WebViewCore$CursorData cursorData()>
<com.android.internal.os.AtomicFile: void failWrite(java.io.FileOutputStream)>
<android.graphics.Matrix$1: void setScale(float,float)>
<android.text.AlteredCharSequence: int length()>
<android.webkit.WebStorage: void createUIHandler()>
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void <init>(com.android.internal.util.StateMachine$SmHandler,com.android.internal.util.StateMachine$1)>
<android.mtp.MtpDevice: long native_get_storage_id(int)>
<com.android.internal.os.BatteryStatsImpl: int startAddingCpuLocked()>
<com.android.server.am.ProcessRecord: boolean isInterestingToUserLocked()>
<android.media.AudioRecord: void finalize()>
<android.telephony.ServiceState: void writeToParcel(android.os.Parcel,int)>
<android.animation.FloatKeyframeSet: float getFloatValue(float)>
<android.animation.ValueAnimator: android.animation.PropertyValuesHolder[] getValues()>
<android.view.ViewRootImpl$TakenSurfaceHolder: void setKeepScreenOn(boolean)>
<GenerationGG: android.widget.RatingBar$OnRatingBarChangeListener get_androidwidgetRatingBar__OnRatingBarChangeListener()>
<android.webkit.CallbackProxy$11: void <clinit>()>
<android.accounts.IAccountAuthenticator$Stub: android.os.IBinder asBinder()>
<android.os.SystemClock: long uptimeMillis()>
<android.widget.GridLayout$Axis: android.widget.GridLayout$Arc[] topologicalSort(android.widget.GridLayout$Arc[])>
<android.view.View: void onLayout(boolean,int,int,int,int)>
<android.app.SearchableInfo: int getSuggestThreshold()>
<com.android.internal.telephony.OperatorInfo$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.widget.SimpleCursorAdapter: void setStringConversionColumn(int)>
<android.content.res.AssetManager: void ensureStringBlocks()>
<android.text.method.MetaKeyKeyListener: long handleKeyUp(long,int,android.view.KeyEvent)>
<android.media.audiofx.BassBoost$BaseParameterListener: void <init>(android.media.audiofx.BassBoost)>
<android.view.View: boolean pointInView(float,float,float)>
<com.android.server.PowerManagerService: android.os.Handler access$1800(com.android.server.PowerManagerService)>
<android.app.Instrumentation: android.content.Context getTargetContext()>
<com.android.server.InputMethodManagerService$MethodCallback: void <init>(com.android.server.InputMethodManagerService,com.android.internal.view.IInputMethod)>
<android.graphics.Matrix$1: boolean setPolyToPoly(float[],int,float[],int,int)>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[],int,int)>
<android.widget.CalendarView: void setOnDateChangeListener(android.widget.CalendarView$OnDateChangeListener)>
<android.nfc.Tag: void setTechnologyDisconnected()>
<android.view.ViewRootImpl: void profileRendering(boolean)>
<android.app.LoaderManagerImpl: void <clinit>()>
<com.android.server.sip.SipService$AutoRegistrationProcess: void <init>(com.android.server.sip.SipService,com.android.server.sip.SipService$1)>
<com.android.internal.telephony.DataConnection: int getDataConnectionId()>
<com.android.server.accessibility.TouchExplorer$PointerTracker: void onReceivedMotionEvent(android.view.MotionEvent)>
<android.os.StatFs: int getAvailableBlocks()>
<com.android.i18n.phonenumbers.geocoding.DefaultMapStorage: java.lang.String getDescription(int)>
<android.net.wifi.WpsStateMachine: void access$600(android.net.wifi.WpsStateMachine,com.android.internal.util.IState)>
<com.android.server.am.UsageStatsService: void collectDumpInfoFromParcelFLOCK(android.os.Parcel,java.io.PrintWriter,java.lang.String,boolean,java.util.HashSet)>
<android.webkit.WebStorage: long nativeGetUsageForOrigin(java.lang.String)>
<android.os.RegistrantList: void remove(android.os.Handler)>
<android.widget.Switch: void setSwitchTypeface(android.graphics.Typeface,int)>
<android.bluetooth.BluetoothSocket: int read(byte[],int,int)>
<GenerationGG: android.os.BatteryManager get_androidosBatteryManager()>
<android.speech.tts.PlaybackSynthesisCallback: int getMaxBufferSize()>
<com.android.internal.util.BitwiseInputStream: int available()>
<android.widget.OverScroller: void extendDuration(int)>
<android.webkit.ZoomManager: void <init>(android.webkit.WebView,android.webkit.CallbackProxy)>
<com.android.server.ThrottleService$2: void onReceive(android.content.Context,android.content.Intent)>
<android.webkit.ConsoleMessage: android.webkit.ConsoleMessage$MessageLevel messageLevel()>
<android.webkit.WebView: int access$8900(android.webkit.WebView)>
<android.view.View: void ensureTransformationInfo()>
<android.text.style.ImageSpan: void <init>(android.content.Context,android.net.Uri)>
<Wrapper_android_text_style_QuoteSpan: void test_android_text_style_QuoteSpan()>
<android.filterfw.core.GLFrame: boolean hasNativeAllocation()>
<android.app.SearchableInfo: boolean useBadgeLabel()>
<com.android.server.wm.InputMonitor: void setUpdateInputWindowsNeededLw()>
<android.widget.AdapterViewFlipper$1: void <init>(android.widget.AdapterViewFlipper)>
<android.telephony.PhoneNumberFormattingTextWatcher: void beforeTextChanged(java.lang.CharSequence,int,int,int)>
<com.android.server.UiModeManagerService$7: void <init>(com.android.server.UiModeManagerService)>
<android.content.ClipDescription: void <init>(java.lang.CharSequence,java.lang.String[])>
<android.gesture.GestureOverlayView: void clear(boolean,boolean,boolean)>
<android.test.mock.MockCursor: void registerContentObserver(android.database.ContentObserver)>
<android.media.AudioManager: boolean isMicrophoneMute()>
<com.android.server.sip.SipSessionGroup$SipSessionImpl$KeepAliveProcess: void <init>(com.android.server.sip.SipSessionGroup$SipSessionImpl)>
<android.net.NetworkUtils: boolean runDhcp(java.lang.String,android.net.DhcpInfoInternal)>
<android.text.Layout$Alignment: android.text.Layout$Alignment valueOf(java.lang.String)>
<android.view.ViewGroup$LayoutParams: void <init>()>
<android.animation.Keyframe: java.lang.Class getType()>
<com.android.server.am.TaskRecord: void touchActiveTime()>
<android.app.SearchableInfo$ActionKeyInfo: int describeContents()>
<com.android.server.ConnectivityService$SettingsObserver: void onChange(boolean)>
<android.content.res.XmlBlock: int nativeGetAttributeCount(int)>
<android.hardware.Camera: android.hardware.Camera$PictureCallback access$700(android.hardware.Camera)>
<GenerationGG: java.lang.Thread get_javalangThread()>
<com.android.internal.view.IInputConnectionWrapper: android.os.Message obtainMessageOO(int,java.lang.Object,java.lang.Object)>
<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String)>
<android.media.AudioService$VolumeStreamState: int access$3200(android.media.AudioService$VolumeStreamState)>
<android.media.ExifInterface: boolean hasThumbnail()>
<com.android.server.NotificationManagerService: int indexOfNotificationLocked(java.lang.String,java.lang.String,int)>
<android.text.style.MetricAffectingSpan: void <init>()>
<com.android.server.NativeDaemonConnector: java.util.ArrayList doCommand(java.lang.String)>
<android.webkit.BrowserFrame: void <init>(android.content.Context,android.webkit.WebViewCore,android.webkit.CallbackProxy,android.webkit.WebSettings,java.util.Map)>
<com.android.server.accessibility.AccessibilityManagerService: boolean sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.net.http.SslError: boolean addError(int)>
<android.content.res.StringBlock$StyleIDs: int access$100(android.content.res.StringBlock$StyleIDs)>
<GenerationGG: android.database.sqlite.SQLiteOutOfMemoryException get_androiddatabasesqliteSQLiteOutOfMemoryException()>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,float,float,float,float,int,float,float,int,int)>
<android.widget.SimpleAdapter: java.util.List access$200(android.widget.SimpleAdapter)>
<GenerationGG: android.text.method.Touch get_androidtextmethodTouch()>
<com.android.server.UiModeManagerService: boolean access$600(com.android.server.UiModeManagerService)>
<android.widget.AdapterViewAnimator$SavedState$1: android.widget.AdapterViewAnimator$SavedState[] newArray(int)>
<android.webkit.WebView: android.webkit.WebViewCore access$700(android.webkit.WebView)>
<android.hardware.Camera$Area: boolean equals(java.lang.Object)>
<android.net.wifi.p2p.WifiP2pGroup$1: void <init>()>
<android.graphics.drawable.RotateDrawable: boolean getPadding(android.graphics.Rect)>
<com.android.internal.os.LoggingPrintStream: void flush(boolean)>
<android.content.res.AssetManager: void finalize()>
<junit.framework.TestSuite: java.lang.String getName()>
<android.filterfw.core.FrameManager: android.filterfw.core.FilterContext getContext()>
<com.android.server.accessibility.AccessibilityManagerService: void access$1200(com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.AccessibilityManagerService$Service)>
<android.view.GLES20Canvas: void nScale(int,float,float)>
<android.renderscript.Element$DataKind: void <clinit>()>
<android.hardware.usb.UsbAccessory$1: java.lang.Object[] newArray(int)>
<com.android.internal.telephony.PhoneBase: void removeReferences()>
<android.server.BluetoothA2dpService$1: void <init>(android.server.BluetoothA2dpService)>
<android.content.ContentProvider: void setPathPermissions(android.content.pm.PathPermission[])>
<GenerationGG: android.widget.AbsListView$RecyclerListener get_androidwidgetAbsListView__RecyclerListener()>
<android.telephony.SmsMessage: boolean isMWISetMessage()>
<android.util.StateSet: void <clinit>()>
<Wrapper_android_content_res_Configuration: void test_android_content_res_Configuration()>
<android.view.accessibility.AccessibilityRecord: void setFromIndex(int)>
<android.server.BluetoothHealthProfileHandler: java.util.HashMap access$500(android.server.BluetoothHealthProfileHandler)>
<android.content.IntentFilter: int countActions()>
<android.widget.NumberPicker$AdjustScrollerCommand: void <init>(android.widget.NumberPicker)>
<android.graphics.drawable.ClipDrawable: int getChangingConfigurations()>
<com.android.internal.telephony.sip.SipPhone: java.lang.String getDeviceId()>
<android.content.ClipData: android.content.ClipData newRawUri(java.lang.CharSequence,android.net.Uri)>
<android.widget.SimpleAdapter$SimpleFilter: void <init>(android.widget.SimpleAdapter,android.widget.SimpleAdapter$1)>
<android.webkit.WebSettings: void setUseWideViewPort(boolean)>
<android.animation.IntKeyframeSet: android.animation.IntKeyframeSet clone()>
<com.android.internal.telephony.BaseCommands: void unregisterForCallStateChanged(android.os.Handler)>
<android.widget.SimpleCursorAdapter: void setCursorToStringConverter(android.widget.SimpleCursorAdapter$CursorToStringConverter)>
<android.gesture.Gesture: void <clinit>()>
<android.location.Address: java.lang.String access$1702(android.location.Address,java.lang.String)>
<com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaNumberInfoRec: java.lang.String toString()>
<android.widget.GridLayout: android.widget.GridLayout$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.view.View: void postSendViewScrolledAccessibilityEventCallback()>
<GenerationGG: android.content.SyncContext get_androidcontentSyncContext()>
<GenerationGG: android.test.ComparisonFailure get_androidtestComparisonFailure()>
<android.widget.StackView$StackSlider: void setView(android.view.View)>
<android.content.AbstractThreadedSyncAdapter$SyncThread: android.content.SyncContext access$700(android.content.AbstractThreadedSyncAdapter$SyncThread)>
<android.webkit.WebViewWorker$CacheCreateData: void <init>()>
<android.preference.DialogPreference$SavedState$1: void <init>()>
<android.content.res.XmlBlock$Parser: void close()>
<android.os.Handler: java.lang.String getMessageName(android.os.Message)>
<java.lang.Object: boolean getAttributeBooleanValue(java.lang.String,java.lang.String,boolean)>
<android.graphics.Path: void addRect(float,float,float,float,android.graphics.Path$Direction)>
<android.widget.MediaController: void initFloatingWindowLayout()>
<android.webkit.JWebCoreJavaBridge: void removeActiveWebView(android.webkit.WebView)>
<android.webkit.WebViewCore: void nativeSetGlobalBounds(int,int,int,int)>
<Wrapper_android_media_CamcorderProfile: void test_android_media_CamcorderProfile()>
<android.net.wifi.WifiNative: int getPowerModeCommand()>
<android.view.accessibility.AccessibilityManager: boolean isEnabled()>
<android.content.AsyncQueryHandler: android.os.Handler createHandler(android.os.Looper)>
<android.app.Activity: void onPause()>
<android.drm.DrmManagerClient: int _checkRightsStatus(int,java.lang.String,int)>
<android.app.LoaderManagerImpl$LoaderInfo: void reportStart()>
<android.view.GLES20Canvas: void nDrawRects(int,int,int)>
<android.bluetooth.BluetoothDeviceProfileState: int access$902(android.bluetooth.BluetoothDeviceProfileState,int)>
<com.android.internal.telephony.gsm.GsmCall: void detach(com.android.internal.telephony.gsm.GsmConnection)>
<android.renderscript.RenderScript: void <init>(android.content.Context)>
<com.android.internal.telephony.SmsMessageBase: java.lang.String getPseudoSubject()>
<android.text.PackedObjectVector: int size()>
<android.content.IntentSender: void <clinit>()>
<android.os.WorkSource: boolean add(int)>
<android.view.animation.ScaleAnimation: void initialize(int,int,int,int)>
<com.android.i18n.phonenumbers.RegexCache$LRUCache: void <init>(int)>
<com.android.server.InputMethodManagerService: boolean canAddToLastInputMethod(android.view.inputmethod.InputMethodSubtype)>
<android.net.wifi.WifiStateMachine: void access$7900(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.content.res.XmlBlock$Parser: int getAttributeIntValue(int,int)>
<android.database.sqlite.SQLiteAbortException: void <init>()>
<android.content.res.XmlBlock: int nativeNext(int)>
<android.util.TypedValue: float getFraction(float,float)>
<android.drm.DrmUtils: void removeFile(java.lang.String)>
<android.webkit.WebViewCore: void access$1900(android.webkit.WebViewCore)>
<android.widget.RemoteViews$SetRemoteViewsAdapterIntent: void <init>(android.widget.RemoteViews,int,android.content.Intent)>
<android.renderscript.Int3: void <init>(int,int,int)>
<android.content.res.TypedArray: android.content.res.Resources getResources()>
<android.test.mock.MockCursor: void copyStringToBuffer(int,android.database.CharArrayBuffer)>
<com.android.server.LocationManagerService$Receiver: void <init>(com.android.server.LocationManagerService,android.app.PendingIntent)>
<android.renderscript.RenderScript: void nAllocationData2D(int,int,int,int,int,int,int,short[],int)>
<android.content.SyncInfo$1: java.lang.Object[] newArray(int)>
<android.widget.RemoteViewsAdapter: int getCount()>
<android.os.Binder: void <init>()>
<android.speech.RecognitionService$StartListeningArgs: void <init>(android.speech.RecognitionService,android.content.Intent,android.speech.IRecognitionListener)>
<android.net.DhcpStateMachine: android.content.Context access$300(android.net.DhcpStateMachine)>
<android.bluetooth.BluetoothInputStream: int read(byte[],int,int)>
<android.widget.TabHost: android.widget.TabHost$TabSpec newTabSpec(java.lang.String)>
<android.renderscript.RSSurfaceView: void surfaceDestroyed(android.view.SurfaceHolder)>
<android.view.MotionEvent: android.view.MotionEvent copy()>
<android.graphics.drawable.GradientDrawable: int modulateAlpha(int)>
<android.net.MobileDataStateTracker$MdstHandler: void <init>(android.os.Looper,android.net.MobileDataStateTracker)>
<android.util.Xml: android.util.Xml$Encoding findEncodingByName(java.lang.String)>
<android.view.GLES20Canvas: int saveLayerAlpha(android.graphics.RectF,int,int)>
<android.media.CamcorderProfile: boolean hasProfile(int)>
<com.android.i18n.phonenumbers.PhoneNumberUtil: void loadMetadataForRegionFromFile(java.lang.String,java.lang.String)>
<android.widget.TimePicker$SavedState$1: java.lang.Object[] newArray(int)>
<android.widget.AbsListView$1: void <init>(android.widget.AbsListView,android.view.View,android.widget.AbsListView$PerformClick)>
<android.animation.AnimatorSet$Builder: android.animation.AnimatorSet$Builder with(android.animation.Animator)>
<com.android.server.AppWidgetService: void pruneHostLocked(com.android.server.AppWidgetService$Host)>
<com.android.internal.os.BatteryStatsImpl: long getBatteryUptime(long)>
<android.net.rtp.AudioStream: boolean isBusy()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: android.net.wifi.p2p.WifiP2pInfo access$1200(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<com.android.server.LocationManagerService: int nextPower(int)>
<android.net.DnsPinger: int pingDnsAsync(java.net.InetAddress,int,int)>
<android.nfc.tech.MifareClassic: int sectorToBlock(int)>
<android.view.View: void onAnimationEnd()>
<GenerationGG: android.nfc.tech.TagTechnology get_androidnfctechTagTechnology()>
<com.android.server.pm.PackageManagerService$InstallArgs: void <init>(android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String,android.content.pm.ManifestDigest)>
<android.widget.AdapterView: boolean canAnimate()>
<android.net.wifi.WifiStateMachine$DriverLoadingState$1: void <init>(android.net.wifi.WifiStateMachine$DriverLoadingState,android.os.Message)>
<android.widget.TextView: android.content.Context access$7400(android.widget.TextView)>
<android.view.animation.Animation: boolean getTransformation(long,android.view.animation.Transformation)>
<com.android.server.wm.WindowState: boolean canReceiveKeys()>
<android.renderscript.Element: void <init>(int,android.renderscript.RenderScript,android.renderscript.Element$DataType,android.renderscript.Element$DataKind,boolean,int)>
<android.widget.PopupWindow: android.view.View$OnTouchListener access$800(android.widget.PopupWindow)>
<android.net.http.AndroidHttpClientConnection: org.apache.http.HttpEntity receiveResponseEntity(android.net.http.Headers)>
<android.animation.PropertyValuesHolder: int nGetFloatMethod(java.lang.Class,java.lang.String)>
<com.android.internal.widget.ActionBarView: android.widget.Spinner access$1000(com.android.internal.widget.ActionBarView)>
<android.content.pm.VerifierDeviceIdentity: int describeContents()>
<android.content.ISyncStatusObserver$Stub$Proxy: void <init>(android.os.IBinder)>
<android.widget.VideoView: int access$1002(android.widget.VideoView,int)>
<android.media.audiofx.EnvironmentalReverb: short getRoomHFLevel()>
<android.app.Fragment: void onDestroyOptionsMenu()>
<com.android.server.connectivity.Tethering: boolean access$202(com.android.server.connectivity.Tethering,boolean)>
<android.inputmethodservice.ExtractEditText: void viewClicked(android.view.inputmethod.InputMethodManager)>
<java.lang.Object: android.view.MenuItem findItem(int)>
<android.nfc.INfcAdapter$Stub$Proxy: void <init>(android.os.IBinder)>
<android.graphics.Canvas: void native_drawARGB(int,int,int,int,int)>
<android.app.ContextImpl$10: void <init>()>
<GenerationGG: android.test.mock.MockCursor get_androidtestmockMockCursor()>
<android.graphics.SurfaceTexture: long getTimestamp()>
<android.telephony.TelephonyManager: int getPhoneTypeFromNetworkType()>
<Wrapper_android_sax_ElementListener: void test_android_sax_ElementListener()>
<com.android.server.wm.InputManager$Callbacks: void <init>(com.android.server.wm.InputManager)>
<GenerationGG: android.app.FragmentTransaction get_androidappFragmentTransaction()>
<com.android.server.wm.InputFilter: void uninstall()>
<android.drm.DrmSupportInfo: void addMimeType(java.lang.String)>
<android.view.textservice.SpellCheckerInfo$1: android.view.textservice.SpellCheckerInfo[] newArray(int)>
<com.android.server.wm.WindowState: void setAnimation(android.view.animation.Animation)>
<android.widget.TabHost: android.widget.TabWidget getTabWidget()>
<android.widget.TabHost: java.lang.String getCurrentTabTag()>
<android.widget.TableLayout: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<android.view.GLES20Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>
<android.text.method.ReplacementTransformationMethod$ReplacementCharSequence: int length()>
<android.media.audiofx.EnvironmentalReverb: android.media.audiofx.EnvironmentalReverb$Settings getProperties()>
<android.content.res.AssetManager: int[] getArrayStringInfo(int)>
<com.android.internal.os.BatteryStatsImpl$Uid: long getScanWifiLockTime(long,int)>
<android.net.MobileDataStateTracker: java.lang.String networkTypeToApnType(int)>
<android.webkit.PluginManager: void refreshPlugins(boolean)>
<android.renderscript.RenderScript: void rsnAllocationData1D(int,int,int,int,int,float[],int)>
<android.graphics.Path: boolean isRect(android.graphics.RectF)>
<com.android.internal.telephony.DataConnection: void retryForeverUsingLastTimeout()>
<android.graphics.drawable.Drawable: boolean isStateful()>
<android.webkit.WebChromeClient: void setupAutoFill(android.os.Message)>
<android.server.BluetoothService: int addRfcommServiceRecordNative(java.lang.String,long,long,short)>
<com.android.internal.util.BitwiseOutputStream: void writeByteArray(int,byte[])>
<com.android.internal.telephony.DataConnection: void access$1700(com.android.internal.telephony.DataConnection,com.android.internal.util.IState)>
<com.android.internal.telephony.cdma.CDMALTEPhone: void removeReferences()>
<GenerationGG: android.media.RingtoneManager get_androidmediaRingtoneManager()>
<android.animation.ObjectAnimator: java.lang.Object clone()>
<com.android.internal.telephony.DataCallState: com.android.internal.telephony.DataCallState$SetupResult setLinkProperties(android.net.LinkProperties,boolean)>
<android.view.accessibility.AccessibilityNodeInfo: void addChild(android.view.View)>
<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder addRequirements(com.android.internal.util.Predicate[])>
<android.net.Uri$StringUri: android.net.Uri$Part getFragmentPart()>
<android.server.BluetoothAdapterStateMachine: android.server.BluetoothAdapterStateMachine$PowerOff access$1200(android.server.BluetoothAdapterStateMachine)>
<android.net.EthernetDataTracker: java.lang.String getTcpBufferSizesPropName()>
<android.widget.FastScroller: void getSectionsFromIndexer()>
<android.text.style.SuggestionSpan: void <clinit>()>
<android.content.pm.ApplicationInfo$1: java.lang.Object[] newArray(int)>
<android.widget.NumberPicker: char[] access$900()>
<com.android.internal.telephony.IccCardApplication$AppState: boolean isAppReady()>
<com.android.server.CountryDetectorService$Receiver: void <init>(com.android.server.CountryDetectorService,android.location.ICountryListener)>
<Wrapper_android_view_inputmethod_ExtractedTextRequest: void test_android_view_inputmethod_ExtractedTextRequest()>
<android.database.sqlite.SQLiteCompiledSql: void releaseIfNotInUse()>
<android.view.HardwareRenderer$GlRenderer: void onPreDraw(android.graphics.Rect)>
<android.net.MobileDataStateTracker: com.android.internal.util.AsyncChannel access$102(android.net.MobileDataStateTracker,com.android.internal.util.AsyncChannel)>
<android.view.accessibility.IAccessibilityInteractionConnection$Stub: android.view.accessibility.IAccessibilityInteractionConnection asInterface(android.os.IBinder)>
<android.media.AudioTrack: int getChannelConfiguration()>
<android.server.BluetoothService: boolean tearDownNativeDataNative()>
<com.android.server.ConnectivityService: android.os.Handler access$3200(com.android.server.ConnectivityService)>
<android.net.wifi.WifiManager: int access$008(android.net.wifi.WifiManager)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: android.net.wifi.p2p.WifiP2pConfig access$4600(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<android.webkit.WebHistoryItem: android.graphics.Bitmap getFavicon()>
<android.renderscript.Matrix3f: void translate(float,float)>
<android.text.TextUtils: void writeWhere(android.os.Parcel,android.text.Spanned,java.lang.Object)>
<android.location.Address: void setAddressLine(int,java.lang.String)>
<android.view.accessibility.AccessibilityNodeInfo: void recycle()>
<com.android.internal.telephony.BaseCommands: void unregisterForRilConnected(android.os.Handler)>
<android.content.IntentFilter$1: void <init>()>
<com.android.server.wm.WindowManagerService: float getAnimationScale(int)>
<android.drm.DrmEvent: java.lang.Object getAttribute(java.lang.String)>
<android.telephony.TelephonyManager: boolean isNetworkRoaming()>
<android.view.View$AttachInfo$InvalidateInfo$1: android.view.View$AttachInfo$InvalidateInfo newInstance()>
<Wrapper_android_net_wifi_SupplicantState: void test_android_net_wifi_SupplicantState()>
<android.webkit.CookieManager$Cookie: java.lang.String toString()>
<android.os.Debug: void resetThreadAllocCount()>
<com.android.server.pm.PackageManagerService: void grantPermissionsLPw(android.content.pm.PackageParser$Package,boolean)>
<android.app.Instrumentation: android.app.Activity waitForMonitor(android.app.Instrumentation$ActivityMonitor)>
<android.widget.ActivityChooserModel: android.content.pm.ResolveInfo getDefaultActivity()>
<android.view.MotionEvent: long getDownTime()>
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: void queueRequestedPositionToLoad(int)>
<android.mtp.MtpDevice: android.mtp.MtpDeviceInfo native_get_device_info()>
<com.android.server.wm.InputManager: boolean nativeHasKeys(int,int,int[],boolean[])>
<android.view.MotionEvent: float getHistoricalTouchMinor(int,int)>
<android.util.JsonWriter: android.util.JsonScope peek()>
<com.android.server.am.ActivityManagerService$ItemMatcher: int build(java.lang.String[],int)>
<com.android.internal.telephony.gsm.GSMPhone: void notifyNewRingingConnection(com.android.internal.telephony.Connection)>
<android.app.ContextImpl$15: void <init>()>
<android.os.MemoryFile$MemoryInputStream: int read(byte[],int,int)>
<android.view.accessibility.IAccessibilityInteractionConnection$Stub$Proxy: android.os.IBinder asBinder()>
<java.lang.Object: java.lang.String getName()>
<Wrapper_android_hardware_SensorManager: void test_android_hardware_SensorManager()>
<com.android.internal.telephony.gsm.GSMPhone: void removeReferences()>
<com.android.internal.os.BatteryStatsImpl: void initDischarge()>
<android.webkit.BrowserFrame: void stopLoading()>
<android.widget.ArrayAdapter: int getCount()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: void readExternal(java.io.ObjectInput)>
<com.android.internal.telephony.gsm.GsmCallTracker: com.android.internal.telephony.Phone$SuppService getFailedService(int)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setPreferredExtnPrefix(java.lang.String)>
<android.text.method.BaseMovementMethod: boolean onTouchEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<com.android.internal.telephony.DataConnection$ConnectionParams: void <init>(com.android.internal.telephony.ApnSetting,android.os.Message)>
<android.test.AndroidTestRunner: void setSkipExecution(boolean)>
<android.view.ViewPropertyAnimator: void access$500(android.view.ViewPropertyAnimator,int,float)>
<android.app.QueuedWork: void add(java.lang.Runnable)>
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: void onDataSetChanged()>
<android.app.SharedPreferencesImpl: long getLong(java.lang.String,long)>
<android.net.wifi.WifiWatchdogStateMachine: boolean access$4900(android.net.wifi.WifiWatchdogStateMachine)>
<com.android.server.pm.UserManager: void removePackageForAllUsers(java.lang.String)>
<android.text.method.MultiTapKeyListener: void <clinit>()>
<android.app.ContextImpl: android.content.res.Resources getResources()>
<android.app.ContextImpl: void scheduleFinalCleanup(java.lang.String,java.lang.String)>
<android.app.ContextImpl$17: void <init>()>
<android.webkit.WebView: void setTouchHighlightRects(java.util.ArrayList)>
<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteDatabase getDatabase()>
<android.os.storage.StorageVolume: boolean equals(java.lang.Object)>
<android.app.ContextImpl$17: java.lang.Object createService(android.app.ContextImpl)>
<android.text.TextUtils$TruncateAt: void <clinit>()>
<android.os.storage.StorageVolume$1: android.os.storage.StorageVolume createFromParcel(android.os.Parcel)>
<android.content.res.Configuration: int describeContents()>
<com.android.i18n.phonenumbers.AsYouTypeFormatter: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>
<android.text.style.BulletSpan: void <init>(int,int)>
<android.opengl.GLUtils: int native_texSubImage2D(int,int,int,int,android.graphics.Bitmap,int,int)>
<android.net.wifi.WifiInfo: int getRssi()>
<android.webkit.WebView: boolean hitFocusedPlugin(int,int)>
<Wrapper_android_accounts_OperationCanceledException: void test_android_accounts_OperationCanceledException()>
<android.speech.tts.SynthesisRequest: java.lang.String getCountry()>
<android.text.style.AbsoluteSizeSpan: int describeContents()>
<android.drm.DrmUtils: void quiteDispose(java.io.InputStream)>
<android.os.ResultReceiver: int describeContents()>
<android.telephony.PhoneNumberFormattingTextWatcher: void <init>()>
<Wrapper_android_text_style_ScaleXSpan: void test_android_text_style_ScaleXSpan()>
<android.app.SearchDialog: boolean isLandscapeMode(android.content.Context)>
<com.android.internal.telephony.cat.Tone$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$3700(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,com.android.internal.util.IState)>
<android.media.audiofx.EnvironmentalReverb: int getReflectionsDelay()>
<com.android.internal.app.ResolverActivity$ResolveListAdapter: long getItemId(int)>
<android.content.pm.PathPermission$1: android.content.pm.PathPermission[] newArray(int)>
<com.android.i18n.phonenumbers.geocoding.FlyweightMapStorage: java.lang.String getDescription(int)>
<android.graphics.drawable.AnimationDrawable: android.graphics.drawable.Drawable getFrame(int)>
<android.opengl.GLSurfaceView$GLThread: boolean readyToDraw()>
<android.net.http.AndroidHttpClientConnection: void <init>()>
<com.android.server.usb.UsbSettingsManager$AccessoryFilter: void write(org.xmlpull.v1.XmlSerializer)>
<android.net.Proxy: void <init>()>
<android.widget.VideoView: boolean isInPlaybackState()>
<android.nfc.INdefPushCallback$Stub: void <init>()>
<com.android.server.accessibility.AccessibilityManagerService$Service: void unlinkToOwnDeath()>
<android.view.animation.GridLayoutAnimationController: void <init>(android.view.animation.Animation,float,float)>
<android.widget.SimpleAdapter$SimpleFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)>
<android.widget.NumberPicker: void onScrollStateChange(int)>
<android.view.animation.Animation: int getRepeatCount()>
<android.net.wifi.WifiStateMachine: int getFrequencyBand()>
<android.media.IAudioFocusDispatcher$Stub: android.media.IAudioFocusDispatcher asInterface(android.os.IBinder)>
<android.view.View$SendViewScrolledAccessibilityEvent: void <init>(android.view.View)>
<android.view.GLES20Canvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)>
<android.content.res.Resources: android.content.res.Configuration getConfiguration()>
<GenerationGG: android.app.WallpaperManager get_androidappWallpaperManager()>
<com.android.server.BackupManagerService$RestoreState: void <clinit>()>
<android.graphics.Bitmap: void nativeSetPixel(int,int,int,int)>
<android.webkit.BrowserFrame: void postUrl(java.lang.String,byte[])>
<android.app.IActivityController$Stub: android.app.IActivityController asInterface(android.os.IBinder)>
<android.telephony.ServiceState: int getCdmaEriIconIndex()>
<android.os.MessageQueue: void removeCallbacksAndMessages(android.os.Handler,java.lang.Object)>
<android.graphics.Interpolator: int nativeConstructor(int,int)>
<android.view.accessibility.AccessibilityRecord: void setSource(android.view.View)>
<android.webkit.Network: void <init>(android.content.Context)>
<android.bluetooth.IBluetoothPbap$Stub$Proxy: android.os.IBinder asBinder()>
<android.content.IContentService$Stub: void <init>()>
<android.net.wifi.WifiStateMachine: void access$11800(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.accounts.AccountManager: void <init>(android.content.Context,android.accounts.IAccountManager,android.os.Handler)>
<android.widget.ProgressBar: boolean verifyDrawable(android.graphics.drawable.Drawable)>
<android.view.animation.Transformation: void compose(android.view.animation.Transformation)>
<android.view.KeyEvent: java.lang.String getCharacters()>
<android.view.ViewDebug$LooperProfiler: void <init>(java.lang.String,java.io.FileDescriptor)>
<android.app.backup.IRestoreObserver$Stub: void <init>()>
<com.android.internal.telephony.PhoneBase: boolean isDnsCheckDisabled()>
<android.database.sqlite.SQLiteDebug$PagerStats: void <init>()>
<android.animation.ValueAnimator: void setInterpolator(android.animation.TimeInterpolator)>
<com.android.server.VibratorService: void vibratorOff()>
<android.net.wifi.WifiStateMachine: void access$14900(android.net.wifi.WifiStateMachine,android.os.Message)>
<android.content.ContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
<android.telephony.ServiceState: void setCdmaDefaultRoamingIndicator(int)>
<com.android.server.sip.SipWakeupTimer$MyEventComparator: boolean equals(java.lang.Object)>
<android.inputmethodservice.KeyboardView: boolean isPreviewEnabled()>
<android.location.GpsSatellite: float getElevation()>
<android.net.NetworkStatsHistory: void removeBucketsBefore(long)>
<com.android.internal.view.IInputMethod$Stub: android.os.IBinder asBinder()>
<android.widget.StackView$StackSlider: void setXProgress(float)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: int getCountryCode()>
<android.widget.ZoomButtonsController: void onPostConfigurationChanged()>
<GenerationGG: android.test.LoaderTestCase get_androidtestLoaderTestCase()>
<android.media.ToneGenerator: void release()>
<android.widget.ProgressBar$SavedState: void <clinit>()>
<android.net.http.SslCertificate: java.lang.String toString()>
<com.android.server.connectivity.Tethering: void handleTetherIfaceChange()>
<com.android.server.MountService$ObbActionHandler: void <init>(com.android.server.MountService,android.os.Looper)>
<android.webkit.LoadListener: void <clinit>()>
<android.widget.FastScroller: void onSectionsChanged()>
<android.media.audiofx.PresetReverb$BaseParameterListener: void <init>(android.media.audiofx.PresetReverb,android.media.audiofx.PresetReverb$1)>
<android.content.pm.VerifierDeviceIdentity: int hashCode()>
<android.database.CursorWindow: void nativeClear(int)>
<android.nfc.INfcAdapterExtras$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.internal.telephony.gsm.GsmMmiCode: boolean isEmptyOrNull(java.lang.CharSequence)>
<android.util.LruCache: int maxSize()>
<com.android.internal.telephony.cat.Duration: void <init>(int,com.android.internal.telephony.cat.Duration$TimeUnit)>
<android.view.inputmethod.InputMethodInfo$1: android.view.inputmethod.InputMethodInfo[] newArray(int)>
<android.media.AudioSystem: int getNumStreamTypes()>
<Wrapper_android_os_ParcelUuid: void test_android_os_ParcelUuid()>
<GenerationGG: android.graphics.PorterDuffColorFilter get_androidgraphicsPorterDuffColorFilter()>
<android.view.View: boolean isShown()>
<android.media.AudioService: int[] access$2700(android.media.AudioService)>
<android.app.BackStackRecord: android.app.FragmentTransaction setBreadCrumbTitle(int)>
<android.view.GestureDetector$SimpleOnGestureListener: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<android.widget.AutoCompleteTextView: android.widget.AdapterView$OnItemClickListener getItemClickListener()>
<android.inputmethodservice.KeyboardView: void setPopupParent(android.view.View)>
<android.util.Base64OutputStream: void close()>
<android.test.mock.MockCursor: boolean moveToPosition(int)>
<Wrapper_android_graphics_PathDashPathEffect: void test_android_graphics_PathDashPathEffect()>
<android.view.ViewGroup: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)>
<com.android.internal.telephony.DataConnectionTracker: boolean isEmergency()>
<android.app.Application: void dispatchActivityCreated(android.app.Activity,android.os.Bundle)>
<com.android.server.connectivity.Tethering$TetherMasterSM: com.android.internal.util.State access$3800(com.android.server.connectivity.Tethering$TetherMasterSM)>
<android.widget.LinearLayout$LayoutParams: void <init>(int,int)>
<android.webkit.WebView: int pinLocY(int)>
<android.webkit.WebIconDatabase: void nativeOpen(java.lang.String)>
<android.content.ContextWrapper: boolean isRestricted()>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofPropertyValuesHolder(java.lang.Object,android.animation.PropertyValuesHolder[])>
<android.util.LruCache: java.lang.Object create(java.lang.Object)>
<android.view.KeyEvent: android.view.KeyEvent changeTimeRepeat(android.view.KeyEvent,long,int)>
<android.os.AsyncTask: void onProgressUpdate(java.lang.Object[])>
<android.widget.TableLayout: boolean isColumnCollapsed(int)>
<android.location.Country: void <init>(android.location.Country)>
<GenerationGG: android.app.FragmentManager$OnBackStackChangedListener get_androidappFragmentManager__OnBackStackChangedListener()>
<android.text.AlteredCharSequence: char charAt(int)>
<GenerationGG: java.net.DatagramSocket get_javanetDatagramSocket()>
<android.view.inputmethod.BaseInputConnection: boolean commitCorrection(android.view.inputmethod.CorrectionInfo)>
<android.net.EthernetDataTracker: boolean teardown()>
<com.android.internal.telephony.MccTable$MccEntry: void <init>(int,java.lang.String,int,java.lang.String)>
<com.android.server.wm.WindowManagerService: android.view.InputDevice getInputDevice(int)>
<android.webkit.DeviceOrientationService: void onSensorChanged(android.hardware.SensorEvent)>
<android.test.RenamingDelegatingContext: java.io.FileInputStream openFileInput(java.lang.String)>
<android.view.Surface: void freezeDisplay(int)>
<android.content.Intent$ShortcutIconResource: void writeToParcel(android.os.Parcel,int)>
<com.android.server.am.ActivityManagerService: boolean unscheduleServiceRestartLocked(com.android.server.am.ServiceRecord)>
<android.preference.ListPreference$SavedState$1: android.preference.ListPreference$SavedState[] newArray(int)>
<android.widget.Gallery$FlingRunnable: void startCommon()>
<com.android.server.ConnectivityService$VpnCallback: void <init>(com.android.server.ConnectivityService,com.android.server.ConnectivityService$1)>
<android.graphics.drawable.AnimationDrawable$AnimationState: void growArray(int,int)>
<android.view.GLES20Canvas: void nDrawBitmap(int,int,byte[],float,float,float,float,float,float,float,float,int)>
<android.util.Base64OutputStream: void flushBuffer()>
<android.webkit.WebView$InvokeListBox$MyArrayListAdapter: boolean areAllItemsEnabled()>
<android.view.DragEvent$1: android.view.DragEvent[] newArray(int)>
<android.test.AndroidTestRunner: void setContextIfAndroidTestCase(junit.framework.Test,android.content.Context,android.content.Context)>
<GenerationGG: android.animation.ValueAnimator get_androidanimationValueAnimator()>
<android.net.http.HttpsConnection: void restartConnection(boolean)>
<android.widget.VideoView: boolean access$302(android.widget.VideoView,boolean)>
<android.util.TimeUtils: java.lang.String getTimeZoneDatabaseVersion()>
<android.webkit.WebView: int access$5202(android.webkit.WebView,int)>
<android.app.Service: boolean onUnbind(android.content.Intent)>
<com.android.server.wm.WindowManagerService: boolean hasKeys(int[],boolean[])>
<android.database.sqlite.SQLiteReadOnlyDatabaseException: void <init>()>
<android.mtp.MtpObjectInfo: long getDateModified()>
<android.renderscript.RenderScript: void nAllocationElementData1D(int,int,int,int,byte[],int)>
<android.telephony.ServiceState: int getNetworkId()>
<android.location.ILocationManager$Stub: void <init>()>
<android.net.sip.SipProfile$Builder: java.lang.String fix(java.lang.String)>
<android.content.pm.VerifierDeviceIdentity: void <clinit>()>
<android.os.UEventObserver$UEventThread: void <init>()>
<android.telephony.gsm.SmsMessage: boolean isReplace()>
<android.graphics.PathMeasure: float getLength()>
<android.preference.PreferenceManager: void registerOnActivityDestroyListener(android.preference.PreferenceManager$OnActivityDestroyListener)>
<android.view.KeyEvent: boolean isTracking()>
<android.database.sqlite.SQLiteCursor: android.database.sqlite.SQLiteQuery getQuery()>
<android.view.ViewGroup: void offsetRectBetweenParentAndChild(android.view.View,android.graphics.Rect,boolean,boolean)>
<GenerationGG: android.net.rtp.AudioStream get_androidnetrtpAudioStream()>
<android.app.Dialog: void onActionModeStarted(android.view.ActionMode)>
<android.text.method.BaseMovementMethod: boolean top(android.widget.TextView,android.text.Spannable)>
<android.content.ContentValues: int describeContents()>
<android.content.pm.ProviderInfo$1: void <init>()>
<android.util.MonthDisplayHelper: int getRowOf(int)>
<com.android.internal.telephony.DataConnection: int access$2200(com.android.internal.telephony.DataConnection,android.os.AsyncResult)>
<android.content.IntentFilter: void <init>(java.lang.String,java.lang.String)>
<android.widget.Spinner$DialogPopup: void dismiss()>
<android.widget.TextView: void setMinLines(int)>
<android.view.View$DragShadowBuilder: void onProvideShadowMetrics(android.graphics.Point,android.graphics.Point)>
<com.android.internal.policy.PolicyManager: android.view.LayoutInflater makeNewLayoutInflater(android.content.Context)>
<com.android.internal.telephony.cat.CommandParamsFactory: com.android.internal.telephony.cat.ResultCode setIcons(java.lang.Object)>
<android.os.storage.StorageManager$ObbActionListener: void <init>(android.os.storage.StorageManager)>
<com.android.internal.telephony.WspTypeDecoder: boolean decodeConstrainedEncoding(int)>
<android.app.ApplicationErrorReport: void dump(android.util.Printer,java.lang.String)>
<android.text.Layout$Alignment: void <clinit>()>
<android.app.backup.FileBackupHelper: void performBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>
<android.widget.TextView: boolean shouldIgnoreActionUpEvent()>
<android.app.Dialog: void onActionModeFinished(android.view.ActionMode)>
<com.android.server.wm.WindowManagerService: void notifyWindowsChanged()>
<com.android.server.pm.PackageManagerService: java.util.List getAllPermissionGroups(int)>
<android.net.wifi.WifiStateMachine: java.util.List access$8002(android.net.wifi.WifiStateMachine,java.util.List)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatedState: void <init>(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<android.net.wifi.p2p.WifiP2pInfo$1: java.lang.Object[] newArray(int)>
<android.renderscript.FieldPacker: void addI8(byte)>
<com.android.server.ClipboardService: boolean hasClipboardText()>
<GenerationGG: android.net.wifi.WifiInfo get_androidnetwifiWifiInfo()>
<android.widget.TextView$Marquee: boolean shouldDrawLeftFade()>
<android.bluetooth.BluetoothPbap$1: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<android.net.wifi.WifiStateMachine: void access$3100(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.net.LocalSocketImpl$SocketOutputStream: void write(int)>
<com.android.server.BackupManagerService$PerformBackupTask: void executeNextState(com.android.server.BackupManagerService$BackupState)>
<android.app.Activity: int getTitleColor()>
<android.content.ContentProvider: void onTrimMemory(int)>
<android.os.Parcel: void writeIntArray(int[])>
<com.android.server.connectivity.Vpn: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()>
<android.nfc.NdefRecord: void <clinit>()>
<android.os.MemoryFile: void close()>
<com.android.server.sip.SipService$SipSessionGroupExt: void setListener(android.net.sip.ISipSessionListener)>
<android.view.InputDevice: int getSources()>
<android.webkit.JsResult: void cancel()>
<android.view.accessibility.AccessibilityNodeInfo: void setScrollable(boolean)>
<android.widget.LinearLayout: android.view.View getVirtualChildAt(int)>
<android.content.res.Configuration: boolean isOtherSeqNewer(android.content.res.Configuration)>
<com.android.server.pm.PackageManagerService: int getComponentEnabledSetting(android.content.ComponentName)>
<android.graphics.PointF$1: android.graphics.PointF[] newArray(int)>
<android.webkit.WebViewCore: void webkitDrawLayers()>
<com.android.server.pm.UserManager: void readUserList()>
<android.webkit.WebView: void nativeRecordButtons(int,boolean,boolean,boolean)>
<com.android.internal.telephony.ISms$Stub: android.os.IBinder asBinder()>
<com.android.server.am.BatteryStatsService: void <init>(java.lang.String)>
<GenerationGG: android.hardware.GeomagneticField get_androidhardwareGeomagneticField()>
<android.view.inputmethod.BaseInputConnection: int getComposingSpanStart(android.text.Spannable)>
<android.server.BluetoothHealthProfileHandler: android.server.BluetoothService access$200(android.server.BluetoothHealthProfileHandler)>
<com.android.server.net.NetworkIdentitySet: java.lang.String readOptionalString(java.io.DataInputStream)>
<android.util.SparseArray: void put(int,java.lang.Object)>
<android.text.method.BaseMovementMethod: int getCharacterWidth(android.widget.TextView)>
<android.renderscript.RenderScriptGL: void setSurface(android.view.SurfaceHolder,int,int)>
<android.net.wifi.WifiInfo: java.lang.String getSSID()>
<android.bluetooth.BluetoothDeviceProfileState: void access$7000(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.webkit.WebView: boolean access$8200(android.webkit.WebView)>
<android.content.pm.Signature: char[] toChars()>
<com.android.server.wm.InputManager: java.lang.String nativeDump()>
<android.app.PendingIntent$1: void <init>()>
<android.widget.ListPopupWindow$DropDownListView: boolean hasWindowFocus()>
<android.net.UrlQuerySanitizer: void parseUrl(java.lang.String)>
<android.media.CamcorderProfile: void native_init()>
<android.media.MediaPlayer: void setDisplay(android.view.SurfaceHolder)>
<GenerationGG: android.drm.DrmInfoRequest get_androiddrmDrmInfoRequest()>
<android.database.AbstractCursor: void unregisterContentObserver(android.database.ContentObserver)>
<android.widget.ListPopupWindow$ResizePopupRunnable: void <init>(android.widget.ListPopupWindow,android.widget.ListPopupWindow$1)>
<android.text.style.StrikethroughSpan: void updateDrawState(android.text.TextPaint)>
<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.os.IBinder,boolean)>
<android.content.pm.PackageParser$PermissionGroup: void setPackageName(java.lang.String)>
<android.test.mock.MockPackageManager: int[] getPackageGids(java.lang.String)>
<android.webkit.LoadListener: java.lang.String nativeRedirectedToUrl(java.lang.String,java.lang.String,int)>
<android.content.res.AssetManager$AssetInputStream: int read(byte[],int,int)>
<android.app.ContextImpl: android.os.Looper getMainLooper()>
<android.webkit.WebViewCore: void nativeSetJsFlags(java.lang.String)>
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: java.util.List queryIntent(android.content.Intent,java.lang.String,boolean)>
<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting addSharedUserLPw(java.lang.String,int,int)>
<android.net.sip.SipSessionAdapter: void onRegistrationTimeout(android.net.sip.ISipSession)>
<android.text.TextLine: void <clinit>()>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,java.lang.Object[])>
<android.content.res.XmlBlock$Parser: int getIdAttributeResourceValue(int)>
<android.test.mock.MockContext: android.content.ContentResolver getContentResolver()>
<android.graphics.Paint: void getTextPath(java.lang.String,int,int,float,float,android.graphics.Path)>
<com.android.server.UiModeManagerService$8: void <init>(com.android.server.UiModeManagerService)>
<android.test.mock.MockCursor: boolean isClosed()>
<android.net.INetworkPolicyListener$Stub: android.os.IBinder asBinder()>
<android.app.IActivityManager$WaitResult$1: java.lang.Object[] newArray(int)>
<android.webkit.BrowserFrame: java.lang.String saveWebArchive(java.lang.String,boolean)>
<android.view.ViewGroup: void resetTouchState()>
<android.webkit.DeviceMotionService$2: void <clinit>()>
<com.android.internal.telephony.sip.SipPhone: android.telephony.SignalStrength getSignalStrength()>
<android.preference.DialogPreference: void onClick(android.content.DialogInterface,int)>
<android.location.INetInitiatedListener$Stub: android.os.IBinder asBinder()>
<android.widget.GridLayout: boolean fits(int[],int,int,int)>
<android.widget.NumberPicker$SetSelectionCommand: void <init>(android.widget.NumberPicker)>
<android.inputmethodservice.KeyboardView: boolean isShifted()>
<com.android.internal.os.BatteryStatsImpl: int getDischargeCurrentLevelLocked()>
<android.os.StrictMode: boolean hasGatheredViolations()>
<android.app.ContextImpl: java.io.File getDatabasesDir()>
<android.widget.AnalogClock: void onSizeChanged(int,int,int,int)>
<android.widget.RemoteViewsAdapter$RemoteViewsMetaData: void reset()>
<com.android.internal.telephony.IccPhoneBookInterfaceManager: void <init>(com.android.internal.telephony.PhoneBase)>
<android.renderscript.Allocation$1: void <clinit>()>
<android.net.sip.SimpleSessionDescription: void <init>(java.lang.String)>
<android.graphics.drawable.StateListDrawable: android.graphics.drawable.Drawable getStateDrawable(int)>
<android.view.MotionEvent: float getHistoricalPressure(int)>
<android.app.ActivityThread: android.app.ActivityThread$ApplicationThread getApplicationThread()>
<android.webkit.WebChromeClient: android.view.View getVideoLoadingProgressView()>
<android.hardware.usb.UsbRequest: void native_dequeue_direct()>
<android.test.AndroidTestRunner: junit.framework.Test getTest(java.lang.Class)>
<com.android.server.pm.PackageManagerService: int[] removeInt(int[],int)>
<android.app.IBackupAgent$Stub: android.os.IBinder asBinder()>
<com.android.server.LocationManagerService$ProximityAlert: android.app.PendingIntent getIntent()>
<android.graphics.RectF: boolean isEmpty()>
<android.hardware.GeomagneticField: float getX()>
<android.opengl.GLES10: void _nativeClassInit()>
<com.android.internal.os.IResultReceiver$Stub$Proxy: android.os.IBinder asBinder()>
<android.view.View: int getWidth()>
<android.widget.NumberPicker: int getMinValue()>
<android.net.LocalSocketImpl$SocketOutputStream: void write(byte[])>
<Wrapper_android_graphics_LayerRasterizer: void test_android_graphics_LayerRasterizer()>
<android.content.SyncManager: android.content.Context access$1200(android.content.SyncManager)>
<com.android.server.am.UriPermission: java.lang.String toString()>
<android.app.ActivityManager$RunningServiceInfo$1: java.lang.Object[] newArray(int)>
<android.renderscript.Font: android.renderscript.Font createFromFile(android.renderscript.RenderScript,android.content.res.Resources,java.lang.String,float)>
<android.nfc.Tag$1: android.nfc.Tag[] newArray(int)>
<Wrapper_android_media_audiofx_PresetReverb: void test_android_media_audiofx_PresetReverb()>
<com.android.server.BackupManagerService$ClearDataObserver: void <init>(com.android.server.BackupManagerService)>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: int getStarts(int)>
<android.widget.TextView: boolean hasSelectionController()>
<android.content.pm.ManifestDigest$1: android.content.pm.ManifestDigest[] newArray(int)>
<android.webkit.WebViewCore: void access$4300(android.webkit.WebViewCore,int,int,int)>
<android.net.wifi.SupplicantStateTracker$1: void <clinit>()>
<com.android.server.sip.SipSessionGroup: void access$1200(com.android.server.sip.SipSessionGroup,com.android.server.sip.SipSessionGroup$SipSessionImpl)>
<com.android.internal.telephony.CommandException$Error: void <clinit>()>
<GenerationGG: android.webkit.WebChromeClient$CustomViewCallback get_androidwebkitWebChromeClient__CustomViewCallback()>
<android.widget.ScrollView: int getScrollRange()>
<android.text.Layout: int getEllipsizedWidth()>
<android.preference.PreferenceGroup: void sortPreferences()>
<android.net.wifi.WifiWatchdogStateMachine$OnlineWatchState: void triggerSingleDnsCheck()>
<android.accounts.AccountManagerResponse$1: android.accounts.AccountManagerResponse createFromParcel(android.os.Parcel)>
<com.android.internal.widget.ActionBarView: int getDropdownSelectedPosition()>
<android.content.res.Resources$NotFoundException: void <init>(java.lang.String)>
<com.android.internal.telephony.IccException: void <init>()>
<android.graphics.Movie: void draw(android.graphics.Canvas,float,float)>
<android.os.Debug: long countInstancesOfClass(java.lang.Class)>
<com.android.server.MountService: java.util.Map access$1900(com.android.server.MountService)>
<android.content.ComponentName$1: void <init>()>
<android.webkit.WebView: int access$4500(android.webkit.WebView)>
<android.media.AudioService: java.util.Stack access$7100(android.media.AudioService)>
<android.os.Environment: void <init>()>
<android.content.IntentSender: void <init>(android.content.IIntentSender)>
<android.inputmethodservice.InputMethodService$InputMethodSessionImpl: void updateCursor(android.graphics.Rect)>
<android.webkit.WebSettings: void setLoadWithOverviewMode(boolean)>
<android.mtp.MtpObjectInfo: long getDateCreated()>
<android.text.TextUtils: int getOffsetAfter(java.lang.CharSequence,int)>
<com.android.server.am.ActivityRecord: void addNewIntentLocked(android.content.Intent)>
<android.text.style.SuggestionSpan: int hashCode()>
<DumbClass: void DumbMethod73()>
<android.view.MotionEvent: float getHistoricalAxisValue(int,int,int)>
<android.net.wifi.WifiStateMachine: com.android.internal.util.State access$15100(android.net.wifi.WifiStateMachine)>
<android.media.CameraProfile: void native_init()>
<android.graphics.drawable.DrawableContainer: int getOpacity()>
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: android.view.Menu getMenu()>
<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>
<android.graphics.Color: int argb(int,int,int,int)>
<android.database.DataSetObservable: void <init>()>
<android.widget.TabHost$1: void <init>(android.widget.TabHost)>
<android.util.LongSparseArray: void <init>()>
<android.view.View: android.view.TouchDelegate getTouchDelegate()>
<android.inputmethodservice.Keyboard: int access$100(android.inputmethodservice.Keyboard)>
<android.widget.TextView$CharWrapper: void drawText(android.graphics.Canvas,int,int,float,float,android.graphics.Paint)>
<android.os.SystemProperties: int getInt(java.lang.String,int)>
<android.app.ActivityThread$ApplicationThread: void scheduleReceiver(android.content.Intent,android.content.pm.ActivityInfo,android.content.res.CompatibilityInfo,int,java.lang.String,android.os.Bundle,boolean)>
<GenerationGG: android.graphics.Region get_androidgraphicsRegion()>
<com.android.internal.app.ActionBarImpl: void removeOnMenuVisibilityListener(android.app.ActionBar$OnMenuVisibilityListener)>
<android.net.http.HttpAuthHeader: java.lang.String getUsername()>
<java.lang.Object: int getColumnIndexOrThrow(java.lang.String)>
<android.media.AudioTrack: int setNotificationMarkerPosition(int)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$4: void <init>(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,android.widget.EditText)>
<android.view.GLES20RenderLayer: void end(android.graphics.Canvas)>
<android.net.wifi.WifiMonitor: void startMonitoring()>
<android.os.CountDownTimer$1: void handleMessage(android.os.Message)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.util.List intlNumberFormats()>
<GenerationGG: android.os.ParcelUuid get_androidosParcelUuid()>
<android.widget.PopupWindow: int getSoftInputMode()>
<com.android.internal.telephony.sip.SipPhone: java.lang.String getLine1Number()>
<android.util.FloatMath: float sin(float)>
<android.view.ViewRootImpl: void enableHardwareAcceleration(android.view.WindowManager$LayoutParams)>
<android.widget.RelativeLayout$TopToBottomLeftToRightComparator: void <init>(android.widget.RelativeLayout,android.widget.RelativeLayout$1)>
<android.graphics.Point: void set(int,int)>
<android.content.res.AssetManager$AssetInputStream: void mark(int)>
<android.hardware.Camera: void startFaceDetection()>
<com.android.server.PowerManagerService: int getSupportedWakeLockFlags()>
<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getCodePath()>
<android.view.MotionEvent$1: void <init>()>
<GenerationGG: android.hardware.usb.UsbManager get_androidhardwareusbUsbManager()>
<android.util.LongSparseArray: void clear()>
<android.nfc.NdefRecord: byte[] getPayload()>
<android.webkit.WebView$OnTrimMemoryListener: void <init>(android.content.Context)>
<android.app.NativeActivity: void <init>()>
<android.text.TextLine: android.text.TextLine obtain()>
<android.view.PointerIcon$1: java.lang.Object[] newArray(int)>
<android.view.GLES20RecordingCanvas$1: void onReleased(android.util.Poolable)>
<android.app.NativeActivity: void onSurfaceCreatedNative(int,android.view.Surface)>
<java.lang.Object: java.lang.String getClassAttribute()>
<android.content.SyncStorageEngine: void readStatusLocked()>
<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getCurrentItem()>
<android.graphics.Path$Direction: void <clinit>()>
<android.renderscript.Matrix2f: void load(android.renderscript.Matrix2f)>
<android.telephony.gsm.GsmCellLocation: void <init>()>
<android.database.CursorWindow: int nativeCreateFromParcel(android.os.Parcel)>
<com.android.server.BackupManagerService: javax.crypto.SecretKey buildCharArrayKey(char[],byte[],int)>
<android.server.BluetoothBondState: int getAttempt(java.lang.String)>
<com.android.internal.telephony.cat.ValueParser: int retrieveItemId(com.android.internal.telephony.cat.ComprehensionTlv)>
<com.android.server.sip.SipService$ConnectivityReceiver: void <init>(com.android.server.sip.SipService,com.android.server.sip.SipService$1)>
<android.net.wifi.WifiStateMachine: com.android.internal.util.State access$8100(android.net.wifi.WifiStateMachine)>
<com.android.internal.os.BatteryStatsImpl$Uid$Wakelock: android.os.BatteryStats$Timer getWakeTime(int)>
<android.test.mock.MockContext: android.content.Context createPackageContext(java.lang.String,int)>
<android.view.View$13: void setValue(java.lang.Object,float)>
<android.widget.SearchView$7: void <init>(android.widget.SearchView)>
<Wrapper_android_net_UrlQuerySanitizer: void test_android_net_UrlQuerySanitizer()>
<android.renderscript.Matrix2f: void set(int,int,float)>
<com.android.server.am.ActivityManagerService: java.lang.String getPackageForIntentSender(android.content.IIntentSender)>
<android.os.RemoteCallback$DeliverResult: void <init>(android.os.RemoteCallback,android.os.Bundle)>
<android.opengl.GLSurfaceView: void setEGLConfigChooser(boolean)>
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.DataConnection getDataConnection()>
<android.net.INetworkStatsService$Stub: void <init>()>
<android.media.AudioService: void makeA2dpDeviceUnavailableLater(java.lang.String)>
<android.app.ApplicationPackageManager$ResourceName: java.lang.String toString()>
<android.content.Context: void registerComponentCallbacks(android.content.ComponentCallbacks)>
<android.widget.BaseAdapter: int getViewTypeCount()>
<android.net.wifi.WifiStateMachine: java.lang.String syncGetWifiStateByName()>
<com.android.server.connectivity.Tethering: com.android.internal.util.StateMachine access$400(com.android.server.connectivity.Tethering)>
<com.android.server.usb.UsbDeviceManager: java.lang.String addFunction(java.lang.String,java.lang.String)>
<android.app.ActivityThread$CreateBackupAgentData: void <init>()>
<Wrapper_android_graphics_ColorMatrixColorFilter: void test_android_graphics_ColorMatrixColorFilter()>
<com.android.internal.view.menu.ActionMenuPresenter$OpenOverflowRunnable: void <init>(com.android.internal.view.menu.ActionMenuPresenter,com.android.internal.view.menu.ActionMenuPresenter$OverflowPopup)>
<android.view.animation.Animation: void cancel()>
<android.content.res.AssetManager: android.content.res.XmlResourceParser openXmlResourceParser(int,java.lang.String)>
<android.view.View: boolean onFilterTouchEventForSecurity(android.view.MotionEvent)>
<android.opengl.GLU: void gluPerspective(javax.microedition.khronos.opengles.GL10,float,float,float,float)>
<android.content.pm.PackageStats$1: void <init>()>
<android.nfc.TechListParcel: int describeContents()>
<android.net.NetworkInfo: void setIsAvailable(boolean)>
<android.telephony.gsm.SmsMessage: java.lang.String getEmailBody()>
<android.widget.AdapterViewAnimator: void setOutAnimation(android.animation.ObjectAnimator)>
<android.graphics.PointF: void set(float,float)>
<android.app.Fragment: void onActivityCreated(android.os.Bundle)>
<android.os.BatteryStats$Uid$Pkg: void <init>()>
<com.android.server.pm.PackageManagerService: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()>
<com.android.server.BackupManagerService$PerformFullRestoreTask$RestoreDeleteObserver: void <init>(com.android.server.BackupManagerService$PerformFullRestoreTask)>
<Wrapper_android_opengl_GLES20: void test_android_opengl_GLES20()>
<android.app.Notification$Builder: android.app.Notification$Builder setContentText(java.lang.CharSequence)>
<android.content.BroadcastReceiver: void setResult(int,java.lang.String,android.os.Bundle)>
<android.app.backup.BackupDataOutput: void <init>(java.io.FileDescriptor)>
<android.widget.TextView: android.text.style.SuggestionRangeSpan access$2900(android.widget.TextView)>
<android.content.res.Resources: void <init>()>
<android.content.ContentProvider: void setReadPermission(java.lang.String)>
<com.android.server.InputMethodManagerService$InputMethodFileManager: void addInputMethodSubtypes(android.view.inputmethod.InputMethodInfo,android.view.inputmethod.InputMethodSubtype[])>
<android.renderscript.Int3: void <init>()>
<android.app.LoadedApk$ReceiverDispatcher: android.content.BroadcastReceiver getIntentReceiver()>
<com.android.server.am.ActivityManagerService$6: void <init>(com.android.server.am.ActivityManagerService)>
<android.webkit.WebViewCore: java.lang.String access$4600(android.webkit.WebViewCore,int,int)>
<com.android.internal.telephony.sip.SipPhone: android.telephony.CellLocation getCellLocation()>
<Wrapper_android_content_Entity: void test_android_content_Entity()>
<com.android.server.pm.PreferredActivity: void <init>(org.xmlpull.v1.XmlPullParser)>
<android.animation.LayoutTransition: java.util.HashMap access$000(android.animation.LayoutTransition)>
<android.view.ScaleGestureDetector: long getEventTime()>
<android.app.Activity: android.content.Intent getIntent()>
<android.webkit.LoadListener: android.net.WebAddress getWebAddress()>
<android.graphics.RectF: float width()>
<android.preference.GenericInflater: android.preference.GenericInflater$Parent onMergeRoots(android.preference.GenericInflater$Parent,boolean,android.preference.GenericInflater$Parent)>
<android.webkit.WebHistoryItem: java.lang.String getOriginalUrl()>
<android.webkit.BrowserFrame: void access$000(android.webkit.BrowserFrame,int,java.lang.String,java.lang.String)>
<com.android.internal.telephony.BaseCommands: void unSetOnNITZTime(android.os.Handler)>
<android.hardware.usb.UsbInterface$1: java.lang.Object[] newArray(int)>
<android.view.ViewConfiguration: int getScrollDefaultDelay()>
<GenerationGG: java.io.InputStream get_javaioInputStream()>
<android.content.AsyncTaskLoader: void setUpdateThrottle(long)>
<android.bluetooth.BluetoothDevice: void writeToParcel(android.os.Parcel,int)>
<android.net.rtp.RtpStream: void close()>
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call getCall()>
<android.widget.ExpandableListPosition: void resetState()>
<android.webkit.WebChromeClient: void onExceededDatabaseQuota(java.lang.String,java.lang.String,long,long,long,android.webkit.WebStorage$QuotaUpdater)>
<com.android.server.am.UsageStatsService: java.util.Map access$300(com.android.server.am.UsageStatsService)>
<android.util.Slog: int v(java.lang.String,java.lang.String)>
<android.app.Application: void onLowMemory()>
<android.animation.KeyframeSet: java.lang.String toString()>
<android.app.ActivityThread: void registerOnActivityPausedListener(android.app.Activity,android.app.OnActivityPausedListener)>
<com.android.internal.telephony.cat.CatCmdMessage$1: java.lang.Object[] newArray(int)>
<com.android.internal.os.PkgUsageStats$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.server.DropBoxManagerService$2: void <init>(com.android.server.DropBoxManagerService,android.os.Handler,android.content.Context)>
<android.webkit.ZoomManager: void updateZoomRange(android.webkit.WebViewCore$ViewState,int,int)>
<android.webkit.WebSettings: void setEnableSmoothTransition(boolean)>
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String get(java.lang.String,char)>
<android.content.res.CompatibilityInfo: void <init>(android.os.Parcel)>
<android.media.audiofx.Visualizer: android.media.audiofx.Visualizer$OnDataCaptureListener access$100(android.media.audiofx.Visualizer)>
<android.content.pm.PackageParser$Component: void <init>(android.content.pm.PackageParser$Component)>
<android.graphics.Point: void writeToParcel(android.os.Parcel,int)>
<android.app.Notification: void <init>()>
<com.android.server.pm.PackageManagerService$SdInstallArgs: void <init>(com.android.server.pm.PackageManagerService,android.net.Uri,java.lang.String)>
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuItemImpl findItemWithShortcutForKey(int,android.view.KeyEvent)>
<android.content.res.StringBlock$StyleIDs: int access$802(android.content.res.StringBlock$StyleIDs,int)>
<android.text.format.DateUtils: long getNumberOfDaysPassed(long,long)>
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: android.os.IBinder asBinder()>
<android.widget.Gallery: int access$400(android.widget.Gallery)>
<android.text.LoginFilter: void onInvalidCharacter(char)>
<com.android.internal.telephony.gsm.SIMRecords: int getDisplayRule(java.lang.String)>
<com.android.internal.textservice.ISpellCheckerSession$Stub: void <init>()>
<android.view.KeyEvent: boolean isPrintingKey()>
<GenerationGG: android.hardware.SensorManager get_androidhardwareSensorManager()>
<GenerationGG: java.lang.Exception get_javalangException()>
<android.gesture.GestureLibraries$FileGestureLibrary: boolean isReadOnly()>
<android.net.sip.SipAudioCall$1: void onRegistrationTimeout(android.net.sip.SipSession)>
<android.webkit.WebViewCore$EventHub: boolean access$802(android.webkit.WebViewCore$EventHub,boolean)>
<com.android.server.MountService: boolean isUsbMassStorageEnabled()>
<com.android.server.usb.UsbService: android.os.ParcelFileDescriptor openDevice(java.lang.String)>
<android.widget.GridLayout: void setAlignmentMode(int)>
<android.graphics.Matrix: int native_create(int)>
<android.webkit.WebViewCore$EventHub: void access$7900(android.webkit.WebViewCore$EventHub)>
<GenerationGG: android.content.DialogInterface$OnCancelListener get_androidcontentDialogInterface__OnCancelListener()>
<java.lang.Object: java.lang.String getText()>
<android.view.inputmethod.ExtractedText$1: android.view.inputmethod.ExtractedText[] newArray(int)>
<android.net.wifi.WifiWatchdogStateMachine: void access$5300(android.net.wifi.WifiWatchdogStateMachine,com.android.internal.util.IState)>
<android.app.FragmentManagerState$1: java.lang.Object[] newArray(int)>
<android.app.backup.BackupAgent: void fullBackupFile(java.io.File,android.app.backup.FullBackupDataOutput)>
<android.telephony.gsm.SmsMessage: byte[] getUserData()>
<android.webkit.WebView$3: void <init>(android.webkit.WebView,android.os.Message)>
<android.view.InputEvent$1: void <init>()>
<android.renderscript.RenderScript: void rsnAllocationData1D(int,int,int,int,int,short[],int)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor[] createPipe()>
<android.widget.NumberPicker$5: void <init>(android.widget.NumberPicker)>
<android.renderscript.RenderScript: void nContextDeinitToClient(int)>
<android.view.inputmethod.InputMethodInfo: int getIsDefaultResourceId()>
<com.android.internal.statusbar.IStatusBarService$Stub: com.android.internal.statusbar.IStatusBarService asInterface(android.os.IBinder)>
<android.animation.LayoutTransition: void <init>()>
<com.android.server.WifiService: boolean access$2200(com.android.server.WifiService)>
<Wrapper_android_os_WorkSource: void test_android_os_WorkSource()>
<GenerationGG: android.text.style.UnderlineSpan get_androidtextstyleUnderlineSpan()>
<android.graphics.Matrix$ScaleToFit: void <init>(java.lang.String,int,int)>
<com.android.server.InputMethodManagerService: java.util.ArrayList getOverridingImplicitlyEnabledSubtypes(android.view.inputmethod.InputMethodInfo,java.lang.String)>
<DumbClass: void DumbMethod31()>
<android.widget.HorizontalScrollView: int computeScrollDeltaToGetChildRectOnScreen(android.graphics.Rect)>
<android.view.animation.Animation: int getBackgroundColor()>
<android.content.SyncStats: void <init>(android.os.Parcel)>
<com.android.internal.telephony.cdma.sms.BearerData: byte[] encode7bitAscii(java.lang.String,boolean)>
<com.android.server.usb.UsbDeviceManager: boolean access$1102(com.android.server.usb.UsbDeviceManager,boolean)>
<android.net.wifi.WifiStateTracker: android.net.LinkCapabilities access$302(android.net.wifi.WifiStateTracker,android.net.LinkCapabilities)>
<android.widget.AutoCompleteTextView: int getDropDownHorizontalOffset()>
<GenerationGG: android.widget.TimePicker$OnTimeChangedListener get_androidwidgetTimePicker__OnTimeChangedListener()>
<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>
<com.android.internal.telephony.sip.SipCommandInterface: void hangupForegroundResumeBackground(android.os.Message)>
<com.android.server.location.GpsLocationProvider: boolean hasCapability(int)>
<android.webkit.FindActionModeCallback: void beforeTextChanged(java.lang.CharSequence,int,int,int)>
<com.android.internal.telephony.cdma.CdmaCall: boolean update(com.android.internal.telephony.cdma.CdmaConnection,com.android.internal.telephony.DriverCall)>
<android.content.pm.PackageParser$IntentInfo: void <init>()>
<android.widget.VideoView: void onMeasure(int,int)>
<android.view.Surface: void setMatrix(float,float,float,float)>
<com.android.internal.view.menu.ActionMenuPresenter: void setItemLimit(int)>
<android.view.View$MeasureSpec: int makeMeasureSpec(int,int)>
<android.widget.AbsListView: void recycleVelocityTracker()>
<android.content.res.CompatibilityInfo: boolean supportsScreen()>
<android.graphics.Bitmap: void checkPixelsAccess(int,int,int,int,int,int,int[])>
<android.test.mock.MockContext: android.content.res.Resources$Theme getTheme()>
<Wrapper_android_graphics_ComposeShader: void test_android_graphics_ComposeShader()>
<android.widget.Spinner: void setGravity(int)>
<android.view.KeyEvent: android.view.KeyEvent changeFlags(android.view.KeyEvent,int)>
<android.util.SparseArray: int indexOfKey(int)>
<com.android.internal.telephony.IntRangeManager$ClientRange: boolean equals(java.lang.Object)>
<android.view.GLES20Canvas: void nDrawBitmapMesh(int,int,byte[],int,int,float[],int,int[],int,int)>
<android.webkit.WebView$InvokeListBox$MyArrayListAdapter: boolean hasStableIds()>
<com.android.internal.telephony.gsm.GsmConnection: int getNumberPresentation()>
<android.test.NoExecTestResult: void <init>()>
<android.widget.SearchView: void setImeOptions(int)>
<com.android.i18n.phonenumbers.geocoding.FlyweightMapStorage: int getPrefix(int)>
<android.media.RingtoneManager: void <init>(android.app.Activity)>
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setCheckable(boolean)>
<android.net.LocalSocketImpl: int access$400(android.net.LocalSocketImpl,byte[],int,int,java.io.FileDescriptor)>
<android.view.View: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.content.Entity: android.content.ContentValues getEntityValues()>
<android.app.Fragment: void onLowMemory()>
<com.android.internal.widget.ActionBarView: boolean isCollapsed()>
<android.gesture.GestureOverlayView: android.graphics.Path getGesturePath()>
<android.media.CamcorderProfile: android.media.CamcorderProfile native_get_camcorder_profile(int,int)>
<android.test.AndroidTestRunner: void setPerformanceResultsWriter(android.os.PerformanceCollector$PerformanceResultsWriter)>
<android.view.GLES20RecordingCanvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.Rect,android.graphics.Paint)>
<com.android.server.ThrottleService: android.app.Notification access$2000(com.android.server.ThrottleService)>
<GenerationGG: android.text.method.DateKeyListener get_androidtextmethodDateKeyListener()>
<android.widget.CursorTreeAdapter$MyCursorHelper$MyDataSetObserver: void onInvalidated()>
<android.os.Build$VERSION: void <clinit>()>
<android.bluetooth.BluetoothHealthAppConfiguration: int describeContents()>
<com.android.server.wm.WindowState: void setInputChannel(android.view.InputChannel)>
<android.webkit.BrowserFrame: void nativeCreateFrame(android.webkit.WebViewCore,android.content.res.AssetManager,android.webkit.WebBackForwardList)>
<android.os.Handler: android.os.Message obtainMessage(int,int,int)>
<android.media.MediaRecorder: void setAudioEncodingBitRate(int)>
<android.app.ProgressDialog: void setIndeterminate(boolean)>
<android.text.method.DialerKeyListener: android.text.method.DialerKeyListener getInstance()>
<android.graphics.Paint: android.graphics.MaskFilter setMaskFilter(android.graphics.MaskFilter)>
<com.android.internal.telephony.cat.IconLoader: android.graphics.Bitmap parseToRGB(byte[],int,boolean,byte[])>
<android.widget.ActivityChooserView$2: void <init>(android.widget.ActivityChooserView)>
<android.widget.ListPopupWindow$PopupTouchInterceptor: void <init>(android.widget.ListPopupWindow)>
<android.view.GLES20Canvas: void drawRGB(int,int,int)>
<android.net.wifi.WifiStateMachine: void access$12400(android.net.wifi.WifiStateMachine,java.lang.String)>
<android.inputmethodservice.KeyboardView$SwipeTracker: void addMovement(android.view.MotionEvent)>
<com.android.internal.view.menu.MenuItemImpl: android.view.SubMenu getSubMenu()>
<com.android.internal.os.BatteryStatsImpl$Uid: int getUserActivityCount(int,int)>
<android.database.sqlite.SQLiteFullException: void <init>()>
<android.widget.SearchView: java.lang.CharSequence getQuery()>
<com.android.server.location.GpsLocationProvider: boolean native_stop()>
<com.android.internal.location.DummyLocationProvider: int getPowerRequirement()>
<GenerationGG: android.app.ActivityGroup get_androidappActivityGroup()>
<android.telephony.gsm.SmsMessage: int[] calculateLength(java.lang.String,boolean)>
<android.text.AutoText: char newTrieNode()>
<com.android.internal.telephony.IccCard: void dispose()>
<android.animation.AnimatorSet: android.animation.Animator setDuration(long)>
<android.graphics.NinePatch: void setPaint(android.graphics.Paint)>
<com.android.internal.view.menu.MenuBuilder: android.content.res.Resources getResources()>
<android.net.wifi.WifiConfigStore: android.net.DhcpInfoInternal getIpConfiguration(int)>
<android.bluetooth.BluetoothDeviceProfileState: void access$2300(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.IState)>
<GenerationGG: android.graphics.drawable.DrawableContainer get_androidgraphicsdrawableDrawableContainer()>
<android.appwidget.AppWidgetHostView$Padding: void <init>()>
<android.os.MemoryFile: int readBytes(byte[],int,int,int)>
<com.android.server.wm.InputManager: int injectInputEvent(android.view.InputEvent,int,int,int,int)>
<android.webkit.WebView: boolean extendScroll(int)>
<com.android.internal.telephony.cdma.CdmaConnection: long getConnectTime()>
<android.text.method.DateKeyListener: android.text.method.DateKeyListener getInstance()>
<android.app.Dialog: boolean onKeyLongPress(int,android.view.KeyEvent)>
<android.media.AudioManager: void setMicrophoneMute(boolean)>
<android.graphics.Canvas: boolean quickReject(android.graphics.Path,android.graphics.Canvas$EdgeType)>
<android.view.InputEventConsistencyVerifier: void onTouchEvent(android.view.MotionEvent,int)>
<android.renderscript.Element: android.renderscript.Element U32_4(android.renderscript.RenderScript)>
<Wrapper_android_bluetooth_BluetoothHealthCallback: void test_android_bluetooth_BluetoothHealthCallback()>
<android.view.GLES20RecordingCanvas$1: android.util.Poolable newInstance()>
<android.text.LoginFilter$PasswordFilterGMail: boolean isAllowed(char)>
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: void finalize()>
<android.graphics.Matrix: boolean invert(android.graphics.Matrix)>
<android.graphics.Matrix: boolean preRotate(float)>
<android.app.Activity: void <init>()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getAmpAndSpaceLegal()>
<android.service.wallpaper.IWallpaperService$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.internal.telephony.cdma.EriManager: boolean isEriFileLoaded()>
<android.test.suitebuilder.TestSuiteBuilder: java.lang.String parsePackageNameFromClassName(java.lang.String)>
<android.hardware.SensorManager$LegacyListener: void mapSensorDataToWindow(int,float[],int)>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()>
<android.test.AndroidTestRunner: void clearTestListeners()>
<android.speech.tts.AudioPlaybackHandler: void removeAllItems()>
<android.widget.ListView: int amountToScrollToNewFocus(int,android.view.View,int)>
<android.view.ViewGroup: boolean resetCancelNextUpFlag(android.view.View)>
<android.view.ViewGroup: void requestTransparentRegion(android.view.View)>
<android.inputmethodservice.Keyboard: boolean isShifted()>
<com.android.internal.telephony.AdnRecord: void <clinit>()>
<android.app.SearchableInfo: android.content.ComponentName getSearchActivity()>
<android.widget.ActivityChooserModel$HistoryLoader: void <init>(android.widget.ActivityChooserModel)>
<com.android.internal.telephony.cdma.CdmaConnection: int getNumberPresentation()>
<android.widget.RemoteViews: void setImageViewBitmap(int,android.graphics.Bitmap)>
<android.util.LruCache: java.lang.String toString()>
<com.android.server.usb.UsbDeviceManager: boolean access$400(java.lang.String,java.lang.String)>
<android.widget.GridLayout$Axis: void setParentConstraints(int,int)>
<GenerationGG: android.text.method.DateTimeKeyListener get_androidtextmethodDateTimeKeyListener()>
<android.webkit.WebHistoryItem: void inflate(int)>
<android.net.WebAddress: java.lang.String getHost()>
<com.android.server.ThrottleService$DataRecorder: long getPeriodRx(int)>
<android.speech.tts.TextToSpeech: int addEarcon(java.lang.String,java.lang.String,int)>
<android.widget.Toast$TN: void hide()>
<android.app.FragmentBreadCrumbs: void setOnBreadCrumbClickListener(android.app.FragmentBreadCrumbs$OnBreadCrumbClickListener)>
<android.opengl.ETC1Util: void writeTexture(android.opengl.ETC1Util$ETC1Texture,java.io.OutputStream)>
<android.content.BroadcastReceiver$PendingResult: android.os.Bundle getResultExtras(boolean)>
<junit.framework.TestCase: void assertEquals(int,int)>
<com.android.internal.os.BatteryStatsImpl$Timer: void writeSummaryFromParcelLocked(android.os.Parcel,long)>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: void startSessionTimer(int)>
<android.view.GLES20Canvas: int setupModifiers(android.graphics.Bitmap,android.graphics.Paint)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setTitle(java.lang.CharSequence)>
<android.view.View$11: void setValue(android.view.View,float)>
<com.android.server.am.ContentProviderRecord: boolean canRunHere(com.android.server.am.ProcessRecord)>
<com.android.server.BackupManagerService: void agentDisconnected(java.lang.String)>
<android.renderscript.FieldPacker: void addF64(double)>
<android.media.JetPlayer: boolean native_loadJetFromFileD(java.io.FileDescriptor,long,long)>
<com.android.server.am.UriPermissionOwner: void addWritePermission(com.android.server.am.UriPermission)>
<android.view.ViewRootImpl$AccessibilityInteractionController$1: void <init>(android.view.ViewRootImpl$AccessibilityInteractionController)>
<android.filterfw.core.Filter: void close(android.filterfw.core.FilterContext)>
<android.os.storage.IMountShutdownObserver$Stub: android.os.IBinder asBinder()>
<com.android.server.wm.WindowManagerService: int getRotation()>
<android.text.StaticLayout: int out(java.lang.CharSequence,int,int,int,int,int,int,int,float,float,android.text.style.LineHeightSpan[],int[],android.graphics.Paint$FontMetricsInt,boolean,boolean,int,byte[],int,boolean,boolean,boolean,boolean,char[],float[],int,android.text.TextUtils$TruncateAt,float,float,android.text.TextPaint,boolean)>
<android.renderscript.Float2: void <init>()>
<android.widget.GridLayout$Axis: boolean relax(int[],android.widget.GridLayout$Arc)>
<android.view.MenuInflater$InflatedOnMenuItemClickListener: void <init>(android.content.Context,java.lang.String)>
<android.view.animation.TranslateAnimation: void <init>(int,float,int,float,int,float,int,float)>
<android.graphics.drawable.ColorDrawable$ColorState: int getChangingConfigurations()>
<android.webkit.WebView$PrivateHandler: void <init>(android.webkit.WebView)>
<GenerationGG: android.view.View$OnFocusChangeListener get_androidviewView__OnFocusChangeListener()>
<android.app.backup.FullBackup: int backupToTar(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,android.app.backup.BackupDataOutput)>
<android.view.ViewRootImpl: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>
<android.view.ViewRootImpl: void finishInputEvent(android.view.InputEvent,boolean)>
<android.database.DatabaseUtils: java.lang.String[] appendSelectionArgs(java.lang.String[],java.lang.String[])>
<android.view.View: void removeOnLayoutChangeListener(android.view.View$OnLayoutChangeListener)>
<android.view.inputmethod.InputMethodSubtype: boolean overridesImplicitlyEnabledSubtype()>
<com.android.internal.statusbar.StatusBarIconList: int getSlotIndex(java.lang.String)>
<com.android.internal.telephony.cdma.CdmaCall: com.android.internal.telephony.Call$State stateFromDCState(com.android.internal.telephony.DriverCall$State)>
<android.hardware.SensorManager: float[] getOrientation(float[],float[])>
<android.content.res.AssetManager: void <clinit>()>
<android.graphics.drawable.ClipDrawable: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.graphics.Color: void <clinit>()>
<android.widget.CalendarView$ScrollStateRunnable: void <init>(android.widget.CalendarView)>
<android.bluetooth.BluetoothProfileState: void access$400(android.bluetooth.BluetoothProfileState,java.lang.String)>
<android.widget.ExpandableListView: int getPackedPositionChild(long)>
<android.view.View: void setPivotX(float)>
<android.appwidget.AppWidgetHost$Callbacks: void viewDataChanged(int,int)>
<android.bluetooth.BluetoothDeviceProfileState: void access$3200(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.IState)>
<com.android.internal.telephony.cdma.SmsMessage: byte[] getIncomingSmsFingerprint()>
<android.widget.AbsListView$MultiChoiceModeWrapper: boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem)>
<GenerationGG: android.location.LocationManager get_androidlocationLocationManager()>
<com.android.internal.view.BaseIWindow: void dispatchDragEvent(android.view.DragEvent)>
<android.gesture.GestureOverlayView: void removeAllOnGesturePerformedListeners()>
<android.content.Intent: void <init>(android.content.Intent)>
<android.app.LoadedApk$ServiceDispatcher: android.content.ServiceConnection getServiceConnection()>
<android.opengl.ETC1: int getEncodedDataSize(int,int)>
<com.android.internal.telephony.BaseCommands: void setOnSuppServiceNotification(android.os.Handler,int,java.lang.Object)>
<android.app.Activity: void onAttachedToWindow()>
<android.widget.AbsSpinner: int getChildWidth(android.view.View)>
<android.media.MediaPlayer: int getCurrentPosition()>
<android.telephony.PhoneStateListener: void onCellLocationChanged(android.telephony.CellLocation)>
<android.app.backup.BackupHelperDispatcher: int readHeader_native(android.app.backup.BackupHelperDispatcher$Header,java.io.FileDescriptor)>
<android.webkit.WebView: int computeMaxScrollX()>
<android.net.wifi.p2p.IWifiP2pManager$Stub: android.net.wifi.p2p.IWifiP2pManager asInterface(android.os.IBinder)>
<com.android.internal.os.PkgUsageStats: void writeToParcel(android.os.Parcel,int)>
<android.app.ListFragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.ArrayList access$300(com.android.internal.telephony.cdma.RuimSmsInterfaceManager,java.util.ArrayList)>
<android.test.RenamingDelegatingContext: java.lang.String[] databaseList()>
<android.media.audiofx.AudioEffect: int getParameter(int[],short[])>
<android.util.MonthDisplayHelper: int getFirstDayOfMonth()>
<android.view.ViewPropertyAnimator: long getDuration()>
<android.text.Layout: void access$000(android.text.Layout,int,int,int,char[],int)>
<android.drm.DrmManagerClient: int removeRights(java.lang.String)>
<Wrapper_android_test_suitebuilder_annotation_MediumTest: void test_android_test_suitebuilder_annotation_MediumTest()>
<com.android.internal.view.BaseSurfaceHolder: int getRequestedWidth()>
<android.provider.Settings$SettingNotFoundException: void <init>(java.lang.String)>
<android.renderscript.FieldPacker: void addU8(short)>
<android.widget.RemoteViews: void setImageViewUri(int,android.net.Uri)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState: void enter()>
<android.view.VolumePanel$StreamControl: void <init>(android.view.VolumePanel,android.view.VolumePanel$1)>
<android.gesture.Gesture: int describeContents()>
<android.location.ILocationManager$Stub$Proxy: void <init>(android.os.IBinder)>
<android.renderscript.Allocation: void copyFromUnchecked(byte[])>
<GenerationGG: android.widget.Checkable get_androidwidgetCheckable()>
<android.content.Intent: void <init>(android.content.Intent,boolean)>
<android.widget.AutoCompleteTextView: boolean isPopupShowing()>
<android.net.wifi.WifiConfiguration$AuthAlgorithm: void <clinit>()>
<android.text.TextUtils$SimpleStringSplitter: void <init>(char)>
<com.android.server.am.ActivityManagerService: boolean checkAppInLaunchingProvidersLocked(com.android.server.am.ProcessRecord,boolean)>
<android.media.AudioManager: boolean isValidRingerMode(int)>
<com.android.internal.telephony.IccCard: void access$300(com.android.internal.telephony.IccCard,android.os.AsyncResult)>
<android.content.SyncAdapterType: void writeToParcel(android.os.Parcel,int)>
<android.server.BluetoothService: java.lang.String registerHealthApplicationNative(int,java.lang.String,java.lang.String,java.lang.String)>
<android.opengl.GLUtils: void texImage2D(int,int,int,android.graphics.Bitmap,int)>
<android.app.ActivityThread$UpdateCompatibilityData: void <init>()>
<android.webkit.ZoomManager: void setZoomCenter(float,float)>
<android.widget.PopupWindow: boolean isShowing()>
<android.webkit.CookieManager$Cookie: boolean exactMatch(android.webkit.CookieManager$Cookie)>
<android.view.animation.LayoutAnimationController: void setInterpolator(android.view.animation.Interpolator)>
<android.widget.LinearLayout: int getVirtualChildCount()>
<com.android.server.wm.InputManager$InputFilterHost: void <init>(com.android.server.wm.InputManager)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofKeyframe(android.util.Property,android.animation.Keyframe[])>
<android.graphics.Bitmap: android.graphics.Bitmap nativeCreateFromParcel(android.os.Parcel)>
<android.graphics.Rect: java.lang.String toShortString()>
<android.os.storage.StorageVolume: boolean isEmulated()>
<com.android.server.ConnectivityService: java.util.HashSet access$600(com.android.server.ConnectivityService)>
<android.accessibilityservice.AccessibilityServiceInfo: android.content.pm.ResolveInfo getResolveInfo()>
<android.mtp.MtpDeviceInfo: java.lang.String getSerialNumber()>
<GenerationGG: android.accounts.AuthenticatorDescription get_androidaccountsAuthenticatorDescription()>
<android.graphics.Canvas: void drawTextRun(char[],int,int,int,int,float,float,int,android.graphics.Paint)>
<android.text.style.AbsoluteSizeSpan: int getSize()>
<android.app.ApplicationErrorReport: int describeContents()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$2: void <init>(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,android.widget.EditText)>
<android.widget.CompoundButton$SavedState: java.lang.String toString()>
<android.opengl.GLES11Ext: void <init>()>
<com.android.internal.view.menu.ActionMenuPresenter: android.view.View findViewForItem(android.view.MenuItem)>
<android.text.BoringLayout: int getEllipsisCount(int)>
<com.android.internal.telephony.cat.GetInkeyInputResponseData: void <init>(java.lang.String,boolean,boolean)>
<com.android.server.pm.PackageManagerService: int checkPermission(java.lang.String,java.lang.String)>
<android.test.mock.MockResources: android.util.DisplayMetrics getDisplayMetrics()>
<Wrapper_android_graphics_NinePatch: void test_android_graphics_NinePatch()>
<android.widget.AbsListView: android.os.StrictMode$Span access$1300(android.widget.AbsListView)>
<android.util.SparseArray: void clear()>
<com.android.internal.telephony.DataConnection$DcActiveState: void exit()>
<android.nfc.NdefRecord$1: void <init>()>
<android.text.TextDirectionHeuristics$TriState: void <init>(java.lang.String,int)>
<Wrapper_android_graphics_SurfaceTexture: void test_android_graphics_SurfaceTexture()>
<android.text.format.Time: int getWeeksSinceEpochFromJulianDay(int,int)>
<Wrapper_android_opengl_GLDebugHelper: void test_android_opengl_GLDebugHelper()>
<android.widget.ListView: int getMaxScrollAmount()>
<GenerationGG: android.app.LocalActivityManager get_androidappLocalActivityManager()>
<com.android.internal.app.ShutdownThread: void actionDone()>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.internal.util.State access$1600(com.android.server.connectivity.Tethering$TetherInterfaceSM)>
<com.android.internal.telephony.BaseCommands: void unregisterForOffOrNotAvailable(android.os.Handler)>
<com.android.server.wm.WindowManagerService: void getRealDisplaySize(android.graphics.Point)>
<android.preference.RingtonePreference: boolean getShowDefault()>
<android.widget.SimpleExpandableListAdapter: long getChildId(int,int)>
<android.view.Surface$CompatibleCanvas: void setMatrix(android.graphics.Matrix)>
<android.location.ICountryDetector$Stub: android.os.IBinder asBinder()>
<android.os.Parcel: void writeStrongInterface(android.os.IInterface)>
<android.view.SurfaceView: void setZOrderOnTop(boolean)>
<android.view.ContextThemeWrapper: android.content.res.Resources$Theme getTheme()>
<com.android.server.am.ActivityManagerService: void killApplicationWithUid(java.lang.String,int)>
<android.speech.tts.TextToSpeechService$SynthHandler: boolean isSpeaking()>
<android.app.ActivityThread$ApplicationThread: void scheduleWindowVisibility(android.os.IBinder,boolean)>
<android.view.VolumePanel: void access$100(android.view.VolumePanel)>
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener)>
<android.widget.DatePicker: int getMonth()>
<android.graphics.Paint: void native_setStrokeJoin(int,int)>
<android.drm.DrmRights: void <init>(java.io.File,java.lang.String)>
<android.hardware.usb.UsbAccessory$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.view.animation.GridLayoutAnimationController: void setDirectionPriority(int)>
<android.net.wifi.WifiStateMachine: boolean access$400(android.net.wifi.WifiStateMachine)>
<com.android.server.usb.UsbHostManager: android.os.ParcelFileDescriptor openDevice(java.lang.String)>
<android.graphics.drawable.AnimationDrawable: boolean isRunning()>
<com.android.server.sip.SipSessionListenerProxy: void onCallEnded(android.net.sip.ISipSession)>
<android.test.mock.MockContext: android.content.ComponentName startService(android.content.Intent)>
<android.animation.LayoutTransition: long access$500(android.animation.LayoutTransition)>
<com.android.server.LightsService$Light: void setFlashing(int,int,int,int)>
<android.content.pm.IPackageStatsObserver$Stub$Proxy: void <init>(android.os.IBinder)>
<android.gesture.GestureOverlayView: int getUncertainGestureColor()>
<com.android.server.DevicePolicyManagerService$MyPackageMonitor: void <init>(com.android.server.DevicePolicyManagerService)>
<android.widget.TextView: void setLinksClickable(boolean)>
<android.view.View: android.view.View findViewTraversal(int)>
<android.appwidget.AppWidgetHost$Callbacks: void updateAppWidget(int,android.widget.RemoteViews)>
<com.android.internal.view.IInputMethodSession$Stub: android.os.IBinder asBinder()>
<android.preference.PreferenceGroup: void setOrderingAsAdded(boolean)>
<android.os.PowerManager: void <init>(android.os.IPowerManager,android.os.Handler)>
<android.app.ActivityManager$RunningServiceInfo$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.text.TextUtils: int getOffsetBefore(java.lang.CharSequence,int)>
<android.widget.TableRow: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<com.android.server.pm.PackageManagerService: int performDexOptLI(android.content.pm.PackageParser$Package,boolean,boolean)>
<Wrapper_android_net_NetworkInfo: void test_android_net_NetworkInfo()>
<android.view.ViewTreeObserver: void removeOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>
<android.view.MotionEvent: float getX(int)>
<android.graphics.PorterDuff$Mode: android.graphics.PorterDuff$Mode valueOf(java.lang.String)>
<android.app.Notification$Builder: android.app.Notification$Builder setLargeIcon(android.graphics.Bitmap)>
<android.net.rtp.AudioCodec: android.net.rtp.AudioCodec[] getCodecs()>
<android.security.KeyChain: void <init>()>
<android.text.util.Rfc822Token: java.lang.String getComment()>
<android.net.wifi.p2p.WifiP2pInfo: void <init>(android.net.wifi.p2p.WifiP2pInfo)>
<com.android.server.accessibility.AccessibilityManagerService: int access$1108()>
<android.app.SearchableInfo: void <init>(android.os.Parcel)>
<android.server.BluetoothService: boolean updateCountersAndCheckForConnectionStateChange(int,int)>
<android.location.Address: boolean access$1300(android.location.Address)>
<android.nfc.NfcAdapter$1: void <init>(android.nfc.NfcAdapter)>
<android.test.IsolatedContext$MockAccountManager: android.accounts.Account[] getAccounts()>
<android.os.SystemProperties: boolean getBoolean(java.lang.String,boolean)>
<android.net.wifi.WifiStateMachine: int access$4002(android.net.wifi.WifiStateMachine,int)>
<GenerationGG: android.net.wifi.WifiConfiguration get_androidnetwifiWifiConfiguration()>
<com.android.server.wm.WindowManagerService: void setInputMethodAnimLayerAdjustment(int)>
<com.android.server.location.GpsLocationProvider: java.lang.String getInternalState()>
<android.app.Dialog: boolean isShowing()>
<android.os.StatFs: int getBlockCount()>
<android.widget.ZoomButtonsController$1: void onReceive(android.content.Context,android.content.Intent)>
<com.android.internal.telephony.gsm.GsmCall: com.android.internal.telephony.Call$State stateFromDCState(com.android.internal.telephony.DriverCall$State)>
<android.view.GestureDetector$SimpleOnGestureListener: boolean onSingleTapConfirmed(android.view.MotionEvent)>
<android.content.SyncStats: java.lang.String toString()>
<android.os.BatteryStats$Uid$Pid: void <init>(android.os.BatteryStats$Uid)>
<android.webkit.CookieManager: void nativeSetCookie(java.lang.String,java.lang.String,boolean)>
<com.android.server.net.NetworkPolicyManagerService$8: void <init>(com.android.server.net.NetworkPolicyManagerService)>
<com.android.server.wm.WindowManagerService: boolean injectTrackballEvent(android.view.MotionEvent,boolean)>
<android.net.ConnectivityManager: void <init>(android.net.IConnectivityManager)>
<com.android.server.am.UsageStatsService$TimeStats: void <init>(android.os.Parcel)>
<android.util.DebugUtils: void buildShortClassTag(java.lang.Object,java.lang.StringBuilder)>
<android.view.ViewDebug: void stopRecyclerTracing()>
<com.android.internal.telephony.BaseCommands: void unregisterForRadioStateChanged(android.os.Handler)>
<android.bluetooth.BluetoothAdapter$RfcommChannelPicker: int nextChannel()>
<android.bluetooth.BluetoothAdapter: android.bluetooth.IBluetooth access$000(android.bluetooth.BluetoothAdapter)>
<android.app.ContextImpl: java.io.FileOutputStream openFileOutput(java.lang.String,int)>
<android.inputmethodservice.KeyboardView$1: void <init>(android.inputmethodservice.KeyboardView)>
<android.content.pm.IPackageDataObserver$Stub$Proxy: void <init>(android.os.IBinder)>
<android.speech.SpeechRecognizer: android.os.Handler access$700(android.speech.SpeechRecognizer)>
<com.android.server.AlarmManagerService$ClockReceiver: void onReceive(android.content.Context,android.content.Intent)>
<android.net.Uri: void <clinit>()>
<com.android.internal.util.AsyncChannel: void disconnected()>
<GenerationGG: android.content.AsyncQueryHandler get_androidcontentAsyncQueryHandler()>
<com.android.internal.telephony.cdma.CdmaCallTracker: void internalClearDisconnected()>
<android.webkit.WebIconDatabase$EventHandler: boolean hasHandler()>
<Wrapper_android_util_PrintStreamPrinter: void test_android_util_PrintStreamPrinter()>
<android.drm.DrmManagerClient: void <clinit>()>
<android.media.MediaMetadataRetriever: byte[] getEmbeddedPicture()>
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: android.animation.PropertyValuesHolder$FloatPropertyValuesHolder clone()>
<com.android.server.pm.Settings: void dumpSharedUsersLPr(java.io.PrintWriter,java.lang.String,com.android.server.pm.PackageManagerService$DumpState)>
<android.webkit.WebSettings: void setBlockNetworkImage(boolean)>
<com.android.server.wm.BlackFrame: void setMatrix(android.graphics.Matrix)>
<android.view.ViewGroup: boolean isAnimationCacheEnabled()>
<android.webkit.HTML5VideoView: boolean getPauseDuringPreparing()>
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void dispose()>
<java.lang.Object: boolean isFirst()>
<android.view.animation.ScaleAnimation: void applyTransformation(float,android.view.animation.Transformation)>
<android.util.JsonWriter: android.util.JsonWriter value(java.lang.String)>
<android.widget.DatePicker: android.widget.NumberPicker access$400(android.widget.DatePicker)>
<android.view.GLES20Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint,int)>
<android.widget.GridLayout: int getDefaultMargin(android.view.View,boolean,boolean)>
<android.database.CursorWrapper: void registerDataSetObserver(android.database.DataSetObserver)>
<android.widget.DialerFilter: int getMode()>
<android.widget.TableLayout: void setColumnShrinkable(int,boolean)>
<android.content.SyncStorageEngine: android.os.Bundle unflattenBundle(byte[])>
<android.webkit.WebView: void revealSelection()>
<android.speech.tts.TextToSpeech$EngineInfo: void <init>()>
<android.os.Binder: boolean pingBinder()>
<android.os.storage.StorageManager$StorageEvent: android.os.Message getMessage()>
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int,android.database.DatabaseErrorHandler)>
<android.view.ViewRootImpl$AccessibilityInteractionController: void findAccessibilityNodeInfoByAccessibilityIdClientThread(int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,long)>
<android.content.ClipboardManager$1: void <init>(android.content.ClipboardManager)>
<android.text.method.PasswordTransformationMethod: android.text.method.PasswordTransformationMethod getInstance()>
<android.opengl.GLES10: void glGetIntegerv(int,int[],int)>
<android.webkit.MimeTypeMap: boolean hasExtension(java.lang.String)>
<com.android.internal.telephony.DataConnection$DcActivatingState: void <init>(com.android.internal.telephony.DataConnection,com.android.internal.telephony.DataConnection$1)>
<android.net.LocalSocketImpl: void bind(android.net.LocalSocketAddress)>
<com.android.internal.telephony.WspTypeDecoder: boolean decodeUintvarInteger(int)>
<com.android.internal.http.HttpDateTime: long parse(java.lang.String)>
<android.view.ViewGroup$HoverTarget: void <clinit>()>
<android.net.wifi.p2p.WifiP2pGroup: boolean removeClient(java.lang.String)>
<android.app.Fragment$InstantiationException: void <init>(java.lang.String,java.lang.Exception)>
<android.widget.GridLayout: int getMargin(android.view.View,boolean,boolean)>
<android.preference.Preference: int getLayoutResource()>
<android.net.wifi.WifiStateMachine: void access$11600(android.net.wifi.WifiStateMachine,android.os.Message)>
<android.widget.ListView$ArrowScrollFocusResult: void <init>()>
<Wrapper_android_provider_Settings: void test_android_provider_Settings()>
<android.widget.OverScroller$SplineOverScroller: void notifyEdgeReached(int,int,int)>
<GenerationGG: android.accounts.OperationCanceledException get_androidaccountsOperationCanceledException()>
<com.android.internal.telephony.IccCard: com.android.internal.telephony.IccCard$State getState()>
<android.util.SparseIntArray: int indexOfKey(int)>
<com.android.internal.telephony.SmsRawData$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.net.MobileDataStateTracker: android.net.LinkCapabilities access$802(android.net.MobileDataStateTracker,android.net.LinkCapabilities)>
<android.server.BluetoothAdapterStateMachine: void access$6100(android.server.BluetoothAdapterStateMachine,int)>
<android.widget.SpellChecker$SpellParser: void <init>(android.widget.SpellChecker,android.widget.SpellChecker$1)>
<android.telephony.gsm.SmsManager: void <init>()>
<android.content.SyncManager: void access$3200(android.content.SyncManager)>
<android.graphics.Paint: int getTextWidths(char[],int,int,float[])>
<android.app.admin.DeviceAdminInfo: java.lang.String getReceiverName()>
<android.app.AlertDialog: android.widget.Button getButton(int)>
<android.os.WorkSource$1: android.os.WorkSource createFromParcel(android.os.Parcel)>
<android.text.LoginFilter: void onStop()>
<com.android.server.PowerManagerService: android.os.Handler access$4000(com.android.server.PowerManagerService)>
<com.android.server.am.StrictModeViolationDialog$1: void handleMessage(android.os.Message)>
<android.bluetooth.BluetoothHealthAppConfiguration: int getDataType()>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: void setListener(android.net.sip.ISipSessionListener)>
<android.util.Patterns: java.lang.String digitsAndPlusOnly(java.util.regex.Matcher)>
<android.speech.tts.TextToSpeechService$SpeechItem: void <init>(android.speech.tts.TextToSpeechService,java.lang.String,android.os.Bundle)>
<android.bluetooth.BluetoothAdapter$RfcommChannelPicker: void <init>(java.util.UUID)>
<android.hardware.SensorManager$LegacyListener: void onAccuracyChanged(android.hardware.Sensor,int)>
<GenerationGG: android.app.AlarmManager get_androidappAlarmManager()>
<android.widget.ProgressBar: android.graphics.drawable.shapes.Shape getDrawableShape()>
<DumbClass: void DumbMethod39()>
<android.net.http.AndroidHttpClientConnection: int getRemotePort()>
<android.webkit.WebViewCore: void nativeDumpV8Counters()>
<com.android.server.AlarmManagerService: int addAlarmLocked(com.android.server.AlarmManagerService$Alarm)>
<android.security.Credentials: void <init>()>
<android.speech.SpeechRecognizer: void setRecognitionListener(android.speech.RecognitionListener)>
<android.net.http.AndroidHttpClientConnection: boolean isOpen()>
<android.accounts.AccountManagerService: android.content.Context access$600(android.accounts.AccountManagerService)>
<com.android.i18n.phonenumbers.AsYouTypeFormatter: java.lang.String inputDigit(char)>
<android.service.wallpaper.WallpaperService$Engine$2: void onUpdateSurface()>
<android.widget.OverScroller: void fling(int,int,int,int,int,int,int,int)>
<android.view.View: void setOnKeyListener(android.view.View$OnKeyListener)>
<android.hardware.usb.UsbDevice: void <init>(java.lang.String,int,int,int,int,int,android.os.Parcelable[])>
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void <init>(android.net.wifi.WifiStateMachine)>
<com.android.server.wm.WindowState: boolean isWinVisibleLw()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$2000(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,com.android.internal.util.IState)>
<android.widget.SimpleAdapter: android.widget.Filter getFilter()>
<android.opengl.GLDebugHelper: void <init>()>
<com.android.internal.telephony.sip.SipCommandInterface: void getCDMASubscription(android.os.Message)>
<android.net.LocalSocket: void shutdownOutput()>
<android.view.Surface: void hide()>
<android.database.CursorWrapper: void unregisterContentObserver(android.database.ContentObserver)>
<android.webkit.WebViewCore: void access$1500(android.webkit.WebViewCore)>
<android.app.Dialog: boolean onPrepareOptionsMenu(android.view.Menu)>
<android.widget.GridView: int computeVerticalScrollRange()>
<GenerationGG: android.widget.SimpleCursorTreeAdapter$ViewBinder get_androidwidgetSimpleCursorTreeAdapter__ViewBinder()>
<android.app.admin.IDevicePolicyManager$Stub: android.app.admin.IDevicePolicyManager asInterface(android.os.IBinder)>
<android.widget.CursorTreeAdapter$MyCursorHelper$MyDataSetObserver: void onChanged()>
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: void finalize()>
<com.android.internal.telephony.gsm.GsmServiceStateTracker: boolean isGprsConsistent(int,int)>
<android.bluetooth.BluetoothSocket: int bindListen()>
<android.service.wallpaper.WallpaperService$Engine: void onSurfaceDestroyed(android.view.SurfaceHolder)>
<android.os.Binder: boolean isBinderAlive()>
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: void <init>(com.android.internal.telephony.DataConnection,com.android.internal.telephony.DataConnection$1)>
<android.graphics.SweepGradient: int nativeCreate1(float,float,int[],float[])>
<android.widget.AbsListView: android.content.Context access$3000(android.widget.AbsListView)>
<android.inputmethodservice.KeyboardView: void computeProximityThreshold(android.inputmethodservice.Keyboard)>
<com.android.server.ThrottleService: long access$1002(com.android.server.ThrottleService,long)>
<android.widget.AdapterViewFlipper: boolean isFlipping()>
<android.os.Process: void readProcLines(java.lang.String,java.lang.String[],long[])>
<android.media.Metadata: void <clinit>()>
<com.android.internal.os.BatteryStatsImpl: void noteFullWifiLockReleasedLocked(int)>
<android.drm.ProcessedData: java.lang.String getSubscriptionId()>
<android.test.mock.MockContext: java.io.FileOutputStream openFileOutput(java.lang.String,int)>
<android.widget.CalendarView: int access$2900(android.widget.CalendarView)>
<android.mtp.MtpObjectInfo: int getThumbCompressedSize()>
<android.widget.TextView: android.graphics.drawable.Drawable access$6602(android.widget.TextView,android.graphics.drawable.Drawable)>
<android.text.style.SuggestionSpan: void <init>(android.os.Parcel)>
<android.text.method.MetaKeyKeyListener: long release(long,int,long,long,long,long,android.view.KeyEvent)>
<android.net.wifi.WifiWatchdogStateMachine$WalledGardenState: void enter()>
<com.android.server.IntentResolver: boolean allowFilterResult(android.content.IntentFilter,java.util.List)>
<android.net.rtp.AudioGroup: void remove(android.net.rtp.AudioStream)>
<com.android.server.location.MockProvider: void setMinTime(long,android.os.WorkSource)>
<android.content.IntentFilter: int countDataSchemes()>
<android.content.SyncManager: long access$3000()>
<android.webkit.ZoomManager: int getDocumentAnchorY()>
<com.android.internal.telephony.SmsHeader$ConcatRef: void <init>()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$2600(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,android.os.Message)>
<com.android.server.am.ActivityRecord: void dump(java.io.PrintWriter,java.lang.String)>
<android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristics$TriState access$200(int)>
<android.view.ScaleGestureDetector: float getCurrentSpan()>
<android.content.pm.PackageParser$ActivityIntentInfo: java.lang.String toString()>
<android.app.Dialog: void dismiss()>
<android.bluetooth.BluetoothDeviceProfileState: void access$10300(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.hardware.usb.UsbAccessory: void <clinit>()>
<com.android.internal.app.ShutdownThread$CloseDialogReceiver: void onReceive(android.content.Context,android.content.Intent)>
<android.graphics.drawable.LayerDrawable: int getOpacity()>
<android.net.wifi.p2p.WifiP2pDevice: int parseHex(java.lang.String)>
<android.server.BluetoothAdapterStateMachine: void recoverStateMachine(int,java.lang.Object)>
<android.media.AudioService$SoundPoolListenerThread: void <init>(android.media.AudioService)>
<android.nfc.NdefRecord: void <init>(byte[])>
<com.android.server.usb.UsbSettingsManager: boolean clearCompatibleMatchesLocked(java.lang.String,com.android.server.usb.UsbSettingsManager$DeviceFilter)>
<android.net.wifi.WifiStateTracker: boolean isTeardownRequested()>
<com.android.internal.telephony.IccException: void <init>(java.lang.String)>
<android.view.animation.Animation: void setDuration(long)>
<android.view.textservice.SuggestionsInfo$1: java.lang.Object[] newArray(int)>
<android.content.pm.IPackageDeleteObserver$Stub: android.content.pm.IPackageDeleteObserver asInterface(android.os.IBinder)>
<android.net.http.Headers: void <init>()>
<com.android.server.pm.PackageManagerService: boolean access$1700(android.content.pm.PackageParser$Package)>
<android.webkit.ZoomManager: boolean isScaleOverLimits(float)>
<android.view.inputmethod.InputBinding$1: android.view.inputmethod.InputBinding createFromParcel(android.os.Parcel)>
<android.util.JsonReader: void nextNull()>
<android.content.res.AssetManager$AssetInputStream: void reset()>
<com.android.server.sip.SipService$SipSessionGroupExt: boolean isRegistered()>
<com.android.server.net.NetworkStatsService$2: void <init>(com.android.server.net.NetworkStatsService)>
<android.app.BackStackRecord: android.app.FragmentTransaction attach(android.app.Fragment)>
<android.net.Uri$OpaqueUri: java.lang.String getEncodedFragment()>
<android.widget.TextView: int getDesiredHeight()>
<android.webkit.JniUtil: boolean useChromiumHttpStack()>
<com.android.server.wm.WindowManagerService: void requestAnimationLocked(long)>
<android.view.inputmethod.ExtractedTextRequest: void writeToParcel(android.os.Parcel,int)>
<com.android.server.usb.UsbDeviceManager: java.lang.String[] access$1000(com.android.server.usb.UsbDeviceManager)>
<android.app.IThumbnailReceiver$Stub$Proxy: void <init>(android.os.IBinder)>
<Wrapper_android_drm_ProcessedData: void test_android_drm_ProcessedData()>
<com.android.internal.net.VpnConfig: android.content.Intent getIntentForConfirmation()>
<com.android.server.accessibility.AccessibilityManagerService$Service: android.view.accessibility.IAccessibilityInteractionConnection getConnectionToRetrievalAllowingWindowLocked()>
<android.os.StatFs: void native_finalize()>
<com.android.server.ThrottleService: java.util.concurrent.atomic.AtomicInteger access$600(com.android.server.ThrottleService)>
<android.renderscript.Float4: void <init>(float,float,float,float)>
<android.net.wifi.p2p.WifiP2pGroup: void setPassphrase(java.lang.String)>
<com.android.internal.app.AlertController: void <init>(android.content.Context,android.content.DialogInterface,android.view.Window)>
<android.view.IOnKeyguardExitResult$Stub$Proxy: android.os.IBinder asBinder()>
<android.app.ContextImpl$28: void <init>()>
<android.net.Uri$PathPart: void <clinit>()>
<android.gesture.GestureOverlayView: int getOrientation()>
<android.webkit.CallbackProxy$4: void onClick(android.content.DialogInterface,int)>
<android.webkit.BrowserFrame: void documentAsText(android.os.Message)>
<android.os.Registrant: void internalNotifyRegistrant(java.lang.Object,java.lang.Throwable)>
<com.android.server.ConnectivityService: java.lang.Object access$2400(com.android.server.ConnectivityService)>
<com.android.server.am.ActivityManagerService: void setPackageAskScreenCompat(java.lang.String,boolean)>
<android.widget.TextView: int getBottomPaddingOffset()>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,int)>
<com.android.internal.view.BaseSurfaceHolder: void addCallback(android.view.SurfaceHolder$Callback)>
<android.speech.tts.TextToSpeechService$SpeechItem: java.lang.String getCallingApp()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnabledState: void <init>(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<android.net.http.Headers: java.lang.String getLastModified()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimMdnLoaded: void <init>(com.android.internal.telephony.cdma.CdmaLteUiccRecords)>
<com.android.server.am.UsageStatsService$2: void onPackageRemoved(java.lang.String,int)>
<com.android.internal.telephony.SmsRawData: void <clinit>()>
<android.bluetooth.BluetoothDeviceProfileState: void access$5800(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.IState)>
<android.os.Parcel: java.io.FileDescriptor openFileDescriptor(java.lang.String,int)>
<com.android.internal.telephony.AdnRecord: boolean stringCompareNullEqualsEmpty(java.lang.String,java.lang.String)>
<android.content.pm.PackageParser$Service: java.lang.String toString()>
<android.location.Criteria: void setBearingAccuracy(int)>
<GenerationGG: android.os.PatternMatcher get_androidosPatternMatcher()>
<android.webkit.WebViewCore: java.lang.String access$4700(android.webkit.WebViewCore,int,int)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: int configuredNetworkId(java.lang.String)>
<android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp: void <init>(android.bluetooth.BluetoothDeviceProfileState,android.bluetooth.BluetoothDeviceProfileState$1)>
<android.webkit.WebViewCore: int calculateWindowWidth(int)>
<android.app.ActivityThread: void access$200(android.app.ActivityThread,int,java.lang.Object,int,int)>
<android.media.MediaPlayer: int getVideoHeight()>
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: void readFromParcelLocked(java.util.ArrayList,android.os.Parcel)>
<android.content.ContentUris: void <init>()>
<android.widget.EdgeEffect: boolean isFinished()>
<android.content.pm.IPackageInstallObserver$Stub$Proxy: android.os.IBinder asBinder()>
<android.renderscript.Type: int getY()>
<android.net.wifi.WifiWatchdogStateMachine: void access$4600(android.net.wifi.WifiWatchdogStateMachine,java.lang.String)>
<android.renderscript.RenderScriptGL: void bindProgramStore(android.renderscript.ProgramStore)>
<android.hardware.usb.IUsbManager$Stub: void <init>()>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()>
<android.bluetooth.BluetoothHealthAppConfiguration: void <init>(java.lang.String,int,int,int)>
<com.android.server.wm.InputFilter$H: void <init>(com.android.server.wm.InputFilter,android.os.Looper)>
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimDomainLoaded: void <init>(com.android.internal.telephony.ims.IsimUiccRecords)>
<android.app.INotificationManager$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.server.MountService$MountServiceHandler: void <init>(com.android.server.MountService,android.os.Looper)>
<android.net.wifi.WifiConfigStore: java.lang.String removeDoubleQuotes(java.lang.String)>
<GenerationGG: com.android.internal.util.Predicate get_comandroidinternalutilPredicate()>
<android.media.AudioRecord: int getAudioFormat()>
<android.content.ClipData: int describeContents()>
<android.widget.DigitalClock$FormatChangeObserver: void <init>(android.widget.DigitalClock)>
<android.app.PendingIntent$1: android.app.PendingIntent createFromParcel(android.os.Parcel)>
<android.app.ActivityThread$ApplicationThread: void updatePackageCompatibilityInfo(java.lang.String,android.content.res.CompatibilityInfo)>
<android.inputmethodservice.InputMethodService: int getBackDisposition()>
<android.widget.GridView: void adjustForBottomFadingEdge(android.view.View,int,int)>
<android.widget.Space: int getDefaultSize2(int,int)>
<android.view.HardwareRenderer: void <clinit>()>
<android.view.ViewRootImpl$3: android.graphics.Canvas lockCanvas()>
<android.location.Address: void setSubAdminArea(java.lang.String)>
<com.android.internal.content.PackageMonitor: void onPackageModified(java.lang.String)>
<android.widget.ExpandableListConnector: android.widget.ExpandableListConnector$PositionMetadata getFlattenedPos(android.widget.ExpandableListPosition)>
<android.graphics.Canvas: void native_concat(int,int)>
<com.android.server.AlarmManagerService: void set(int,long,android.app.PendingIntent)>
<com.android.internal.textservice.ISpellCheckerService$Stub$Proxy: void <init>(android.os.IBinder)>
<android.app.LoaderManagerImpl: void doReportNextStart()>
<com.android.internal.telephony.RILRequest: java.lang.String serialString()>
<android.view.ViewRootImpl$TrackballAxis: float collect(float,long,java.lang.String)>
<android.view.animation.GridLayoutAnimationController: void setRowDelay(float)>
<android.webkit.WebResourceResponse: void setData(java.io.InputStream)>
<DumbClass: void DumbMethod33()>
<android.view.View: int getPaddingBottom()>
<android.content.pm.ManifestDigest: void writeToParcel(android.os.Parcel,int)>
<Wrapper_android_provider_SyncStateContract: void test_android_provider_SyncStateContract()>
<android.graphics.YuvImage: int[] getStrides()>
<android.webkit.WebView: void nativeDestroy()>
<android.server.BluetoothService: boolean writeDockPin()>
<android.preference.PreferenceGroup: android.preference.Preference getPreference(int)>
<com.android.server.sip.SipHelper: void <init>(javax.sip.SipStack,javax.sip.SipProvider)>
<Wrapper_android_test_UiThreadTest: void test_android_test_UiThreadTest()>
<android.webkit.CallbackProxy: void onUnhandledKeyEvent(android.view.KeyEvent)>
<android.text.format.Time: void clear(java.lang.String)>
<android.view.MotionEvent: long nativeGetEventTimeNanos(int,int)>
<android.widget.TextView: void onEndBatchEdit()>
<android.widget.NumberPicker$1: void <init>()>
<android.text.method.MetaKeyKeyListener: long adjustMetaAfterKeypress(long)>
<com.android.internal.util.CharSequences$1: java.lang.String toString()>
<android.opengl.GLES11Ext: void glMatrixIndexPointerOES(int,int,int,java.nio.Buffer)>
<com.android.internal.telephony.cdma.sms.BearerData: void encodeDisplayMode(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)>
<com.android.internal.view.IInputMethodManager$Stub: void <init>()>
<android.media.AudioTrack$NativeEventHandlerDelegate: void <init>(android.media.AudioTrack,android.media.AudioTrack,android.os.Handler)>
<android.graphics.drawable.ScaleDrawable: int getIntrinsicHeight()>
<android.view.GestureDetector: android.view.GestureDetector$OnGestureListener access$100(android.view.GestureDetector)>
<android.view.accessibility.AccessibilityInteractionClient: void setSameThreadMessage(android.os.Message)>
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean hasPreferredDomesticCarrierCode()>
<android.os.Looper: void setMainLooper(android.os.Looper)>
<GenerationGG: android.renderscript.RenderScript get_androidrenderscriptRenderScript()>
<android.net.IThrottleManager$Stub: android.os.IBinder asBinder()>
<android.gesture.Gesture: void <init>()>
<java.lang.Object: void setGroupVisible(int,boolean)>
<com.android.server.wm.WindowManagerService: void setInputFilter(com.android.server.wm.InputFilter)>
<com.android.server.am.ReceiverList: void <init>(com.android.server.am.ActivityManagerService,com.android.server.am.ProcessRecord,int,int,android.content.IIntentReceiver)>
<android.graphics.Matrix: boolean native_isIdentity(int)>
<android.util.SparseIntArray: int indexOfValue(int)>
<com.android.internal.view.IInputConnectionWrapper: android.os.Message obtainMessage(int)>
<android.view.inputmethod.InputMethodManager: android.view.inputmethod.InputMethodManager peekInstance()>
<Wrapper_android_database_sqlite_SQLiteDatabaseLockedException: void test_android_database_sqlite_SQLiteDatabaseLockedException()>
<android.os.Message: android.os.Message obtain(android.os.Handler,int,java.lang.Object)>
<android.content.pm.ComponentInfo: void <init>(android.content.pm.ComponentInfo)>
<com.android.server.wm.InputManager: boolean nativeTransferTouchFocus(android.view.InputChannel,android.view.InputChannel)>
<android.content.res.TypedArray: int getDimensionPixelSize(int,int)>
<android.location.Location: void distanceBetween(double,double,double,double,float[])>
<GenerationGG: android.animation.LayoutTransition$TransitionListener get_androidanimationLayoutTransition__TransitionListener()>
<android.database.sqlite.SQLiteDebug: long getHeapAllocatedSize()>
<Wrapper_android_content_res_ObbInfo: void test_android_content_res_ObbInfo()>
<android.location.Location: float getBearing()>
<com.android.server.am.ActivityStack: void showAskCompatModeDialogLocked(com.android.server.am.ActivityRecord)>
<android.net.EthernetDataTracker$InterfaceObserver: void limitReached(java.lang.String,java.lang.String)>
<android.media.SoundPool$EventHandler: void <init>(android.media.SoundPool,android.media.SoundPool,android.os.Looper)>
<com.android.internal.view.menu.SubMenuBuilder: android.view.MenuItem getItem()>
<com.android.internal.view.menu.MenuItemImpl: boolean showsTextAsAction()>
<android.net.sip.SipManager: android.net.sip.ISipSessionListener createRelay(android.net.sip.SipRegistrationListener,java.lang.String)>
<android.appwidget.AppWidgetHost$Callbacks: void <init>(android.appwidget.AppWidgetHost)>
<android.net.wifi.WifiStateMachine: int access$9100(android.net.wifi.WifiStateMachine)>
<GenerationGG: android.animation.ObjectAnimator get_androidanimationObjectAnimator()>
<android.widget.ShareActionProvider: void <init>(android.content.Context)>
<android.os.RemoteCallbackList: boolean unregister(android.os.IInterface)>
<android.net.EthernetDataTracker: android.net.LinkProperties getLinkProperties()>
<android.test.mock.MockContentProvider: android.content.IContentProvider getIContentProvider()>
<android.view.HardwareRenderer$Gl20Renderer: android.view.HardwareRenderer create(boolean)>
<android.widget.TextView: android.content.Context access$2800(android.widget.TextView)>
<android.net.wifi.WifiStateMachine: android.content.Context access$700(android.net.wifi.WifiStateMachine)>
<android.view.animation.Transformation: void setAlpha(float)>
<java.lang.Object: boolean isNull(int)>
<com.android.internal.telephony.OperatorInfo: void <clinit>()>
<com.android.internal.telephony.IccIoResult: java.lang.String toString()>
<android.net.Uri$OpaqueUri: java.lang.String getEncodedPath()>
<android.hardware.SensorManager$SensorThread: void <init>()>
<android.test.mock.MockPackageManager: android.content.res.XmlResourceParser getXml(java.lang.String,int,android.content.pm.ApplicationInfo)>
<android.view.View: android.os.IBinder getWindowToken()>
<android.test.suitebuilder.TestSuiteBuilder: void addTest(android.test.suitebuilder.TestMethod)>
<android.net.wifi.WifiStateTracker: android.net.LinkCapabilities access$300(android.net.wifi.WifiStateTracker)>
<android.animation.Animator: void addListener(android.animation.Animator$AnimatorListener)>
<android.gesture.Gesture: android.graphics.Path toPath()>
<android.view.InputChannel: void nativeTransferTo(android.view.InputChannel)>
<android.graphics.Matrix: void native_setRotate(int,float,float,float)>
<GenerationGG: android.view.KeyEvent get_androidviewKeyEvent()>
<android.widget.SimpleCursorAdapter: android.widget.SimpleCursorAdapter$CursorToStringConverter getCursorToStringConverter()>
<android.view.textservice.SpellCheckerSession$SpellCheckerSessionListenerImpl: void onGetSuggestions(android.view.textservice.SuggestionsInfo[])>
<com.android.server.BackupManagerService: void signalFullBackupRestoreCompletion(com.android.server.BackupManagerService$FullParams)>
<com.android.internal.widget.LockPatternUtils: java.lang.String access$000()>
<com.android.server.wm.WindowManagerService: int getMaximumSizeDimension()>
<android.location.Criteria: boolean isBearingRequired()>
<android.content.ISyncStatusObserver$Stub$Proxy: android.os.IBinder asBinder()>
<android.webkit.GeolocationPermissions$1: void <init>(android.webkit.GeolocationPermissions)>
<android.text.style.AbsoluteSizeSpan: void writeToParcel(android.os.Parcel,int)>
<android.widget.TextView: boolean hasSelection()>
<Wrapper_android_test_suitebuilder_annotation_Smoke: void test_android_test_suitebuilder_annotation_Smoke()>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,android.view.MotionEvent$PointerProperties[],android.view.MotionEvent$PointerCoords[],int,int,float,float,int,int,int,int)>
<android.animation.AnimatorSet$Node: void <init>(android.animation.Animator)>
<android.net.LinkProperties: boolean isIdenticalAddresses(android.net.LinkProperties)>
<com.android.internal.telephony.IccCard: void onQueryFacilityLock(android.os.AsyncResult)>
<android.net.wifi.WifiNative: boolean setDeviceType(java.lang.String)>
<com.android.server.wm.WindowManagerService: void wallpaperOffsetsComplete(android.os.IBinder)>
<android.widget.OverScroller: void <init>(android.content.Context,android.view.animation.Interpolator)>
<com.android.server.am.ActivityManagerService$PendingActivityLaunch: void <init>()>
<com.android.server.pm.PackageManagerService: boolean isForwardLocked(android.content.pm.PackageParser$Package)>
<android.view.MotionEvent: float getXPrecision()>
<android.util.LongSparseArray: void put(long,java.lang.Object)>
<android.os.AsyncTask: void onPostExecute(java.lang.Object)>
<android.os.Parcel: void clearFileDescriptor(java.io.FileDescriptor)>
<android.webkit.MimeTypeMap: java.lang.String getMimeTypeFromExtension(java.lang.String)>
<android.content.pm.UserInfo: int describeContents()>
<com.android.server.wm.WindowManagerService: void rebuildAppWindowListLocked()>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: java.lang.String toString()>
<android.bluetooth.BluetoothPbap$1: void <init>(android.bluetooth.BluetoothPbap)>
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: boolean hasStableIds()>
<android.graphics.Paint: void <init>(int)>
<android.app.Service: void <init>()>
<android.view.accessibility.AccessibilityRecord: void setScrollable(boolean)>
<android.accounts.AccountManager: java.lang.Exception convertErrorToException(int,java.lang.String)>
<android.preference.Preference: android.preference.PreferenceManager getPreferenceManager()>
<android.view.WindowManager$LayoutParams: void <clinit>()>
<android.renderscript.FileA3D: int getIndexEntryCount()>
<com.android.server.BatteryService: boolean isPowered()>
<android.text.style.RasterizerSpan: android.graphics.Rasterizer getRasterizer()>
<android.media.MediaRecorder: void setVideoFrameRate(int)>
<android.graphics.Path: void native_moveTo(int,float,float)>
<android.webkit.ZoomManager: int getDocumentAnchorX()>
<com.android.server.InputMethodManagerService$ClientState: java.lang.String toString()>
<android.widget.VideoView: int access$1202(android.widget.VideoView,int)>
<android.content.pm.ConfigurationInfo: int describeContents()>
<android.media.RemoteControlClient: void <init>(android.app.PendingIntent)>
<android.database.sqlite.SQLiteOpenHelper: java.lang.String getDatabaseName()>
<android.webkit.WebViewWorker: void <init>(android.os.Looper)>
<android.hardware.SensorManager$1: void onRotationChanged(int)>
<android.renderscript.RSSurfaceView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>
<android.app.FragmentState$1: java.lang.Object[] newArray(int)>
<Wrapper_android_mtp_MtpConstants: void test_android_mtp_MtpConstants()>
<android.text.format.DateUtils: java.lang.String formatElapsedTime(java.lang.StringBuilder,java.lang.String,long,long)>
<GenerationGG: android.view.ActionProvider get_androidviewActionProvider()>
<android.speech.IRecognitionService$Stub$Proxy: android.os.IBinder asBinder()>
<android.media.AudioService: boolean isSpeakerphoneOn()>
<android.nfc.tech.BasicTagTechnology: void checkConnected()>
<android.view.MotionEvent: int nativeGetAction(int)>
<android.server.BluetoothAdapterStateMachine: void access$6800(android.server.BluetoothAdapterStateMachine,com.android.internal.util.IState)>
<android.view.GLES20DisplayList: int getNativeDisplayList()>
<com.android.server.StatusBarManagerService: void setHardKeyboardEnabled(boolean)>
<android.net.TrafficStats: long getTxPackets(java.lang.String)>
<android.graphics.BitmapFactory: android.graphics.Bitmap nativeDecodeAsset(int,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.test.mock.MockContentProvider: android.net.Uri insert(android.net.Uri,android.content.ContentValues)>
<android.net.Uri$Builder: android.net.Uri$Builder authority(java.lang.String)>
<android.app.LoadedApk: java.lang.String getAppDir()>
<android.content.res.AssetManager: int access$200(android.content.res.AssetManager,int)>
<android.webkit.WebViewCore$JSInterfaceData: void <init>()>
<android.app.IUiModeManager$Stub: android.os.IBinder asBinder()>
<GenerationGG: android.app.backup.BackupDataInputStream get_androidappbackupBackupDataInputStream()>
<GenerationGG: android.content.ContentProviderClient get_androidcontentContentProviderClient()>
<Wrapper_android_test_suitebuilder_TestSuiteBuilder: void test_android_test_suitebuilder_TestSuiteBuilder()>
<android.renderscript.RenderScript: int rsnTypeCreate(int,int,int,int,int,boolean,boolean)>
<android.webkit.WebView: android.graphics.Rect getPluginBounds(int,int)>
<android.view.InputDevice: void <init>(android.view.InputDevice$1)>
<android.content.Intent: int describeContents()>
<android.app.Instrumentation: void runOnMainSync(java.lang.Runnable)>
<android.net.Uri$OpaqueUri: java.lang.String getUserInfo()>
<android.content.res.XmlBlock$Parser: java.lang.String getNamespace(java.lang.String)>
<android.app.WallpaperManager$FastBitmapDrawable: void setBounds(int,int,int,int)>
<com.android.internal.telephony.WspTypeDecoder: boolean readContentParameters(int,int,int)>
<android.view.ViewDebug$RecyclerTrace: void <init>(android.view.ViewDebug$1)>
<android.net.NetworkUtils: int resetConnections(java.lang.String,int)>
<android.telephony.SignalStrength: int getEvdoLevel()>
<android.server.BluetoothService: java.lang.String access$500()>
<android.widget.TextView: android.graphics.drawable.Drawable access$6900(android.widget.TextView)>
<android.view.animation.Animation: void scaleCurrentDuration(float)>
<android.app.ActivityThread$ActivityClientRecord: java.lang.String toString()>
<android.animation.PropertyValuesHolder: void nCallIntMethod(java.lang.Object,int,int)>
<android.net.wifi.WifiStateMachine: void access$2400(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.widget.HorizontalScrollView: float getLeftFadingEdgeStrength()>
<com.android.internal.telephony.gsm.GsmConnection: java.lang.String getRemainingPostDialString()>
<android.content.pm.FeatureInfo$1: void <init>()>
<android.view.animation.AnimationSet: void setFillAfter(boolean)>
<android.content.ClipboardManager$2: void <init>(android.content.ClipboardManager)>
<android.graphics.Canvas: void setBitmap(android.graphics.Bitmap)>
<android.webkit.WebViewCore$PostUrlData: void <init>()>
<android.os.Binder: void restoreCallingIdentity(long)>
<android.widget.ProgressBar$AccessibilityEventSender: void <init>(android.widget.ProgressBar)>
<android.accounts.IAccountManager$Stub: android.accounts.IAccountManager asInterface(android.os.IBinder)>
<android.net.wifi.WifiStateMachine: void access$10200(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<com.android.internal.telephony.cdma.CdmaConnection$MyHandler: void <init>(com.android.internal.telephony.cdma.CdmaConnection,android.os.Looper)>
<Wrapper_android_net_sip_SipErrorCode: void test_android_net_sip_SipErrorCode()>
<android.graphics.Matrix$1: boolean postConcat(android.graphics.Matrix)>
<android.os.Parcel: char[] createCharArray()>
<com.android.server.usb.UsbDeviceManager$UsbHandler: void sendMessage(int,boolean)>
<com.android.server.PowerManagerService$BrightnessState: void dump(java.io.PrintWriter,java.lang.String)>
<android.view.View: boolean isLayoutRtl()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: boolean isGroupOwner(java.lang.String)>
<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder addTestSuite(junit.framework.TestSuite)>
<com.android.server.wm.WindowManagerService: int reduceConfigWidthSize(int,int,float,int,int)>
<android.text.format.Time: boolean after(android.text.format.Time)>
<android.text.SpannableString: java.lang.Object[] getSpans(int,int,java.lang.Class)>
<com.android.server.VibratorService: com.android.server.VibratorService$Vibration removeVibrationLocked(android.os.IBinder)>
<android.text.BoringLayout: float getLineMax(int)>
<GenerationGG: android.widget.TabHost$OnTabChangeListener get_androidwidgetTabHost__OnTabChangeListener()>
<com.android.internal.telephony.SmsAddress: java.lang.String getAddressString()>
<android.gesture.GestureLibraries: android.gesture.GestureLibrary fromFile(java.io.File)>
<android.preference.PreferenceGroupAdapter: int getItemViewType(int)>
<android.app.LoadedApk$ServiceDispatcher$DeathMonitor: void <init>(android.app.LoadedApk$ServiceDispatcher,android.content.ComponentName,android.os.IBinder)>
<com.android.server.am.BatteryStatsService$1: void onServiceDisconnected(int)>
<android.text.SpannableStringBuilder: android.text.InputFilter[] getFilters()>
<android.nfc.tech.MifareClassic: int getBlockCountInSector(int)>
<Wrapper_android_graphics_drawable_shapes_RoundRectShape: void test_android_graphics_drawable_shapes_RoundRectShape()>
<com.android.internal.net.DNParser: void <init>(javax.security.auth.x500.X500Principal)>
<android.widget.GridLayout$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat setFormat(java.lang.String)>
<android.media.AudioRecord: int setNotificationMarkerPosition(int)>
<android.media.effect.EffectContext: void initInCurrentGlContext()>
<com.android.server.PowerManagerService: java.lang.String lockType(int)>
<android.widget.TextView$HandleView$1: void <init>(android.widget.TextView$HandleView)>
<android.accounts.AccountAuthenticatorResponse$1: android.accounts.AccountAuthenticatorResponse[] newArray(int)>
<android.telephony.NeighboringCellInfo$1: java.lang.Object[] newArray(int)>
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener,android.hardware.Sensor)>
<android.app.LoadedApk$ServiceDispatcher: android.app.ServiceConnectionLeaked getLocation()>
<android.view.accessibility.AccessibilityNodeInfo: int describeContents()>
<android.graphics.drawable.GradientDrawable$GradientState: android.graphics.drawable.Drawable newDrawable()>
<android.graphics.Paint: int getTextWidths(java.lang.String,int,int,float[])>
<android.graphics.drawable.AnimationDrawable$AnimationState: boolean access$102(android.graphics.drawable.AnimationDrawable$AnimationState,boolean)>
<android.os.AsyncTask$SerialExecutor: void <init>(android.os.AsyncTask$1)>
<android.renderscript.RenderScript: int rsnElementCreate(int,int,int,boolean,int)>
<com.android.server.BackupManagerService: javax.crypto.SecretKey buildPasswordKey(java.lang.String,byte[],int)>
<android.security.KeyChain: void ensureNotOnMainThread(android.content.Context)>
<android.app.ActivityThread: void scheduleGcIdler()>
<android.webkit.WebSettings: int getMinimumFontSize()>
<com.android.server.wm.WindowState: boolean isVisibleNow()>
<GenerationGG: android.provider.MediaStore get_androidproviderMediaStore()>
<GenerationGG: android.bluetooth.BluetoothHealthAppConfiguration get_androidbluetoothBluetoothHealthAppConfiguration()>
<android.content.SyncManager: android.content.SyncManager$SyncHandler access$200(android.content.SyncManager)>
<android.net.DnsPinger: void cancelPings()>
<android.os.RemoteCallback$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.server.wm.ScreenRotationAnimation: int deltaRotation(int,int)>
<android.net.sip.SipSession$Listener: void onRingingBack(android.net.sip.SipSession)>
<android.bluetooth.IBluetoothHealthCallback$Stub: void <init>()>
<android.app.Dialog: void setFeatureDrawableUri(int,android.net.Uri)>
<android.content.pm.PathPermission$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.widget.SimpleCursorAdapter: int getStringConversionColumn()>
<com.android.server.am.PendingIntentRecord$Key: java.lang.String typeName()>
<android.view.ViewRootImpl: java.lang.Object retrievePendingEvent(int)>
<com.android.server.am.UsageStatsService: void readStatsFLOCK(java.io.File)>
<android.view.accessibility.AccessibilityInteractionClient: android.os.Message getSameProcessMessageAndClear()>
<com.android.server.pm.UserManager: void <clinit>()>
<android.os.MemoryFile: void <init>(java.lang.String,int)>
<android.content.Intent: android.content.Intent makeRestartActivityTask(android.content.ComponentName)>
<android.media.AudioService: void clearRemoteControlDisplay_syncAfRcs()>
<android.test.suitebuilder.TestMethod: java.lang.String getName()>
<android.location.Location: void removeSpeed()>
<android.media.AudioRecord: void <init>(int,int,int,int,int)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState access$1600(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<android.speech.tts.TextToSpeechService$SynthThread: void broadcastTtsQueueProcessingCompleted()>
<com.android.internal.util.MemInfoReader: boolean matchText(byte[],int,java.lang.String)>
<android.app.BackStackRecord: int commit()>
<android.test.mock.MockDialogInterface: void dismiss()>
<android.webkit.WebView: void scrollFocusedTextInputY(int)>
<com.android.internal.telephony.cat.SelectItemResponseData: void format(java.io.ByteArrayOutputStream)>
<android.view.MotionEvent: void nativeGetPointerCoords(int,int,int,android.view.MotionEvent$PointerCoords)>
<com.android.server.LocationManagerService$Receiver: boolean isListener()>
<android.view.ViewRootImpl: void requestTransitionStart(android.animation.LayoutTransition)>
<GenerationGG: android.content.pm.ConfigurationInfo get_androidcontentpmConfigurationInfo()>
<com.android.server.sip.SipHelper: void <clinit>()>
<GenerationGG: android.database.sqlite.SQLiteBlobTooBigException get_androiddatabasesqliteSQLiteBlobTooBigException()>
<android.app.backup.BackupDataOutput: int ctor(java.io.FileDescriptor)>
<android.content.ContextWrapper: void attachBaseContext(android.content.Context)>
<GenerationGG: android.graphics.ColorFilter get_androidgraphicsColorFilter()>
<android.media.SoundPool: int native_setup(java.lang.Object,int,int,int)>
<android.os.PatternMatcher: java.lang.String toString()>
<com.android.server.PowerManagerService: int access$1402(com.android.server.PowerManagerService,int)>
<android.net.NetworkInfo: android.net.NetworkInfo$State getState()>
<android.widget.GridView: int computeVerticalScrollExtent()>
<android.hardware.Camera$EventHandler: void handleMessage(android.os.Message)>
<android.view.textservice.SuggestionsInfo: int describeContents()>
<android.util.Pools: android.util.Pool finitePool(android.util.PoolableManager,int)>
<android.graphics.Movie: android.graphics.Movie decodeStream(java.io.InputStream)>
<android.net.DhcpInfo: void <init>()>
<android.util.JsonWriter$1: void <clinit>()>
<android.bluetooth.BluetoothTetheringDataTracker: android.net.NetworkInfo getNetworkInfo()>
<com.android.internal.telephony.cdma.sms.BearerData$CodingException: void <init>(java.lang.String)>
<android.media.ExifInterface: float convertRationalLatLonToFloat(java.lang.String,java.lang.String)>
<android.location.Criteria: boolean access$602(android.location.Criteria,boolean)>
<android.net.rtp.RtpStream: void <clinit>()>
<android.test.IsolatedContext$MockAccountManager: void <init>(android.test.IsolatedContext)>
<android.text.method.TimeKeyListener: void <clinit>()>
<android.test.mock.MockContext: int getWallpaperDesiredMinimumWidth()>
<android.widget.ListView$ArrowScrollFocusResult: void populate(int,int)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState: boolean processMessage(android.os.Message)>
<android.graphics.Bitmap$CompressFormat: void <init>(java.lang.String,int,int)>
<com.android.internal.telephony.CommandsInterface$RadioState: void <clinit>()>
<android.widget.ProgressBar: void invalidateDrawable(android.graphics.drawable.Drawable)>
<android.widget.Gallery$FlingRunnable: void startUsingVelocity(int)>
<android.animation.Keyframe: android.animation.Keyframe ofFloat(float,float)>
<com.android.internal.telephony.cat.CommandParamsFactory: void sendCmdParams(com.android.internal.telephony.cat.ResultCode)>
<android.widget.AbsSpinner: android.os.Parcelable onSaveInstanceState()>
<com.android.internal.os.BatteryStatsImpl: java.util.Map getKernelWakelockStats()>
<android.text.util.Rfc822Token: java.lang.String quoteNameIfNecessary(java.lang.String)>
<android.content.ClipDescription$1: java.lang.Object[] newArray(int)>
<android.content.pm.PermissionGroupInfo$1: android.content.pm.PermissionGroupInfo[] newArray(int)>
<android.text.style.MetricAffectingSpan$Passthrough: android.text.style.MetricAffectingSpan getUnderlying()>
<com.android.internal.widget.LockPatternView: void onRestoreInstanceState(android.os.Parcelable)>
<com.android.server.usb.UsbDeviceManager: android.os.ParcelFileDescriptor nativeOpenAccessory()>
<GenerationGG: android.content.pm.Signature get_androidcontentpmSignature()>
<com.android.internal.telephony.AdnRecord: int describeContents()>
<com.android.server.ProcessMap: void remove(java.lang.String,int)>
<com.android.internal.telephony.cdma.SmsMessage: com.android.internal.telephony.SmsMessageBase$TextEncodingDetails calculateLength(java.lang.CharSequence,boolean)>
<android.net.Uri: java.lang.String encode(java.lang.String,java.lang.String)>
<GenerationGG: android.graphics.DrawFilter get_androidgraphicsDrawFilter()>
<java.lang.Object: void onLowMemory()>
<com.android.internal.telephony.PhoneBase: boolean getMessageWaitingIndicator()>
<android.renderscript.RenderScript: int rsnFileA3DCreateFromAsset(int,android.content.res.AssetManager,java.lang.String)>
<android.renderscript.FieldPacker: void addI64(android.renderscript.Long4)>
<android.net.sip.SipAudioCall: java.lang.String access$000()>
<android.app.PendingIntent: int hashCode()>
<android.hardware.Camera: void _startFaceDetection(int)>
<android.renderscript.FieldPacker: void addI16(android.renderscript.Short4)>
<android.view.Surface: void openTransaction()>
<android.view.View$12: void setValue(android.view.View,float)>
<android.net.rtp.RtpStream: void release()>
<com.android.server.ThrottleService: com.android.server.ThrottleService$DataRecorder access$100(com.android.server.ThrottleService)>
<android.inputmethodservice.KeyboardView$SwipeTracker: void <init>(android.inputmethodservice.KeyboardView$1)>
<android.os.INetworkManagementService$Stub: void <init>()>
<android.view.GLES20Canvas: void nResetModifiers(int,int)>
<android.media.RemoteControlClient$1: void <init>(android.media.RemoteControlClient)>
<android.server.BluetoothA2dpService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.net.NetworkPolicyManagerService$1: void onProcessDied(int,int)>
<android.content.IntentSender: void writeIntentSenderOrNullToParcel(android.content.IntentSender,android.os.Parcel)>
<android.renderscript.Matrix4f: void loadOrthoWindow(int,int)>
<android.widget.AbsSpinner$SavedState$1: void <init>()>
<android.widget.TextView: android.content.Context access$7800(android.widget.TextView)>
<com.android.server.NetworkManagementService: java.lang.String convertQuotedString(java.lang.String)>
<android.hardware.Sensor: int getMinDelay()>
<android.net.wifi.WifiInfo$1: void <init>()>
<android.test.RenamingDelegatingContext: java.io.File getFileStreamPath(java.lang.String)>
<android.hardware.usb.UsbEndpoint: void writeToParcel(android.os.Parcel,int)>
<com.android.internal.telephony.ServiceStateTracker: void registerForNetworkAttached(android.os.Handler,int,java.lang.Object)>
<android.app.FragmentState$1: android.app.FragmentState createFromParcel(android.os.Parcel)>
<android.view.ViewGroup: void addTouchables(java.util.ArrayList)>
<android.app.Activity: android.view.Window getWindow()>
<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getVoiceMailNumber(java.lang.String)>
<GenerationGG: android.app.backup.FileBackupHelper get_androidappbackupFileBackupHelper()>
<java.lang.Object: java.lang.Object getGroup(int)>
<android.app.SearchableInfo: boolean getVoiceSearchEnabled()>
<android.telephony.cdma.CdmaCellLocation: int getNetworkId()>
<android.app.IActivityWatcher$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.server.wm.WindowManagerService: void assignLayersLocked()>
<android.app.LocalActivityManager: void <init>(android.app.Activity,boolean)>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: java.util.Map getServiceStats()>
<android.os.Build: long getLong(java.lang.String)>
<android.renderscript.RenderScript: void nContextSetPriority(int)>
<android.telephony.gsm.SmsMessage: int getProtocolIdentifier()>
<android.view.HardwareRenderer$GlRenderer: boolean hasDirtyRegions()>
<com.android.internal.telephony.gsm.SimSmsInterfaceManager$1: void <init>(com.android.internal.telephony.gsm.SimSmsInterfaceManager)>
<GenerationGG: android.os.Vibrator get_androidosVibrator()>
<android.filterfw.core.GLFrame: int getNativeTextureId()>
<com.android.server.pm.Installer: int removeUserDataDirs(int)>
<android.content.res.XmlBlock$Parser: float getAttributeFloatValue(java.lang.String,java.lang.String,float)>
<android.media.ExifInterface: java.lang.String getAttribute(java.lang.String)>
<com.android.internal.telephony.PhoneBase: android.os.Handler getHandler()>
<android.drm.mobile1.DrmRawContent$DrmInputStream: int read(byte[],int,int)>
<android.view.GestureDetector: void cancel()>
<android.net.wifi.WifiConfiguration$IpAssignment: android.net.wifi.WifiConfiguration$IpAssignment valueOf(java.lang.String)>
<android.filterfw.core.FrameFormat: int getSize()>
<com.android.internal.telephony.IccRecords: java.lang.String getMsisdnAlphaTag()>
<android.net.Uri: void <init>()>
<android.view.View: void setTranslationX(float)>
<android.net.DhcpStateMachine: android.content.BroadcastReceiver access$200(android.net.DhcpStateMachine)>
<android.media.audiofx.Visualizer: int native_getFft(byte[])>
<com.android.internal.view.BaseSurfaceHolder: void setSurfaceFrameSize(int,int)>
<android.webkit.WebViewCore: android.webkit.WebView access$602(android.webkit.WebViewCore,android.webkit.WebView)>
<android.net.Uri$PathPart: android.net.Uri$PathPart fromEncoded(java.lang.String)>
<com.android.server.location.GpsLocationProvider: void native_agps_data_conn_open(java.lang.String)>
<android.net.wifi.WifiNative: boolean setCountryCodeCommand(java.lang.String)>
<com.android.server.net.NetworkStatsService: android.content.Context access$700(com.android.server.net.NetworkStatsService)>
<android.content.pm.FeatureInfo: void <init>(android.os.Parcel)>
<android.view.View: boolean canResolveLayoutDirection()>
<android.widget.SearchView: boolean isIconfiedByDefault()>
<com.android.server.wm.WindowState: android.view.WindowManager$LayoutParams getAttrs()>
<android.view.VelocityTracker: void <init>()>
<android.net.wifi.WpsStateMachine: void access$700(android.net.wifi.WpsStateMachine,com.android.internal.util.IState)>
<android.util.Base64$Encoder: void <init>(int,byte[])>
<android.app.ActivityThread$ApplicationThread: void scheduleConfigurationChanged(android.content.res.Configuration)>
<android.view.View: android.view.ViewPropertyAnimator animate()>
<android.os.Process: void setThreadPriority(int,int)>
<android.accounts.AccountManagerService: java.lang.String getDatabaseName()>
<android.view.View: void removePerformClickCallback()>
<android.animation.PropertyValuesHolder: void setupGetter(java.lang.Class)>
<android.net.Uri$StringUri: java.lang.String parseAuthority(java.lang.String,int)>
<com.android.server.wm.WindowManagerService: int reAddWindowLocked(int,com.android.server.wm.WindowState)>
<android.content.ContentUris: long parseId(android.net.Uri)>
<android.view.ViewRootImpl$InputMethodCallback: void finishedEvent(int,boolean)>
<android.animation.AnimatorSet$Node: java.lang.Object clone()>
<android.location.ICountryDetector$Stub: void <init>()>
<android.util.ReflectiveProperty: void set(java.lang.Object,java.lang.Object)>
<android.webkit.WebViewCore$EventHub$1: void <init>(android.webkit.WebViewCore$EventHub)>
<com.android.server.location.PassiveProvider: java.lang.String getInternalState()>
<android.graphics.drawable.PictureDrawable: void setAlpha(int)>
<android.net.wifi.SupplicantState: boolean isHandshakeState(android.net.wifi.SupplicantState)>
<android.service.wallpaper.WallpaperService$Engine: void onDesiredSizeChanged(int,int)>
<android.view.TextureView$1: void <init>(android.view.TextureView)>
<android.webkit.JsResult: void confirm()>
<android.media.AudioTrack: int setPositionNotificationPeriod(int)>
<android.app.ResultInfo: void <init>(java.lang.String,int,int,android.content.Intent)>
<com.android.server.IntentResolver: void <init>()>
<android.hardware.usb.UsbAccessory: void <init>(java.lang.String[])>
<android.net.wifi.WifiNative: java.lang.String p2pPeer(java.lang.String)>
<android.graphics.drawable.Drawable: void setFilterBitmap(boolean)>
<java.lang.Object: int getColumnIndex(java.lang.String)>
<android.view.View: android.view.View findViewInsideOutShouldExist(android.view.View,int)>
<android.media.JetPlayer: void <init>()>
<android.animation.LayoutTransition: void setDuration(int,long)>
<com.android.internal.view.menu.ActionMenuPresenter: void setReserveOverflow(boolean)>
<android.webkit.WebViewFragment: void <init>()>
<Wrapper_android_util_MonthDisplayHelper: void test_android_util_MonthDisplayHelper()>
<android.preference.ListPreference$SavedState$1: java.lang.Object[] newArray(int)>
<android.util.JsonReader: java.lang.String nextLiteral(boolean)>
<android.renderscript.FileA3D: void initEntries()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.util.List numberFormats()>
<android.os.Environment: void <clinit>()>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>
<android.server.BluetoothAdapterStateMachine: void access$1900(android.server.BluetoothAdapterStateMachine,com.android.internal.util.IState)>
<GenerationGG: android.widget.HeterogeneousExpandableList get_androidwidgetHeterogeneousExpandableList()>
<GenerationGG: org.apache.http.HttpHost get_orgapachehttpHttpHost()>
<android.content.res.XmlBlock: int access$600(int,int)>
<com.android.internal.telephony.cdma.sms.BearerData: void encode16bitEms(com.android.internal.telephony.cdma.sms.UserData,byte[])>
<GenerationGG: android.bluetooth.BluetoothHealthCallback get_androidbluetoothBluetoothHealthCallback()>
<android.renderscript.Element: android.renderscript.Element U16(android.renderscript.RenderScript)>
<android.media.RemoteControlClient$MetadataEditor: void <init>(android.media.RemoteControlClient)>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: void stopLaunchedLocked()>
<android.graphics.Paint: boolean isFakeBoldText()>
<android.view.ViewRootImpl$AccessibilityInteractionConnection: void performAccessibilityAction(int,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,long)>
<android.test.MoreAsserts: void failNotMatches(java.lang.String,java.lang.String,java.lang.String)>
<android.view.WindowManager$LayoutParams: void <init>()>
<android.sax.Element: void setElementListener(android.sax.ElementListener)>
<android.app.FragmentState$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.content.res.XmlBlock: void nativeDestroyParseState(int)>
<android.app.ContextImpl$14: void <init>()>
<GenerationGG: android.text.method.PasswordTransformationMethod get_androidtextmethodPasswordTransformationMethod()>
<android.content.ContentValues: void <init>(java.util.HashMap)>
<android.telephony.PhoneNumberUtils: boolean isNonSeparator(java.lang.String)>
<android.nfc.NdefRecord: void writeToParcel(android.os.Parcel,int)>
<com.android.internal.telephony.cdma.CdmaDataConnection: java.lang.String toString()>
<android.test.mock.MockResources: void getValue(int,android.util.TypedValue,boolean)>
<android.animation.ObjectAnimator: void setObjectValues(java.lang.Object[])>
<android.opengl.GLSurfaceView$GLThread: int getRenderMode()>
<com.android.internal.widget.ScrollingTabContainerView$VisibilityAnimListener: com.android.internal.widget.ScrollingTabContainerView$VisibilityAnimListener withFinalVisibility(int)>
<com.android.internal.telephony.cat.RilMessageDecoder: void sendStartDecodingMessageParams(com.android.internal.telephony.cat.RilMessage)>
<android.database.sqlite.SQLiteDatabase: void setTransactionUsingExecSqlFlag()>
<android.app.backup.IRestoreObserver$Stub: android.os.IBinder asBinder()>
<GenerationGG: android.animation.Animator[] get_androidanimationAnimator_ARRAY_()>
<android.os.storage.StorageVolume: boolean allowMassStorage()>
<android.app.Instrumentation: android.content.Context getContext()>
<android.net.wifi.WifiInfo: android.net.NetworkInfo$DetailedState getDetailedStateOf(android.net.wifi.SupplicantState)>
<android.webkit.WebView: float access$2900(android.webkit.WebView)>
<com.android.internal.content.PackageMonitor: void onPackageChanged(java.lang.String,int,java.lang.String[])>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>
<com.android.server.VibratorService: void access$200(com.android.server.VibratorService)>
<android.net.EthernetDataTracker: void <init>()>
<junit.framework.TestCase: void assertEquals(java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.LoadListener: boolean cancelled()>
<android.webkit.WebSettings$LayoutAlgorithm: void <init>(java.lang.String,int)>
<android.webkit.WebChromeClient: void onReceivedTitle(android.webkit.WebView,java.lang.String)>
<android.view.GLES20Canvas: void nDrawTextRun(int,char[],int,int,int,int,float,float,int,int)>
<android.view.View$AttachInfo$InvalidateInfo$1: void onReleased(android.view.View$AttachInfo$InvalidateInfo)>
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: com.android.i18n.phonenumbers.Phonenumber$PhoneNumber$CountryCodeSource getCountryCodeSource()>
<android.content.pm.VerifierInfo: void writeToParcel(android.os.Parcel,int)>
<android.renderscript.Program$TextureType: void <init>(java.lang.String,int,int)>
<android.graphics.drawable.ShapeDrawable: void draw(android.graphics.Canvas)>
<com.android.internal.statusbar.StatusBarIconList: void <init>()>
<android.database.MatrixCursor: java.lang.String[] getColumnNames()>
<android.location.IGeocodeProvider$Stub$Proxy: android.os.IBinder asBinder()>
<android.drm.DrmManagerClient: int _saveRights(int,android.drm.DrmRights,java.lang.String,java.lang.String)>
<android.media.AudioService: android.media.AudioService$AudioHandler access$100(android.media.AudioService)>
<android.media.audiofx.AudioEffect: int setParameter(int[],short[])>
<com.android.server.TextServicesManagerService$InternalDeathRecipient: boolean hasSpellCheckerListener(com.android.internal.textservice.ISpellCheckerSessionListener)>
<android.content.IClipboard$Stub$Proxy: void <init>(android.os.IBinder)>
<android.net.wifi.WifiWatchdogStateMachine: android.net.DnsPinger access$2100(android.net.wifi.WifiWatchdogStateMachine)>
<android.service.wallpaper.IWallpaperService$Stub$Proxy: void <init>(android.os.IBinder)>
<android.net.wifi.WpsResult$1: java.lang.Object[] newArray(int)>
<android.widget.TextView: void onCommitCompletion(android.view.inputmethod.CompletionInfo)>
<android.net.LinkProperties: java.util.Collection getLinkAddresses()>
<android.widget.ZoomButtonsController: android.view.ViewRootImpl getOwnerViewRootImpl()>
<com.android.server.am.ActivityManagerService: boolean scheduleServiceRestartLocked(com.android.server.am.ServiceRecord,boolean)>
<android.graphics.RectF: void union(android.graphics.RectF)>
<android.renderscript.Float3: void <init>()>
<android.location.Address: java.lang.String getPremises()>
<javax.net.ssl.SSLSocketFactory: javax.net.SocketFactory getDefault()>
<android.preference.Preference: void setIntent(android.content.Intent)>
<android.test.RenamingDelegatingContext: java.io.FileOutputStream openFileOutput(java.lang.String,int)>
<android.view.ViewGroup: void setChildrenDrawnWithCacheEnabled(boolean)>
<android.hardware.Sensor: void <init>()>
<android.net.rtp.RtpStream: int getMode()>
<android.os.Debug$MemoryInfo: void <clinit>()>
<com.android.server.am.ActivityManagerService$AppDeathRecipient: void <init>(com.android.server.am.ActivityManagerService,com.android.server.am.ProcessRecord,int,android.app.IApplicationThread)>
<android.net.NetworkStatsHistory: void ensureBuckets(long,long)>
<android.bluetooth.BluetoothHeadset: android.bluetooth.IBluetoothHeadset access$002(android.bluetooth.BluetoothHeadset,android.bluetooth.IBluetoothHeadset)>
<android.renderscript.RenderScript: int nFontCreateFromFile(java.lang.String,float,int)>
<android.database.sqlite.SQLiteQueryBuilder: void setTables(java.lang.String)>
<android.app.ContextImpl$18: void <init>()>
<android.bluetooth.BluetoothDeviceProfileState: void access$10800(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.view.View: void setNextFocusLeftId(int)>
<com.android.internal.telephony.BaseCommands: void setOnCallRing(android.os.Handler,int,java.lang.Object)>
<android.media.audiofx.Equalizer: java.lang.String getPresetName(short)>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: boolean characterIsLegal(char)>
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void <init>(com.android.internal.telephony.cat.RilMessageDecoder,com.android.internal.telephony.cat.RilMessageDecoder$1)>
<android.text.style.TypefaceSpan: void <init>(android.os.Parcel)>
<android.webkit.SslErrorHandler: void <init>()>
<android.net.wifi.WifiStateTracker: android.net.LinkCapabilities getLinkCapabilities()>
<android.bluetooth.BluetoothDevice$1: android.bluetooth.BluetoothDevice[] newArray(int)>
<Wrapper_android_widget_Scroller: void test_android_widget_Scroller()>
<android.app.ContextImpl$ApplicationContentResolver: boolean releaseProvider(android.content.IContentProvider)>
<android.app.LoaderManagerImpl: void doReportStart()>
<android.net.wifi.SupplicantStateTracker$UninitializedState: void enter()>
<android.bluetooth.BluetoothDeviceProfileState: boolean readIncomingAllowedValue()>
<android.content.res.AssetManager: int getArraySize(int)>
<android.hardware.usb.UsbEndpoint: int getAttributes()>
<android.inputmethodservice.InputMethodService: void initialize()>
<android.widget.GridLayout$4: int getAlignmentValue(android.view.View,int)>
<android.content.ClipDescription$1: void <init>()>
<android.widget.ToggleButton: void updateReferenceToIndicatorDrawable(android.graphics.drawable.Drawable)>
<android.animation.Keyframe$IntKeyframe: android.animation.Keyframe$IntKeyframe clone()>
<android.database.sqlite.SQLiteDatabase: boolean isInQueueOfStatementsToBeFinalized(int)>
<android.graphics.drawable.Drawable: void setDither(boolean)>
<com.android.server.usb.UsbHostManager: boolean isBlackListed(java.lang.String)>
<android.graphics.Point$1: android.graphics.Point createFromParcel(android.os.Parcel)>
<com.android.internal.view.InputBindResult$1: java.lang.Object[] newArray(int)>
<android.util.Base64InputStream: int read(byte[],int,int)>
<android.widget.RemoteViews: void setEmptyView(int,int)>
<android.net.NetworkQuotaInfo: void <clinit>()>
<android.content.pm.PermissionGroupInfo: java.lang.String toString()>
<android.os.Binder: void finalize()>
<android.gesture.Gesture: android.graphics.Path toPath(android.graphics.Path,int,int,int,int)>
<android.content.SyncManager: android.accounts.Account[] access$2100(android.content.SyncManager)>
<android.security.KeyChain$1: void <init>(java.util.concurrent.BlockingQueue)>
<android.view.inputmethod.ExtractedTextRequest$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.internal.view.menu.MenuBuilder: boolean hasVisibleItems()>
<android.database.sqlite.SQLiteDatabase: void setTransactionSuccessful()>
<android.nfc.TransceiveResult$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.graphics.Paint: void native_getTextPath(int,int,java.lang.String,int,int,float,float,int)>
<android.drm.DrmInfo: void <init>(int,byte[],java.lang.String)>
<android.animation.Keyframe$ObjectKeyframe: java.lang.Object clone()>
<android.widget.AdapterViewAnimator: android.view.View getViewAtRelativeIndex(int)>
<android.text.DynamicLayout: int getLineTop(int)>
<android.net.wifi.p2p.WifiP2pDeviceList$1: android.net.wifi.p2p.WifiP2pDeviceList[] newArray(int)>
<com.android.server.LocationManagerService$ProximityAlert: java.lang.String toString()>
<com.android.internal.telephony.gsm.UsimPhoneBookManager: boolean access$002(com.android.internal.telephony.gsm.UsimPhoneBookManager,boolean)>
<GenerationGG: android.provider.CallLog get_androidproviderCallLog()>
<android.widget.RemoteViewsAdapter: boolean isEmpty()>
<android.graphics.drawable.AnimationDrawable: int getDuration(int)>
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putInt(java.lang.String,int)>
<com.android.internal.view.menu.MenuPopupHelper: boolean expandItemActionView(com.android.internal.view.menu.MenuBuilder,com.android.internal.view.menu.MenuItemImpl)>
<android.net.http.Connection: android.net.http.Connection getConnection(android.content.Context,org.apache.http.HttpHost,org.apache.http.HttpHost,android.net.http.RequestFeeder)>
<android.widget.NumberPicker: void setOnScrollListener(android.widget.NumberPicker$OnScrollListener)>
<android.security.KeyChainException: void <init>(java.lang.Throwable)>
<android.widget.RatingBar: void onMeasure(int,int)>
<android.widget.TabWidget: void setRightStripDrawable(android.graphics.drawable.Drawable)>
<com.android.server.accessibility.TouchExplorer$PointerTracker: int getLastReceivedUpPointerId()>
<android.os.IMessenger$Stub: android.os.IBinder asBinder()>
<android.webkit.WebSettings: java.lang.String getStandardFontFamily()>
<android.view.inputmethod.ExtractedTextRequest: int describeContents()>
<android.widget.AutoCompleteTextView: android.widget.ListAdapter access$700(android.widget.AutoCompleteTextView)>
<com.android.server.accessibility.TouchExplorer$SendHoverDelayed: void remove()>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setInterpolator(android.animation.TimeInterpolator)>
<android.app.SearchDialog$5: boolean onSuggestionClick(int)>
<GenerationGG: android.hardware.Sensor get_androidhardwareSensor()>
<android.app.Notification$Builder: void setFlag(int,boolean)>
<android.net.wifi.WifiStateTracker: android.net.LinkProperties getLinkProperties()>
<android.net.TrafficStats: void untagSocket(java.net.Socket)>
<com.android.internal.os.IResultReceiver$Stub: com.android.internal.os.IResultReceiver asInterface(android.os.IBinder)>
<android.server.search.Searchables: android.content.ComponentName getDefaultGlobalSearchProvider(java.util.List)>
<android.content.res.StringBlock$StyleIDs: int access$400(android.content.res.StringBlock$StyleIDs)>
<Wrapper_android_hardware_usb_UsbEndpoint: void test_android_hardware_usb_UsbEndpoint()>
<GenerationGG: android.view.ViewTreeObserver$OnTouchModeChangeListener get_androidviewViewTreeObserver__OnTouchModeChangeListener()>
<com.android.internal.os.BatteryStatsImpl: void finishAddingCpuLocked(int,int,int,long[])>
<android.widget.PopupWindow: void <init>(android.view.View,int,int)>
<android.net.wifi.WifiStateMachine: com.android.internal.util.State access$10000(android.net.wifi.WifiStateMachine)>
<android.inputmethodservice.IInputMethodWrapper: void <init>(android.inputmethodservice.AbstractInputMethodService,android.view.inputmethod.InputMethod)>
<android.content.res.TypedArray: boolean hasValue(int)>
<android.view.Surface: int getGenerationId()>
<com.android.internal.statusbar.StatusBarIcon: int describeContents()>
<android.text.style.BackgroundColorSpan: void writeToParcel(android.os.Parcel,int)>
<android.app.BackStackRecord: android.app.FragmentTransaction detach(android.app.Fragment)>
<junit.runner.BaseTestRunner: void addError(junit.framework.Test,java.lang.Throwable)>
<android.view.inputmethod.InputMethodInfo: boolean equals(java.lang.Object)>
<com.android.server.location.LocationBasedCountryDetector$3: void <init>(com.android.server.location.LocationBasedCountryDetector,android.location.Location)>
<android.view.ViewTreeObserver: void addOnComputeInternalInsetsListener(android.view.ViewTreeObserver$OnComputeInternalInsetsListener)>
<android.widget.ListPopupWindow: boolean isShowing()>
<com.android.internal.telephony.IccCard: boolean access$402(com.android.internal.telephony.IccCard,boolean)>
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm8BitPacked(java.lang.String)>
<android.graphics.YuvImage: byte[] getYuvData()>
<GenerationGG: android.animation.Animator$AnimatorListener get_androidanimationAnimator__AnimatorListener()>
<com.android.server.NetworkManagementSocketTagger: void resetKernelUidStats(int)>
<android.app.ActivityManager$RunningServiceInfo$1: void <init>()>
<android.preference.DialogPreference$SavedState: void <clinit>()>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void access$600(com.android.server.connectivity.Tethering$TetherInterfaceSM,boolean)>
<android.widget.GridLayout: int getAlignmentMode()>
<com.android.internal.telephony.ApnSetting: boolean canHandleType(java.lang.String)>
<android.graphics.Paint: float native_measureText(char[],int,int)>
<com.android.internal.os.BatteryStatsImpl$Uid$Wakelock: boolean reset()>
<android.view.animation.RotateAnimation: void applyTransformation(float,android.view.animation.Transformation)>
<android.net.wifi.WifiWatchdogStateMachine: android.content.BroadcastReceiver access$600(android.net.wifi.WifiWatchdogStateMachine)>
<android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl: void revokeSelf()>
<android.app.IWallpaperManagerCallback$Stub$Proxy: android.os.IBinder asBinder()>
<android.view.IRotationWatcher$Stub: android.os.IBinder asBinder()>
<com.android.server.MountService: void access$200(com.android.server.MountService,java.lang.String,java.lang.String,boolean)>
<android.net.wifi.WifiWatchdogStateMachine$DnsCheckingState: boolean processMessage(android.os.Message)>
<android.database.sqlite.SQLiteDatabase: void enableSqlProfiling(java.lang.String,short)>
<android.server.BluetoothService: boolean setDevicePropertyBooleanNative(java.lang.String,java.lang.String,int)>
<android.widget.TextView: android.content.Context access$3700(android.widget.TextView)>
<com.android.server.InputMethodManagerService: void addClient(com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int,int)>
<android.view.ViewGroup: void setAlwaysDrawnWithCacheEnabled(boolean)>
<android.location.Address: java.lang.String access$402(android.location.Address,java.lang.String)>
<android.net.SntpClient: long read32(byte[],int)>
<android.widget.MediaController: android.widget.TextView access$1000(android.widget.MediaController)>
<android.app.ActivityManager$ProcessErrorStateInfo: void <init>(android.os.Parcel)>
<android.graphics.Paint: int native_getTextWidths(int,char[],int,int,float[])>
<android.database.CursorWindow$1: void <init>()>
<com.android.server.PowerManagerService$BootCompletedReceiver: void <init>(com.android.server.PowerManagerService)>
<android.os.RegistrantList: void add(android.os.Registrant)>
<android.view.GLES20Canvas$CanvasFinalizer: void finalize()>
<android.database.sqlite.SQLiteCompiledSql: java.lang.String toString()>
<android.app.ActivityManager$TaskThumbnails: int describeContents()>
<android.net.sip.SipAudioCall$1: void onRegistrationFailed(android.net.sip.SipSession,int,java.lang.String)>
<android.media.AudioService$VolumeStreamState: int access$600(android.media.AudioService$VolumeStreamState)>
<android.os.Debug: void resetThreadExternalAllocCount()>
<android.graphics.Matrix: boolean postScale(float,float)>
<android.widget.StackView: void applyTransformForChildAtIndex(android.view.View,int)>
<com.android.internal.telephony.cdma.SmsMessage: int getNumOfVoicemails()>
<android.widget.ListPopupWindow$1: void <init>(android.widget.ListPopupWindow)>
<android.net.http.Connection: boolean keepAlive(org.apache.http.HttpEntity,org.apache.http.ProtocolVersion,int,org.apache.http.protocol.HttpContext)>
<android.graphics.drawable.ScaleDrawable: int getOpacity()>
<android.webkit.WebView: boolean nativeHasFocusNode()>
<android.graphics.Matrix: void setSinCos(float,float)>
<android.util.NtpTrustedTime: long getCacheAge()>
<android.opengl.GLSurfaceView: void surfaceCreated(android.view.SurfaceHolder)>
<DumbClass: void DumbMethod61()>
<android.widget.ZoomButtonsController: boolean isInterestingKey(int)>
<android.text.util.Linkify: void <clinit>()>
<com.android.server.wm.InputFilter: void sendInputEvent(android.view.InputEvent,int)>
<junit.framework.TestCase: void assertEquals(double,double,double)>
<com.android.internal.os.AtomicFile: byte[] readFully()>
<android.media.AudioService: void setRingerModeInt(int,boolean)>
<android.net.http.HttpAuthHeader: void <init>(java.lang.String)>
<android.renderscript.Matrix4f: void set(int,int,float)>
<android.hardware.SensorManager: boolean remapCoordinateSystemImpl(float[],int,int,float[])>
<android.os.Messenger: android.os.IBinder getBinder()>
<Wrapper_android_renderscript_Long4: void test_android_renderscript_Long4()>
<GenerationGG: android.webkit.WebHistoryItem get_androidwebkitWebHistoryItem()>
<GenerationGG: android.content.OperationApplicationException get_androidcontentOperationApplicationException()>
<android.graphics.Bitmap: boolean nativeCompress(int,int,int,java.io.OutputStream,byte[])>
<com.android.server.am.ActivityManagerService: void skipCurrentReceiverLocked(com.android.server.am.ProcessRecord)>
<android.security.KeyStore: boolean isEmpty()>
<android.webkit.HTML5VideoView: int getTextureName()>
<android.content.IntentFilter: void <clinit>()>
<com.android.server.pm.PackageManagerService: java.lang.String getNameForUid(int)>
<android.view.ViewRootImpl$AccessibilityInteractionController$1: void onAcquired(android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs)>
<android.view.textservice.SpellCheckerSubtype: void <init>(int,java.lang.String,java.lang.String)>
<android.net.NetworkQuotaInfo: void writeToParcel(android.os.Parcel,int)>
<android.webkit.WebSettings: void <clinit>()>
<com.android.server.PowerManagerService: int access$6400(com.android.server.PowerManagerService)>
<com.android.internal.telephony.ApnContext: void setReason(java.lang.String)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState: void <init>(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<GenerationGG: android.widget.SpinnerAdapter get_androidwidgetSpinnerAdapter()>
<com.android.internal.os.ProcessStats$1: void <init>()>
<android.app.ContextImpl$7: void <init>()>
<android.server.search.SearchManagerService$MyPackageMonitor: void <init>(android.server.search.SearchManagerService)>
<android.graphics.Canvas: boolean native_clipPath(int,int,int)>
<android.view.animation.AnimationSet: void setRepeatMode(int)>
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int hashCode()>
<android.webkit.MimeTypeMap: void <clinit>()>
<android.widget.TextView$SuggestionsPopupWindow: android.widget.TextView$SuggestionsPopupWindow$SuggestionInfo[] access$3900(android.widget.TextView$SuggestionsPopupWindow)>
<android.content.pm.RegisteredServicesCache: void writePersistentServicesLocked()>
<android.view.ViewPropertyAnimator$1: void <init>(android.view.ViewPropertyAnimator)>
<android.content.Intent$FilterComparison: android.content.Intent getIntent()>
<android.net.Uri$AbstractPart: java.lang.String getDecoded()>
<android.bluetooth.BluetoothServerSocket: void setCloseHandler(android.os.Handler,int)>
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setDescription(java.lang.CharSequence)>
<android.app.Fragment: void onSaveInstanceState(android.os.Bundle)>
<android.view.GLES20Canvas: void nDrawPatch(int,int,byte[],byte[],float,float,float,float,int)>
<android.graphics.Rect: java.lang.String toShortString(java.lang.StringBuilder)>
<com.android.internal.view.InputBindResult$1: com.android.internal.view.InputBindResult createFromParcel(android.os.Parcel)>
<android.animation.PropertyValuesHolder: java.lang.Object getAnimatedValue()>
<android.widget.VideoView$5: void <init>(android.widget.VideoView)>
<android.webkit.WebViewCore: void access$4200(android.webkit.WebViewCore,int,int)>
<com.android.internal.os.BatteryStatsImpl: long getTcpBytes(long,long[],int)>
<android.app.backup.FileBackupHelper: void <init>(android.content.Context,java.lang.String[])>
<android.view.View: void setPadding(int,int,int,int)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimEprlLoaded: java.lang.String getEfName()>
<com.android.server.LightsService$Light: void pulse()>
<android.graphics.Canvas: void native_drawTextRun(int,char[],int,int,int,int,float,float,int,int)>
<android.content.SyncStats: int describeContents()>
<android.security.SystemKeyStore: java.lang.String toHexString(byte[])>
<android.widget.TextView$SelectionEndHandleView: void setActionPopupWindow(android.widget.TextView$ActionPopupWindow)>
<android.test.mock.MockResources: android.content.res.TypedArray obtainTypedArray(int)>
<android.renderscript.Allocation: void copyFrom(short[])>
<com.android.internal.view.menu.BaseMenuPresenter: com.android.internal.view.menu.MenuView$ItemView createItemView(android.view.ViewGroup)>
<android.net.NetworkStats: android.net.NetworkStats addValues(android.net.NetworkStats$Entry)>
<android.graphics.Picture$RecordingCanvas: void drawPicture(android.graphics.Picture)>
<android.graphics.Region: android.graphics.Path getBoundaryPath()>
<android.content.SyncStatusInfo$1: android.content.SyncStatusInfo[] newArray(int)>
<android.view.ViewPropertyAnimator: java.util.HashMap access$300(android.view.ViewPropertyAnimator)>
<GenerationGG: android.webkit.WebResourceResponse get_androidwebkitWebResourceResponse()>
<GenerationGG: android.animation.TypeEvaluator get_androidanimationTypeEvaluator()>
<android.filterfw.core.FrameFormat: int getValuesPerSample()>
<android.preference.PreferenceGroupAdapter$PreferenceLayout: int access$402(android.preference.PreferenceGroupAdapter$PreferenceLayout,int)>
<android.webkit.CookieManager: void nativeFlushCookieStore()>
<com.android.server.ThrottleService: android.content.Context access$200(com.android.server.ThrottleService)>
<android.view.InflateException: void <init>()>
<android.media.AudioManager: android.media.AudioManager$OnAudioFocusChangeListener findFocusListener(java.lang.String)>
<Wrapper_android_database_Observable: void test_android_database_Observable()>
<android.inputmethodservice.KeyboardView: boolean isProximityCorrectionEnabled()>
<com.android.server.wm.WindowState: void applyInsets(android.graphics.Region,android.graphics.Rect,android.graphics.Rect)>
<GenerationGG: android.media.audiofx.AudioEffect$OnControlStatusChangeListener get_androidmediaaudiofxAudioEffect__OnControlStatusChangeListener()>
<com.android.server.net.NetworkIdentitySet: void writeOptionalString(java.io.DataOutputStream,java.lang.String)>
<android.renderscript.Element: android.renderscript.Element I16_3(android.renderscript.RenderScript)>
<android.os.ParcelUuid: android.os.ParcelUuid fromString(java.lang.String)>
<com.android.server.accessibility.TouchExplorer: void sendDownForAllActiveNotInjectedPointers(android.view.MotionEvent,int)>
<android.hardware.usb.UsbRequest: void dequeue()>
<com.android.server.sip.SipHelper: javax.sip.message.Request createRequest(java.lang.String,android.net.sip.SipProfile,android.net.sip.SipProfile,java.lang.String)>
<com.android.internal.telephony.DataConnectionTracker$1: void <init>(com.android.internal.telephony.DataConnectionTracker)>
<android.webkit.WebSettings: void setSerifFontFamily(java.lang.String)>
<android.animation.LayoutTransition: android.animation.Animator getAnimator(int)>
<android.view.FocusFinder$SequentialFocusComparator: void setRoot(android.view.ViewGroup)>
<android.view.ViewRootImpl: void invalidate()>
<android.widget.AbsListView: void setFriction(float)>
<android.app.ActivityManager$MemoryInfo: void readFromParcel(android.os.Parcel)>
<com.android.internal.telephony.WspTypeDecoder: long getValue32()>
<android.opengl.GLSurfaceView: void setPreserveEGLContextOnPause(boolean)>
<GenerationGG: android.preference.PreferenceGroup get_androidpreferencePreferenceGroup()>
<android.view.KeyEvent: int getDeadChar(int,int)>
<android.preference.GenericInflater: void setDefaultPackage(java.lang.String)>
<android.graphics.drawable.ShapeDrawable$ShapeState: android.graphics.drawable.Drawable newDrawable()>
<android.net.http.HttpResponseCache: int getHitCount()>
<android.text.format.DateUtils: boolean isToday(long)>
<android.os.Binder: long clearCallingIdentity()>
<android.view.inputmethod.InputMethodManager$H: void <init>(android.view.inputmethod.InputMethodManager,android.os.Looper)>
<android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation)>
<android.animation.AnimatorSet: java.util.ArrayList getChildAnimations()>
<android.content.res.XmlBlock: int nativeGetAttributeDataType(int,int)>
<android.media.Metadata: boolean scanAllRecords(android.os.Parcel,int)>
<android.media.AudioService$MediaButtonBroadcastReceiver: void <init>(android.media.AudioService)>
<android.webkit.CookieSyncManager: void stopSync()>
<android.app.Fragment: void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater)>
<Wrapper_android_graphics_Rect: void test_android_graphics_Rect()>
<GenerationGG: android.content.DialogInterface$OnDismissListener get_androidcontentDialogInterface__OnDismissListener()>
<android.view.ViewGroup$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.MountService$MountObbAction: void <init>(com.android.server.MountService,com.android.server.MountService$ObbState,java.lang.String)>
<android.os.DropBoxManager$Entry: void <init>(java.lang.String,long,java.lang.String)>
<android.widget.ExpandableListView: int getFlatListPosition(long)>
<android.opengl.GLSurfaceView$DefaultContextFactory: void <init>(android.opengl.GLSurfaceView,android.opengl.GLSurfaceView$1)>
<android.content.res.AssetFileDescriptor: void writeToParcel(android.os.Parcel,int)>
<android.net.LocalSocketImpl$SocketInputStream: void close()>
<com.android.internal.widget.EditableInputConnection: boolean beginBatchEdit()>
<com.android.server.pm.PackageManagerService$SdInstallArgs: void setCachePath(java.lang.String)>
<android.net.SSLCertificateSocketFactory: void verifyHostname(java.net.Socket,java.lang.String)>
<android.view.ViewGroup: boolean gatherTransparentRegion(android.graphics.Region)>
<android.view.View: void setRotation(float)>
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState: void <init>(com.android.server.connectivity.Tethering$TetherMasterSM)>
<com.android.server.am.ActivityStack: void removeHistoryRecordsForAppLocked(java.util.ArrayList,com.android.server.am.ProcessRecord)>
<android.widget.NumberPicker: int access$1100(android.widget.NumberPicker,java.lang.String)>
<android.view.inputmethod.InputMethodSubtype: int hashCode()>
<com.android.server.pm.Settings$1: java.lang.String packageForFilter(android.content.IntentFilter)>
<android.app.ActionBar: void setStackedBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.inputmethodservice.Keyboard: int access$300(android.inputmethodservice.Keyboard)>
<android.animation.PropertyValuesHolder: int access$500(java.lang.Class,java.lang.String)>
<android.text.method.BaseMovementMethod: int getInnerHeight(android.widget.TextView)>
<android.text.StaticLayout: int getLineForVertical(int)>
<android.content.pm.VerifierDeviceIdentity: long decodeBase32(byte[])>
<android.widget.TableLayout: void shrinkAndStretchColumns(int)>
<android.renderscript.RenderScript: void rsnScriptSetVarD(int,int,int,double)>
<android.os.DropBoxManager$Entry: int describeContents()>
<android.widget.ZoomButtonsController$1: void <init>(android.widget.ZoomButtonsController)>
<android.content.Loader: int getId()>
<com.android.internal.telephony.DataConnection: void access$1800(com.android.internal.telephony.DataConnection,com.android.internal.util.IState)>
<com.android.internal.telephony.gsm.SIMRecords: void onRadioOffOrNotAvailable()>
<android.graphics.Bitmap: int getScaledHeight(android.graphics.Canvas)>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: void <init>(byte[])>
<android.renderscript.Matrix3f: void <init>(float[])>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: int countExcessivePowers()>
<GenerationGG: android.text.style.ScaleXSpan get_androidtextstyleScaleXSpan()>
<android.renderscript.Matrix2f: float[] getArray()>
<android.drm.DrmManagerClient: int getDrmObjectType(java.lang.String,java.lang.String)>
<android.gesture.Learner: void <init>()>
<com.android.internal.app.ActionBarImpl: android.view.View getCustomView()>
<android.net.wifi.p2p.WifiP2pService: com.android.internal.util.AsyncChannel access$502(android.net.wifi.p2p.WifiP2pService,com.android.internal.util.AsyncChannel)>
<android.os.Messenger: int hashCode()>
<android.graphics.Bitmap: int getScaledWidth(android.util.DisplayMetrics)>
<android.view.GLES20Canvas: void nDrawRoundRect(int,float,float,float,float,float,float,int)>
<com.android.server.NativeDaemonConnector: java.util.ArrayList doCommandLocked(java.lang.String)>
<android.content.SyncManager: java.lang.String getLastFailureMessage(int)>
<com.android.server.NetworkManagementSocketTagger: void setKernelCounterSet(int,int)>
<com.android.server.wm.InputApplicationHandle: void nativeDispose()>
<android.graphics.Rect: float exactCenterX()>
<android.media.FaceDetector$Face: void <init>(android.media.FaceDetector,android.media.FaceDetector$1)>
<com.android.internal.content.PackageMonitor: void <init>()>
<com.android.server.pm.PackageManagerService$FileInstallArgs: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,java.lang.String,java.lang.String)>
<android.view.ViewRootImpl$TakenSurfaceHolder: void setType(int)>
<android.database.MatrixCursor: void addRow(java.util.ArrayList,int)>
<android.test.mock.MockResources: int getDimensionPixelOffset(int)>
<com.android.server.sip.SipSessionGroup: void resetExternalAddress()>
<android.os.Looper: android.os.MessageQueue getQueue()>
<android.util.SparseArray: void removeAt(int)>
<android.view.View$TransformationInfo: boolean access$902(android.view.View$TransformationInfo,boolean)>
<android.location.LocationManager: android.location.GpsStatus access$200(android.location.LocationManager)>
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getInAnimation()>
<android.widget.ActivityChooserView: android.content.Context access$700(android.widget.ActivityChooserView)>
<com.android.server.usb.UsbSettingsManager$AccessoryFilter: com.android.server.usb.UsbSettingsManager$AccessoryFilter read(org.xmlpull.v1.XmlPullParser)>
<com.android.internal.telephony.RIL: java.lang.String requestToString(int)>
<android.app.ContextImpl$9: void <init>()>
<android.widget.AbsListView: boolean isStackFromBottom()>
<Wrapper_android_speech_RecognitionListener: void test_android_speech_RecognitionListener()>
<android.webkit.CallbackProxy$9: void <init>(android.webkit.CallbackProxy,android.webkit.JsResult)>
<android.os.AsyncTask$WorkerRunnable: void <init>()>
<android.webkit.CacheManager: android.webkit.CacheManager$CacheResult nativeGetCacheResult(java.lang.String)>
<android.widget.TableLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.os.BatteryStats$HistoryItem: void setTo(android.os.BatteryStats$HistoryItem)>
<android.os.Message: java.lang.String toString()>
<android.gesture.Gesture: android.graphics.Path toPath(android.graphics.Path)>
<android.inputmethodservice.InputMethodService: android.app.Dialog getWindow()>
<android.net.LinkProperties$1: void <init>()>
<android.database.sqlite.DatabaseConnectionPool: void doAsserts()>
<android.content.res.StringBlock$Height: void <init>(int)>
<Wrapper_android_telephony_ServiceState: void test_android_telephony_ServiceState()>
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorEventListener)>
<android.text.Layout: int getLineBaseline(int)>
<android.app.LoadedApk$ServiceDispatcher$ConnectionInfo: void <init>()>
<android.webkit.WebViewCore: boolean isUpdatePicturePaused(android.webkit.WebViewCore)>
<android.location.LocationManager$ListenerTransport: void <init>(android.location.LocationManager,android.location.LocationListener,android.os.Looper)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup()>
<android.text.SpannableStringBuilder: int getSpanFlags(java.lang.Object)>
<com.android.internal.telephony.gsm.GsmDataConnection: void setProfileId(int)>
<Wrapper_android_util_TimingLogger: void test_android_util_TimingLogger()>
<android.test.mock.MockPackageManager: android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String,int)>
<android.view.GLES20RecordingCanvas: void drawText(char[],int,int,float,float,android.graphics.Paint)>
<android.webkit.WebView$InnerGlobalLayoutListener: void <init>(android.webkit.WebView)>
<android.content.Intent: android.content.Intent setData(android.net.Uri)>
<com.android.internal.telephony.cat.CatCmdMessage$BrowserSettings: void <init>(com.android.internal.telephony.cat.CatCmdMessage)>
<android.telephony.ServiceState: void setCdmaEriIconMode(int)>
<android.widget.GridLayout: void setCellGroup(android.widget.GridLayout$LayoutParams,int,int,int,int)>
<android.telephony.SmsMessage: java.lang.String getPseudoSubject()>
<Wrapper_android_graphics_PointF: void test_android_graphics_PointF()>
<com.android.internal.database.SortCursor: void registerDataSetObserver(android.database.DataSetObserver)>
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub: android.os.IBinder asBinder()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimMdnLoaded: void onRecordLoaded(android.os.AsyncResult)>
<android.net.wifi.WifiNative: boolean saveConfigCommand()>
<android.content.pm.PackageParser: boolean copyNeeded(int,android.content.pm.PackageParser$Package,android.os.Bundle)>
<android.media.MediaRecorder: android.media.MediaRecorder$OnInfoListener access$200(android.media.MediaRecorder)>
<android.content.res.StringBlock$StyleIDs: int access$1002(android.content.res.StringBlock$StyleIDs,int)>
<android.bluetooth.BluetoothDeviceProfileState: android.server.BluetoothService access$3700(android.bluetooth.BluetoothDeviceProfileState)>
<android.content.res.AssetManager$AssetInputStream: void finalize()>
<android.net.DhcpStateMachine: com.android.internal.util.State access$1200(android.net.DhcpStateMachine)>
<android.view.GLES20Canvas: void nDrawOval(int,float,float,float,float,int)>
<com.android.server.pm.PreferredActivity: void writeToXml(org.xmlpull.v1.XmlSerializer)>
<com.android.internal.telephony.Call: com.android.internal.telephony.Connection getEarliestConnection()>
<com.android.internal.os.BatteryStatsImpl$StopwatchTimer: void plug(long,long)>
<android.net.NetworkInfo: void <clinit>()>
<android.bluetooth.BluetoothTetheringDataTracker: java.lang.String getTcpBufferSizesPropName()>
<android.os.Debug: int getGlobalExternalAllocSize()>
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHid: boolean processMessage(android.os.Message)>
<android.webkit.HTML5VideoViewProxy: void nativeOnEnded(int)>
<android.test.MoreAsserts: void failWrongElement(java.lang.String,int,java.lang.Object,java.lang.Object)>
<android.webkit.WebView: android.webkit.WebViewDatabase access$1300(android.webkit.WebView)>
<com.android.internal.view.menu.ActionMenuItem: boolean isEnabled()>
<com.android.server.usb.UsbDeviceManager: android.app.NotificationManager access$1300(com.android.server.usb.UsbDeviceManager)>
<android.net.wifi.WifiStateMachine$DriverStoppedState: void <init>(android.net.wifi.WifiStateMachine)>
<com.android.internal.telephony.gsm.GsmMmiCode: boolean isPendingUSSD()>
<android.content.res.AssetFileDescriptor: java.io.FileOutputStream createOutputStream()>
<android.webkit.HttpAuthHandler: void cancel()>
<android.speech.tts.TextToSpeech$Connection$1: void <init>(android.speech.tts.TextToSpeech$Connection)>
<android.gesture.Gesture: android.graphics.Path toPath(int,int,int,int)>
<android.net.wifi.p2p.IWifiP2pManager$Stub: android.os.IBinder asBinder()>
<android.net.wifi.p2p.WifiP2pDevice: int describeContents()>
<android.media.Ringtone: void <clinit>()>
<android.Manifest: void <init>()>
<android.media.CamcorderProfile: android.media.CamcorderProfile get(int)>
<android.text.SpannableStringInternal: int getSpanEnd(java.lang.Object)>
<com.android.internal.telephony.PhoneBase: boolean isInEmergencyCall()>
<android.net.wifi.WifiStateMachine: android.net.wifi.SupplicantState handleSupplicantStateChange(android.os.Message)>
<android.telephony.cdma.CdmaCellLocation: void setCellLocationData(int,int,int,int,int)>
<GenerationGG: android.media.AudioManager get_androidmediaAudioManager()>
<android.graphics.drawable.PictureDrawable: int getIntrinsicHeight()>
<android.renderscript.Allocation: android.renderscript.Type typeFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl)>
<android.test.mock.MockContext: android.graphics.drawable.Drawable getWallpaper()>
<com.android.internal.widget.ActionBarView: boolean hasEmbeddedTabs()>
<android.animation.Keyframe$FloatKeyframe: void <init>(float,float)>
<com.android.internal.net.DomainNameValidator: boolean isIpAddress(java.lang.String)>
<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean isFwdLocked()>
<android.test.IsolatedContext$MockAccountManager: android.accounts.AccountManagerFuture getAccountsByTypeAndFeatures(java.lang.String,java.lang.String[],android.accounts.AccountManagerCallback,android.os.Handler)>
<android.view.View: int getOverScrollMode()>
<GenerationGG: android.text.TextWatcher get_androidtextTextWatcher()>
<android.graphics.drawable.shapes.PathShape: android.graphics.drawable.shapes.PathShape clone()>
<android.widget.SearchView$8: void <init>(android.widget.SearchView)>
<android.test.LoaderTestCase: java.lang.Object getLoaderResultSynchronously(android.content.Loader)>
<android.widget.OverScroller: boolean isOverScrolled()>
<android.content.SyncAdapterType$1: void <init>()>
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord getProcessRecordLocked(java.lang.String,int)>
<android.view.View: float getTranslationY()>
<android.location.GpsStatus$1: void <init>(android.location.GpsStatus)>
<android.net.wifi.WifiInfo: void <init>()>
<com.android.server.wm.WindowManagerService: void pauseRotationLocked()>
<android.os.StrictMode$Span: void finish()>
<android.net.UrlQuerySanitizer: void <init>()>
<android.net.wifi.p2p.WifiP2pService: int access$3600(android.net.wifi.p2p.WifiP2pService)>
<com.android.internal.telephony.IntRangeManager: boolean isEmpty()>
<android.content.IntentFilter$AuthorityEntry: java.lang.String getHost()>
<GenerationGG: android.view.textservice.SpellCheckerInfo get_androidviewtextserviceSpellCheckerInfo()>
<android.widget.ExpandableListView: void setOnGroupClickListener(android.widget.ExpandableListView$OnGroupClickListener)>
<Wrapper_android_graphics_Path: void test_android_graphics_Path()>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataUCS2(int)>
<android.app.ActivityThread: void handleDumpHeap(boolean,android.app.ActivityThread$DumpHeapData)>
<android.app.NotificationManager: void <clinit>()>
<GenerationGG: android.text.style.SubscriptSpan get_androidtextstyleSubscriptSpan()>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>
<android.webkit.WebView$HitTestResult: void setType(int)>
<com.android.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean onSubMenuSelected(com.android.internal.view.menu.SubMenuBuilder)>
<android.view.View$4: java.lang.Float get(android.view.View)>
<android.view.TextureView: void buildLayer()>
<android.widget.ExpandableListConnector: java.util.ArrayList getExpandedGroupMetadataList()>
<com.android.server.location.GpsLocationProvider: int getAccuracy()>
<android.accessibilityservice.AccessibilityServiceInfo: void appendEventTypes(java.lang.StringBuilder,int)>
<android.webkit.WebViewCore: int access$702(android.webkit.WebViewCore,int)>
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: java.lang.String packageForFilter(android.content.IntentFilter)>
<android.os.Handler: void removeCallbacks(java.lang.Runnable,java.lang.Object)>
<android.os.Parcel: void readFloatArray(float[])>
<android.widget.Gallery: void setSpacing(int)>
<android.graphics.Typeface: android.graphics.Typeface createFromAsset(android.content.res.AssetManager,java.lang.String)>
<android.graphics.Canvas: void native_drawPath(int,int,int)>
<android.widget.VideoView: boolean access$402(android.widget.VideoView,boolean)>
<android.webkit.HTML5VideoViewProxy$PosterDownloader: void headers(android.net.http.Headers)>
<android.telephony.cdma.CdmaCellLocation: int getBaseStationId()>
<android.view.inputmethod.CompletionInfo: int getPosition()>
<android.webkit.HTML5VideoViewProxy: void access$1200(android.webkit.HTML5VideoViewProxy,int,int)>
<android.widget.AbsSeekBar: void onMeasure(int,int)>
<android.gesture.GestureStore: void addGesture(java.lang.String,android.gesture.Gesture)>
<android.media.JetPlayer: boolean loadJetFile(java.lang.String)>
<com.android.internal.os.BatteryStatsImpl: void stopAllSignalStrengthTimersLocked(int)>
<android.util.JsonWriter: android.util.JsonWriter value(java.lang.Number)>
<android.os.Handler: void <init>(android.os.Looper)>
<android.view.accessibility.AccessibilityInteractionClient: void setFindAccessibilityNodeInfoResult(android.view.accessibility.AccessibilityNodeInfo,int)>
<android.widget.TextView: int getBottomVerticalOffset(boolean)>
<android.graphics.Color: int green(int)>
<android.service.wallpaper.IWallpaperEngine$Stub: android.os.IBinder asBinder()>
<com.android.server.InputMethodManagerService: void removeClient(com.android.internal.view.IInputMethodClient)>
<com.android.server.wm.WindowState: void disposeInputChannel()>
<android.net.wifi.WifiNative: boolean p2pReinvoke(int,java.lang.String)>
<com.android.server.connectivity.Vpn: int jniSetAddresses(java.lang.String,java.lang.String)>
<android.widget.RelativeLayout$LayoutParams: int access$300(android.widget.RelativeLayout$LayoutParams)>
<com.android.internal.view.IInputMethod$Stub$Proxy: android.os.IBinder asBinder()>
<android.media.SoundPool: boolean unload(int)>
<com.android.internal.telephony.cdma.CdmaCall: com.android.internal.telephony.Call$State getState()>
<com.android.internal.telephony.gsm.SIMRecords: void dispose()>
<com.android.server.AppWidgetService: void dumpHost(com.android.server.AppWidgetService$Host,int,java.io.PrintWriter)>
<android.os.WorkSource$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.content.res.StringBlock$StyleIDs: void <init>()>
<android.graphics.Paint: void setFilterBitmap(boolean)>
<android.text.TextUtils$Reverser: void <init>(java.lang.CharSequence,int,int)>
<GenerationGG: android.view.VelocityTracker get_androidviewVelocityTracker()>
<android.widget.SimpleAdapter: android.widget.SimpleAdapter$ViewBinder getViewBinder()>
<android.widget.TabWidget: boolean isStripEnabled()>
<android.server.BluetoothA2dpService: void log(java.lang.String)>
<android.view.HardwareCanvas: boolean isHardwareAccelerated()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void resetPollStats()>
<android.os.ResultReceiver: void onReceiveResult(int,android.os.Bundle)>
<android.media.audiofx.EnvironmentalReverb: short getRoomLevel()>
<android.webkit.WebViewCore: boolean nativeValidNodeAndBounds(int,int,android.graphics.Rect)>
<com.android.internal.telephony.DriverCall: java.lang.String toString()>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: int radioTechnologyToDataServiceState(int)>
<android.os.StrictMode: android.util.Singleton access$600()>
<com.android.server.wm.WindowManagerService: boolean inKeyguardRestrictedInputMode()>
<android.content.ContentValues$1: java.lang.Object[] newArray(int)>
<android.content.ActivityNotFoundException: void <init>()>
<android.hardware.usb.UsbInterface: android.hardware.usb.UsbEndpoint getEndpoint(int)>
<android.renderscript.FieldPacker: void addU32(android.renderscript.Long3)>
<android.graphics.Path: void native_set(int,int)>
<android.graphics.drawable.AnimatedRotateDrawable: void nextFrame()>
<com.android.server.NotificationManagerService: com.android.server.NotificationManagerService$NotificationRecord access$702(com.android.server.NotificationManagerService,com.android.server.NotificationManagerService$NotificationRecord)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection: void <init>()>
<android.widget.MediaController: java.lang.String stringForTime(int)>
<android.os.BatteryStats$Uid: void <init>()>
<android.server.BluetoothService$3: void onServiceDisconnected(int)>
<com.android.internal.telephony.IccRecords: boolean getVoiceMessageWaiting()>
<com.android.server.BackupManagerService$ActiveRestoreSession: void <init>(com.android.server.BackupManagerService,java.lang.String,java.lang.String)>
<android.text.style.QuoteSpan: void <init>()>
<android.database.sqlite.SQLiteQueryBuilder: void <clinit>()>
<com.android.internal.view.menu.MenuPopupHelper: boolean flagActionItems()>
<android.webkit.HttpAuthHandlerImpl: void <init>(android.webkit.Network)>
<android.net.NetworkPolicyManager: void dumpRules(java.io.PrintWriter,int)>
<android.net.Uri$Part$EmptyPart: void <init>(java.lang.String)>
<com.android.server.wm.WindowState: boolean isReadyForDisplay()>
<android.app.Fragment: void initState()>
<android.webkit.BrowserFrame: void nativeSslCertErrorCancel(int,int)>
<android.widget.TextView: android.content.res.ColorStateList getHintTextColors()>
<android.hardware.usb.UsbRequest: boolean native_queue_direct(java.nio.ByteBuffer,int,boolean)>
<android.net.RouteInfo$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.database.sqlite.SQLiteCantOpenDatabaseException: void <init>()>
<android.text.TextDirectionHeuristics$TextDirectionHeuristicImpl: void <init>(android.text.TextDirectionHeuristics$TextDirectionAlgorithm)>
<android.widget.RemoteViews$SetOnClickPendingIntent$1: void <init>(android.widget.RemoteViews$SetOnClickPendingIntent)>
<android.widget.TwoLineListItem: android.widget.TextView getText2()>
<android.app.IServiceConnection$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.server.LightsService$Light: void stopFlashing()>
<android.os.StrictMode$AndroidBlockGuardPolicy: void setPolicyMask(int)>
<android.app.ContextImpl: int access$000()>
<android.net.http.SslCertificate: java.lang.String getValidNotBefore()>
<android.util.SparseArray: java.lang.Object get(int)>
<android.webkit.GeolocationPermissions: void access$500()>
<android.net.LocalServerSocket: android.net.LocalSocketAddress getLocalSocketAddress()>
<android.content.Intent: android.content.Intent setClass(android.content.Context,java.lang.Class)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfPlLoaded: void <init>(com.android.internal.telephony.cdma.CdmaLteUiccRecords,com.android.internal.telephony.cdma.CdmaLteUiccRecords$1)>
<com.android.internal.util.AsyncChannel: void <init>()>
<Wrapper_android_hardware_usb_UsbConstants: void test_android_hardware_usb_UsbConstants()>
<android.net.sip.SipAudioCall: android.net.sip.SipAudioCall$Listener access$100(android.net.sip.SipAudioCall)>
<android.text.method.HideReturnsTransformationMethod: android.text.method.HideReturnsTransformationMethod getInstance()>
<android.app.Dialog: void setCancelMessage(android.os.Message)>
<android.graphics.RectF: boolean setIntersect(android.graphics.RectF,android.graphics.RectF)>
<android.os.RemoteCallback: boolean equals(java.lang.Object)>
<android.webkit.ByteArrayBuilder: void append(byte[],int,int)>
<android.view.inputmethod.InputMethodManager: void focusIn(android.view.View)>
<android.webkit.DeviceMotionService: void onSensorChanged(android.hardware.SensorEvent)>
<android.graphics.Canvas: int save(int)>
<android.graphics.Color: void nativeRGBToHSV(int,int,int,float[])>
<android.renderscript.Element: android.renderscript.Element U16_4(android.renderscript.RenderScript)>
<com.android.internal.view.menu.MenuPopupHelper: com.android.internal.view.menu.MenuPopupHelper$MenuAdapter access$500(com.android.internal.view.menu.MenuPopupHelper)>
<com.android.server.WifiService$LockList: int getStrongestLockMode()>
<com.android.internal.telephony.cdma.CdmaMmiCode: boolean isPukCommand()>
<android.view.ViewDebug$LooperProfiler: int getTraceId(android.os.Message)>
<android.app.Instrumentation$ActivityMonitor: int getHits()>
<android.net.EthernetDataTracker: void setPolicyDataEnable(boolean)>
<android.bluetooth.BluetoothDeviceProfileState: void access$2800(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.IState)>
<android.view.inputmethod.InputMethodInfo: java.lang.String toString()>
<GenerationGG: android.animation.ArgbEvaluator get_androidanimationArgbEvaluator()>
<Wrapper_android_renderscript_Element: void test_android_renderscript_Element()>
<com.android.server.usb.UsbSettingsManager: void <clinit>()>
<android.app.Fragment: android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle)>
<android.os.SystemProperties: java.lang.String get(java.lang.String)>
<Wrapper_android_graphics_BlurMaskFilter: void test_android_graphics_BlurMaskFilter()>
<android.speech.tts.TextToSpeech$8: void <init>(android.speech.tts.TextToSpeech)>
<android.graphics.drawable.LayerDrawable: int getId(int)>
<com.android.internal.util.FastMath: int round(float)>
<android.widget.AbsListView: int getHeaderViewsCount()>
<com.android.server.IntentResolver: android.util.FastImmutableArraySet getFastIntentCategories(android.content.Intent)>
<android.net.Uri$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.net.Uri$OpaqueUri: void <init>(java.lang.String,android.net.Uri$Part,android.net.Uri$Part)>
<android.text.BoringLayout$Metrics: java.lang.String toString()>
<android.text.style.ScaleXSpan: float getScaleX()>
<android.test.mock.MockContext: void unbindService(android.content.ServiceConnection)>
<com.android.internal.view.BaseSurfaceHolder: void setSizeFromLayout()>
<android.widget.TextView$EasyEditSpanController: void <init>(android.widget.TextView)>
<Wrapper_android_renderscript_Int4: void test_android_renderscript_Int4()>
<android.view.GLES20Canvas: void nSetTextureLayerTransform(int,int)>
<android.view.InputChannel: void <clinit>()>
<Wrapper_android_accounts_AuthenticatorDescription: void test_android_accounts_AuthenticatorDescription()>
<android.mtp.MtpObjectInfo: int getStorageId()>
<android.os.Debug: int getThreadAllocSize()>
<android.webkit.WebChromeClient: void onProgressChanged(android.webkit.WebView,int)>
<com.android.server.DropBoxManagerService: void enrollEntry(com.android.server.DropBoxManagerService$EntryFile)>
<android.text.style.AbsoluteSizeSpan: void updateDrawState(android.text.TextPaint)>
<android.preference.GenericInflater$FactoryMerger: java.lang.Object onCreateItem(java.lang.String,android.content.Context,android.util.AttributeSet)>
<android.filterfw.core.FrameManager: void tearDown()>
<com.android.internal.telephony.DataConnectionTracker$Activity: com.android.internal.telephony.DataConnectionTracker$Activity[] values()>
<android.app.WallpaperManager$FastBitmapDrawable: int getOpacity()>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void finalize()>
<GenerationGG: android.sax.StartElementListener get_androidsaxStartElementListener()>
<android.view.MotionEvent: float getSize()>
<junit.framework.TestCase: void assertEquals(java.lang.String,double,double,double)>
<android.net.wifi.p2p.WifiP2pService: android.net.DhcpStateMachine access$5602(android.net.wifi.p2p.WifiP2pService,android.net.DhcpStateMachine)>
<android.database.sqlite.SQLiteDatabase: void releaseCompiledSqlObj(java.lang.String,android.database.sqlite.SQLiteCompiledSql)>
<android.widget.FrameLayout: void setMeasureAllChildren(boolean)>
<android.util.Base64: byte[] encode(byte[],int)>
<android.os.Debug: void resetGlobalGcInvocationCount()>
<android.content.pm.PermissionGroupInfo: int describeContents()>
<android.media.audiofx.EnvironmentalReverb: void setDiffusion(short)>
<android.telephony.SignalStrength: int getEvdoSnr()>
<android.app.ActivityThread$DumpHeapData: void <init>()>
<com.android.server.UiModeManagerService: android.location.Location access$700(com.android.server.UiModeManagerService)>
<android.bluetooth.BluetoothDeviceProfileState: android.server.BluetoothA2dpService access$4000(android.bluetooth.BluetoothDeviceProfileState)>
<android.view.GLES20Canvas: void nResume(int)>
<android.widget.AbsListView: int computeVerticalScrollRange()>
<android.os.ResultReceiver$1: void <init>()>
<android.bluetooth.BluetoothProfileState$PendingCommandState: boolean processMessage(android.os.Message)>
<GenerationGG: android.widget.GridLayout$Alignment get_androidwidgetGridLayout__Alignment()>
<android.app.backup.BackupDataInput: int skipEntityData_native(int)>
<android.content.SyncResult: java.lang.String toDebugString()>
<android.widget.AbsListView$LayoutParams: void <init>(int,int)>
<android.accounts.AccountAuthenticatorCache$MySerializer: java.lang.Object createFromXml(org.xmlpull.v1.XmlPullParser)>
<android.security.KeyStore: android.security.KeyStore getInstance()>
<android.media.audiofx.PresetReverb$Settings: java.lang.String toString()>
<GenerationGG: android.os.MessageQueue get_androidosMessageQueue()>
<android.graphics.Canvas: int initRaster(int)>
<com.android.internal.telephony.DataConnection: void bringUp(android.os.Message,com.android.internal.telephony.ApnSetting)>
<android.text.BoringLayout: void <clinit>()>
<android.graphics.drawable.LayerDrawable: int getChangingConfigurations()>
<android.media.AudioTrack: int getPlaybackRate()>
<GenerationGG: android.speech.RecognitionService get_androidspeechRecognitionService()>
<android.widget.TabHost: int access$900(android.widget.TabHost)>
<android.media.AudioTrack: void stop()>
<android.view.VolumePanel$3: void <init>(android.view.VolumePanel)>
<android.accounts.AccountManagerResponse$1: void <init>()>
<android.bluetooth.BluetoothDeviceProfileState: android.os.Message access$4200(android.bluetooth.BluetoothDeviceProfileState)>
<android.net.NetworkTemplate: int hashCode()>
<com.android.server.wm.WindowManagerService: void access$400(com.android.server.wm.WindowManagerService)>
<android.view.textservice.SuggestionsInfo: void setCookieAndSequence(int,int)>
<com.android.internal.telephony.gsm.GsmCallTracker: void internalClearDisconnected()>
<android.media.AudioService$MediaButtonBroadcastReceiver: void <init>(android.media.AudioService,android.media.AudioService$1)>
<android.net.MobileDataStateTracker: android.net.LinkProperties access$602(android.net.MobileDataStateTracker,android.net.LinkProperties)>
<android.graphics.Canvas: int native_saveLayerAlpha(int,android.graphics.RectF,int,int)>
<android.graphics.Path: void computeBounds(android.graphics.RectF,boolean)>
<android.widget.AutoCompleteTextView$MyWatcher: void <init>(android.widget.AutoCompleteTextView)>
<android.text.method.HideReturnsTransformationMethod: void <clinit>()>
<android.service.wallpaper.IWallpaperEngine$Stub$Proxy: android.os.IBinder asBinder()>
<android.widget.AbsListView: boolean isItemChecked(int)>
<android.media.AudioService: void remoteControlDisplayUsesBitmapSize(android.media.IRemoteControlDisplay,int,int)>
<android.renderscript.FileA3D$EntryType: android.renderscript.FileA3D$EntryType[] values()>
<android.os.PerformanceCollector: void stopAllocCounting()>
<android.view.ViewStub: void dispatchDraw(android.graphics.Canvas)>
<android.media.MediaMetadataRetriever: void <clinit>()>
<GenerationGG: android.view.inputmethod.InputMethod get_androidviewinputmethodInputMethod()>
<android.widget.SearchView: android.view.View$OnFocusChangeListener access$100(android.widget.SearchView)>
<android.webkit.WebIconDatabase: void access$600(java.lang.String)>
<GenerationGG: android.view.ContextMenu get_androidviewContextMenu()>
<com.android.server.WallpaperManagerService: void saveSettingsLocked()>
<android.graphics.Matrix: boolean postTranslate(float,float)>
<android.widget.RemoteViews: void setPendingIntentTemplate(int,android.app.PendingIntent)>
<android.widget.NumberPicker$SetSelectionCommand: int access$802(android.widget.NumberPicker$SetSelectionCommand,int)>
<com.android.server.NetworkManagementService: void registerObserver(android.net.INetworkManagementEventObserver)>
<android.net.wifi.WifiConfigStore: java.lang.String dump()>
<android.renderscript.Font: void <init>(int,android.renderscript.RenderScript)>
<android.graphics.Region: boolean nativeGetBounds(int,android.graphics.Rect)>
<android.webkit.LoadListener: void nativeReceivedResponse(int)>
<android.speech.tts.SynthesisRequest: android.os.Bundle getParams()>
<android.net.http.Headers: void setContentLength(long)>
<android.webkit.HTML5VideoInline: android.graphics.SurfaceTexture getSurfaceTexture(int)>
<android.os.Parcel: void readDoubleArray(double[])>
<com.android.server.am.CompatModePackages: int computeCompatModeLocked(android.content.pm.ApplicationInfo)>
<android.content.Intent: java.lang.String getDataString()>
<java.lang.Object: int nextTag()>
<GenerationGG: android.text.format.DateUtils get_androidtextformatDateUtils()>
<android.util.JsonReader: void beginArray()>
<com.android.internal.telephony.cdma.sms.BearerData: java.lang.String decodeUtf8(byte[],int,int)>
<com.android.internal.content.PackageMonitor: void <clinit>()>
<com.android.internal.os.BatteryStatsImpl$Counter: void stepAtomic()>
<android.content.res.AssetManager: int openAsset(java.lang.String,int)>
<android.animation.KeyframeSet: android.animation.KeyframeSet clone()>
<android.accounts.AuthenticatorDescription: void writeToParcel(android.os.Parcel,int)>
<com.android.internal.telephony.cdma.CDMAPhone: android.telephony.SignalStrength getSignalStrength()>
<android.text.StaticLayout: int getParagraphDirection(int)>
<android.test.mock.MockCursor: boolean isBeforeFirst()>
<com.android.internal.view.menu.ActionMenuPresenter$SavedState$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.graphics.drawable.ClipDrawable: boolean getPadding(android.graphics.Rect)>
<android.net.wifi.WifiStateMachine: void handlePostDhcpSetup()>
<android.widget.TabHost: android.widget.TabWidget access$1000(android.widget.TabHost)>
<android.os.Debug$MemoryInfo$1: java.lang.Object[] newArray(int)>
<android.net.DummyDataStateTracker: java.lang.String getTcpBufferSizesPropName()>
<android.widget.CalendarView: int access$2800(android.widget.CalendarView)>
<android.preference.ListPreference$SavedState: void <clinit>()>
<GenerationGG: android.renderscript.Short4 get_androidrenderscriptShort4()>
<GenerationGG: java.util.HashMap get_javautilHashMap()>
<com.android.internal.telephony.Call$State: void <init>(java.lang.String,int)>
<com.android.internal.telephony.cat.TextMessage: int describeContents()>
<com.android.internal.telephony.IccCard: boolean isApplicationOnIcc(com.android.internal.telephony.IccCardApplication$AppType)>
<android.graphics.PointF: void set(android.graphics.PointF)>
<android.webkit.AccessibilityInjector$AccessibilityWebContentKeyBinding: void <init>(long,int[])>
<GenerationGG: android.accounts.AuthenticatorException get_androidaccountsAuthenticatorException()>
<android.net.Uri$Part: void <init>(java.lang.String,java.lang.String)>
<com.android.internal.telephony.gsm.GsmConnection: boolean isIncoming()>
<android.widget.AbsListView: android.widget.FastScroller access$3900(android.widget.AbsListView)>
<com.android.server.am.CompatModePackages: java.util.HashMap getPackages()>
<android.view.ViewRootImpl: void dispatchCloseSystemDialogs(java.lang.String)>
<android.view.KeyEvent: int getModifiers()>
<android.content.ISyncContext$Stub$Proxy: android.os.IBinder asBinder()>
<android.net.wifi.p2p.WifiP2pManager$Channel: android.net.wifi.p2p.WifiP2pManager$ChannelListener access$002(android.net.wifi.p2p.WifiP2pManager$Channel,android.net.wifi.p2p.WifiP2pManager$ChannelListener)>
<com.android.server.EntropyService: void addDeviceSpecificEntropy()>
<android.widget.TableRow$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.widget.AbsListView: long[] getCheckedItemIds()>
<android.os.Messenger: int describeContents()>
<Wrapper_android_view_VelocityTracker: void test_android_view_VelocityTracker()>
<android.webkit.WebStorage: void access$500(android.webkit.WebStorage,android.os.Message)>
<android.app.DialogFragment: void onDismiss(android.content.DialogInterface)>
<android.widget.TextView: android.content.Context access$7100(android.widget.TextView)>
<android.widget.AbsListView: void clearScrollingCache()>
<android.os.DropBoxManager$Entry: int getFlags()>
<android.app.backup.FullBackupDataOutput: void <init>(android.os.ParcelFileDescriptor)>
<android.bluetooth.BluetoothHeadset$1: void onServiceDisconnected(android.content.ComponentName)>
<android.content.SyncInfo: void <init>(android.os.Parcel)>
<android.graphics.Bitmap$CompressFormat: void <clinit>()>
<com.android.i18n.phonenumbers.AsYouTypeFormatter: void <clinit>()>
<android.test.mock.MockResources: android.graphics.drawable.Drawable getDrawable(int)>
<android.os.Registrant: void notifyRegistrant()>
<com.android.server.pm.PackageManagerService$SdInstallArgs: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$InstallParams)>
<android.app.ActivityThread$Idler: void <init>(android.app.ActivityThread,android.app.ActivityThread$1)>
<android.webkit.URLUtil: boolean isJavaScriptUrl(java.lang.String)>
<android.renderscript.FieldPacker: void addI32(android.renderscript.Int4)>
<Wrapper_android_os_CountDownTimer: void test_android_os_CountDownTimer()>
<com.android.server.wm.WindowManagerService: void <clinit>()>
<com.android.server.location.PassiveProvider: int getStatus(android.os.Bundle)>
<android.text.InputFilter$LengthFilter: void <init>(int)>
<com.android.internal.util.StateMachine$SmHandler: boolean access$1300(com.android.internal.util.StateMachine$SmHandler)>
<android.telephony.gsm.SmsMessage: java.lang.String getServiceCenterAddress()>
<java.lang.Object: int getAttributeUnsignedIntValue(java.lang.String,java.lang.String,int)>
<com.android.internal.telephony.DataConnectionTracker: java.lang.String getActiveApnString(java.lang.String)>
<android.app.SharedPreferencesImpl: void startLoadFromDisk()>
<android.content.pm.PackageParser$ParseComponentArgs: void <init>(android.content.pm.PackageParser$Package,java.lang.String[],int,int,int,int,java.lang.String[],int,int,int)>
<android.webkit.WebView: int access$3500(android.webkit.WebView)>
<com.android.server.wm.WindowState: boolean shouldAnimateMove()>
<android.telephony.SignalStrength: int getLteLevel()>
<android.os.Parcel: android.os.IBinder readStrongBinder()>
<android.graphics.Matrix: boolean preSkew(float,float,float,float)>
<android.widget.PopupWindow: boolean isFocusable()>
<android.view.FocusFinder: int majorAxisDistance(int,android.graphics.Rect,android.graphics.Rect)>
<android.text.DynamicLayout: int getLineStart(int)>
<android.widget.TextView: float getTextScaleX()>
<android.graphics.Camera: void nativeDestructor()>
<android.util.Base64OutputStream: void <init>(java.io.OutputStream,int)>
<android.view.KeyEvent: boolean isSymPressed()>
<android.opengl.GLES10: void glCompressedTexImage2D(int,int,int,int,int,int,int,java.nio.Buffer)>
<android.media.AudioService$VolumeStreamState: void adjustLastAudibleIndex(int)>
<com.android.server.PowerManagerService$WakeLock: void <init>(com.android.server.PowerManagerService,int,android.os.IBinder,java.lang.String,int,int)>
<GenerationGG: android.app.ActionBar$OnMenuVisibilityListener get_androidappActionBar__OnMenuVisibilityListener()>
<com.android.internal.content.PackageMonitor: boolean isPackageModified(java.lang.String)>
<android.webkit.ZoomManager: android.webkit.WebView access$600(android.webkit.ZoomManager)>
<Wrapper_android_drm_DrmStore: void test_android_drm_DrmStore()>
<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageIIIIII(int,int,int,int,int,int,int)>
<android.net.LinkCapabilities: int describeContents()>
<android.graphics.BitmapRegionDecoder: int getHeight()>
<android.hardware.Camera: java.lang.String native_getParameters()>
<android.os.Debug: void getMemoryInfo(android.os.Debug$MemoryInfo)>
<android.content.IntentFilter: boolean hasDataScheme(java.lang.String)>
<android.server.BluetoothService: void addReservedSdpRecords(java.util.ArrayList)>
<android.bluetooth.BluetoothClass: boolean equals(java.lang.Object)>
<android.graphics.Bitmap: int nativeGetPixel(int,int,int)>
<GenerationGG: android.os.Messenger get_androidosMessenger()>
<com.android.internal.view.InputConnectionWrapper$InputContextCallback: void waitForResultLocked()>
<android.content.res.AssetManager: void <init>()>
<com.android.internal.app.ActionBarImpl: boolean isShowing()>
<android.test.AndroidTestRunner: boolean shouldRunSingleTestMethod(java.lang.String,java.lang.Class)>
<com.android.internal.os.BatteryStatsImpl$MyHandler: void <init>(com.android.internal.os.BatteryStatsImpl)>
<android.webkit.ZoomManager: int access$1202(android.webkit.ZoomManager,int)>
<com.android.internal.statusbar.StatusBarIcon$1: void <init>()>
<android.net.wifi.WifiStateMachine$InitialState: void <init>(android.net.wifi.WifiStateMachine)>
<android.app.SearchableInfo: int getVoiceMaxResults()>
<android.filterfw.core.VertexFrame: int getNativeVboId()>
<android.graphics.Matrix: boolean postSkew(float,float)>
<android.view.textservice.SuggestionsInfo: void <clinit>()>
<android.filterfw.core.Filter: java.lang.String getFilterClassName()>
<android.inputmethodservice.KeyboardView: void swipeDown()>
<android.widget.TextView: int getLineBounds(int,android.graphics.Rect)>
<android.os.AsyncTask: boolean isCancelled()>
<com.android.server.wm.AppWindowToken: void setAnimation(android.view.animation.Animation)>
<android.net.NetworkInfo$State: void <clinit>()>
<android.view.ViewGroup: void dispatchCollectViewAttributes(int)>
<android.widget.OverScroller$SplineOverScroller: boolean continueWhenFinished()>
<android.renderscript.Allocation: void validateIsInt8()>
<com.android.server.connectivity.Tethering: boolean isUsb(java.lang.String)>
<com.android.internal.telephony.DataConnectionTracker$DataRoamingSettingObserver: void <init>(com.android.internal.telephony.DataConnectionTracker,android.os.Handler)>
<android.view.KeyCharacterMap$KeyData: void <init>()>
<android.view.GLES20Canvas: void nDrawText(int,char[],int,int,float,float,int,int)>
<android.accounts.AccountManagerResponse$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.os.Parcel: void writeLongArray(long[])>
<android.inputmethodservice.Keyboard$Key: void <init>(android.inputmethodservice.Keyboard$Row)>
<android.content.pm.FeatureInfo: void <init>(android.content.pm.FeatureInfo)>
<GenerationGG: android.database.sqlite.SQLiteAccessPermException get_androiddatabasesqliteSQLiteAccessPermException()>
<android.os.RecoverySystem: void <init>()>
<android.net.MobileDataStateTracker: boolean isAvailable()>
<android.app.backup.FileBackupHelper: void writeNewStateDescription(android.os.ParcelFileDescriptor)>
<com.android.i18n.phonenumbers.PhoneNumberUtil: int extractCountryCode(java.lang.StringBuilder,java.lang.StringBuilder)>
<android.webkit.WebView$TouchEventQueue: android.webkit.WebView$QueuedTouch obtainQueuedTouch()>
<android.nfc.NfcFragment: void <init>()>
<android.content.SyncStorageEngine: long getDelayUntilTime(android.accounts.Account,java.lang.String)>
<android.net.http.RequestQueue$SyncFeeder: boolean haveRequest(org.apache.http.HttpHost)>
<android.animation.Keyframe: float getFraction()>
<android.content.res.TypedArray: int getInteger(int,int)>
<android.text.style.ImageSpan: void <init>(android.graphics.drawable.Drawable,int)>
<android.hardware.SensorManager: void getQuaternionFromVector(float[],float[])>
<android.view.GLES20TextureLayer: android.view.HardwareCanvas start(android.graphics.Canvas)>
<android.accounts.Account$1: android.accounts.Account[] newArray(int)>
<android.widget.ListView: void setOverscrollFooter(android.graphics.drawable.Drawable)>
<com.android.server.am.UriPermission: void dump(java.io.PrintWriter,java.lang.String)>
<junit.framework.TestCase: void assertEquals(java.lang.String,int,int)>
<android.widget.Spinner$DialogPopup: java.lang.CharSequence getHintText()>
<android.renderscript.Program: void bindConstants(android.renderscript.Allocation,int)>
<android.net.sip.SimpleSessionDescription$Fields: void <init>(java.lang.String)>
<com.android.internal.telephony.cat.ComprehensionTlvTag: void <clinit>()>
<android.widget.VideoView: int access$002(android.widget.VideoView,int)>
<android.app.DownloadManager$CursorTranslator: void <clinit>()>
<android.webkit.CallbackProxy$2: void <init>(android.webkit.CallbackProxy,android.webkit.JsResult)>
<android.location.INetInitiatedListener$Stub$Proxy: android.os.IBinder asBinder()>
<android.webkit.GeolocationPermissions: void getOrigins(android.webkit.ValueCallback)>
<android.webkit.WebSettings: void setMinimumFontSize(int)>
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putBoolean(java.lang.String,boolean)>
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1: void <init>(android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask)>
<android.media.AudioRecord: void setRecordPositionUpdateListener(android.media.AudioRecord$OnRecordPositionUpdateListener)>
<android.renderscript.Mesh: android.renderscript.Allocation getVertexAllocation(int)>
<android.net.http.HttpResponseCache: int getRequestCount()>
<android.widget.NumberPicker: void decrementSelectorIndices(int[])>
<com.android.server.BackupManagerService$RestorePolicy: void <clinit>()>
<com.android.server.BackupManagerService: void logBackupComplete(java.lang.String)>
<android.view.ViewRootImpl$AccessibilityInteractionConnection: void findAccessibilityNodeInfosByViewText(java.lang.String,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,long)>
<android.view.VolumePanel: void forceTimeout()>
<android.content.ContentQueryMap$1: void <init>(android.content.ContentQueryMap,android.os.Handler)>
<android.os.RecoverySystem$1: void <init>(android.os.ConditionVariable)>
<com.android.server.MountService: java.util.Map access$2000(com.android.server.MountService)>
<android.media.TimedText: void readHyperText()>
<android.media.MediaPlayer: void <clinit>()>
<android.location.Country: java.lang.String getCountryIso()>
<com.android.server.MountService: void unmountObb(java.lang.String,boolean,android.os.storage.IObbActionListener,int)>
<GenerationGG: android.webkit.WebStorage$QuotaUpdater get_androidwebkitWebStorage__QuotaUpdater()>
<com.android.internal.widget.ActionBarContextView: java.lang.CharSequence getTitle()>
<android.telephony.PhoneStateListener: void onSignalStrengthsChanged(android.telephony.SignalStrength)>
<com.android.server.location.MockProvider: boolean requiresSatellite()>
<android.view.ViewGroup: android.animation.LayoutTransition getLayoutTransition()>
<android.os.storage.IMountServiceListener$Stub$Proxy: android.os.IBinder asBinder()>
<android.opengl.GLSurfaceView$GLThread: void surfaceCreated()>
<android.server.BluetoothService: boolean setAdapterPropertyIntegerNative(java.lang.String,int)>
<android.accounts.AccountManager$AmsTask$Response: void <init>(android.accounts.AccountManager$AmsTask,android.accounts.AccountManager$1)>
<com.android.internal.util.BitwiseOutputStream: void possExpand(int)>
<android.os.RemoteCallbackList: void <init>()>
<android.test.mock.MockCursor: boolean getWantsAllOnMoveCalls()>
<android.widget.ListView: int getDividerHeight()>
<com.android.internal.telephony.gsm.GsmConnection: java.lang.String getAddress()>
<android.view.ActionProvider: void setSubUiVisibilityListener(android.view.ActionProvider$SubUiVisibilityListener)>
<com.android.internal.net.DNParser: java.lang.String quotedAV()>
<android.view.TextureView: void onSizeChanged(int,int,int,int)>
<android.webkit.URLUtil: boolean isResourceUrl(java.lang.String)>
<android.widget.TextView: void computeScroll()>
<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void dispatchPointer(android.view.MotionEvent)>
<android.content.pm.LabeledIntent$1: void <init>()>
<com.android.server.wm.ScreenRotationAnimation: boolean stepAnimation(long)>
<android.security.SystemKeyStore: void <init>()>
<android.view.InputChannel: void nativeWriteToParcel(android.os.Parcel)>
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void <clinit>()>
<android.app.Fragment: java.lang.String toString()>
<android.telephony.SmsMessage: int getIndexOnIcc()>
<android.net.DhcpStateMachine: boolean access$400(android.net.DhcpStateMachine)>
<android.net.wifi.WifiStateMachine$DriverStoppingState: void <init>(android.net.wifi.WifiStateMachine)>
<android.content.pm.VerifierDeviceIdentity$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.speech.SpeechRecognizer$Connection: void onServiceDisconnected(android.content.ComponentName)>
<android.gesture.GestureOverlayView: android.gesture.Gesture getGesture()>
<android.app.SuperNotCalledException: void <init>(java.lang.String)>
<android.net.MailTo: android.net.MailTo parse(java.lang.String)>
<android.app.ActivityThread$ActivityClientRecord: boolean isPreHoneycomb()>
<android.view.KeyEvent: char getMatch(char[],int)>
<android.widget.QuickContactBadge: void setExcludeMimes(java.lang.String[])>
<com.android.internal.telephony.sip.SipPhone: boolean getMessageWaitingIndicator()>
<GenerationGG: android.text.style.LeadingMarginSpan get_androidtextstyleLeadingMarginSpan()>
<android.view.ViewGroup: boolean addStatesFromChildren()>
<android.graphics.Region: boolean quickReject(android.graphics.Rect)>
<android.app.backup.IBackupManager$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.internal.util.StateMachine: void transitionTo(com.android.internal.util.IState)>
<com.android.internal.os.BatteryStatsImpl: void setCallback(com.android.internal.os.BatteryStatsImpl$BatteryCallback)>
<android.net.DhcpInfoInternal: void <init>()>
<GenerationGG: android.widget.ExpandableListView$OnChildClickListener get_androidwidgetExpandableListView__OnChildClickListener()>
<android.text.style.SuggestionSpan: int hashCodeInternal(java.lang.String[],java.lang.String,java.lang.String)>
<android.content.res.AssetManager$AssetInputStream: int read()>
<android.net.http.HttpAuthHeader: java.lang.String getAlgorithm()>
<android.webkit.WebView: android.webkit.WebViewCore$AutoFillData access$1100(android.webkit.WebView)>
<android.graphics.Canvas: boolean clipRect(float,float,float,float)>
<android.text.PackedObjectVector: void growBuffer()>
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: void <init>(android.os.IBinder)>
<android.text.TextUtils: void dumpSpans(java.lang.CharSequence,android.util.Printer,java.lang.String)>
<android.net.ProxyProperties: void writeToParcel(android.os.Parcel,int)>
<android.os.Parcel: void setDataPosition(int)>
<android.telephony.ServiceState$1: android.telephony.ServiceState createFromParcel(android.os.Parcel)>
<android.net.LocalSocket: android.net.LocalSocketAddress getLocalSocketAddress()>
<com.android.internal.view.menu.ActionMenuPresenter$SavedState: void <clinit>()>
<android.util.LruCache: int putCount()>
<android.text.TextLine: void <init>()>
<android.webkit.WebView: boolean inFullScreenMode()>
<com.android.server.AlarmManagerService: void removeLocked(java.util.ArrayList,android.app.PendingIntent)>
<android.graphics.Canvas: void native_drawRGB(int,int,int,int)>
<android.text.style.SpellCheckSpan: boolean isSpellCheckInProgress()>
<GenerationGG: android.renderscript.Float4 get_androidrenderscriptFloat4()>
<GenerationGG: android.webkit.CacheManager$CacheResult get_androidwebkitCacheManager__CacheResult()>
<com.android.internal.view.menu.ActionMenuPresenter$OverflowMenuButton: boolean needsDividerAfter()>
<android.text.Layout$Directions: void <init>(int[])>
<android.server.search.Searchables: java.util.ArrayList getGlobalSearchActivities()>
<android.net.http.Request: void <init>(java.lang.String,org.apache.http.HttpHost,org.apache.http.HttpHost,java.lang.String,java.io.InputStream,int,android.net.http.EventHandler,java.util.Map)>
<GenerationGG: java.net.InetAddress get_javanetInetAddress()>
<android.webkit.LoadListener: void setNativeResponse()>
<com.android.internal.util.StateMachine$ProcessedMessageInfo: void <init>(android.os.Message,com.android.internal.util.State,com.android.internal.util.State)>
<DumbClass: void DumbMethod19()>
<android.widget.SearchView: void setAppSearchData(android.os.Bundle)>
<com.android.internal.util.StateMachine$SmHandler$StateInfo: java.lang.String toString()>
<android.nfc.Tag: java.lang.String[] generateTechStringList(int[])>
<android.content.pm.PackageParser: android.content.pm.ActivityInfo generateActivityInfo(android.content.pm.PackageParser$Activity,int)>
<android.net.wifi.p2p.WifiP2pService: android.net.DhcpStateMachine access$5600(android.net.wifi.p2p.WifiP2pService)>
<android.hardware.SensorManager$LmsFilter: float filter(long,float)>
<Wrapper_android_database_sqlite_SQLiteTableLockedException: void test_android_database_sqlite_SQLiteTableLockedException()>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder clone()>
<com.android.server.pm.PackageManagerService: boolean installOnSd(int)>
<android.app.Activity$ManagedCursor: android.database.Cursor access$100(android.app.Activity$ManagedCursor)>
<android.content.SyncStats$1: android.content.SyncStats createFromParcel(android.os.Parcel)>
<android.os.PatternMatcher: java.lang.String getPath()>
<android.content.pm.ParceledListSlice$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.gesture.GestureOverlayView: void setGestureStrokeLengthThreshold(float)>
<android.os.ServiceManagerProxy: android.os.IBinder asBinder()>
<android.server.BluetoothHealthProfileHandler: void debugLog(java.lang.String)>
<android.widget.BaseExpandableListAdapter: long getCombinedChildId(long,long)>
<GenerationGG: android.database.sqlite.SQLiteReadOnlyDatabaseException get_androiddatabasesqliteSQLiteReadOnlyDatabaseException()>
<android.test.MoreAsserts: void assertNotEmpty(java.lang.String,java.lang.Iterable)>
<android.text.PackedObjectVector: void moveRowGapTo(int)>
<android.renderscript.Script: void setVar(int,android.renderscript.FieldPacker)>
<android.bluetooth.BluetoothDeviceProfileState: void access$8400(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<com.android.server.CountryDetectorService$1$1: void <init>(com.android.server.CountryDetectorService$1,android.location.Country)>
<android.test.LoaderTestCase$1: void onPostExecute(java.lang.Void)>
<android.test.mock.MockCursor: int getColumnIndex(java.lang.String)>
<com.android.server.IntentResolver: java.lang.Object newResult(android.content.IntentFilter,int)>
<android.content.res.Resources$NotFoundException: void <init>()>
<android.database.sqlite.SQLiteClosable: void <init>()>
<GenerationGG: android.renderscript.Matrix3f get_androidrenderscriptMatrix3f()>
<android.widget.BaseAdapter: int getItemViewType(int)>
<com.android.internal.telephony.gsm.SimTlv: int getTag()>
<com.android.i18n.phonenumbers.AsYouTypeFormatter: void removeNationalPrefixFromNationalNumber()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void <init>(com.android.internal.telephony.PhoneBase)>
<com.android.internal.app.ShutdownThread$2: void <init>()>
<GenerationGG: android.widget.TextView$OnEditorActionListener get_androidwidgetTextView__OnEditorActionListener()>
<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInScreen(android.graphics.Rect)>
<android.net.wifi.p2p.WifiP2pDevice: boolean wpsPbcSupported()>
<android.net.wifi.SupplicantState: void <clinit>()>
<android.media.AudioRecord: int getRecordingState()>
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: android.widget.RemoteViews getLoadingView()>
<android.opengl.GLUtils: void texImage2D(int,int,int,android.graphics.Bitmap,int,int)>
<android.webkit.HTML5VideoViewProxy$PosterDownloader: boolean handleSslErrorRequest(android.net.http.SslError)>
<android.content.Context: void unregisterComponentCallbacks(android.content.ComponentCallbacks)>
<android.test.mock.MockContentResolver: void notifyChange(android.net.Uri,android.database.ContentObserver,boolean)>
<com.android.internal.widget.ActionBarView: android.widget.SpinnerAdapter getDropdownAdapter()>
<android.animation.Keyframe: android.animation.Keyframe ofObject(float)>
<android.app.Activity: void onLowMemory()>
<android.graphics.Matrix$1: boolean preScale(float,float)>
<com.android.internal.telephony.MccTable: int smallestDigitsMccForMnc(int)>
<android.webkit.BrowserFrame: void reload(boolean)>
<android.view.View: void dispatchSystemUiVisibilityChanged(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setCheckable(boolean)>
<android.view.VelocityTracker$1: void onReleased(android.util.Poolable)>
<android.content.ComponentName: void <init>(java.lang.String,java.lang.String)>
<com.android.internal.telephony.cat.CommandDetails: int describeContents()>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: android.os.IBinder asBinder()>
<android.webkit.WebView: int computeRealVerticalScrollRange()>
<com.android.server.ThrottleService: int access$700(com.android.server.ThrottleService)>
<android.content.IContentService$Stub: android.os.IBinder asBinder()>
<android.media.SoundPool: void <init>(int,int,int)>
<GenerationGG: android.renderscript.RSRuntimeException get_androidrenderscriptRSRuntimeException()>
<GenerationGG: android.widget.TextView$BufferType get_androidwidgetTextView__BufferType()>
<android.database.sqlite.SQLiteDatabase: void dbclose()>
<android.view.GLES20Canvas: void drawTextRun(char[],int,int,int,int,float,float,int,android.graphics.Paint)>
<com.android.internal.backup.LocalTransport: java.lang.String nextRestorePackage()>
<android.webkit.WebBackForwardList: void close(int)>
<android.graphics.drawable.LayerDrawable$ChildDrawable: void <init>()>
<android.nfc.Tag$1: void <init>()>
<android.media.IAudioService$Stub$Proxy: void <init>(android.os.IBinder)>
<android.app.INotificationManager$Stub: void <init>()>
<android.app.NativeActivity: void onInputQueueDestroyed(android.view.InputQueue)>
<android.content.res.XmlBlock$Parser: void setFeature(java.lang.String,boolean)>
<android.graphics.drawable.InsetDrawable: int getIntrinsicHeight()>
<android.os.DropBoxManager: void <init>(com.android.internal.os.IDropBoxManagerService)>
<android.telephony.SmsMessage: int getStatusOnSim()>
<android.view.DragEvent: int describeContents()>
<android.view.View: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.text.method.WordIterator: int preceding(int)>
<android.net.http.Connection: void cancel()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimEprlLoaded: void <init>(com.android.internal.telephony.cdma.CdmaLteUiccRecords)>
<com.android.server.PackageManagerBackupAgent: void writeStateFile(java.util.List,android.os.ParcelFileDescriptor)>
<android.widget.AbsListView: void initOrResetVelocityTracker()>
<android.view.inputmethod.InputMethodInfo: void <init>(java.lang.String,java.lang.String,java.lang.CharSequence,java.lang.String)>
<android.telephony.gsm.SmsMessage: int getStatusOnSim()>
<android.os.ResultReceiver: void <clinit>()>
<android.gesture.GestureOverlayView: void setGestureStrokeSquarenessTreshold(float)>
<com.android.internal.app.ActionBarImpl$TabImpl: void setPosition(int)>
<android.media.TimedText: void readBlinkingText()>
<android.graphics.Bitmap: void getPixels(int[],int,int,int,int,int,int)>
<android.widget.AbsListView: void finishGlows()>
<com.android.server.pm.PackageManagerService: java.util.List queryContentProviders(java.lang.String,int,int)>
<com.android.internal.telephony.DataConnectionAc: com.android.internal.telephony.ApnSetting rspApnSetting(android.os.Message)>
<com.android.internal.telephony.SmsMessageBase: java.lang.String getEmailFrom()>
<android.net.rtp.AudioGroup: void nativeSendDtmf(int)>
<android.app.ListActivity$1: void <init>(android.app.ListActivity)>
<android.os.Parcel: double readDouble()>
<android.net.wifi.WifiStateMachine: void access$12900(android.net.wifi.WifiStateMachine,android.os.Message)>
<android.media.AudioRecord: java.lang.Object access$000(android.media.AudioRecord)>
<android.widget.GridView: int getBottomSelectionPixel(int,int,int,int)>
<android.provider.Settings$Secure: void <clinit>()>
<android.widget.DialerFilter: java.lang.CharSequence getDigits()>
<android.view.View$7: java.lang.Float get(android.view.View)>
<android.net.wifi.WifiStateMachine: int access$11700(android.net.wifi.WifiStateMachine)>
<android.telephony.ServiceState: java.lang.String getOperatorAlphaLong()>
<android.net.NetworkInfo$State: void <init>(java.lang.String,int)>
<android.filterfw.core.CachedFrameManager: void clearCache()>
<android.preference.TwoStatePreference: boolean isChecked()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$6600(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,com.android.internal.util.IState)>
<android.util.LruCache: void evictAll()>
<android.app.ActivityThread$ApplicationThread: void dispatchPackageBroadcast(int,java.lang.String[])>
<com.android.server.net.NetworkPolicyManagerService: android.util.SparseIntArray access$400(com.android.server.net.NetworkPolicyManagerService)>
<android.animation.LayoutTransition$5: void <init>(android.animation.LayoutTransition,android.view.View,android.view.ViewGroup)>
<android.media.IMediaScannerListener$Stub$Proxy: android.os.IBinder asBinder()>
<java.lang.Object: android.view.MenuItem add(int)>
<android.app.LauncherActivity$ActivityAdapter: int getCount()>
<com.android.server.DevicePolicyManagerService: boolean packageHasActiveAdmins(java.lang.String)>
<GenerationGG: android.media.audiofx.BassBoost$Settings get_androidmediaaudiofxBassBoost__Settings()>
<android.graphics.Path: void rLineTo(float,float)>
<android.content.AbstractThreadedSyncAdapter$SyncThread: void <init>(android.content.AbstractThreadedSyncAdapter,java.lang.String,android.content.SyncContext,java.lang.String,android.accounts.Account,android.os.Bundle)>
<android.view.WindowManager$LayoutParams: void backup()>
<android.app.Fragment: void onInflate(android.util.AttributeSet,android.os.Bundle)>
<android.view.MotionEvent: java.lang.String toString()>
<GenerationGG: android.text.ParcelableSpan get_androidtextParcelableSpan()>
<android.widget.DialerFilter: boolean isQwertyKeyboard()>
<com.android.server.PowerManagerService: void nativeSetPowerState(boolean,boolean)>
<com.android.internal.util.JournaledFile: void rollback()>
<android.app.LoadedApk$ReceiverDispatcher: java.lang.RuntimeException getUnregisterLocation()>
<android.mtp.MtpDevice: void <clinit>()>
<android.util.SparseIntArray: int get(int,int)>
<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPw(java.lang.String,com.android.server.pm.PackageSetting,java.lang.String,com.android.server.pm.SharedUserSetting,java.io.File,java.io.File,java.lang.String,int,int,boolean,boolean)>
<android.hardware.SensorManager: boolean sensors_enable_sensor(int,java.lang.String,int,int)>
<android.view.accessibility.AccessibilityEvent: void setConnection(android.accessibilityservice.IAccessibilityServiceConnection)>
<android.net.MobileDataStateTracker: android.net.LinkCapabilities access$800(android.net.MobileDataStateTracker)>
<android.content.ContentValues: void remove(java.lang.String)>
<android.view.View: void onPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<com.android.server.sip.SipSessionListenerProxy: void onCallChangeFailed(android.net.sip.ISipSession,int,java.lang.String)>
<Wrapper_android_widget_FilterQueryProvider: void test_android_widget_FilterQueryProvider()>
<android.widget.TextView$PositionListener: int getPositionX()>
<android.widget.RelativeLayout$DependencyGraph$Node: void setNextPoolable(android.widget.RelativeLayout$DependencyGraph$Node)>
<android.app.Dialog: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.view.animation.RotateAnimation: void <init>(float,float)>
<com.android.internal.telephony.gsm.GsmConnection: long getCreateTime()>
<com.android.server.DiskStatsService: void <init>(android.content.Context)>
<com.android.server.am.PendingIntentRecord$Key: int hashCode()>
<android.app.FragmentManagerImpl: android.app.Fragment findFragmentById(int)>
<android.os.AsyncTask$Status: void <init>(java.lang.String,int)>
<android.webkit.URLUtil: boolean isDataUrl(java.lang.String)>
<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: void updateRetrievalAllowingWindowAndEventSourceLocked(android.view.accessibility.AccessibilityEvent)>
<android.view.GestureDetector$SimpleOnGestureListener: void onLongPress(android.view.MotionEvent)>
<com.android.server.RandomBlock: com.android.server.RandomBlock fromFile(java.lang.String)>
<com.android.server.am.ActivityRecord: com.android.server.am.ActivityRecord getWaitingHistoryRecordLocked()>
<GenerationGG: android.widget.PopupMenu$OnMenuItemClickListener get_androidwidgetPopupMenu__OnMenuItemClickListener()>
<android.view.View: int computeHorizontalScrollRange()>
<com.android.internal.view.IInputMethodSession$Stub: com.android.internal.view.IInputMethodSession asInterface(android.os.IBinder)>
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.SignalStrength getSignalStrength()>
<android.test.InstrumentationTestSuite: void addTestSuite(java.lang.Class)>
<android.gesture.Gesture: android.graphics.RectF getBoundingBox()>
<com.android.server.ThrottleService$DataRecorder: void checkAndDeleteLRUDataFile(java.io.File)>
<android.graphics.Bitmap: android.graphics.Bitmap createScaledBitmap(android.graphics.Bitmap,int,int,boolean)>
<GenerationGG: android.widget.MultiAutoCompleteTextView$Tokenizer get_androidwidgetMultiAutoCompleteTextView__Tokenizer()>
<com.android.internal.telephony.cdma.sms.BearerData: boolean decodeUserResponseCode(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)>
<android.view.GLES20Canvas: void nDestroyDisplayList(int)>
<android.media.MediaScannerConnection: android.media.MediaScannerConnection$MediaScannerConnectionClient access$000(android.media.MediaScannerConnection)>
<android.server.BluetoothHealthProfileHandler: android.server.BluetoothHealthProfileHandler$HealthChannel findChannelById(int)>
<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableIfaces()>
<android.widget.RemoteViews$1: java.lang.Object[] newArray(int)>
<android.text.format.Time: void <init>(java.lang.String)>
<android.app.ActivityManager: void <clinit>()>
<android.widget.TextView$CharWrapper: void set(char[],int,int)>
<android.net.wifi.WifiStateMachine: int access$3602(android.net.wifi.WifiStateMachine,int)>
<android.widget.TextView: void downgradeEasyCorrectionSpans()>
<android.server.BluetoothService: int getBluetoothStateInternal()>
<android.view.textservice.SpellCheckerSession$SpellCheckerSessionListenerImpl$SpellCheckerParams: void <init>(int,android.view.textservice.TextInfo[],int,boolean)>
<android.server.BluetoothPanProfileHandler: java.util.List getConnectedPanDevices()>
<android.widget.TextView: int getLineCount()>
<android.net.DhcpStateMachine: com.android.internal.util.State access$900(android.net.DhcpStateMachine)>
<com.android.internal.os.BatteryStatsImpl: void readOldHistory(android.os.Parcel)>
<com.android.internal.util.ArrayUtils: int idealIntArraySize(int)>
<android.view.View: int getPaddingRight()>
<android.renderscript.ProgramStore: android.renderscript.ProgramStore BLEND_NONE_DEPTH_TEST(android.renderscript.RenderScript)>
<DumbClass: void DumbMethod46()>
<android.graphics.Paint$Style: void <init>(java.lang.String,int,int)>
<android.view.OrientationEventListener: int access$102(android.view.OrientationEventListener,int)>
<android.test.mock.MockPackageManager: java.lang.String[] canonicalToCurrentPackageNames(java.lang.String[])>
<android.server.BluetoothService: boolean setPasskeyNative(java.lang.String,int,int)>
<android.test.mock.MockContext: java.io.File getDatabasePath(java.lang.String)>
<android.text.style.QuoteSpan: int getColor()>
<android.content.Intent: void removeCategory(java.lang.String)>
<GenerationGG: android.provider.Browser get_androidproviderBrowser()>
<android.text.style.LeadingMarginSpan$Standard: int getLeadingMargin(boolean)>
<GenerationGG: android.media.MediaPlayer$OnCompletionListener get_androidmediaMediaPlayer__OnCompletionListener()>
<android.widget.DatePicker: java.util.Calendar getCalendarForLocale(java.util.Calendar,java.util.Locale)>
<android.location.Criteria: void setVerticalAccuracy(int)>
<android.net.wifi.WifiStateMachine$DriverLoadingState: boolean processMessage(android.os.Message)>
<com.android.internal.telephony.ApnContext: void log(java.lang.String)>
<android.graphics.MaskFilter: void <init>()>
<android.view.ViewRootImpl$W: void <init>(android.view.ViewRootImpl)>
<android.graphics.BitmapRegionDecoder: int nativeGetHeight(int)>
<android.view.KeyEvent: boolean isCtrlPressed()>
<android.webkit.WebSettings: void setFantasyFontFamily(java.lang.String)>
<android.media.MediaRecorder: void setPreviewDisplay(android.view.Surface)>
<GenerationGG: android.speech.RecognitionListener get_androidspeechRecognitionListener()>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: void <init>(android.os.IBinder)>
<android.widget.AdapterViewAnimator: android.view.View getCurrentView()>
<com.android.server.wm.WindowManagerService: void addWindowToListInOrderLocked(com.android.server.wm.WindowState,boolean)>
<android.bluetooth.BluetoothDeviceProfileState: void access$5600(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<com.android.server.BackupManagerService: void writeToJournalLocked(java.lang.String)>
<android.net.EthernetDataTracker: void access$400(android.net.EthernetDataTracker,java.lang.String)>
<android.gesture.GestureOverlayView: void setEventsInterceptionEnabled(boolean)>
<android.net.UrlQuerySanitizer$ParameterValuePair: void <init>(android.net.UrlQuerySanitizer,java.lang.String,java.lang.String)>
<android.widget.ListView: boolean isOpaque()>
<android.text.Selection: int findEdge(android.text.Spannable,android.text.Layout,int)>
<android.content.res.ColorStateList: android.content.res.ColorStateList valueOf(int)>
<android.test.mock.MockPackageManager: java.lang.String getInstallerPackageName(java.lang.String)>
<com.android.server.pm.PackageManagerService$12: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean)>
<android.os.MemoryFile$MemoryInputStream: int available()>
<android.content.ComponentName$1: android.content.ComponentName createFromParcel(android.os.Parcel)>
<android.text.AlteredCharSequence: void <init>(java.lang.CharSequence,char[],int,int)>
<android.inputmethodservice.Keyboard: void resize(int,int)>
<com.android.server.wm.InputManager: void setDisplayOrientation(int,int)>
<com.android.internal.os.BatteryStatsImpl: void noteWifiMulticastEnabledFromSourceLocked(android.os.WorkSource)>
<android.net.NetworkStats$1: android.net.NetworkStats[] newArray(int)>
<android.net.http.HttpResponseCache: void flush()>
<android.widget.AutoCompleteTextView$DropDownItemClickListener: void <init>(android.widget.AutoCompleteTextView)>
<android.bluetooth.BluetoothTetheringDataTracker: void startReverseTether(java.lang.String,android.bluetooth.BluetoothDevice)>
<android.content.res.XmlBlock$Parser: java.lang.String getPrefix()>
<android.hardware.GeomagneticField: void <init>(float,float,float,long)>
<android.webkit.HTML5VideoViewProxy: void sendTimeupdate()>
<com.android.internal.telephony.gsm.GsmCallTracker: void log(java.lang.String)>
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: java.util.List queryIntent(android.content.Intent,java.lang.String,int)>
<android.widget.CalendarView$WeeksAdapter: java.util.Calendar getSelectedDay()>
<android.os.ParcelFileDescriptor: int getFd()>
<android.view.textservice.SuggestionsInfo$1: java.lang.Object createFromParcel(android.os.Parcel)>
<Wrapper_android_mtp_MtpDevice: void test_android_mtp_MtpDevice()>
<android.net.wifi.WifiConfiguration$1: java.lang.Object[] newArray(int)>
<android.widget.RelativeLayout: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>
<GenerationGG: android.database.DefaultDatabaseErrorHandler get_androiddatabaseDefaultDatabaseErrorHandler()>
<android.view.MotionEvent: float getAxisValue(int,int)>
<android.view.View$CheckForTap: void <init>(android.view.View,android.view.View$1)>
<android.widget.ArrayAdapter$ArrayFilter: void <init>(android.widget.ArrayAdapter,android.widget.ArrayAdapter$1)>
<com.android.internal.os.BatteryStatsImpl$Uid: void noteFullWifiLockReleasedLocked()>
<android.text.PackedIntVector: void adjustValuesBelow(int,int,int)>
<android.view.MenuInflater: void <clinit>()>
<android.server.BluetoothAdapterStateMachine: void access$4400(android.server.BluetoothAdapterStateMachine,com.android.internal.util.IState)>
<android.database.sqlite.SQLiteProgram: void addToBindArgs(int,java.lang.Object)>
<android.app.Dialog: void setCanceledOnTouchOutside(boolean)>
<android.webkit.URLUtil: boolean isFileUrl(java.lang.String)>
<android.media.AudioTrack: int native_write_short(short[],int,int,int)>
<android.net.wifi.p2p.WifiP2pService: void <clinit>()>
<GenerationGG: android.renderscript.ScriptC get_androidrenderscriptScriptC()>
<android.text.SpannableString: int getSpanStart(java.lang.Object)>
<android.view.InputChannel$1: void <init>()>
<android.widget.RelativeLayout$DependencyGraph$Node$1: android.widget.RelativeLayout$DependencyGraph$Node newInstance()>
<android.os.Parcel: int dataAvail()>
<Wrapper_android_media_CameraProfile: void test_android_media_CameraProfile()>
<android.view.ScaleGestureDetector: boolean isInProgress()>
<com.android.internal.statusbar.StatusBarIconList$1: com.android.internal.statusbar.StatusBarIconList[] newArray(int)>
<android.graphics.Rect: void scale(float)>
<android.app.DownloadManager$Query: java.lang.String statusClause(java.lang.String,int)>
<com.android.server.LocationManagerService: java.util.HashMap access$1500(com.android.server.LocationManagerService)>
<android.view.View: boolean isLayoutDirectionRtl(java.util.Locale)>
<android.view.InputEvent: void <init>()>
<GenerationGG: android.opengl.GLES10 get_androidopenglGLES10()>
<android.database.ContentObserver: android.database.IContentObserver releaseContentObserver()>
<android.net.SSLCertificateSocketFactory: javax.net.ssl.SSLSocketFactory getInsecure(int,android.net.SSLSessionCache)>
<android.location.Location: double access$202(android.location.Location,double)>
<android.server.BluetoothPanProfileHandler$BluetoothPanDevice: int access$402(android.server.BluetoothPanProfileHandler$BluetoothPanDevice,int)>
<android.widget.ListView: boolean canAnimate()>
<android.view.View$TransformationInfo: int access$602(android.view.View$TransformationInfo,int)>
<com.android.internal.telephony.gsm.SIMRecords: void <init>(com.android.internal.telephony.PhoneBase)>
<android.webkit.HTML5VideoFullScreen$2: void <init>(android.webkit.HTML5VideoFullScreen)>
<android.view.GLES20Canvas: boolean clipRegion(android.graphics.Region,android.graphics.Region$Op)>
<com.android.server.StatusBarManagerService$5: void <init>(com.android.server.StatusBarManagerService,boolean)>
<android.text.PackedIntVector: void deleteAt(int,int)>
<com.android.internal.net.NetworkStatsFactory: long readSingleLongFromFile(java.io.File)>
<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getText()>
<android.graphics.drawable.BitmapDrawable: int getChangingConfigurations()>
<android.app.PendingIntent: android.app.PendingIntent readPendingIntentOrNullFromParcel(android.os.Parcel)>
<android.view.inputmethod.InputMethodManager: void scheduleCheckFocusLocked(android.view.View)>
<android.view.IApplicationToken$Stub: android.os.IBinder asBinder()>
<android.util.SynchronizedPool: void release(android.util.Poolable)>
<com.android.internal.statusbar.StatusBarIconList: void removeIcon(int)>
<android.test.suitebuilder.TestMethod: java.lang.Class getEnclosingClass()>
<android.webkit.WebSettings: boolean supportTouchOnly()>
<android.content.pm.ResolveInfo: void dump(android.util.Printer,java.lang.String)>
<android.text.method.DateTimeKeyListener: int getInputType()>
<android.widget.GridLayout$Interval: android.widget.GridLayout$Interval inverse()>
<android.server.BluetoothHealthProfileHandler: java.util.List getHealthDevicesMatchingConnectionStates(int[])>
<com.android.server.wm.WindowManagerService: void dumpAppTokensLocked()>
<com.android.internal.net.DomainNameValidator: boolean matchDns(java.lang.String,java.lang.String)>
<com.android.internal.view.IInputMethodClient$Stub$Proxy: android.os.IBinder asBinder()>
<android.app.LoadedApk$ReceiverDispatcher: android.content.IIntentReceiver getIIntentReceiver()>
<GenerationGG: android.database.sqlite.SQLiteTableLockedException get_androiddatabasesqliteSQLiteTableLockedException()>
<android.view.AbsSavedState: void <init>(android.os.Parcelable)>
<Wrapper_android_text_style_EasyEditSpan: void test_android_text_style_EasyEditSpan()>
<com.android.server.wm.InputManager: int access$200(android.view.InputEvent,int,int,int,int,int)>
<android.graphics.drawable.TransitionDrawable$TransitionState: int getChangingConfigurations()>
<android.webkit.ZoomManager: void setInitialScaleInPercent(int)>
<com.android.server.WifiService$NotificationEnabledSettingObserver: void <init>(com.android.server.WifiService,android.os.Handler)>
<java.lang.Object: int getCount()>
<com.android.server.VibratorService$1: void <init>(com.android.server.VibratorService)>
<android.server.BluetoothService: boolean removeDeviceNative(java.lang.String)>
<android.view.KeyEvent: boolean hasModifiers(int)>
<android.net.http.LoggingEventHandler: void certificate(android.net.http.SslCertificate)>
<com.android.internal.telephony.sip.SipCommandInterface: void deleteSmsOnSim(int,android.os.Message)>
<android.media.CamcorderProfile: android.media.CamcorderProfile get(int,int)>
<android.os.StatFs: void restat(java.lang.String)>
<android.os.FileUtils: boolean getFileStatusNative(java.lang.String,android.os.FileUtils$FileStatus)>
<android.widget.VideoView: boolean canPause()>
<android.drm.DrmManagerClient: int _removeAllRights(int)>
<android.content.Intent: boolean hasFileDescriptors()>
<android.app.FragmentManagerImpl$2: void <init>(android.app.FragmentManagerImpl)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: java.lang.String getMdn()>
<android.widget.LinearLayout: void setHorizontalGravity(int)>
<Wrapper_android_renderscript_Long3: void test_android_renderscript_Long3()>
<android.view.View: void setNextFocusRightId(int)>
<android.view.GLES20Canvas: void drawTextOnPath(char[],int,int,android.graphics.Path,float,float,android.graphics.Paint)>
<android.app.ContextImpl: java.io.File getFilesDir()>
<android.app.ContextImpl: java.lang.String getPackageName()>
<android.media.AudioTrack: int native_reload_static()>
<java.lang.Object: boolean isEmptyElementTag()>
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: void writeToParcelLocked(android.os.Parcel,long)>
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: long getNationalNumber()>
<android.widget.TableRow: int getChildrenSkipCount(android.view.View,int)>
<android.gesture.GestureOverlayView: void clear(boolean)>
<android.widget.AbsListView$RecycleBin: void reclaimScrapViews(java.util.List)>
<com.android.internal.os.ProcessStats: void update()>
<android.text.SpannedString: java.lang.Object[] getSpans(int,int,java.lang.Class)>
<android.net.wifi.WifiStateMachine: int access$6004(android.net.wifi.WifiStateMachine)>
<android.view.ViewRootImpl: void checkThread()>
<android.widget.RemoteViews$1: android.widget.RemoteViews[] newArray(int)>
<android.inputmethodservice.Keyboard: int getHeight()>
<com.android.internal.net.DNParser: java.lang.String escapedAV()>
<android.view.GLES20DisplayList: void invalidate()>
<android.view.View: boolean willNotCacheDrawing()>
<android.app.ResultInfo: void <clinit>()>
<android.bluetooth.BluetoothDeviceProfileState: android.os.Message access$4300(android.bluetooth.BluetoothDeviceProfileState)>
<com.android.server.connectivity.Tethering$TetherMasterSM: int access$2900(com.android.server.connectivity.Tethering$TetherMasterSM)>
<android.webkit.JWebCoreJavaBridge: void removePackageName(java.lang.String)>
<android.webkit.WebViewCore$AutoFillData: int getQueryId()>
<com.android.internal.view.menu.MenuPopupHelper: void setCallback(com.android.internal.view.menu.MenuPresenter$Callback)>
<android.content.ComponentName: java.lang.String flattenToString()>
<android.net.wifi.WifiStateMachine: void access$11400(android.net.wifi.WifiStateMachine,android.os.Message)>
<android.view.MotionEvent: void nativeGetPointerProperties(int,int,android.view.MotionEvent$PointerProperties)>
<android.view.ViewRootImpl: void finishMotionEvent(android.view.MotionEvent,boolean,boolean)>
<android.media.AudioService$VolumeStreamState: boolean adjustIndex(int)>
<android.graphics.drawable.LayerDrawable: void setOpacity(int)>
<android.widget.TextView: void setMaxLines(int)>
<com.android.internal.widget.ActionBarContextView: void setContentHeight(int)>
<android.view.View$13: void <init>(java.lang.String)>
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InputConnection getCurrentInputConnection()>
<android.content.ContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>
<android.net.LocalSocketImpl: void create(boolean)>
<android.webkit.DeviceOrientationService: void onAccuracyChanged(android.hardware.Sensor,int)>
<android.net.LinkProperties: void <clinit>()>
<android.app.SearchDialog: void onCreate(android.os.Bundle)>
<android.util.FloatMath: float sqrt(float)>
<android.net.http.AndroidHttpClient$LoggingConfiguration: void <init>(java.lang.String,int,android.net.http.AndroidHttpClient$1)>
<android.view.OrientationEventListener$SensorEventListenerImpl: void onSensorChanged(android.hardware.SensorEvent)>
<android.view.ViewConfiguration: void <init>()>
<android.animation.ValueAnimator: android.animation.ValueAnimator ofInt(int[])>
<com.android.internal.telephony.cdma.CdmaCallTracker: void notifyCallWaitingInfo(com.android.internal.telephony.cdma.CdmaCallWaitingNotification)>
<android.telephony.gsm.GsmCellLocation: boolean isEmpty()>
<android.view.View$ScrollabilityCache: void <clinit>()>
<android.net.sip.SipSession$Listener: void <init>()>
<android.webkit.CallbackProxy$6: void onCancel(android.content.DialogInterface)>
<android.filterfw.core.GLFrame: void onFrameStore()>
<android.app.ActivityThread$ProfilerControlData: void <init>()>
<android.content.IntentSender$1: void <init>()>
<com.android.internal.telephony.BaseCommands: void registerForOn(android.os.Handler,int,java.lang.Object)>
<android.app.ContextImpl: android.content.pm.ApplicationInfo getApplicationInfo()>
<android.net.rtp.AudioGroup: void nativeRemove(int)>
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>
<android.bluetooth.BluetoothDeviceProfileState: void access$4800(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<com.android.internal.location.DummyLocationProvider: void <init>(java.lang.String,android.location.ILocationManager)>
<android.os.UEventObserver: void stopObserving()>
<android.bluetooth.BluetoothDeviceProfileState: void access$3500(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.widget.AdapterView: void removeView(android.view.View)>
<android.test.mock.MockPackageManager: boolean addPermissionAsync(android.content.pm.PermissionInfo)>
<android.content.ISyncAdapter$Stub$Proxy: void <init>(android.os.IBinder)>
<android.graphics.drawable.ScaleDrawable: int getChangingConfigurations()>
<android.util.Base64: byte[] encode(byte[],int,int,int)>
<GenerationGG: android.text.method.MultiTapKeyListener get_androidtextmethodMultiTapKeyListener()>
<com.android.server.sip.SipHelper: javax.sip.header.ContactHeader createContactHeader(android.net.sip.SipProfile,java.lang.String,int)>
<android.webkit.WebViewCore: void access$2500(android.webkit.WebViewCore,int)>
<android.app.IActivityManager$WaitResult: int describeContents()>
<android.text.method.BaseKeyListener$1: void <clinit>()>
<android.inputmethodservice.Keyboard: int access$200(android.inputmethodservice.Keyboard)>
<android.os.Handler$MessengerImpl: void <init>(android.os.Handler,android.os.Handler$1)>
<android.widget.DatePicker: boolean parseDate(java.lang.String,java.util.Calendar)>
<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha(android.graphics.Paint,int[])>
<android.view.MenuInflater: void <init>(android.content.Context)>
<android.webkit.WebView: int contentToViewX(int)>
<android.os.StrictMode: void dropboxViolationAsync(int,android.os.StrictMode$ViolationInfo)>
<android.webkit.WebViewCore: void restoreState(int)>
<android.widget.TextView: boolean isTextSelectable()>
<android.app.ProgressDialog: java.text.NumberFormat access$300(android.app.ProgressDialog)>
<android.webkit.CallbackProxy$1: void <init>(android.webkit.CallbackProxy,android.webkit.JsResult)>
<android.media.AudioTrack: int native_get_output_sample_rate(int)>
<com.android.server.pm.Settings: void dumpPermissionsLPr(java.io.PrintWriter,java.lang.String,com.android.server.pm.PackageManagerService$DumpState)>
<android.graphics.ColorFilter: void finalize()>
<android.appwidget.AppWidgetHostView: void prepareView(android.view.View)>
<android.content.res.ColorStateList: void <clinit>()>
<android.net.wifi.WifiStateMachine: void startScan(boolean)>
<android.view.FocusFinder: int getWeightedDistanceFor(int,int)>
<android.view.ViewRootImpl$TakenSurfaceHolder: void onUpdateSurface()>
<android.widget.SimpleAdapter: java.util.List access$202(android.widget.SimpleAdapter,java.util.List)>
<com.android.server.accessibility.AccessibilityManagerService$1: void <init>(com.android.server.accessibility.AccessibilityManagerService)>
<android.widget.AbsListView: float getTopFadingEdgeStrength()>
<android.test.suitebuilder.TestMethod: boolean noargsConstructor(java.lang.Class[])>
<android.graphics.MaskFilter: void nativeDestructor(int)>
<com.android.server.sip.SipHelper: javax.sip.header.ToHeader createToHeader(android.net.sip.SipProfile,java.lang.String)>
<android.os.Environment: java.io.File getExternalStorageAppFilesDirectory(java.lang.String)>
<android.webkit.WebViewClient: void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError)>
<android.widget.AbsListView$FlingRunnable: void startScroll(int,int)>
<com.android.server.ThrottleService: java.lang.String access$800(com.android.server.ThrottleService)>
<GenerationGG: android.webkit.ValueCallback get_androidwebkitValueCallback()>
<java.lang.Object: boolean moveToPosition(int)>
<android.widget.LinearLayout: void setBaselineAligned(boolean)>
<android.net.NetworkInfo: java.lang.String access$602(android.net.NetworkInfo,java.lang.String)>
<Wrapper_android_graphics_BitmapRegionDecoder: void test_android_graphics_BitmapRegionDecoder()>
<android.inputmethodservice.InputMethodService: void onWindowHidden()>
<com.android.internal.telephony.DataConnection$DcInactiveState: void <init>(com.android.internal.telephony.DataConnection,com.android.internal.telephony.DataConnection$1)>
<android.opengl.GLSurfaceView$GLThread: void onWindowResize(int,int)>
<android.widget.ActivityChooserModel: void <clinit>()>
<android.content.res.ObbInfo$1: android.content.res.ObbInfo createFromParcel(android.os.Parcel)>
<android.os.Environment: java.io.File getExternalStoragePublicDirectory(java.lang.String)>
<android.widget.FastScroller: boolean isAlwaysShowEnabled()>
<android.webkit.SslErrorHandlerImpl: void proceed()>
<android.net.wifi.p2p.WifiP2pConfig: void <init>()>
<android.content.pm.ComponentInfo: int getIconResource()>
<com.android.server.location.GpsLocationProvider: boolean native_start()>
<android.widget.HorizontalScrollView: float getRightFadingEdgeStrength()>
<android.gesture.GestureLibrary: void removeEntry(java.lang.String)>
<android.telephony.ServiceState: boolean getRoaming()>
<android.os.storage.StorageEventListener: void onStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)>
<com.android.server.pm.Settings: com.android.server.pm.PackageSetting enableSystemPackageLPw(java.lang.String)>
<Wrapper_android_webkit_DownloadListener: void test_android_webkit_DownloadListener()>
<android.os.Debug: void resetAllCounts()>
<com.android.server.WifiService: int access$2300(com.android.server.WifiService)>
<android.opengl.GLU: int gluProject(float,float,float,float[],int,float[],int,int[],int,float[],int)>
<android.text.format.Time: long toMillis(boolean)>
<android.view.View: void setTagInternal(int,java.lang.Object)>
<android.hardware.usb.UsbInterface: int getEndpointCount()>
<android.widget.ListPopupWindow: int getInputMethodMode()>
<com.android.server.accessibility.TouchExplorer$PointerTracker: void handleInjectedPointerDown(int,android.view.MotionEvent)>
<Wrapper_android_view_animation_AccelerateDecelerateInterpolator: void test_android_view_animation_AccelerateDecelerateInterpolator()>
<android.view.GLES20Canvas: void <clinit>()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: android.net.wifi.p2p.WifiP2pGroup access$1300(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<android.gesture.GestureLibraries: android.gesture.GestureLibrary fromFile(java.lang.String)>
<android.widget.ProgressBar: boolean isIndeterminate()>
<android.telephony.ServiceState$1: android.telephony.ServiceState[] newArray(int)>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getValueSanitizer(java.lang.String)>
<android.widget.GridLayout$3: void <init>()>
<com.android.server.MountService: void mountObb(java.lang.String,java.lang.String,android.os.storage.IObbActionListener,int)>
<android.opengl.GLSurfaceView: void setEGLContextClientVersion(int)>
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: void removeActivity(android.content.pm.PackageParser$Activity,java.lang.String)>
<com.android.internal.os.BatteryStatsImpl$SamplingCounter: void addCountAtomic(long)>
<android.text.method.DigitsKeyListener: void <init>(boolean,boolean)>
<android.net.SntpClient: long getNtpTime()>
<android.renderscript.ProgramRaster: android.renderscript.ProgramRaster CULL_NONE(android.renderscript.RenderScript)>
<android.view.GestureDetector$SimpleOnGestureListener: void <init>()>
<android.widget.FrameLayout: int getPaddingLeftWithForeground()>
<android.view.ViewGroup: void setClipToPadding(boolean)>
<android.text.SpannedString: int nextSpanTransition(int,int,java.lang.Class)>
<android.graphics.Path: void quadTo(float,float,float,float)>
<android.animation.LayoutTransition$1: boolean onPreDraw()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$6800(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,java.lang.String)>
<Wrapper_android_graphics_Xfermode: void test_android_graphics_Xfermode()>
<com.android.internal.telephony.IccSmsInterfaceManager: java.util.ArrayList buildValidRawData(java.util.ArrayList)>
<android.renderscript.RenderScript: void rsnScriptSetVarJ(int,int,int,long)>
<android.util.MonthDisplayHelper: int getOffset()>
<android.view.accessibility.AccessibilityRecord: void setContentDescription(java.lang.CharSequence)>
<android.renderscript.RenderScript: void nAllocationSyncAll(int,int)>
<android.webkit.WebChromeClient: boolean onJsBeforeUnload(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)>
<android.widget.TextView$SavedState$1: android.widget.TextView$SavedState[] newArray(int)>
<android.location.Criteria$1: android.location.Criteria createFromParcel(android.os.Parcel)>
<android.animation.Keyframe$ObjectKeyframe: void <init>(float,java.lang.Object)>
<android.app.ListActivity: long getSelectedItemId()>
<android.app.Fragment: android.view.LayoutInflater getLayoutInflater(android.os.Bundle)>
<android.net.wifi.p2p.WifiP2pManager$Channel: void <init>(android.os.Looper,android.net.wifi.p2p.WifiP2pManager$ChannelListener)>
<com.android.server.am.BatteryStatsService: android.bluetooth.BluetoothHeadset access$000(com.android.server.am.BatteryStatsService)>
<android.app.ActivityManager$RunningTaskInfo$1: android.app.ActivityManager$RunningTaskInfo[] newArray(int)>
<android.filterfw.core.SerializedFrame$DirectByteInputStream: int read()>
<android.view.KeyCharacterMap: boolean getKeyData(int,android.view.KeyCharacterMap$KeyData)>
<android.widget.AdapterViewAnimator: android.view.ViewGroup$LayoutParams createOrReuseLayoutParams(android.view.View)>
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain()>
<android.view.ViewTreeObserver: void addOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener)>
<android.widget.ScrollView: void recycleVelocityTracker()>
<android.accounts.AuthenticatorDescription$1: java.lang.Object[] newArray(int)>
<android.view.View: void onVisibilityChanged(android.view.View,int)>
<android.view.WindowManager$LayoutParams: java.lang.String toString()>
<android.graphics.Canvas: boolean native_quickReject(int,int,int)>
<android.widget.FastScroller: boolean isPointInside(float,float)>
<GenerationGG: android.nfc.NfcManager get_androidnfcNfcManager()>
<android.inputmethodservice.KeyboardView: void setProximityCorrectionEnabled(boolean)>
<android.webkit.LoadListener: void access$000(android.webkit.LoadListener,int,java.lang.String,java.lang.String)>
<android.content.pm.Signature: void <init>(android.os.Parcel,android.content.pm.Signature$1)>
<android.emoji.EmojiFactory: android.emoji.EmojiFactory newAvailableInstance()>
<android.widget.VideoView: int access$000(android.widget.VideoView)>
<android.os.storage.StorageManager$ObbActionListener: void onObbResult(java.lang.String,int,int)>
<android.graphics.Bitmap: void nativeSetHasAlpha(int,boolean)>
<android.net.wifi.ScanResult$1: void <init>()>
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: void dumpFilter(java.io.PrintWriter,java.lang.String,android.content.IntentFilter)>
<com.android.internal.telephony.DataConnectionTracker: boolean isApnIdEnabled(int)>
<android.opengl.ETC1: void <init>()>
<android.content.IntentFilter: void addDataPath(java.lang.String,int)>
<android.net.LocalSocket: void close()>
<android.view.accessibility.AccessibilityNodeInfo: void getBoundsInParent(android.graphics.Rect)>
<com.android.server.PowerManagerService: boolean access$6100(com.android.server.PowerManagerService)>
<android.net.LocalSocketAddress$Namespace: void <init>(java.lang.String,int,int)>
<android.os.Parcel: void closeFileDescriptor(java.io.FileDescriptor)>
<android.widget.StackView$StackSlider: float cubic(float)>
<android.widget.MediaController$3: void <init>(android.widget.MediaController)>
<android.app.Fragment$SavedState: void <init>(android.os.Parcel,java.lang.ClassLoader)>
<android.webkit.WebViewCore: void nativeCloseIdleConnections()>
<android.webkit.URLUtil: byte[] decode(byte[])>
<android.text.Layout: android.text.TextDirectionHeuristic getTextDirectionHeuristic()>
<android.webkit.WebStorage: void getOrigins(android.webkit.ValueCallback)>
<Wrapper_android_renderscript_RenderScript: void test_android_renderscript_RenderScript()>
<android.test.mock.MockResources: int[] getIntArray(int)>
<android.accounts.IAccountManager$Stub$Proxy: void <init>(android.os.IBinder)>
<android.view.View: int getHorizontalScrollbarHeight()>
<android.app.LoadedApk$ServiceDispatcher$InnerConnection: void <init>(android.app.LoadedApk$ServiceDispatcher)>
<android.widget.NumberPicker$3: void <init>(android.widget.NumberPicker)>
<Wrapper_android_gesture_Prediction: void test_android_gesture_Prediction()>
<android.view.ViewPropertyAnimator$PropertyBundle: boolean cancel(int)>
<android.webkit.CallbackProxy: void setWebChromeClient(android.webkit.WebChromeClient)>
<com.android.internal.telephony.DataConnectionTracker: void <clinit>()>
<com.android.internal.view.menu.MenuBuilder: int findInsertIndex(java.util.ArrayList,int)>
<com.android.internal.telephony.BaseCommands: void registerForRilConnected(android.os.Handler,int,java.lang.Object)>
<android.app.ActivityThread: boolean isProfiling()>
<android.webkit.WebView$TouchEventQueue: long nextTouchSequence()>
<android.net.http.AndroidHttpClient: void <init>(org.apache.http.conn.ClientConnectionManager,org.apache.http.params.HttpParams)>
<android.view.SurfaceSession: void destroy()>
<android.widget.GridLayout: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<android.net.sip.SipSession$1: void <init>(android.net.sip.SipSession)>
<android.widget.GridLayout$5$1: void <init>(android.widget.GridLayout$5)>
<GenerationGG: android.media.audiofx.PresetReverb get_androidmediaaudiofxPresetReverb()>
<GenerationGG: android.app.ActionBar get_androidappActionBar()>
<android.content.res.AssetFileDescriptor: long getDeclaredLength()>
<android.app.Fragment: void setInitialSavedState(android.app.Fragment$SavedState)>
<android.widget.AbsListView: int reconcileSelectedPosition()>
<android.media.audiofx.EnvironmentalReverb: android.media.audiofx.EnvironmentalReverb$OnParameterChangeListener access$100(android.media.audiofx.EnvironmentalReverb)>
<android.text.style.LeadingMarginSpan$Standard: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)>
<android.test.mock.MockContext: int checkCallingOrSelfUriPermission(android.net.Uri,int)>
<android.content.pm.PackageParser: int getParseError()>
<android.webkit.HTML5VideoFullScreen$VideoSurfaceView: void onMeasure(int,int)>
<com.android.server.PowerManagerService: int applyKeyboardState(int)>
<com.android.server.wm.InputManager: void setInputWindows(com.android.server.wm.InputWindowHandle[])>
<GenerationGG: android.media.RemoteControlClient get_androidmediaRemoteControlClient()>
<android.bluetooth.BluetoothSocket$SocketState: void <clinit>()>
<android.media.MediaMetadataRetriever: void release()>
<com.android.internal.os.BatteryStatsImpl: void doDataUnplug(long[],long)>
<com.android.server.WifiService$WifiLock: void <init>(com.android.server.WifiService,int,java.lang.String,android.os.IBinder,android.os.WorkSource)>
<com.android.internal.os.PkgUsageStats$1: void <init>()>
<android.media.audiofx.PresetReverb$BaseParameterListener: void onParameterChange(android.media.audiofx.AudioEffect,int,byte[],byte[])>
<com.android.internal.telephony.cat.CatService: void encodeOptionalTags(com.android.internal.telephony.cat.CommandDetails,com.android.internal.telephony.cat.ResultCode,com.android.internal.telephony.cat.Input,java.io.ByteArrayOutputStream)>
<GenerationGG: android.os.storage.OnObbStateChangeListener get_androidosstorageOnObbStateChangeListener()>
<android.os.Message: android.os.Handler getTarget()>
<android.util.NtpTrustedTime: long currentTimeMillis()>
<android.widget.Spinner: android.graphics.Rect access$100(android.widget.Spinner)>
<android.widget.HorizontalScrollView: void initVelocityTrackerIfNotExists()>
<android.webkit.Network: java.lang.String getProxyPassword()>
<android.view.MotionEvent: void setDownTime(long)>
<com.android.internal.telephony.WapPushOverSms$WapPushConnection: com.android.internal.telephony.IWapPushManager getWapPushManager()>
<android.speech.tts.TextToSpeechService$SynthThread: boolean queueIdle()>
<android.content.res.TypedArray: int length()>
<android.content.pm.ActivityInfo: void <init>(android.content.pm.ActivityInfo)>
<android.graphics.Path: void finalizer(int)>
<android.view.HardwareLayer: void <init>(int,int,boolean)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setSameMobileAndFixedLinePattern(boolean)>
<android.net.wifi.WifiStateMachine: void access$2100(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.graphics.drawable.DrawableContainer: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isCheckable()>
<android.test.mock.MockPackageManager: android.content.pm.FeatureInfo[] getSystemAvailableFeatures()>
<android.webkit.WebSettings: boolean isPrivateBrowsingEnabled()>
<android.test.AndroidTestRunner: void runTest()>
<android.view.animation.Transformation: java.lang.String toString()>
<android.media.AudioService$ScoClient: int getPid()>
<android.hardware.GeomagneticField: float getHorizontalStrength()>
<android.text.method.SingleLineTransformationMethod: void <init>()>
<GenerationGG: android.text.style.IconMarginSpan get_androidtextstyleIconMarginSpan()>
<GenerationGG: android.hardware.Camera$FaceDetectionListener get_androidhardwareCamera__FaceDetectionListener()>
<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,byte[])>
<GenerationGG: android.app.FragmentBreadCrumbs$OnBreadCrumbClickListener get_androidappFragmentBreadCrumbs__OnBreadCrumbClickListener()>
<android.animation.Animator: void setupEndValues()>
<android.graphics.Interpolator: android.graphics.Interpolator$Result timeToValues(float[])>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder enable(int)>
<android.text.TextUtils$SimpleStringSplitter: boolean hasNext()>
<android.location.Location: boolean hasSpeed()>
<android.content.SyncAdapterType: void <clinit>()>
<com.android.internal.os.BatteryStatsImpl$StopwatchTimer: int computeCurrentCountLocked()>
<android.content.pm.Signature: void writeToParcel(android.os.Parcel,int)>
<com.android.internal.os.HandlerCaller$SomeArgs: void <init>()>
<android.widget.GridLayout$Spec: void <init>(boolean,int,int,android.widget.GridLayout$Alignment,android.widget.GridLayout$1)>
<com.android.server.DeviceStorageMonitorService: long getMemoryLowThreshold()>
<android.webkit.ZoomManager: void onPageFinished(java.lang.String)>
<android.content.IntentFilter: java.util.Iterator actionsIterator()>
<android.view.DragEvent: android.content.ClipData getClipData()>
<com.android.internal.os.ProcessStats: int getLastIoWaitTime()>
<android.net.Uri$AbstractPart: void writeTo(android.os.Parcel)>
<com.android.server.am.TaskRecord: java.lang.String toString()>
<android.widget.AbsListView: void setAdapter(android.widget.ListAdapter)>
<android.net.IThrottleManager$Stub$Proxy: android.os.IBinder asBinder()>
<android.app.IActivityWatcher$Stub$Proxy: void <init>(android.os.IBinder)>
<android.telephony.PhoneStateListener$1: void onDataConnectionStateChanged(int,int)>
<com.android.i18n.phonenumbers.NumberParseException: java.lang.String toString()>
<com.android.server.AppWidgetService: com.android.server.AppWidgetService$Host lookupOrAddHostLocked(int,java.lang.String,int)>
<android.hardware.Camera: void _stopPreview()>
<android.net.LinkAddress: java.lang.String toString()>
<com.android.internal.telephony.gsm.GsmServiceStateTracker: int getCurrentDataConnectionState()>
<android.webkit.WebViewClient: boolean shouldOverrideKeyEvent(android.webkit.WebView,android.view.KeyEvent)>
<android.os.WorkSource: boolean diff(android.os.WorkSource)>
<android.os.ParcelUuid: java.util.UUID getUuid()>
<com.android.server.am.ActivityManagerService$ForegroundToken: void <init>(com.android.server.am.ActivityManagerService)>
<android.animation.LayoutTransition: boolean isRunning()>
<android.database.sqlite.SQLiteDatabase: void dbopen(java.lang.String,int)>
<android.database.SQLException: void <init>()>
<android.media.AudioTrack: void flush()>
<android.view.GLES20Canvas: void access$000(int)>
<android.graphics.Matrix: boolean postRotate(float)>
<android.graphics.drawable.shapes.OvalShape: void draw(android.graphics.Canvas,android.graphics.Paint)>
<android.util.Base64InputStream: boolean markSupported()>
<android.speech.tts.ITextToSpeechCallback$Stub: android.speech.tts.ITextToSpeechCallback asInterface(android.os.IBinder)>
<java.lang.Object: boolean isWhitespace()>
<com.android.internal.telephony.BaseCommands: void unSetOnSuppServiceNotification(android.os.Handler)>
<android.widget.RemoteViewsService: java.lang.Object access$000()>
<android.renderscript.ProgramRaster$CullMode: void <init>(java.lang.String,int,int)>
<android.webkit.WebIconDatabase$EventHandler: void handleMessage(android.os.Message)>
<android.ddm.DdmHandleExit: void <init>()>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setIcon(android.graphics.drawable.Drawable)>
<GenerationGG: android.text.TextUtils get_androidtextTextUtils()>
<android.view.Display: int getRawHeight()>
<android.net.wifi.p2p.WifiP2pDevice$1: void <init>()>
<android.content.res.Resources$Theme: void setTo(android.content.res.Resources$Theme)>
<android.database.StaleDataException: void <init>(java.lang.String)>
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putStringSet(java.lang.String,java.util.Set)>
<android.widget.ExpandableListView$ExpandableListContextMenuInfo: void <init>(android.view.View,long,long)>
<android.security.IKeyChainService$Stub$Proxy: android.os.IBinder asBinder()>
<android.webkit.WebSettings: void onDestroyed()>
<com.android.internal.telephony.IccRecords: com.android.internal.telephony.AdnRecordCache getAdnCache()>
<com.android.server.sip.SipService$SipSessionGroupExt: android.net.sip.ISipSession createSession(android.net.sip.ISipSessionListener)>
<android.graphics.drawable.ScaleDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<android.widget.ExpandableListView: long getSelectedId()>
<android.graphics.Path: void native_incReserve(int,int)>
<com.android.server.BackupManagerService: void opComplete(int)>
<com.android.server.net.NetworkPolicyManagerService: android.content.Context access$800(com.android.server.net.NetworkPolicyManagerService)>
<GenerationGG: android.database.sqlite.SQLiteDatatypeMismatchException get_androiddatabasesqliteSQLiteDatatypeMismatchException()>
<android.preference.Preference: void setOnPreferenceChangeInternalListener(android.preference.Preference$OnPreferenceChangeInternalListener)>
<android.graphics.Paint: boolean native_getFillPath(int,int,int)>
<android.telephony.SmsMessage: int getStatus()>
<GenerationGG: android.os.WorkSource get_androidosWorkSource()>
<com.android.internal.os.LoggingPrintStream: void println(java.lang.String)>
<android.net.http.AndroidHttpClient$1: void <init>()>
<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptorFromFd(int)>
<android.widget.MediaController: java.lang.String access$1100(android.widget.MediaController,int)>
<android.net.wifi.WifiConfiguration$ProxySettings: android.net.wifi.WifiConfiguration$ProxySettings valueOf(java.lang.String)>
<android.os.StrictMode$LogStackTrace: void <init>()>
<android.bluetooth.BluetoothSocket: void abortNative()>
<com.android.internal.view.BaseSurfaceHolder: android.graphics.Canvas lockCanvas()>
<com.android.internal.os.BatteryStatsImpl$Uid: void noteWifiMulticastEnabledLocked()>
<GenerationGG: android.media.MediaPlayer$OnInfoListener get_androidmediaMediaPlayer__OnInfoListener()>
<android.speech.tts.BlockingMediaPlayer: void stop()>
<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String createExtnPattern(java.lang.String)>
<android.util.JsonScope: android.util.JsonScope[] values()>
<android.server.BluetoothBondState: java.lang.String[] listInState(int)>
<android.server.BluetoothService: boolean stopDiscoveryNative()>
<android.widget.RatingBar: boolean isIndicator()>
<android.net.NetworkStatsHistory$1: void <init>()>
<android.view.InputDevice: void appendSourceDescriptionIfApplicable(java.lang.StringBuilder,int,java.lang.String)>
<com.android.internal.telephony.cdma.CdmaCall: void <init>(com.android.internal.telephony.cdma.CdmaCallTracker)>
<android.webkit.BrowserFrame: void loadData(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.content.res.Resources: android.content.res.Resources$Theme newTheme()>
<android.webkit.BrowserFrame: int loadType()>
<android.widget.TextView$Marquee: boolean shouldDrawGhost()>
<android.server.BluetoothPanProfileHandler: void errorLog(java.lang.String)>
<android.test.suitebuilder.TestMethod: junit.framework.TestCase createTest()>
<android.widget.ListPopupWindow: int getAnimationStyle()>
<android.inputmethodservice.InputMethodService: void onCurrentInputMethodSubtypeChanged(android.view.inputmethod.InputMethodSubtype)>
<GenerationGG: android.os.Looper get_androidosLooper()>
<com.android.server.pm.PackageManagerService: java.util.List queryIntentServices(android.content.Intent,java.lang.String,int)>
<android.media.MediaRecorder: void <clinit>()>
<android.app.Activity: boolean onCreateOptionsMenu(android.view.Menu)>
<android.preference.PreferenceActivity$Header$1: void <init>()>
<android.widget.TextView$CharWrapper: float getTextRunAdvances(int,int,int,int,int,float[],int,android.graphics.Paint)>
<android.content.pm.PackageParser: java.lang.String access$100(java.lang.String,java.lang.String,java.lang.CharSequence,int,java.lang.String[],java.lang.String[])>
<android.server.BluetoothPanProfileHandler$BluetoothPanDevice: int access$302(android.server.BluetoothPanProfileHandler$BluetoothPanDevice,int)>
<android.net.http.HttpResponseCache: android.net.http.HttpResponseCache getInstalled()>
<com.android.server.accessibility.TouchExplorer$PointerTracker: float computePointerDeltaMove(int,android.view.MotionEvent)>
<android.telephony.gsm.SmsMessage: java.lang.String getDisplayOriginatingAddress()>
<android.graphics.Path: void setFillType(android.graphics.Path$FillType)>
<android.preference.PreferenceActivity$HeaderAdapter$HeaderViewHolder: void <init>()>
<android.animation.Keyframe$IntKeyframe: void <init>(float)>
<android.widget.ImageView: int resolveAdjustedSize(int,int,int)>
<android.net.wifi.p2p.WifiP2pConfig$Persist: void <clinit>()>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.util.TimeZone getNitzTimeZone(int,boolean,long)>
<android.view.ViewGroup: android.view.View findViewByAccessibilityIdTraversal(int)>
<android.test.mock.MockPackageManager: void addPackageToPreferred(java.lang.String)>
<android.widget.ExpandableListView: long getSelectedPosition()>
<com.android.internal.widget.ActionBarView: void setCallback(android.app.ActionBar$OnNavigationListener)>
<android.mtp.MtpDevice: byte[] native_get_thumbnail(int)>
<com.android.internal.telephony.cat.ComprehensionTlv: boolean isComprehensionRequired()>
<android.graphics.Bitmap: void prepareToDraw()>
<android.widget.TextView: java.lang.CharSequence access$500(android.widget.TextView)>
<android.inputmethodservice.InputMethodService: void onStartCandidatesView(android.view.inputmethod.EditorInfo,boolean)>
<android.net.EthernetDataTracker$InterfaceObserver: void <init>(android.net.EthernetDataTracker)>
<android.text.method.TimeKeyListener: void <init>()>
<android.net.wifi.WifiWatchdogStateMachine: java.lang.Long access$3200(android.net.wifi.WifiWatchdogStateMachine)>
<android.net.NetworkIdentity: int getType()>
<android.view.MotionEvent: float getHistoricalPressure(int,int)>
<android.net.SSLCertificateSocketFactory: void <init>(int,android.net.SSLSessionCache,boolean)>
<android.view.KeyCharacterMap: void <clinit>()>
<android.content.ClipDescription: void <clinit>()>
<android.util.Xml$Encoding: void <clinit>()>
<android.view.FocusFinder: boolean isTouchCandidate(int,int,android.graphics.Rect,int)>
<android.os.AsyncTask: boolean cancel(boolean)>
<com.android.internal.telephony.AdnRecord: void writeToParcel(android.os.Parcel,int)>
<android.animation.KeyframeSet: java.lang.Object getValue(float)>
<com.android.internal.telephony.cat.CommandParamsFactory: void handleMessage(android.os.Message)>
<android.graphics.LinearGradient: int nativePostCreate2(int,float,float,float,float,int,int,int)>
<android.media.MediaPlayer: void prepare()>
<android.webkit.BrowserFrame$1: boolean useHttpAuthUsernamePassword()>
<android.bluetooth.BluetoothClass: int getDeviceClass()>
<android.animation.LayoutTransition: long access$300(android.animation.LayoutTransition)>
<android.net.wifi.WifiStateMachine: void access$7300(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<Wrapper_android_util_Patterns: void test_android_util_Patterns()>
<com.android.internal.telephony.gsm.GSMPhone$NetworkSelectMessage: void <init>()>
<android.graphics.Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>
<android.renderscript.Matrix2f: void scale(float,float)>
<GenerationGG: android.telephony.gsm.SmsManager get_androidtelephonygsmSmsManager()>
<android.text.util.Rfc822Token: void setComment(java.lang.String)>
<android.app.ActivityManager$RunningServiceInfo: int describeContents()>
<com.android.server.VibratorService$2: void <init>(com.android.server.VibratorService)>
<android.app.IActivityManager$WaitResult$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.ddm.DdmHandleProfiling: void <clinit>()>
<android.os.IPowerManager$Stub: android.os.IPowerManager asInterface(android.os.IBinder)>
<android.net.LocalSocket: int getSendBufferSize()>
<android.widget.TimePicker$SavedState: int getMinute()>
<android.text.method.WordIterator: int getEnd(int)>
<android.widget.TextView$SuggestionsPopupWindow: int access$3800(android.widget.TextView$SuggestionsPopupWindow)>
<android.view.GLES20Canvas: void drawPicture(android.graphics.Picture,android.graphics.RectF)>
<android.graphics.Paint: void setAlpha(int)>
<android.util.TypedValue: void <init>()>
<android.content.res.Resources: libcore.icu.NativePluralRules getPluralRule()>
<com.android.internal.telephony.sip.SipPhone: boolean getCallForwardingIndicator()>
<android.widget.OverScroller$SplineOverScroller: int access$300(android.widget.OverScroller$SplineOverScroller)>
<android.widget.VideoView$3: void <init>(android.widget.VideoView)>
<com.android.server.sip.SipService$IntervalMeasurementProcess: void <init>(com.android.server.sip.SipService,android.net.sip.SipProfile,int,int)>
<android.widget.TextView$MenuHandler: void <init>(android.widget.TextView)>
<android.os.storage.StorageManager$UmsConnectionChangedStorageEvent: void <init>(android.os.storage.StorageManager,boolean)>
<android.media.AudioService: int access$5602(android.media.AudioService,int)>
<android.os.Debug$MemoryInfo: int getTotalPss()>
<android.media.AudioService$RcClientDeathHandler: android.os.IBinder access$7200(android.media.AudioService$RcClientDeathHandler)>
<android.app.BackStackState: void <clinit>()>
<android.webkit.BrowserFrame$1: void proceed(java.lang.String,java.lang.String)>
<com.android.internal.telephony.cdma.sms.BearerData: boolean decodeDeferredDeliveryRel(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)>
<android.speech.IRecognitionListener$Stub$Proxy: android.os.IBinder asBinder()>
<android.widget.SimpleExpandableListAdapter: java.lang.Object getGroup(int)>
<com.android.internal.view.IInputMethodCallback$Stub: android.os.IBinder asBinder()>
<android.widget.TextView: int getDesiredHeight(android.text.Layout,boolean)>
<android.os.StrictMode: int parseViolationFromMessage(java.lang.String)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void <init>(android.net.wifi.p2p.WifiP2pService,java.lang.String,boolean)>
<android.speech.tts.SynthesisMessageParams: long getUnconsumedAudioLengthMs()>
<android.mtp.MtpStorageInfo: long getMaxCapacity()>
<android.webkit.WebView: void nativeSetExtendSelection()>
<GenerationGG: android.media.AsyncPlayer get_androidmediaAsyncPlayer()>
<GenerationGG: android.text.TextUtils$EllipsizeCallback get_androidtextTextUtils__EllipsizeCallback()>
<android.os.PatternMatcher$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.text.TextUtils: boolean doesNotNeedBidi(char[],int,int)>
<android.view.animation.Transformation: void <init>()>
<android.app.Dialog: void setFeatureDrawableResource(int,int)>
<GenerationGG: android.view.animation.Transformation get_androidviewanimationTransformation()>
<android.content.IntentSender$FinishedDispatcher: void performReceive(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean)>
<android.preference.DialogPreference$SavedState$1: android.preference.DialogPreference$SavedState[] newArray(int)>
<android.widget.HorizontalScrollView: void onSecondaryPointerUp(android.view.MotionEvent)>
<com.android.internal.net.DNParser: java.lang.String find(java.lang.String)>
<com.android.server.wm.WindowManagerService: boolean hasNavigationBar()>
<android.net.wifi.WifiNative: boolean reassociateCommand()>
<android.content.SyncManager: void access$900(android.content.SyncManager)>
<android.net.sip.SipAudioCall$1: void onRegistrationDone(android.net.sip.SipSession,int)>
<com.android.server.sip.SipService$ConnectivityReceiver: void <init>(com.android.server.sip.SipService)>
<android.view.View: void addOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>
<android.app.Dialog: android.content.Context getContext()>
<android.view.AbsSavedState$1: void <init>()>
<android.app.Activity: void onWindowFocusChanged(boolean)>
<android.net.DhcpStateMachine$DefaultState: void <init>(android.net.DhcpStateMachine)>
<com.android.internal.telephony.gsm.SIMFileHandler: void dispose()>
<android.content.pm.Signature$1: android.content.pm.Signature createFromParcel(android.os.Parcel)>
<android.content.MutableContextWrapper: void <init>(android.content.Context)>
<android.renderscript.Mesh: int getPrimitiveCount()>
<com.android.internal.location.DummyLocationProvider: void setSupportsBearing(boolean)>
<com.android.internal.telephony.cat.IconLoader: void <clinit>()>
<android.text.method.BaseMovementMethod: int getTopLine(android.widget.TextView)>
<android.view.View$AttachInfo$InvalidateInfo: void setPooled(boolean)>
<com.android.internal.telephony.RILRequest: com.android.internal.telephony.RILRequest obtain(int,android.os.Message)>
<android.app.SharedPreferencesImpl$EditorImpl$3: void <init>(android.app.SharedPreferencesImpl$EditorImpl,android.app.SharedPreferencesImpl$MemoryCommitResult)>
<android.test.mock.MockPackageManager: java.util.List queryContentProviders(java.lang.String,int,int)>
<android.os.BatteryStats: void dumpLine(java.io.PrintWriter,int,java.lang.String,java.lang.String,java.lang.Object[])>
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean access$102(com.android.internal.telephony.cdma.RuimSmsInterfaceManager,boolean)>
<android.view.MotionEvent: void getPointerCoords(int,android.view.MotionEvent$PointerCoords)>
<DumbClass: void DumbMethod17()>
<android.preference.PreferenceManager: java.lang.String getDefaultSharedPreferencesName(android.content.Context)>
<android.app.LoadedApk$ServiceDispatcher: void doForget()>
<android.widget.VideoView: android.media.MediaPlayer$OnPreparedListener access$600(android.widget.VideoView)>
<android.net.http.SSLConnectionClosedByUserException: void <init>(java.lang.String)>
<android.widget.EdgeEffect: void onRelease()>
<com.android.internal.view.menu.ActionMenuItem: boolean isCheckable()>
<android.widget.CalendarView: android.content.Context access$1700(android.widget.CalendarView)>
<android.animation.LayoutTransition: java.util.LinkedHashMap access$1000(android.animation.LayoutTransition)>
<android.webkit.WebViewCore: void sendMessageAtFrontOfQueue(int,java.lang.Object)>
<android.bluetooth.BluetoothProfileState: android.bluetooth.BluetoothDevice access$300(android.bluetooth.BluetoothProfileState)>
<com.android.server.am.TaskRecord: long getInactiveDuration()>
<com.android.server.am.ActivityStack: void reportActivityLaunchedLocked(boolean,com.android.server.am.ActivityRecord,long,long)>
<android.os.BatteryStats$HistoryItem: void clear()>
<android.server.BluetoothHealthProfileHandler: boolean registerAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.IBluetoothHealthCallback)>
<android.inputmethodservice.InputMethodService$Insets: void <init>()>
<android.speech.tts.SynthesisMessageParams: void addBuffer(byte[])>
<android.app.FragmentManagerImpl: void addOnBackStackChangedListener(android.app.FragmentManager$OnBackStackChangedListener)>
<android.view.View: void computeScroll()>
<android.widget.TextView$CharWrapper: void drawTextRun(android.graphics.Canvas,int,int,int,int,float,float,int,android.graphics.Paint)>
<com.android.server.location.GpsLocationProvider: int access$1900(com.android.server.location.GpsLocationProvider)>
<android.os.Debug: int getGlobalExternalFreedSize()>
<android.text.TextUtils$1: java.lang.CharSequence[] newArray(int)>
<android.app.ActivityThread$ApplicationThread: void updatePendingConfiguration(android.content.res.Configuration)>
<android.app.LoadedApk$WarningContextClassLoader: void <init>()>
<Wrapper_android_os_ParcelFileDescriptor: void test_android_os_ParcelFileDescriptor()>
<android.content.ContentProviderProxy: android.os.IBinder asBinder()>
<android.net.wifi.WifiWatchdogStateMachine$DelayWalledGardenState: boolean processMessage(android.os.Message)>
<android.test.mock.MockResources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics)>
<Wrapper_android_opengl_GLException: void test_android_opengl_GLException()>
<GenerationGG: android.content.SearchRecentSuggestionsProvider get_androidcontentSearchRecentSuggestionsProvider()>
<android.view.ViewConfiguration: int getScaledWindowTouchSlop()>
<com.android.internal.backup.LocalTransport: long getCurrentRestoreSet()>
<android.os.StrictMode: void writeGatheredViolationsToParcel(android.os.Parcel)>
<android.widget.ScrollView: boolean isFillViewport()>
<android.telephony.NeighboringCellInfo: int getNetworkType()>
<android.test.InstrumentationTestRunner$SuiteAssignmentPrinter: void <init>(android.test.InstrumentationTestRunner)>
<android.net.NetworkInfo: boolean isConnectedOrConnecting()>
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: boolean allowFilterResult(android.content.IntentFilter,java.util.List)>
<android.view.inputmethod.InputMethodSubtype$1: android.view.inputmethod.InputMethodSubtype createFromParcel(android.os.Parcel)>
<android.accounts.AuthenticatorDescription$1: void <init>()>
<com.android.internal.net.DNParser: java.lang.String hexAV()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimMdnLoaded: void <init>(com.android.internal.telephony.cdma.CdmaLteUiccRecords,com.android.internal.telephony.cdma.CdmaLteUiccRecords$1)>
<android.content.res.Configuration: boolean equals(java.lang.Object)>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$ApnChangeObserver: void onChange(boolean)>
<android.content.pm.PackageParser$Package: void <init>(java.lang.String)>
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String access$400(android.net.sip.SimpleSessionDescription$Fields,java.lang.String,char)>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$SamplingTimer getKernelWakelockTimerLocked(java.lang.String)>
<GenerationGG: android.nfc.tech.NdefFormatable get_androidnfctechNdefFormatable()>
<android.view.ViewRootImpl: android.view.ViewRootImpl$RunQueue getRunQueue()>
<com.android.server.WifiService$WifiStateMachineHandler: void handleMessage(android.os.Message)>
<android.graphics.Path: void native_rMoveTo(int,float,float)>
<android.media.TimedText$Justification: void <init>(android.media.TimedText)>
<android.app.Fragment: android.content.res.Resources getResources()>
<android.content.BroadcastReceiver$PendingResult: void setExtrasClassLoader(java.lang.ClassLoader)>
<android.widget.ProgressBar: void stopAnimation()>
<com.android.server.VibratorService: void vibratorOn(long)>
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onRecordsLoaded()>
<android.util.JsonReader$1: void <clinit>()>
<android.media.audiofx.Virtualizer: void setStrength(short)>
<GenerationGG: android.drm.ProcessedData get_androiddrmProcessedData()>
<com.android.internal.telephony.IccSmsInterfaceManagerProxy: void setmIccSmsInterfaceManager(com.android.internal.telephony.IccSmsInterfaceManager)>
<android.app.SharedPreferencesImpl$EditorImpl$2: void <init>(android.app.SharedPreferencesImpl$EditorImpl,java.lang.Runnable)>
<com.android.internal.os.BatteryStatsImpl$Uid: long getFullWifiLockTime(long,int)>
<android.text.Selection: int getSelectionEnd(java.lang.CharSequence)>
<android.net.http.HttpConnection: void closeConnection()>
<com.android.server.TwilightCalculator: void calculateTwilight(long,double,double)>
<com.android.server.UiModeManagerService: android.location.LocationManager access$900(com.android.server.UiModeManagerService)>
<android.text.StaticLayout: boolean getLineContainsTab(int)>
<android.app.IntentReceiverLeaked: void <init>(java.lang.String)>
<android.renderscript.RenderScript: android.renderscript.RenderScript$RSErrorHandler getErrorHandler()>
<com.android.server.accessibility.TouchExplorer$SendHoverDelayed: void clear()>
<android.renderscript.Matrix4f: void <init>()>
<android.view.accessibility.AccessibilityManager: boolean addAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)>
<android.content.ContextWrapper: java.io.File getObbDir()>
<android.renderscript.FieldPacker: void addMatrix(android.renderscript.Matrix3f)>
<android.graphics.Picture: int getWidth()>
<android.widget.ListPopupWindow: android.os.Handler access$900(android.widget.ListPopupWindow)>
<android.os.Looper: void dump(android.util.Printer,java.lang.String)>
<android.view.inputmethod.InputMethodSubtype$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.server.NetworkManagementSocketTagger: int native_setCounterSet(int,int)>
<android.content.IntentSender$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.server.location.MockProvider: void updateLocation(android.location.Location)>
<android.widget.FastScroller$ScrollFade: int getAlpha()>
<android.database.sqlite.SQLiteDatabase: void closeDatabase()>
<android.view.textservice.SpellCheckerSession: android.view.textservice.SpellCheckerInfo getSpellChecker()>
<android.telephony.cdma.CdmaCellLocation: int getSystemId()>
<com.android.server.location.MockProvider: boolean supportsSpeed()>
<android.webkit.CookieManager: void nativeRemoveAllCookie()>
<android.net.http.Headers: java.lang.String getWwwAuthenticate()>
<android.media.Ringtone: int getStreamType()>
<com.android.server.net.NetworkPolicyManagerService: void <init>(android.content.Context,android.app.IActivityManager,android.os.IPowerManager,android.net.INetworkStatsService,android.os.INetworkManagementService,android.util.TrustedTime,java.io.File,boolean)>
<android.webkit.ZoomControlExternal: void <init>(android.webkit.WebView)>
<android.preference.Preference: void setPersistent(boolean)>
<GenerationGG: android.opengl.GLUtils get_androidopenglGLUtils()>
<com.android.internal.net.LegacyVpnInfo$1: void <init>()>
<android.net.http.Request: void reset()>
<android.view.View: void setNextFocusDownId(int)>
<GenerationGG: android.content.Entity get_androidcontentEntity()>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int)>
<android.webkit.WebView$2: void onCancel(android.content.DialogInterface)>
<android.view.GLES20RecordingCanvas: void drawLines(float[],int,int,android.graphics.Paint)>
<android.net.NetworkUtils: int inetAddressToInt(java.net.InetAddress)>
<android.net.sip.SipProfile: java.lang.String access$502(android.net.sip.SipProfile,java.lang.String)>
<com.android.server.pm.UserManager: void fallbackToSingleUser()>
<android.view.DragEvent$1: void <init>()>
<android.renderscript.Allocation: void copyFrom(android.renderscript.BaseObj[])>
<android.emoji.EmojiFactory: int getMaximumAndroidPua()>
<android.net.wifi.p2p.WifiP2pService: java.lang.String access$2700(android.net.wifi.p2p.WifiP2pService)>
<android.app.ListActivity: android.widget.ListAdapter getListAdapter()>
<android.bluetooth.BluetoothDeviceProfileState: android.os.Message access$6000(android.bluetooth.BluetoothDeviceProfileState)>
<android.renderscript.RenderScript: void rsnContextBindProgramFragment(int,int)>
<android.widget.TextView: void setShadowLayer(float,float,float,int)>
<android.view.KeyEvent: int getDeviceId()>
<android.gesture.GestureOverlayView: long getFadeOffset()>
<android.content.res.AssetManager: java.lang.String getResourceEntryName(int)>
<com.android.server.VibratorService: java.util.LinkedList access$000(com.android.server.VibratorService)>
<android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiWatchdogStateMachine$BlacklistedApState access$5200(android.net.wifi.WifiWatchdogStateMachine)>
<android.graphics.drawable.BitmapDrawable: void onBoundsChange(android.graphics.Rect)>
<android.content.IClipboard$Stub: void <init>()>
<android.os.Debug: void startMethodTracing(java.lang.String,int,int)>
<android.view.ActionMode: boolean isUiFocusable()>
<com.android.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: void onCloseMenu(com.android.internal.view.menu.MenuBuilder,boolean)>
<android.text.method.QwertyKeyListener: int getInputType()>
<android.renderscript.Allocation: void validateBitmapFormat(android.graphics.Bitmap)>
<android.view.ViewGroup: boolean onRequestSendAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<GenerationGG: android.provider.ContactsContract get_androidproviderContactsContract()>
<android.content.SyncStorageEngine: android.content.SyncStorageEngine$AuthorityInfo getAuthority(int)>
<android.opengl.GLSurfaceView: void init()>
<GenerationGG: android.webkit.WebStorage get_androidwebkitWebStorage()>
<android.app.ActivityThread$CreateBackupAgentData: java.lang.String toString()>
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: void setSubtitle(java.lang.CharSequence)>
<GenerationGG: android.test.ActivityInstrumentationTestCase get_androidtestActivityInstrumentationTestCase()>
<android.util.Base64: java.lang.String encodeToString(byte[],int)>
<android.speech.tts.ITextToSpeechService$Stub: android.speech.tts.ITextToSpeechService asInterface(android.os.IBinder)>
<com.android.server.PowerManagerService: int access$1702(com.android.server.PowerManagerService,int)>
<android.widget.RemoteViewsAdapter: void loadNextIndexInBackground()>
<android.view.ViewConfiguration: int getScaledOverflingDistance()>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofObject(java.lang.Object,android.util.Property,android.animation.TypeEvaluator,java.lang.Object[])>
<android.util.JsonWriter: android.util.JsonWriter value(boolean)>
<java.lang.Object: int getAttributeListValue(java.lang.String,java.lang.String,java.lang.String[],int)>
<android.content.res.StringBlock: void nativeDestroy(int)>
<com.android.internal.backup.LocalTransport: long requestBackupTime()>
<com.android.internal.os.BatteryStatsImpl$Uid: void noteStopWakeLocked(int,java.lang.String,int)>
<android.net.sip.SipManager$ListenerRelay: void <init>(android.net.sip.SipRegistrationListener,java.lang.String)>
<android.app.Fragment: android.os.Bundle getArguments()>
<com.android.server.am.BroadcastFilter: void dumpBrief(java.io.PrintWriter,java.lang.String)>
<android.test.mock.MockContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>
<com.android.server.am.UsageStatsService: java.lang.String getCurrentDateStr(java.lang.String)>
<android.widget.BaseExpandableListAdapter: long getCombinedGroupId(long)>
<android.content.SyncManager: void sendCancelSyncsMessage(android.accounts.Account,java.lang.String)>
<android.app.Dialog: boolean onContextItemSelected(android.view.MenuItem)>
<com.android.internal.os.ProcessStats: com.android.internal.os.ProcessStats$Stats getStats(int)>
<android.net.sip.SipSession: void setListener(android.net.sip.SipSession$Listener)>
<android.test.mock.MockResources: float getDimension(int)>
<android.database.sqlite.SQLiteDatabaseCorruptException: void <init>(java.lang.String)>
<android.net.LinkCapabilities$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.media.audiofx.Equalizer: void setParameterListener(android.media.audiofx.Equalizer$OnParameterChangeListener)>
<android.text.style.ReplacementSpan: void updateDrawState(android.text.TextPaint)>
<android.app.backup.BackupDataOutput: void setKeyPrefix(java.lang.String)>
<android.text.method.WordIterator: boolean isAfterLetterOrDigit(int)>
<android.media.TimedText$HyperText: void <init>(android.media.TimedText)>
<com.android.server.PowerManagerService: boolean access$5200(com.android.server.PowerManagerService)>
<android.webkit.WebView: void nativeReplaceBaseContent(int)>
<android.view.GLES20RenderLayer: android.view.HardwareCanvas getCanvas()>
<android.net.wifi.p2p.WifiP2pDevice: void <init>(java.lang.String)>
<android.location.Address: java.lang.String access$1102(android.location.Address,java.lang.String)>
<android.content.SyncInfo: int describeContents()>
<com.android.internal.os.IResultReceiver$Stub: android.os.IBinder asBinder()>
<GenerationGG: android.animation.AnimatorListenerAdapter get_androidanimationAnimatorListenerAdapter()>
<android.net.Uri$Builder: java.lang.String toString()>
<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.Drawable mutate()>
<com.android.internal.view.menu.ActionMenuView: com.android.internal.view.menu.ActionMenuView$LayoutParams generateOverflowButtonLayoutParams()>
<android.app.LoadedApk: android.app.IServiceConnection getServiceDispatcher(android.content.ServiceConnection,android.content.Context,android.os.Handler,int)>
<com.android.server.wm.InputManager: void unregisterInputChannel(android.view.InputChannel)>
<android.webkit.URLUtil: boolean isHttpsUrl(java.lang.String)>
<android.app.FragmentBreadCrumbs$1: void <init>(android.app.FragmentBreadCrumbs)>
<android.text.method.TextKeyListener$NullKeyListener: boolean onKeyUp(android.view.View,android.text.Editable,int,android.view.KeyEvent)>
<android.media.AudioService$VolumeStreamState: android.media.AudioService$VolumeStreamState$VolumeDeathHandler getDeathHandler(android.os.IBinder,boolean)>
<GenerationGG: android.view.ViewStub$OnInflateListener get_androidviewViewStub__OnInflateListener()>
<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getResourcePath()>
<android.inputmethodservice.Keyboard$Key: int[] getCurrentDrawableState()>
<android.net.wifi.WifiInfo: java.lang.String access$102(android.net.wifi.WifiInfo,java.lang.String)>
<android.net.http.HttpResponseCache: android.net.http.HttpResponseCache install(java.io.File,long)>
<android.widget.TextView$SuggestionsPopupWindow: int getVerticalLocalPosition(int)>
<com.android.internal.telephony.cat.TextMessage: void <clinit>()>
<android.renderscript.Program: void bindTexture(android.renderscript.Allocation,int)>
<android.webkit.AccessibilityInjector$AccessibilityWebContentKeyBinding: int getAction(int)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int,int,android.graphics.Bitmap$Config)>
<android.content.pm.PermissionInfo$1: void <init>()>
<android.webkit.LoadListener: void commitHeaders()>
<com.android.server.sip.SipHelper: javax.sip.header.ToHeader createToHeader(android.net.sip.SipProfile)>
<android.server.BluetoothService$3: void onServiceConnected(int,android.bluetooth.BluetoothProfile)>
<android.test.mock.MockResources: void <init>()>
<com.android.server.TextServicesManagerService$InternalServiceConnection: java.lang.String access$1000(com.android.server.TextServicesManagerService$InternalServiceConnection)>
<android.content.ContentValues: java.lang.Object get(java.lang.String)>
<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.os.Message)>
<android.view.GLES20Canvas: int nCreateRenderer()>
<android.view.animation.DecelerateInterpolator: void <init>(float)>
<android.animation.LayoutTransition$4: void <init>(android.animation.LayoutTransition,android.view.ViewGroup,android.view.View,int,android.view.View$OnLayoutChangeListener)>
<android.view.View$9: java.lang.Object get(java.lang.Object)>
<android.graphics.Matrix: boolean native_postRotate(int,float,float,float)>
<GenerationGG: java.lang.CharSequence[] get_javalangCharSequence_ARRAY_()>
<android.media.AudioTrack: int getAudioFormat()>
<android.animation.LayoutTransition$4: void onAnimationStart(android.animation.Animator)>
<android.text.style.RelativeSizeSpan: void writeToParcel(android.os.Parcel,int)>
<android.bluetooth.BluetoothDeviceProfileState: void access$2500(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.IState)>
<android.util.LogWriter: void close()>
<com.android.server.InputMethodManagerService$ClientState: void <init>(com.android.server.InputMethodManagerService,com.android.internal.view.IInputMethodClient,com.android.internal.view.IInputContext,int,int)>
<com.android.internal.view.IInputConnectionWrapper: android.os.Message obtainMessageO(int,java.lang.Object)>
<android.speech.tts.ITextToSpeechCallback$Stub$Proxy: android.os.IBinder asBinder()>
<junit.framework.TestCase: void assertEquals(java.lang.String,boolean,boolean)>
<android.os.storage.StorageManager$ListenerDelegate: void sendStorageStateChanged(java.lang.String,java.lang.String,java.lang.String)>
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimDomainLoaded: java.lang.String getEfName()>
<android.media.RemoteControlClient: void onPlugDisplay(android.media.IRemoteControlDisplay)>
<android.graphics.RectF: boolean contains(float,float,float,float)>
<android.util.SparseArray: void <init>(int)>
<com.android.server.wm.InputManager: void nativeSetSystemUiVisibility(int)>
<android.test.IsolatedContext: java.util.List getAndClearBroadcastIntents()>
<android.view.inputmethod.BaseInputConnection: void <clinit>()>
<android.net.wifi.p2p.WifiP2pGroup: void addClient(java.lang.String)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState: void enter()>
<android.net.sip.SipAudioCall: void <clinit>()>
<com.android.internal.telephony.cat.Duration: void writeToParcel(android.os.Parcel,int)>
<GenerationGG: android.telephony.NeighboringCellInfo get_androidtelephonyNeighboringCellInfo()>
<com.android.server.BatteryService: boolean isPowered(int)>
<android.inputmethodservice.InputMethodService: boolean isShowInputRequested()>
<android.graphics.Matrix$ScaleToFit: void <clinit>()>
<android.os.Parcel: android.os.Parcel obtain()>
<android.os.Handler: void dump(android.util.Printer,java.lang.String)>
<android.os.Debug$MemoryInfo: void <init>(android.os.Parcel)>
<android.telephony.PhoneNumberUtils: boolean isNanp(java.lang.String)>
<android.widget.CompoundButton$SavedState: void <clinit>()>
<android.media.audiofx.AudioEffect$NativeEventHandler: void handleMessage(android.os.Message)>
<android.view.GLES20Canvas: void nResizeLayer(int,int,int,int[])>
<Wrapper_android_renderscript_Double4: void test_android_renderscript_Double4()>
<android.app.ActivityThread$StopInfo: void <init>()>
<android.accounts.AccountManagerService$5: java.lang.String toDebugString(long)>
<android.view.inputmethod.InputBinding: android.os.IBinder getConnectionToken()>
<android.net.sip.SipException: void <init>(java.lang.String,java.lang.Throwable)>
<android.drm.DrmManagerClient: android.content.ContentValues _getMetadata(int,java.lang.String)>
<android.net.http.LoggingEventHandler: void status(int,int,int,java.lang.String)>
<android.telephony.SignalStrength: void <clinit>()>
<android.media.ExifInterface: double getAttributeDouble(java.lang.String,double)>
<GenerationGG: android.media.audiofx.BassBoost get_androidmediaaudiofxBassBoost()>
<android.widget.Gallery$FlingRunnable: void <init>(android.widget.Gallery)>
<android.os.Process: int getThreadPriority(int)>
<android.content.pm.PackageItemInfo: android.graphics.drawable.Drawable loadDefaultLogo(android.content.pm.PackageManager)>
<android.view.animation.ScaleAnimation: void <init>(float,float,float,float,int,float,int,float)>
<android.os.AsyncTask: void setDefaultExecutor(java.util.concurrent.Executor)>
<GenerationGG: android.view.SurfaceHolder$Callback2 get_androidviewSurfaceHolder__Callback2()>
<android.webkit.WebSettings$EventHandler: boolean sendMessage(android.os.Message)>
<android.widget.SpellChecker: boolean isSessionActive()>
<android.view.IRotationWatcher$Stub: android.view.IRotationWatcher asInterface(android.os.IBinder)>
<android.webkit.HTML5VideoFullScreen: int access$402(android.webkit.HTML5VideoFullScreen,int)>
<android.text.style.CharacterStyle$Passthrough: void updateDrawState(android.text.TextPaint)>
<android.widget.Scroller: void startScroll(int,int,int,int,int)>
<android.content.pm.ProviderInfo: int describeContents()>
<android.graphics.drawable.InsetDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<android.view.View: android.view.View findUserSetNextFocus(android.view.View,int)>
<android.view.animation.RotateAnimation: void <init>(float,float,float,float)>
<android.drm.DrmInfoRequest: java.lang.Object get(java.lang.String)>
<com.android.server.wm.WindowManagerService: void dumpSessionsLocked(java.io.FileDescriptor,java.io.PrintWriter,boolean)>
<android.content.pm.ParceledListSlice$1: android.content.pm.ParceledListSlice[] newArray(int)>
<android.bluetooth.BluetoothDeviceProfileState: void access$9100(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.media.CamcorderProfile: boolean native_has_camcorder_profile(int,int)>
<android.view.KeyEvent$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.app.WallpaperManager$Globals$1: void <init>(android.app.WallpaperManager$Globals,android.os.Looper)>
<android.inputmethodservice.Keyboard: int access$500(android.inputmethodservice.Keyboard)>
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getMsisdn()>
<android.webkit.WebBackForwardList: boolean getClearPending()>
<android.net.wifi.WifiInfo: void setNetworkId(int)>
<android.view.InputQueue: java.lang.Object access$000()>
<com.android.internal.widget.LockPatternView: android.os.Parcelable onSaveInstanceState()>
<com.android.internal.telephony.cdma.CDMAPhone: boolean isInEcm()>
<android.content.Intent: java.lang.String toString()>
<com.android.server.location.GpsLocationProvider: void <clinit>()>
<android.renderscript.RenderScript: void rsnContextFinish(int)>
<DumbClass: void DumbMethod51()>
<android.graphics.Interpolator$Result: void <init>(java.lang.String,int)>
<android.media.audiofx.AudioEffect: void setParameterListener(android.media.audiofx.AudioEffect$OnParameterChangeListener)>
<com.android.internal.telephony.sip.SipCommandInterface: void getVoiceRegistrationState(android.os.Message)>
<android.graphics.Paint: void setAntiAlias(boolean)>
<android.view.SurfaceView$4: void setKeepScreenOn(boolean)>
<android.drm.DrmInfoRequest: boolean isValid()>
<com.android.server.TextServicesManagerService$InternalDeathRecipient: void <init>(com.android.server.TextServicesManagerService,com.android.server.TextServicesManagerService$SpellCheckerBindGroup,com.android.internal.textservice.ITextServicesSessionListener,java.lang.String,com.android.internal.textservice.ISpellCheckerSessionListener,int,android.os.Bundle)>
<com.android.internal.textservice.ITextServicesManager$Stub: android.os.IBinder asBinder()>
<android.widget.AbsListView: void afterTextChanged(android.text.Editable)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$5400(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,com.android.internal.util.IState)>
<com.android.internal.os.ProcessStats: long getCpuTimeForPid(int)>
<android.view.GLES20Canvas: void nFinish(int)>
<android.animation.ValueAnimator$3: void <init>()>
<android.net.Uri: void <init>(android.net.Uri$1)>
<android.widget.RemoteViews$ViewGroupAction: void <init>(android.widget.RemoteViews,int,android.widget.RemoteViews)>
<android.view.ViewTreeObserver: void dispatchOnGlobalFocusChange(android.view.View,android.view.View)>
<android.net.wifi.WifiStateMachine: void access$100(android.net.wifi.WifiStateMachine,java.lang.String)>
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.gsm.GsmCall parentFromDCState(com.android.internal.telephony.DriverCall$State)>
<android.opengl.Matrix: void transposeM(float[],int,float[],int)>
<com.android.server.am.ActivityManagerService$1: boolean allowFilterResult(com.android.server.am.BroadcastFilter,java.util.List)>
<com.android.internal.view.menu.SubMenuBuilder: com.android.internal.view.menu.MenuBuilder getRootMenu()>
<android.test.suitebuilder.TestGrouping$SortByFullyQualifiedName: void <init>(android.test.suitebuilder.TestGrouping$1)>
<android.media.MediaPlayer: void _pause()>
<android.app.Activity: void onOptionsMenuClosed(android.view.Menu)>
<android.content.res.XmlBlock$Parser: boolean isEmptyElementTag()>
<com.android.internal.app.AlertController: android.widget.Button getButton(int)>
<android.widget.GridLayout: void setRowOrderPreserved(boolean)>
<GenerationGG: android.widget.SearchView$OnSuggestionListener get_androidwidgetSearchView__OnSuggestionListener()>
<android.net.wifi.WifiWatchdogStateMachine: java.util.HashSet access$4300(android.net.wifi.WifiWatchdogStateMachine)>
<com.android.internal.view.menu.BaseMenuPresenter: void <init>(android.content.Context,int,int)>
<android.database.sqlite.SQLiteDatabaseCorruptException: void <init>()>
<android.net.sip.SipAudioCall$Listener: void onError(android.net.sip.SipAudioCall,int,java.lang.String)>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()>
<android.server.BluetoothService: boolean setPinNative(java.lang.String,java.lang.String,int)>
<android.hardware.Camera: int getNumberOfCameras()>
<android.view.View$UnsetPressedState: void <init>(android.view.View,android.view.View$1)>
<android.widget.MediaController: boolean access$100(android.widget.MediaController)>
<android.text.style.MaskFilterSpan: void updateDrawState(android.text.TextPaint)>
<android.os.Debug: void resetThreadGcInvocationCount()>
<android.widget.ViewFlipper: boolean isAutoStart()>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor open(java.io.File,int)>
<android.graphics.drawable.GradientDrawable$Orientation: void <init>(java.lang.String,int)>
<android.bluetooth.BluetoothDeviceProfileState: void log(java.lang.String)>
<android.graphics.Canvas: void native_setMatrix(int,int)>
<com.android.server.WifiService$LockList: boolean hasLocks()>
<android.filterfw.core.GLFrame: int getNativeFboId()>
<android.net.sip.SipProfile: java.lang.String getProxyAddress()>
<com.android.internal.telephony.WspTypeDecoder: boolean decodeExtensionMedia(int)>
<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.Rect)>
<android.app.Activity: boolean onContextItemSelected(android.view.MenuItem)>
<GenerationGG: java.lang.Short get_javalangShort()>
<android.view.animation.GridLayoutAnimationController: int getDirection()>
<com.android.internal.telephony.IccRecords: java.lang.String getIMSI()>
<com.android.i18n.phonenumbers.AsYouTypeFormatter: void getAvailableFormats(java.lang.String)>
<android.graphics.Matrix: void native_reset(int)>
<android.content.pm.VerifierDeviceIdentity$1: android.content.pm.VerifierDeviceIdentity createFromParcel(android.os.Parcel)>
<GenerationGG: android.graphics.PorterDuffXfermode get_androidgraphicsPorterDuffXfermode()>
<com.android.internal.widget.AbsActionBarView: void setContentHeight(int)>
<android.text.style.EasyEditSpan: int getSpanTypeId()>
<android.graphics.Canvas: void native_drawRoundRect(int,android.graphics.RectF,float,float,int)>
<android.webkit.WebView: boolean access$5100(android.webkit.WebView,int,int,int)>
<android.content.SyncStorageEngine$PendingOperation: void <init>(android.content.SyncStorageEngine$PendingOperation)>
<com.android.server.net.NetworkIdentitySet: void <init>()>
<android.graphics.Matrix$1: void setTranslate(float,float)>
<android.os.INetworkManagementService$Stub: android.os.INetworkManagementService asInterface(android.os.IBinder)>
<GenerationGG: org.apache.http.HttpRequest get_orgapachehttpHttpRequest()>
<android.widget.SlidingDrawer: void setOnDrawerScrollListener(android.widget.SlidingDrawer$OnDrawerScrollListener)>
<android.graphics.drawable.RotateDrawable$RotateState: int getChangingConfigurations()>
<android.view.ViewGroup: boolean hasFocusable()>
<android.nfc.NfcActivityManager: android.nfc.NfcActivityManager$NfcActivityState getOrCreateState(android.app.Activity,boolean)>
<android.app.Dialog: void setOwnerActivity(android.app.Activity)>
<android.net.Uri$OpaqueUri: java.lang.String getAuthority()>
<android.widget.ListView: int positionOfNewFocus(android.view.View)>
<android.view.accessibility.AccessibilityNodeInfo: void setClickable(boolean)>
<android.net.NetworkStatsHistory$DataStreamUtils: void writeVarLongArray(java.io.DataOutputStream,long[],int)>
<android.widget.RemoteViews$SetPendingIntentTemplate: void apply(android.view.View,android.view.ViewGroup)>
<com.android.internal.telephony.PhoneBase: int getLteOnCdmaMode()>
<android.view.ScaleGestureDetector: float getFocusX()>
<android.renderscript.Type$CubemapFace: void <init>(java.lang.String,int,int)>
<android.app.backup.BackupDataInput: int ctor(java.io.FileDescriptor)>
<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newDelete(android.net.Uri)>
<android.net.wifi.WifiStateMachine: void access$13700(android.net.wifi.WifiStateMachine,android.os.Message)>
<android.widget.TableLayout: void mutateColumnsWidth(android.util.SparseBooleanArray,boolean,int,int)>
<android.content.Entity: java.util.ArrayList getSubValues()>
<android.widget.GridLayout: android.widget.GridLayout$Spec spec(int,int,android.widget.GridLayout$Alignment)>
<android.filterfw.core.SerializedFrame$DirectByteInputStream: int read(byte[],int,int)>
<android.graphics.drawable.GradientDrawable$GradientState: void setShape(int)>
<com.android.server.WifiService: int access$3400(com.android.server.WifiService)>
<android.content.IntentFilter: java.util.Iterator schemesIterator()>
<android.webkit.WebStorage: long nativeGetQuotaForOrigin(java.lang.String)>
<GenerationGG: android.util.JsonWriter get_androidutilJsonWriter()>
<android.webkit.WebView: void nativeDumpDisplayTree(java.lang.String)>
<android.webkit.HTML5VideoView: void setOnCompletionListener(android.webkit.HTML5VideoViewProxy)>
<android.app.Fragment: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.view.HardwareRenderer$GlRenderer: void invalidate(android.view.SurfaceHolder)>
<android.net.sip.SipProfile: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.WifiStateMachine: boolean access$202(android.net.wifi.WifiStateMachine,boolean)>
<android.accounts.AccountManager$AmsTask: java.lang.Object getResult(long,java.util.concurrent.TimeUnit)>
<com.android.server.PowerManagerService$DockReceiver: void <init>(com.android.server.PowerManagerService)>
<com.android.server.wm.InputMonitor: void setEventDispatchingLw(boolean)>
<android.server.BluetoothService: android.bluetooth.BluetoothInputDevice access$902(android.server.BluetoothService,android.bluetooth.BluetoothInputDevice)>
<android.preference.Preference: boolean shouldCommit()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnablingState access$2900(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<android.graphics.Path: void arcTo(android.graphics.RectF,float,float)>
<android.content.pm.LabeledIntent: java.lang.String getSourcePackage()>
<android.service.wallpaper.WallpaperService$Engine: void onTouchEvent(android.view.MotionEvent)>
<android.content.Intent: void toShortString(java.lang.StringBuilder,boolean,boolean,boolean)>
<com.android.internal.app.IMediaContainerService$Stub: com.android.internal.app.IMediaContainerService asInterface(android.os.IBinder)>
<android.bluetooth.BluetoothDeviceProfileState: void access$9000(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.content.IOnPrimaryClipChangedListener$Stub: android.content.IOnPrimaryClipChangedListener asInterface(android.os.IBinder)>
<android.security.KeyStore: boolean reset()>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void setTethered(boolean)>
<android.app.SearchableInfo$ActionKeyInfo: java.lang.String getQueryActionMsg()>
<android.nfc.tech.BasicTagTechnology: android.nfc.Tag getTag()>
<android.os.Debug: int getBinderLocalObjectCount()>
<android.content.pm.InstrumentationInfo$1: android.content.pm.InstrumentationInfo[] newArray(int)>
<android.app.IServiceConnection$Stub: android.os.IBinder asBinder()>
<android.widget.AbsListView: android.view.View retrieveFromScrap(java.util.ArrayList,int)>
<android.graphics.Bitmap: void nativeCopyPixelsToBuffer(int,java.nio.Buffer)>
<android.database.ContentObserver: void onChange(boolean)>
<android.nfc.INfcAdapter$Stub: android.nfc.INfcAdapter asInterface(android.os.IBinder)>
<android.app.Instrumentation$ActivityMonitor: void <init>(android.content.IntentFilter,android.app.Instrumentation$ActivityResult,boolean)>
<android.webkit.GeolocationPermissions: void access$300(java.lang.String)>
<com.android.internal.telephony.gsm.GsmSMSDispatcher: int resultToCause(int)>
<android.content.pm.ActivityInfo: int getRealConfigChanged()>
<android.net.Uri$StringUri: java.lang.String getEncodedQuery()>
<android.widget.GridLayout$Bounds: void <init>()>
<android.test.mock.MockContentProvider: int delete(android.net.Uri,java.lang.String,java.lang.String[])>
<android.opengl.GLSurfaceView$LogWriter: void write(char[],int,int)>
<android.app.ActivityManager$MemoryInfo$1: android.app.ActivityManager$MemoryInfo[] newArray(int)>
<com.android.internal.view.menu.ActionMenuView: com.android.internal.view.menu.ActionMenuView$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<com.android.server.accessibility.TouchExplorer$SendHoverDelayed: void post(android.view.MotionEvent,int,int,int,long)>
<com.android.internal.telephony.RetryManager: android.util.Pair parseNonNegativeInt(java.lang.String,java.lang.String)>
<android.net.TrafficStats: void clearThreadStatsTag()>
<android.content.res.AssetManager: java.lang.String getResourceName(int)>
<android.renderscript.Element: android.renderscript.Element F32(android.renderscript.RenderScript)>
<android.os.MemoryFile: void <clinit>()>
<Wrapper_android_app_backup_BackupDataInputStream: void test_android_app_backup_BackupDataInputStream()>
<android.gesture.GestureOverlayView: boolean isGesturing()>
<android.webkit.WebIconDatabase$EventHandler$IconResult: void <init>(android.webkit.WebIconDatabase$EventHandler,java.lang.String,android.graphics.Bitmap,android.webkit.WebIconDatabase$IconListener)>
<android.graphics.Camera: void rotate(float,float,float)>
<android.widget.Filter$RequestArguments: void <init>()>
<com.android.internal.telephony.cdma.RuimRecords: void finalize()>
<com.android.server.am.ActivityStack: void removeHistoryRecordsForAppLocked(com.android.server.am.ProcessRecord)>
<android.net.wifi.WifiStateMachine$DriverUnloadedState: void enter()>
<android.widget.GridLayout$LayoutParams: void <init>(int,int,int,int,int,int,android.widget.GridLayout$Spec,android.widget.GridLayout$Spec)>
<android.content.IntentSender$SendIntentException: void <init>()>
<com.android.internal.telephony.sip.SipCommandInterface: void setCLIR(int,android.os.Message)>
<android.app.SearchableInfo: android.app.SearchableInfo$ActionKeyInfo findActionKey(int)>
<android.net.sip.SipAudioCall: android.net.sip.SipProfile getLocalProfile()>
<android.security.IKeyChainAliasCallback$Stub: void <init>()>
<android.content.ComponentName: void writeToParcel(android.content.ComponentName,android.os.Parcel)>
<android.graphics.drawable.StateListDrawable$StateListState: int indexOfStateSet(int[])>
<com.android.internal.telephony.DataConnection: com.android.internal.telephony.DataConnection$DcActivatingState access$1000(com.android.internal.telephony.DataConnection)>
<android.view.textservice.SpellCheckerInfo: void <clinit>()>
<android.text.style.BackgroundColorSpan: int describeContents()>
<android.renderscript.ProgramRaster: android.renderscript.ProgramRaster CULL_BACK(android.renderscript.RenderScript)>
<android.server.BluetoothService: int getDeviceServiceChannelNative(java.lang.String,java.lang.String,int)>
<Wrapper_android_media_effect_EffectContext: void test_android_media_effect_EffectContext()>
<android.graphics.Canvas: void native_drawPicture(int,int)>
<android.os.Debug$MemoryInfo: int getOtherPss(int)>
<android.widget.CursorAdapter: android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup)>
<android.gesture.GestureStore: void setOrientationStyle(int)>
<android.view.ViewGroup: int getChildDrawingOrder(int,int)>
<android.webkit.WebSyncManager$SyncHandler: void <init>(android.webkit.WebSyncManager,android.webkit.WebSyncManager$1)>
<android.hardware.usb.UsbRequest: void close()>
<com.android.internal.telephony.Call: com.android.internal.telephony.Call$State getState()>
<android.widget.CalendarView: boolean getShowWeekNumber()>
<android.nfc.tech.MifareClassic: int getSize()>
<android.opengl.GLES11Ext: void glWeightPointerOES(int,int,int,java.nio.Buffer)>
<android.os.Environment: java.io.File getExternalStorageAndroidDataDir()>
<Wrapper_android_text_style_TabStopSpan: void test_android_text_style_TabStopSpan()>
<com.android.server.WifiService$LockList: void access$3500(com.android.server.WifiService$LockList,com.android.server.WifiService$WifiLock)>
<android.renderscript.Font$Style: void <init>(java.lang.String,int)>
<com.android.internal.os.BatteryStatsImpl$2: java.lang.Object[] newArray(int)>
<android.opengl.GLSurfaceView$BaseConfigChooser: void <init>(android.opengl.GLSurfaceView,int[])>
<android.view.View: void setAnimation(android.view.animation.Animation)>
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: java.lang.String enableString(int)>
<android.content.ComponentName$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.server.location.ComprehensiveCountryDetector: android.telephony.ServiceState access$000(com.android.server.location.ComprehensiveCountryDetector)>
<android.content.res.CompatibilityInfo: boolean equals(java.lang.Object)>
<android.net.NetworkUtils: int prefixLengthToNetmaskInt(int)>
<android.renderscript.Float3: void <init>(float,float,float)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimImsimLoaded: void onRecordLoaded(android.os.AsyncResult)>
<android.animation.ValueAnimator: java.lang.Object clone()>
<android.webkit.BrowserFrame: void nativeSslClientCert(int,byte[],byte[][])>
<android.widget.SearchView$SearchAutoComplete: void performCompletion()>
<android.app.Activity: boolean isFinishing()>
<Wrapper_android_content_SharedPreferences: void test_android_content_SharedPreferences()>
<android.os.PowerManager$WakeLock: void setReferenceCounted(boolean)>
<GenerationGG: android.graphics.CornerPathEffect get_androidgraphicsCornerPathEffect()>
<android.view.MotionEvent: float getOrientation(int)>
<android.app.IProcessObserver$Stub$Proxy: android.os.IBinder asBinder()>
<android.util.SparseArray: int size()>
<com.android.internal.telephony.PhoneBase: java.lang.String[] getActiveApnTypes()>
<android.net.http.HttpAuthHeader: void parseParameter(java.lang.String)>
<com.android.server.sip.SipSessionListenerProxy: void onRegistering(android.net.sip.ISipSession)>
<android.gesture.GestureOverlayView: android.graphics.Path getGesturePath(android.graphics.Path)>
<android.net.wifi.WifiManager$MulticastLock: java.lang.String toString()>
<com.android.internal.telephony.gsm.GsmSMSDispatcher: com.android.internal.telephony.SmsMessageBase$TextEncodingDetails calculateLength(java.lang.CharSequence,boolean)>
<android.view.WindowManager$LayoutParams$1: android.view.WindowManager$LayoutParams[] newArray(int)>
<com.android.server.am.ServiceRecord$StartItem: void <init>(com.android.server.am.ServiceRecord,boolean,int,android.content.Intent,int)>
<android.widget.DatePicker: android.widget.CalendarView getCalendarView()>
<android.view.View: android.view.ViewParent getParent()>
<android.graphics.NinePatch: void nativeDraw(int,android.graphics.Rect,int,byte[],int,int,int)>
<com.android.internal.telephony.WspTypeDecoder: boolean decodeShortInteger(int)>
<android.app.ActivityThread: void sendActivityResult(android.os.IBinder,java.lang.String,int,int,android.content.Intent)>
<GenerationGG: android.renderscript.RSInvalidStateException get_androidrenderscriptRSInvalidStateException()>
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: android.widget.RemoteViews getRemoteViewsAt(int)>
<android.view.ScaleGestureDetector: float getPreviousSpan()>
<android.graphics.Region$1: void <init>()>
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherModeAliveState: void <init>(com.android.server.connectivity.Tethering$TetherMasterSM)>
<android.graphics.NinePatch: int nativeGetTransparentRegion(int,byte[],android.graphics.Rect)>
<android.widget.TabHost: void invokeOnTabChangeListener()>
<android.content.SyncStatusInfo: int describeContents()>
<android.net.wifi.WifiNative: boolean p2pInvite(android.net.wifi.p2p.WifiP2pGroup,java.lang.String)>
<GenerationGG: android.test.UiThreadTest get_androidtestUiThreadTest()>
<android.view.animation.Animation: boolean getDetachWallpaper()>
<android.nfc.NdefRecord$1: java.lang.Object[] newArray(int)>
<com.android.server.pm.PackageManagerService: java.util.List access$2200(com.android.server.pm.PackageManagerService,android.content.pm.PackageInfoLite,java.util.List,com.android.server.pm.PackageVerificationState)>
<android.location.Address: java.lang.String access$202(android.location.Address,java.lang.String)>
<android.util.Base64InputStream: void <init>(java.io.InputStream,int)>
<com.android.internal.util.StateMachine: android.os.HandlerThread access$302(com.android.internal.util.StateMachine,android.os.HandlerThread)>
<android.net.NetworkStats: android.net.NetworkStats$Entry getTotal(android.net.NetworkStats$Entry,int)>
<com.android.server.BackupManagerService$RestoreGetSetsParams: void <init>(com.android.server.BackupManagerService,com.android.internal.backup.IBackupTransport,com.android.server.BackupManagerService$ActiveRestoreSession,android.app.backup.IRestoreObserver)>
<com.android.internal.telephony.RestrictedState: void setCsNormalRestricted(boolean)>
<android.accounts.AccountManagerResponse: void <init>(android.os.Parcel)>
<android.location.Location: android.os.Bundle getExtras()>
<Wrapper_android_animation_TypeEvaluator: void test_android_animation_TypeEvaluator()>
<android.content.pm.ActivityInfo: int getThemeResource()>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofInt(java.lang.String,int[])>
<android.graphics.drawable.ColorDrawable: int getAlpha()>
<android.speech.tts.SilenceMessageParams: android.os.ConditionVariable getConditionVariable()>
<com.android.server.PowerManagerService: void enableProximityLockLocked()>
<com.android.internal.os.ProcessStats: int getLastSystemTime()>
<android.graphics.drawable.GradientDrawable$GradientState: boolean access$000(android.graphics.drawable.GradientDrawable$GradientState)>
<android.speech.tts.TextToSpeechService$AudioSpeechItem: boolean isValid()>
<android.graphics.Matrix: boolean postRotate(float,float,float)>
<android.webkit.HTML5VideoView: void <init>()>
<com.android.server.wm.WindowManagerService: int watchRotation(android.view.IRotationWatcher)>
<com.android.internal.telephony.GsmAlphabet$LanguagePairCount: void <init>(int)>
<android.server.BluetoothHealthProfileHandler$1: void <init>(android.server.BluetoothHealthProfileHandler)>
<android.graphics.Bitmap: boolean isRecycled()>
<android.graphics.drawable.ClipDrawable: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
<android.telephony.gsm.GsmCellLocation: int hashCode()>
<android.app.SearchableInfo: void addActionKey(android.app.SearchableInfo$ActionKeyInfo)>
<com.android.internal.os.BatteryStatsImpl: void updateAllPhoneStateLocked(int,int,int)>
<android.net.MobileDataStateTracker: void setTeardownRequested(boolean)>
<android.widget.TextView: android.text.TextUtils$TruncateAt getEllipsize()>
<android.widget.ExpandableListView: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<android.os.PowerManager$WakeLock$1: void <init>(android.os.PowerManager$WakeLock)>
<android.view.SurfaceView$4: android.graphics.Canvas lockCanvas(android.graphics.Rect)>
<android.view.HardwareRenderer$GlRenderer: void <clinit>()>
<android.view.GLES20Canvas: void drawPaint(android.graphics.Paint)>
<com.android.internal.view.menu.ActionMenuItem: android.view.ContextMenu$ContextMenuInfo getMenuInfo()>
<android.util.LogWriter: void <init>(int,java.lang.String,int)>
<android.content.Intent: android.content.ComponentName getComponent()>
<android.webkit.WebViewCore: void access$5800(android.webkit.WebViewCore,boolean)>
<android.speech.SpeechRecognizer: void putMessage(android.os.Message)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeResourceStream(android.content.res.Resources,android.util.TypedValue,java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.widget.TextView: int length()>
<com.android.server.InputMethodManagerService$3: void <init>(com.android.server.InputMethodManagerService)>
<com.android.server.am.ProcessRecord: void updateHasAboveClientLocked()>
<com.android.internal.telephony.cdma.CDMAPhone: void handleTimerInEmergencyCallbackMode(int)>
<android.net.LocalSocket: boolean isConnected()>
<com.android.server.InputMethodManagerService: int getSubtypeIdFromHashCode(android.view.inputmethod.InputMethodInfo,int)>
<android.widget.RemoteViews: int estimateBitmapMemoryUsage()>
<android.inputmethodservice.InputMethodService: android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodImpl onCreateInputMethodInterface()>
<android.util.SparseBooleanArray: int binarySearch(int[],int,int,int)>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv getServiceStatsLocked(int,java.lang.String,java.lang.String)>
<com.android.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter: boolean flagActionItems()>
<android.inputmethodservice.InputMethodService: android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl onCreateInputMethodSessionInterface()>
<android.graphics.BitmapShader: int nativePostCreate(int,int,int,int)>
<Wrapper_android_sax_EndTextElementListener: void test_android_sax_EndTextElementListener()>
<android.content.res.Resources: int attrForQuantityCode(int)>
<android.media.AudioService: int access$2200(android.media.AudioService)>
<android.net.NetworkStats: java.lang.String setToString(int)>
<android.net.InterfaceConfiguration: int describeContents()>
<android.renderscript.RSTextureView: android.renderscript.RenderScriptGL createRenderScriptGL(android.renderscript.RenderScriptGL$SurfaceConfig)>
<android.net.sip.ISipSessionListener$Stub: android.os.IBinder asBinder()>
<android.app.ActivityThread: java.util.ArrayList collectComponentCallbacksLocked(boolean,android.content.res.Configuration)>
<android.gesture.InstanceLearner$1: void <init>()>
<Wrapper_android_util_JsonWriter: void test_android_util_JsonWriter()>
<android.database.CharArrayBuffer: void <init>(int)>
<android.content.Intent: void <init>()>
<android.view.View: int getPaddingTop()>
<GenerationGG: android.content.res.XmlResourceParser get_androidcontentresXmlResourceParser()>
<android.widget.AdapterViewFlipper: boolean isAutoStart()>
<android.renderscript.RenderScript: void nTypeGetNativeData(int,int[])>
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onNVReady()>
<android.widget.RelativeLayout$LayoutParams: int access$202(android.widget.RelativeLayout$LayoutParams,int)>
<android.view.inputmethod.InputMethodManager: void focusInLocked(android.view.View)>
<android.net.Uri$PathPart: android.net.Uri$PathPart fromDecoded(java.lang.String)>
<android.view.View: int getMeasuredWidth()>
<android.widget.AutoCompleteTextView$PopupDataSetObserver: void <init>(android.widget.AutoCompleteTextView)>
<android.inputmethodservice.KeyboardView$SwipeTracker: void computeCurrentVelocity(int)>
<com.android.internal.telephony.SmsMessageBase$TextEncodingDetails: void <init>()>
<android.provider.Browser: void <clinit>()>
<android.app.Instrumentation$ActivityGoing: void <init>(android.app.Instrumentation,android.app.Instrumentation$ActivityWaiter)>
<android.webkit.WebIconDatabase$EventHandler: void createHandler()>
<android.view.IOnKeyguardExitResult$Stub: android.view.IOnKeyguardExitResult asInterface(android.os.IBinder)>
<Wrapper_android_graphics_DashPathEffect: void test_android_graphics_DashPathEffect()>
<com.android.internal.os.BatteryStatsImpl: void noteScanWifiLockReleasedFromSourceLocked(android.os.WorkSource)>
<android.speech.tts.EventLogger: void <init>(android.speech.tts.SynthesisRequest,java.lang.String,java.lang.String)>
<android.content.ContextWrapper: java.io.File getSharedPrefsFile(java.lang.String)>
<android.database.sqlite.SQLiteBlobTooBigException: void <init>(java.lang.String)>
<android.preference.PreferenceManager: void addPreferencesScreen(android.content.DialogInterface)>
<android.view.OrientationEventListener: int access$100(android.view.OrientationEventListener)>
<com.android.internal.telephony.Call$State: boolean isAlive()>
<com.android.internal.telephony.UUSInfo: int getType()>
<android.telephony.PhoneStateListener: void onDataActivity(int)>
<com.android.internal.util.FastXmlSerializer: void setOutput(java.io.OutputStream,java.lang.String)>
<com.android.internal.telephony.cat.CatService: boolean validateResponse(com.android.internal.telephony.cat.CatResponseMessage)>
<android.test.AndroidTestRunner: void runFailed(java.lang.String)>
<android.webkit.WebSettings$LayoutAlgorithm: void <clinit>()>
<android.graphics.Canvas: void drawPaint(android.graphics.Paint)>
<com.android.internal.view.IInputMethodClient$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: void readSummaryFromParcelLocked(android.os.Parcel)>
<android.widget.Filter: void <init>()>
<android.view.IWindow$Stub: android.os.IBinder asBinder()>
<android.webkit.WebView: int access$4600(android.webkit.WebView)>
<android.preference.Preference: android.os.Parcelable onSaveInstanceState()>
<android.net.wifi.WifiStateMachine$TetheredState: void <init>(android.net.wifi.WifiStateMachine)>
<com.android.server.MountService$ShutdownCallBack: void <init>(com.android.server.MountService,java.lang.String,android.os.storage.IMountShutdownObserver)>
<android.widget.ScrollView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
<android.media.MediaPlayer: boolean native_getMetadata(boolean,boolean,android.os.Parcel)>
<android.widget.VideoView: boolean access$502(android.widget.VideoView,boolean)>
<GenerationGG: android.view.inputmethod.CompletionInfo get_androidviewinputmethodCompletionInfo()>
<android.os.IMessenger$Stub$Proxy: android.os.IBinder asBinder()>
<android.webkit.CallbackProxy: void onReceivedSslError(android.webkit.SslErrorHandler,android.net.http.SslError)>
<android.app.PendingIntent: android.content.IntentSender getIntentSender()>
<android.webkit.DateSorter: void beginningOfDay(java.util.Calendar)>
<android.net.LocalSocketImpl: void setOption(int,java.lang.Object)>
<com.android.internal.os.storage.ExternalStorageFormatter$2: void <init>(com.android.internal.os.storage.ExternalStorageFormatter,android.os.storage.IMountService,java.lang.String)>
<android.net.Uri: java.lang.String encode(java.lang.String)>
<com.android.server.net.NetworkPolicyManagerService$4: void <init>(com.android.server.net.NetworkPolicyManagerService)>
<android.opengl.GLES10: void <init>()>
<android.location.LocationManager$GpsStatusListenerTransport: android.location.GpsStatus$Listener access$500(android.location.LocationManager$GpsStatusListenerTransport)>
<android.app.Application: void dispatchActivityPaused(android.app.Activity)>
<com.android.internal.telephony.AdnRecord: java.lang.String toString()>
<android.widget.RelativeLayout: void sortChildren()>
<android.preference.RingtonePreference: boolean getShowSilent()>
<android.webkit.WebViewCore: void sendMessage(int,int,int)>
<android.webkit.CallbackProxy$2: void onClick(android.content.DialogInterface,int)>
<android.os.Debug: void enableEmulatorTraceOutput()>
<android.view.accessibility.AccessibilityRecord: void setFullScreen(boolean)>
<android.widget.ArrayAdapter: void init(android.content.Context,int,int,java.util.List)>
<android.location.Criteria: int getBearingAccuracy()>
<android.widget.SearchView: android.widget.SearchView$SearchAutoComplete access$1100(android.widget.SearchView)>
<Wrapper_android_opengl_ETC1Util: void test_android_opengl_ETC1Util()>
<android.content.res.AssetManager: long access$100(android.content.res.AssetManager,int)>
<com.android.internal.telephony.cat.ToneSettings: void <clinit>()>
<android.media.audiofx.Equalizer: int[] getBandFreqRange(short)>
<android.net.Uri$OpaqueUri: java.lang.String getEncodedUserInfo()>
<android.graphics.drawable.shapes.Shape: void onResize(float,float)>
<android.widget.ExpandableListView: int getAbsoluteFlatPosition(int)>
<GenerationGG: android.view.MenuItem[] get_androidviewMenuItem_ARRAY_()>
<android.view.GLES20RecordingCanvas$1: android.view.GLES20RecordingCanvas newInstance()>
<android.view.WindowManager$LayoutParams: void scale(float)>
<android.content.res.ColorStateList: java.lang.String toString()>
<android.text.format.Time: boolean isEpoch(android.text.format.Time)>
<android.content.res.TypedArray: java.lang.String getPositionDescription()>
<android.net.NetworkStats$Entry: void <init>(java.lang.String,int,int,int,long,long,long,long,long)>
<com.android.server.ConnectivityService: boolean access$2602(com.android.server.ConnectivityService,boolean)>
<android.webkit.CookieManager: void nativeRemoveExpiredCookie()>
<android.net.wifi.WifiNative: java.lang.String p2pConnect(android.net.wifi.p2p.WifiP2pConfig,boolean)>
<android.widget.FastScroller: boolean isVisible()>
<com.android.server.accessibility.AccessibilityManagerService$Service: void setDynamicallyConfigurableProperties(android.accessibilityservice.AccessibilityServiceInfo)>
<android.os.RegistrantList: void internalNotifyRegistrants(java.lang.Object,java.lang.Throwable)>
<GenerationGG: android.view.MenuItem$OnActionExpandListener get_androidviewMenuItem__OnActionExpandListener()>
<android.webkit.WebViewCore: java.lang.String nativeFindAddress(java.lang.String,boolean)>
<android.view.View$10: void setValue(android.view.View,float)>
<android.net.LinkProperties: android.net.LinkProperties$CompareResult compareRoutes(android.net.LinkProperties)>
<GenerationGG: android.text.style.StrikethroughSpan get_androidtextstyleStrikethroughSpan()>
<android.view.accessibility.AccessibilityRecord: boolean getBooleanProperty(int)>
<android.view.accessibility.IAccessibilityManagerClient$Stub$Proxy: android.os.IBinder asBinder()>
<android.webkit.WebView: boolean inEditingMode()>
<android.content.ClipData$Item: void <init>(java.lang.CharSequence)>
<android.webkit.WebView: int getAxsUrlParameterValue(java.lang.String)>
<android.bluetooth.BluetoothDeviceProfileState: void access$5300(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.IState)>
<android.view.WindowManagerImpl: android.view.WindowManager getDefault(android.view.CompatibilityInfoHolder)>
<com.android.server.PowerManagerService$BrightnessState: void <init>(com.android.server.PowerManagerService,int)>
<android.widget.Chronometer: long getBase()>
<android.nfc.tech.MifareClassic: int getType()>
<android.os.Debug: void resetGlobalExternalAllocCount()>
<android.webkit.AccessibilityInjector$AccessibilityWebContentKeyBinding: int getKeyCode()>
<android.widget.VideoView: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>
<GenerationGG: android.graphics.Canvas get_androidgraphicsCanvas()>
<android.app.backup.BackupDataInputStream: int read(byte[])>
<android.widget.CalendarView: boolean parseDate(java.lang.String,java.util.Calendar)>
<android.app.UiModeManager: void <clinit>()>
<GenerationGG: android.view.LayoutInflater$Factory get_androidviewLayoutInflater__Factory()>
<android.widget.ExpandableListView: void setIndicatorBounds(int,int)>
<android.telephony.SmsMessage: boolean isReplyPathPresent()>
<android.media.AudioService$VolumeStreamState: int access$800(android.media.AudioService$VolumeStreamState)>
<com.android.internal.telephony.cdma.sms.BearerData: boolean decodeDepositIndex(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)>
<com.android.server.wm.ScreenRotationAnimation: boolean hasScreenshot()>
<com.android.internal.os.BatteryStatsImpl: void noteFullWifiLockAcquiredLocked(int)>
<android.view.View: void setNextFocusForwardId(int)>
<android.media.MediaRecorder: void reset()>
<GenerationGG: android.opengl.GLES11 get_androidopenglGLES11()>
<android.text.style.SuggestionRangeSpan: void <init>(android.os.Parcel)>
<GenerationGG: android.drm.DrmInfoEvent get_androiddrmDrmInfoEvent()>
<com.android.server.pm.PackageVerificationState: void addSufficientVerifier(int)>
<android.hardware.usb.UsbDeviceConnection: int controlTransfer(int,int,int,int,byte[],int,int)>
<android.speech.tts.SynthesisMessageParams: int getBytesPerFrame(int)>
<android.widget.AbsListView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.view.textservice.SpellCheckerSubtype: int hashCode()>
<android.webkit.CookieManager: android.webkit.CookieManager getInstance()>
<com.android.internal.telephony.DataConnection: void access$1300(com.android.internal.telephony.DataConnection,android.os.Message)>
<android.graphics.RectF: int describeContents()>
<com.android.internal.util.AsyncChannel: android.os.Messenger access$502(com.android.internal.util.AsyncChannel,android.os.Messenger)>
<android.telephony.PhoneNumberUtils: boolean isCountryCallingCode(int)>
<android.graphics.drawable.NinePatchDrawable: boolean getPadding(android.graphics.Rect)>
<GenerationGG: android.sax.ElementListener get_androidsaxElementListener()>
<android.filterfw.core.Frame: android.filterfw.core.FrameFormat getFormat()>
<GenerationGG: android.speech.RecognizerIntent get_androidspeechRecognizerIntent()>
<android.content.Loader$ForceLoadContentObserver: boolean deliverSelfNotifications()>
<android.os.BatteryStats$HistoryItem: void readDelta(android.os.Parcel)>
<android.telephony.SignalStrength: boolean equals(java.lang.Object)>
<android.widget.TextView: android.text.method.KeyListener getKeyListener()>
<GenerationGG: java.io.FileDescriptor get_javaioFileDescriptor()>
<android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.RectF)>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: int getStarts(int)>
<android.text.format.Time: void set(int,int,int)>
<android.media.audiofx.PresetReverb$BaseParameterListener: void <init>(android.media.audiofx.PresetReverb)>
<GenerationGG: android.hardware.SensorEvent get_androidhardwareSensorEvent()>
<android.server.BluetoothAdapterStateMachine: void access$2200(android.server.BluetoothAdapterStateMachine,android.os.Message)>
<android.net.sip.ISipSessionListener$Stub$Proxy: android.os.IBinder asBinder()>
<android.view.GLES20Canvas: void drawPicture(android.graphics.Picture)>
<android.widget.NumberPicker: void setOnValueChangedListener(android.widget.NumberPicker$OnValueChangeListener)>
<android.webkit.WebView: void centerKeyPressOnTextField()>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: void addSpeedStepTimes(long[])>
<android.widget.GridLayout$Assoc: android.widget.GridLayout$Assoc of(java.lang.Class,java.lang.Class)>
<android.view.GLES20RecordingCanvas: void start()>
<android.net.wifi.p2p.WifiP2pGroup: void setNetworkName(java.lang.String)>
<com.android.server.DropBoxManagerService$FileList: void <init>()>
<android.view.accessibility.AccessibilityInteractionClient: void <init>()>
<android.app.backup.RestoreSet: void <init>(android.os.Parcel,android.app.backup.RestoreSet$1)>
<android.os.Debug: void startMethodTracing(java.lang.String)>
<android.view.MotionEvent: int nativeGetHistorySize(int)>
<android.widget.ListView: android.widget.Adapter getAdapter()>
<android.view.ViewGroup: void bindLayoutAnimation(android.view.View)>
<android.gesture.GestureUtils: float minimumCosineDistance(float[],float[],int)>
<android.emoji.EmojiFactory: int getMinimumAndroidPua()>
<android.graphics.drawable.DrawableContainer: int getMinimumHeight()>
<android.speech.tts.FileSynthesisCallback: void cleanUp()>
<android.content.SyncStorageEngine: android.util.Pair parsePeriodicSync(org.xmlpull.v1.XmlPullParser,android.content.SyncStorageEngine$AuthorityInfo)>
<com.android.internal.telephony.BaseCommands: com.android.internal.telephony.CommandsInterface$RadioState getNvState()>
<android.text.style.EasyEditSpan: int describeContents()>
<android.net.sip.SimpleSessionDescription$Fields: void write(java.lang.StringBuilder)>
<android.app.SharedPreferencesImpl$MemoryCommitResult: void <init>()>
<android.media.MediaScannerConnection$ClientProxy: void <init>(java.lang.String[],java.lang.String[],android.media.MediaScannerConnection$OnScanCompletedListener)>
<android.net.Uri$AbstractHierarchicalUri: java.lang.String parseUserInfo()>
<android.speech.tts.AudioPlaybackHandler: void removeMessages(java.lang.String)>
<android.database.sqlite.DatabaseConnectionPool$PoolObj: void access$400(android.database.sqlite.DatabaseConnectionPool$PoolObj)>
<android.content.Intent$FilterComparison: int hashCode()>
<android.view.View$3: boolean apply(java.lang.Object)>
<GenerationGG: android.opengl.GLES10Ext get_androidopenglGLES10Ext()>
<android.appwidget.AppWidgetProvider: void onDeleted(android.content.Context,int[])>
<com.android.server.DevicePolicyManagerService: boolean isActivePasswordSufficient()>
<android.database.sqlite.DatabaseConnectionPool$PoolObj: boolean isFree()>
<android.view.animation.Animation: int getRepeatMode()>
<android.renderscript.RenderScript: void setErrorHandler(android.renderscript.RenderScript$RSErrorHandler)>
<GenerationGG: android.preference.TwoStatePreference get_androidpreferenceTwoStatePreference()>
<android.view.View: boolean dispatchGenericFocusedEvent(android.view.MotionEvent)>
<android.location.Address$1: android.location.Address[] newArray(int)>
<com.android.internal.telephony.RetryManager: int nextRandomizationTime(int)>
<android.util.FinitePool: android.util.Poolable acquire()>
<android.webkit.GeolocationPermissions$1: void handleMessage(android.os.Message)>
<android.widget.RemoteViews: void setIsWidgetCollectionChild(boolean)>
<android.app.Fragment$SavedState$1: android.app.Fragment$SavedState[] newArray(int)>
<android.inputmethodservice.KeyboardView$SwipeTracker: void <init>()>
<android.net.DhcpStateMachine$WaitBeforeStartState: void <init>(android.net.DhcpStateMachine)>
<android.preference.ListPreference: void onPrepareDialogBuilder(android.app.AlertDialog$Builder)>
<android.renderscript.RSTextureView: void onSurfaceTextureSizeChanged(android.graphics.SurfaceTexture,int,int)>
<com.android.internal.view.IInputMethodSession$Stub$Proxy: void <init>(android.os.IBinder)>
<android.mtp.MtpConstants: boolean isAbstractObject(int)>
<android.graphics.drawable.shapes.RectShape: android.graphics.RectF rect()>
<android.location.Criteria: boolean access$802(android.location.Criteria,boolean)>
<android.speech.tts.TextToSpeechService$1: int isLanguageAvailable(java.lang.String,java.lang.String,java.lang.String)>
<android.widget.ListPopupWindow$DropDownListView: boolean access$502(android.widget.ListPopupWindow$DropDownListView,boolean)>
<com.android.server.AppWidgetService$Provider: void <init>()>
<android.media.MediaPlayer: void setVolume(float,float)>
<android.os.BatteryStats$Uid$Pkg$Serv: void <init>(android.os.BatteryStats$Uid$Pkg)>
<android.os.MessageQueue: void finalize()>
<com.android.internal.app.AlertController$AlertParams$4: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
<android.graphics.drawable.TransitionDrawable: void setCrossFadeEnabled(boolean)>
<android.graphics.drawable.Drawable: void scheduleSelf(java.lang.Runnable,long)>
<android.graphics.Region: void <clinit>()>
<android.view.View: int getAccessibilityWindowId()>
<android.os.WorkSource$1: void <init>()>
<com.android.internal.telephony.IntRangeManager$IntRange: void insert(com.android.internal.telephony.IntRangeManager$ClientRange)>
<android.widget.StackView$StackSlider: float highlightAlphaInterpolator(float)>
<GenerationGG: android.bluetooth.BluetoothA2dp get_androidbluetoothBluetoothA2dp()>
<android.os.MemoryFile$MemoryInputStream: void <init>(android.os.MemoryFile,android.os.MemoryFile$1)>
<android.net.VpnService$Callback: void <init>(android.net.VpnService,android.net.VpnService$1)>
<android.os.Handler: boolean sendEmptyMessageAtTime(int,long)>
<android.app.ListActivity: int getSelectedItemPosition()>
<com.android.server.location.GpsLocationProvider: long getStatusUpdateTime()>
<com.android.internal.view.IInputMethodClient$Stub: android.os.IBinder asBinder()>
<android.view.View: boolean isDirty()>
<android.view.View: void removeOnAttachStateChangeListener(android.view.View$OnAttachStateChangeListener)>
<android.database.sqlite.SQLiteDatabase: void native_setLocale(java.lang.String,int)>
<com.android.server.accessibility.TouchExplorer$PointerTracker: int getActivePointerCount()>
<android.animation.FloatKeyframeSet: android.animation.FloatKeyframeSet clone()>
<com.android.server.sip.SipWakeLock: void <init>(android.os.PowerManager)>
<GenerationGG: android.renderscript.Byte2 get_androidrenderscriptByte2()>
<android.media.IAudioFocusDispatcher$Stub$Proxy: android.os.IBinder asBinder()>
<android.renderscript.RenderScript: void rsnElementGetSubElements(int,int,int[],java.lang.String[])>
<android.net.wifi.SupplicantStateTracker: boolean access$100(android.net.wifi.SupplicantStateTracker)>
<android.location.Location: double getLatitude()>
<android.view.GLES20RecordingCanvas: void <init>(android.view.GLES20RecordingCanvas$1)>
<android.webkit.WebView$ProxyReceiver: void <init>(android.webkit.WebView$1)>
<android.view.Surface$CompatibleCanvas: void <init>(android.view.Surface)>
<android.webkit.WebView: int access$2200(android.webkit.WebView)>
<com.android.server.wm.InputManager: android.view.InputDevice nativeGetInputDevice(int)>
<android.graphics.Path: void <init>(android.graphics.Path)>
<android.widget.RatingBar: void setNumStars(int)>
<android.graphics.Matrix: boolean preRotate(float,float,float)>
<com.android.internal.telephony.gsm.GsmSMSDispatcher$SmsCbConcatInfo: boolean equals(java.lang.Object)>
<android.test.mock.MockCursor: boolean move(int)>
<android.webkit.WebViewCore: void access$7200(android.webkit.WebViewCore)>
<android.widget.NumberPicker$InputTextFilter: char[] getAcceptedChars()>
<com.android.internal.telephony.IccCardStatus: com.android.internal.telephony.IccCardStatus$CardState getCardState()>
<android.view.inputmethod.BaseInputConnection: boolean sendKeyEvent(android.view.KeyEvent)>
<android.view.GLES20RecordingCanvas: void drawPoints(float[],android.graphics.Paint)>
<android.webkit.URLUtil: java.lang.String composeSearchUrl(java.lang.String,java.lang.String,java.lang.String)>
<android.os.BatteryStats$BitDescription: void <init>(int,java.lang.String)>
<android.bluetooth.BluetoothSocket: boolean isConnected()>
<android.graphics.PointF: void <init>()>
<android.net.ProxyProperties$1: android.net.ProxyProperties createFromParcel(android.os.Parcel)>
<android.app.DatePickerDialog: android.widget.DatePicker getDatePicker()>
<android.webkit.WebSettings: boolean getUseWideViewPort()>
<android.database.CursorWindow: boolean nativeSetNumColumns(int,int)>
<com.android.internal.location.DummyLocationProvider: void setSupportsSpeed(boolean)>
<android.graphics.Point: void <clinit>()>
<android.database.sqlite.SQLiteDatabase: int getCacheHitNum()>
<com.android.internal.telephony.IIccPhoneBook$Stub$Proxy: android.os.IBinder asBinder()>
<android.view.ViewGroup: android.view.animation.Animation$AnimationListener getLayoutAnimationListener()>
<android.ddm.DdmHandleHello: void <clinit>()>
<android.content.Intent$ShortcutIconResource$1: android.content.Intent$ShortcutIconResource createFromParcel(android.os.Parcel)>
<android.view.View: void onCloseSystemDialogs(java.lang.String)>
<com.android.server.sip.SipSessionListenerProxy$9: void <init>(com.android.server.sip.SipSessionListenerProxy,android.net.sip.ISipSession,int,java.lang.String)>
<com.android.server.am.ActivityRecord: boolean isInterestingToUserLocked()>
<com.android.server.DevicePolicyManagerService: boolean getStorageEncryption(android.content.ComponentName)>
<android.renderscript.Matrix3f: void multiply(android.renderscript.Matrix3f)>
<android.graphics.Bitmap: void copyPixelsToBuffer(java.nio.Buffer)>
<android.database.sqlite.DatabaseConnectionPool$PoolObj: void <init>(android.database.sqlite.SQLiteDatabase)>
<com.android.internal.telephony.DataConnection: void access$2300(com.android.internal.telephony.DataConnection,com.android.internal.util.IState)>
<android.app.ApplicationErrorReport$CrashInfo: void <init>(android.os.Parcel)>
<android.net.DhcpStateMachine: android.os.PowerManager$WakeLock access$000(android.net.DhcpStateMachine)>
<com.android.internal.telephony.BaseCommands: void registerForCdmaOtaProvision(android.os.Handler,int,java.lang.Object)>
<android.webkit.WebViewCore: void access$6900(android.webkit.WebViewCore,int)>
<android.inputmethodservice.InputMethodService: void onWindowShown()>
<android.os.Parcel: float readFloat()>
<android.graphics.Color: int blue(int)>
<com.android.internal.view.IInputMethodManager$Stub: com.android.internal.view.IInputMethodManager asInterface(android.os.IBinder)>
<Wrapper_android_gesture_GestureUtils: void test_android_gesture_GestureUtils()>
<com.android.internal.app.ActionBarImpl: com.android.internal.widget.ActionBarContainer access$200(com.android.internal.app.ActionBarImpl)>
<android.test.LoaderTestCase$1: void onPostExecute(java.lang.Object)>
<com.android.server.InputMethodManagerService$MyPackageMonitor: void <init>(com.android.server.InputMethodManagerService)>
<android.net.NetworkStats: int describeContents()>
<java.lang.Object: int next()>
<android.util.EventLogTags: android.util.EventLogTags$Description get(int)>
<android.text.style.UnderlineSpan: int describeContents()>
<com.android.server.ConnectivityService: int getRestoreDefaultNetworkDelay(int)>
<android.filterfw.core.FrameManager: void setContext(android.filterfw.core.FilterContext)>
<com.android.internal.telephony.ITelephony$Stub: com.android.internal.telephony.ITelephony asInterface(android.os.IBinder)>
<android.view.GLES20Canvas: boolean preserveBackBuffer()>
<android.graphics.Camera: void save()>
<android.webkit.ZoomManager: boolean canZoomIn()>
<android.app.Activity: boolean isChild()>
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: boolean processMessage(android.os.Message)>
<com.android.internal.location.DummyLocationProvider: int getAccuracy()>
<android.os.Parcel: void writeInterfaceToken(java.lang.String)>
<android.view.View$SendViewScrolledAccessibilityEvent: void <init>(android.view.View,android.view.View$1)>
<android.security.KeyStore: void <init>()>
<com.android.internal.telephony.SmsHeader: com.android.internal.telephony.SmsHeader fromByteArray(byte[])>
<android.view.View: void setMinimumWidth(int)>
<com.android.internal.telephony.gsm.GSMPhone: void notifyUnknownConnection()>
<android.media.JetPlayer: boolean native_clearQueue()>
<java.lang.Object: void copyStringToBuffer(int,android.database.CharArrayBuffer)>
<android.graphics.Bitmap: boolean hasAlpha()>
<GenerationGG: android.graphics.ComposeShader get_androidgraphicsComposeShader()>
<android.location.Address: int access$100(android.location.Address)>
<android.media.AudioService: void removeMediaButtonReceiver(android.app.PendingIntent)>
<android.webkit.WebResourceResponse$Loader: boolean setupStreamAndSendStatus()>
<com.android.server.am.ContentProviderRecord: void dump(java.io.PrintWriter,java.lang.String)>
<android.widget.HorizontalScrollView: int computeHorizontalScrollOffset()>
<android.os.Debug: int getGlobalAllocCount()>
<android.view.accessibility.AccessibilityRecord: int getToIndex()>
<android.widget.RemoteViews$SetDrawableParameters: void writeToParcel(android.os.Parcel,int)>
<android.app.ContextImpl: void <init>(android.app.ContextImpl)>
<GenerationGG: java.net.URI get_javanetURI()>
<com.android.server.location.GpsLocationProvider: boolean supportsSpeed()>
<android.media.TimedText: void readStyle()>
<android.net.WebAddress: java.lang.String getPath()>
<com.android.internal.view.IInputMethodManager$Stub$Proxy: android.os.IBinder asBinder()>
<android.nfc.NfcFragment: void onAttach(android.app.Activity)>
<com.android.server.RandomBlock: void truncateIfPossible(java.io.RandomAccessFile)>
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getVoiceMailAlphaTag()>
<android.widget.SimpleAdapter: void setDropDownViewResource(int)>
<android.opengl.GLSurfaceView$GLThread: void requestExitAndWait()>
<android.location.LocationProvider: void <init>(java.lang.String,android.location.ILocationManager)>
<android.view.accessibility.AccessibilityRecord: android.view.accessibility.AccessibilityRecord obtain(android.view.accessibility.AccessibilityRecord)>
<android.webkit.HTML5VideoFullScreen: void decideDisplayMode()>
<android.net.rtp.AudioGroup: android.net.rtp.AudioStream[] getStreams()>
<android.widget.GridLayout: int getColumnCount()>
<android.net.MobileDataStateTracker: java.lang.String access$200(android.net.MobileDataStateTracker)>
<GenerationGG: android.view.inputmethod.InputBinding get_androidviewinputmethodInputBinding()>
<android.widget.SearchView$10: void afterTextChanged(android.text.Editable)>
<android.webkit.WebView: android.webkit.ViewManager getViewManager()>
<android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiWatchdogStateMachine$DnsCheckFailureState access$2800(android.net.wifi.WifiWatchdogStateMachine)>
<com.android.server.DevicePolicyManagerService$3: void <init>(com.android.server.DevicePolicyManagerService,android.os.RemoteCallback)>
<android.accounts.AccountManager: void access$200(android.accounts.AccountManager)>
<DumbClass: void DumbMethod49()>
<android.view.View$10: void <init>(java.lang.String)>
<android.app.ApplicationPackageManager: void putCachedString(android.app.ApplicationPackageManager$ResourceName,java.lang.CharSequence)>
<android.net.wifi.SupplicantStateTracker: void access$300(android.net.wifi.SupplicantStateTracker,android.net.wifi.StateChangeResult)>
<com.android.internal.os.ProcessStats: void buildWorkingProcs()>
<com.android.server.ThrottleService: android.app.PendingIntent access$2100(com.android.server.ThrottleService)>
<android.nfc.Tag: void writeBytesWithNull(android.os.Parcel,byte[])>
<android.os.WorkSource: int size()>
<android.server.BluetoothService: void writeIncomingConnectionState(java.lang.String,android.util.Pair)>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>
<com.android.server.wm.DragState: void register()>
<com.android.internal.app.ResolverActivity$ResolveListAdapter: android.content.Intent intentForPosition(int)>
<android.graphics.Camera: void nativeApplyToCanvas(int)>
<android.webkit.WebView$HitTestResult: int access$4000(android.webkit.WebView$HitTestResult)>
<android.content.ContentProviderNative: android.content.IContentProvider asInterface(android.os.IBinder)>
<android.graphics.PointF$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.server.PowerManagerService: int access$1302(com.android.server.PowerManagerService,int)>
<android.util.JsonReader: android.util.JsonToken peek()>
<android.text.method.SingleLineTransformationMethod: void <clinit>()>
<android.test.RenamingDelegatingContext: android.content.ContentProvider providerWithRenamedContext(java.lang.Class,android.content.Context,java.lang.String)>
<android.content.res.Configuration: int diff(android.content.res.Configuration)>
<GenerationGG: android.text.Html$TagHandler get_androidtextHtml__TagHandler()>
<com.android.internal.widget.AbsActionBarView$1: void <init>(com.android.internal.widget.AbsActionBarView)>
<android.content.res.AssetManager: int[] getArrayIntResource(int)>
<android.content.Loader: java.lang.String dataToString(java.lang.Object)>
<android.media.AudioService$AudioHandler$2: void <init>(android.media.AudioService$AudioHandler)>
<android.telephony.gsm.SmsMessage$MessageClass: android.telephony.gsm.SmsMessage$MessageClass[] values()>
<android.content.res.CompatibilityInfo$Translator: void translateWindowLayout(android.view.WindowManager$LayoutParams)>
<android.telephony.NeighboringCellInfo$1: android.telephony.NeighboringCellInfo createFromParcel(android.os.Parcel)>
<com.android.server.ConnectivityService: com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo()>
<android.view.View: boolean getGlobalVisibleRect(android.graphics.Rect)>
<android.preference.PreferenceGroupAdapter: void addPreferenceClassName(android.preference.Preference)>
<android.widget.DatePicker$1: void <init>(android.widget.DatePicker)>
<android.webkit.WebViewCore: void nativeClearContent()>
<android.provider.Settings$System: void clearConfiguration(android.content.res.Configuration)>
<android.net.sip.SipAudioCall: boolean isOnHold()>
<android.telephony.PhoneStateListener$1: void onDataActivity(int)>
<android.view.KeyCharacterMap: int nativeLoad(int)>
<android.app.StatusBarManager: void <init>(android.content.Context)>
<junit.framework.TestSuite: void addTest(junit.framework.Test)>
<android.net.EthernetDataTracker: boolean access$100()>
<com.android.internal.telephony.SMSDispatcher$SmsTracker: boolean isMultipart()>
<android.os.Parcel: android.util.SparseBooleanArray readSparseBooleanArray()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: java.lang.String access$1102(com.android.internal.telephony.cdma.CdmaLteUiccRecords,java.lang.String)>
<android.media.ThumbnailUtils: android.graphics.Bitmap createVideoThumbnail(java.lang.String,int)>
<com.android.server.location.LocationProviderProxy: boolean supportsAltitude()>
<android.view.VelocityTracker: float nativeGetXVelocity(int,int)>
<android.test.suitebuilder.AssignableFrom: boolean apply(java.lang.Object)>
<Wrapper_android_net_DhcpInfo: void test_android_net_DhcpInfo()>
<android.opengl.GLES20: void <clinit>()>
<android.telephony.PhoneNumberUtils: int getFormatTypeFromCountryCode(java.lang.String)>
<com.android.server.sip.SipSessionGroup: android.net.sip.SipProfile getLocalProfile()>
<android.widget.AbsListView: void dispatchSetPressed(boolean)>
<android.widget.ExpandableListConnector$GroupMetadata: android.widget.ExpandableListConnector$GroupMetadata obtain(int,int,int,long)>
<GenerationGG: android.media.CamcorderProfile get_androidmediaCamcorderProfile()>
<android.database.CursorJoiner: void <clinit>()>
<java.lang.Object: int getAttributeListValue(int,java.lang.String[],int)>
<android.view.View: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.os.Handler: android.os.Message obtainMessage(int,int,int,java.lang.Object)>
<com.android.server.AttributeCache: void removePackage(java.lang.String)>
<GenerationGG: android.text.style.SuperscriptSpan get_androidtextstyleSuperscriptSpan()>
<android.content.pm.IPackageManager$Stub: android.content.pm.IPackageManager asInterface(android.os.IBinder)>
<android.os.Bundle: boolean setAllowFds(boolean)>
<android.net.wifi.WifiStateMachine$DriverUnloadingState: void enter()>
<android.util.JsonReader: android.util.JsonToken readLiteral()>
<android.content.IntentFilter: void <init>(android.os.Parcel)>
<android.text.style.AlignmentSpan$Standard: android.text.Layout$Alignment getAlignment()>
<com.android.internal.telephony.gsm.GsmCall: boolean update(com.android.internal.telephony.gsm.GsmConnection,com.android.internal.telephony.DriverCall)>
<android.view.View: void setIsRootNamespace(boolean)>
<com.android.internal.telephony.cat.ValueParser: com.android.internal.telephony.cat.ItemsIconId retrieveItemsIconId(com.android.internal.telephony.cat.ComprehensionTlv)>
<android.app.SearchableInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.IClipboard$Stub: android.content.IClipboard asInterface(android.os.IBinder)>
<java.lang.Object: void setGroupCheckable(int,boolean,boolean)>
<android.content.IntentFilter: java.util.Iterator pathsIterator()>
<android.os.storage.StorageVolume: boolean isRemovable()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$3000(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,com.android.internal.util.IState)>
<android.hardware.usb.UsbDevice: int getDeviceId()>
<com.android.server.am.ProcessRecord: java.lang.String[] getPackageList()>
<android.content.Intent: android.net.Uri getData()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isFocused()>
<com.android.server.pm.Settings: void writePackageLPr(org.xmlpull.v1.XmlSerializer,com.android.server.pm.PackageSetting)>
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[],int,int)>
<android.test.mock.MockContext: int getWallpaperDesiredMinimumHeight()>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>
<com.android.internal.appwidget.IAppWidgetHost$Stub$Proxy: android.os.IBinder asBinder()>
<android.nfc.TransceiveResult$1: android.nfc.TransceiveResult createFromParcel(android.os.Parcel)>
<android.widget.ImageView$ScaleType: void <clinit>()>
<android.net.wifi.WifiStateMachine: void access$13200(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.provider.BrowserContract$Searches: void <clinit>()>
<android.net.http.AndroidHttpClient$LoggingConfiguration: void <init>(java.lang.String,int)>
<com.android.internal.telephony.PhoneBase: boolean getUnitTestMode()>
<android.os.ParcelFileDescriptor: void <clinit>()>
<android.content.res.CompatibilityInfo$Translator: void <init>(android.content.res.CompatibilityInfo,float,float)>
<android.test.mock.MockCursor: int getCount()>
<android.view.MotionEvent: boolean isTouchEvent()>
<android.drm.mobile1.DrmRawContent: int nativeReadContent(byte[],int,int,int)>
<com.android.server.PowerManagerService: int access$1776(com.android.server.PowerManagerService,int)>
<android.widget.ScrollView: boolean canScroll()>
<android.media.AudioService: int getValueForVibrateSetting(int,int,int)>
<android.widget.ExpandableListConnector: int getViewTypeCount()>
<android.os.Looper: void <clinit>()>
<android.widget.BaseExpandableListAdapter: int getGroupTypeCount()>
<android.app.ActionBar: android.content.Context getThemedContext()>
<android.widget.ListPopupWindow: void postShow()>
<android.text.method.SingleLineTransformationMethod: char[] getOriginal()>
<android.gesture.Prediction: void <init>(java.lang.String,double)>
<com.android.internal.view.menu.MenuItemImpl: int getItemId()>
<android.net.wifi.WifiWatchdogStateMachine$3: void onChange(boolean)>
<android.preference.MultiSelectListPreference$SavedState$1: void <init>()>
<android.app.ActivityThread$ReceiverData: java.lang.String toString()>
<android.server.BluetoothAdapterStateMachine: void access$4700(android.server.BluetoothAdapterStateMachine,int)>
<android.media.MediaPlayer: int access$000(android.media.MediaPlayer)>
<android.hardware.SensorManager: void getRotationMatrixFromVector(float[],float[])>
<com.android.server.TelephonyRegistry: void handleRemoveListLocked()>
<android.accounts.GrantCredentialsPermissionActivity$1$1: void <init>(android.accounts.GrantCredentialsPermissionActivity$1,java.lang.String)>
<android.app.ActivityManager: int getLargeMemoryClass()>
<GenerationGG: android.nfc.Tag get_androidnfcTag()>
<android.net.wifi.WpsResult$Status: void <clinit>()>
<android.widget.TextView$Blink: void cancel()>
<android.webkit.WebSettings: boolean getUseWebViewBackgroundForOverscrollBackground()>
<com.android.server.wm.Session: android.os.IBinder prepareDrag(android.view.IWindow,int,int,int,android.view.Surface)>
<com.android.server.ConnectivityService: void setBufferSize(java.lang.String)>
<android.widget.RelativeLayout: boolean positionChildVertical(android.view.View,android.widget.RelativeLayout$LayoutParams,int,boolean)>
<android.database.sqlite.SQLiteDatabase: boolean inTransaction()>
<android.os.storage.IMountService$Stub: void <init>()>
<com.android.internal.telephony.ITelephony$Stub$Proxy: void <init>(android.os.IBinder)>
<android.webkit.WebViewCore: void access$3100(android.webkit.WebViewCore,boolean)>
<android.webkit.WebView: void access$8800(android.webkit.WebView)>
<android.drm.DrmManagerClient: int saveRights(android.drm.DrmRights,java.lang.String,java.lang.String)>
<android.net.http.SslCertificate: java.util.Date getValidNotAfterDate()>
<android.location.Location: long access$002(android.location.Location,long)>
<android.net.wifi.WifiStateMachine: void access$6600(android.net.wifi.WifiStateMachine,android.os.Message)>
<Wrapper_android_net_wifi_p2p_WifiP2pDevice: void test_android_net_wifi_p2p_WifiP2pDevice()>
<android.webkit.WebHistoryItem: int getId()>
<android.view.animation.BounceInterpolator: float bounce(float)>
<android.widget.Filter$ResultsHandler: void <init>(android.widget.Filter,android.widget.Filter$1)>
<android.media.AudioService: android.app.KeyguardManager access$6402(android.media.AudioService,android.app.KeyguardManager)>
<android.os.StrictMode: long access$1500()>
<com.android.server.DropBoxManagerService: long createEntry(java.io.File,java.lang.String,int)>
<android.webkit.WebViewCore: java.lang.String access$6200(android.webkit.WebViewCore,java.lang.String,boolean)>
<android.view.ViewStub: void setOnInflateListener(android.view.ViewStub$OnInflateListener)>
<android.net.TrafficStats: void tagSocket(java.net.Socket)>
<com.android.internal.telephony.cdma.CdmaConnection: long getCreateTime()>
<com.android.internal.util.ArrayUtils: boolean contains(int[],int)>
<android.content.ComponentName: java.lang.Object clone()>
<com.android.server.am.UsageStatsService: void writeStatsToFile(boolean,boolean)>
<android.view.IApplicationToken$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.server.pm.PackageManagerService: boolean access$900(android.content.pm.ApplicationInfo)>
<android.webkit.ByteArrayBuilder: android.webkit.ByteArrayBuilder$Chunk obtainChunk(int)>
<GenerationGG: android.opengl.ETC1Util get_androidopenglETC1Util()>
<android.net.wifi.WpsResult: int describeContents()>
<com.android.server.wm.WindowManagerService: int computeCompatSmallestWidth(boolean,android.util.DisplayMetrics,int,int)>
<android.view.GLES20TextureLayer: void update(int,int,boolean)>
<android.view.HardwareRenderer: android.view.HardwareRenderer createGlRenderer(int,boolean)>
<android.renderscript.Program: void bindSampler(android.renderscript.Sampler,int)>
<android.widget.RatingBar: android.graphics.drawable.shapes.Shape getDrawableShape()>
<android.os.Debug: void resetGlobalAllocSize()>
<android.net.wifi.WifiStateMachine: com.android.internal.util.AsyncChannel access$300(android.net.wifi.WifiStateMachine)>
<android.drm.DrmManagerClient: int _initialize(java.lang.Object)>
<com.android.org.bouncycastle.asn1.x509.X509Name: java.util.Vector getValues()>
<com.android.server.ConnectivityService: boolean access$2902(com.android.server.ConnectivityService,boolean)>
<android.os.StatFs: void native_restat(java.lang.String)>
<android.database.CursorWindow: boolean nativePutLong(int,long,int,int)>
<android.widget.OverScroller$SplineOverScroller: void adjustDuration(int,int,int)>
<android.content.pm.VerifierInfo: void <clinit>()>
<android.speech.SpeechRecognizer$InternalListener: void onError(int)>
<android.test.ActivityUnitTestCase$MockParent: void setRequestedOrientation(int)>
<android.widget.FastScroller: int getState()>
<android.view.animation.LayoutAnimationController: boolean isDone()>
<android.renderscript.RenderScript: void rsnProgramBindTexture(int,int,int,int)>
<android.ddm.DdmHandleAppName: void setAppName(java.lang.String)>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: long getSCTimestampMillis()>
<android.webkit.WebSettings: void setLoadsImagesAutomatically(boolean)>
<android.renderscript.RenderScript: void rsnAllocationRead(int,int,int[])>
<com.android.i18n.phonenumbers.geocoding.MappingFileProvider: java.lang.String toString()>
<android.widget.ScrollBarDrawable: int getSize(boolean)>
<com.android.internal.view.menu.MenuPopupHelper: void setAnchorView(android.view.View)>
<com.android.internal.view.menu.ListMenuItemView: com.android.internal.view.menu.MenuItemImpl getItemData()>
<android.renderscript.Byte4: void <init>()>
<android.webkit.WebView: void access$6600(android.webkit.WebView,int)>
<android.content.AsyncTaskLoader: void onCanceled(java.lang.Object)>
<GenerationGG: android.webkit.WebViewFragment get_androidwebkitWebViewFragment()>
<android.os.Parcel$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.appwidget.AppWidgetHostView$ParcelableSparseArray: void <init>(android.appwidget.AppWidgetHostView$1)>
<android.widget.AutoCompleteTextView: void setDropDownHeight(int)>
<android.app.BackStackRecord: android.app.FragmentTransaction disallowAddToBackStack()>
<java.lang.Object: int getColumnCount()>
<android.location.LocationManager$GpsStatusListenerTransport: void <init>(android.location.LocationManager,android.location.GpsStatus$NmeaListener)>
<android.text.method.TextKeyListener$NullKeyListener: boolean onKeyOther(android.view.View,android.text.Editable,android.view.KeyEvent)>
<GenerationGG: android.media.audiofx.AudioEffect$OnEnableStatusChangeListener get_androidmediaaudiofxAudioEffect__OnEnableStatusChangeListener()>
<android.animation.AnimatorSet: void setupStartValues()>
<android.util.SparseIntArray: void <init>(int)>
<android.accounts.AuthenticatorDescription: int describeContents()>
<android.text.style.SubscriptSpan: void updateDrawState(android.text.TextPaint)>
<GenerationGG: android.net.rtp.AudioGroup get_androidnetrtpAudioGroup()>
<android.media.MediaPlayer: void _setVideoSurface(android.view.Surface)>
<android.renderscript.RenderScript: int nDeviceCreate()>
<android.os.Power: void releaseWakeLock(java.lang.String)>
<android.view.KeyCharacterMap: int getDeadChar(int,int)>
<com.android.server.InputMethodManagerService: java.lang.String access$800()>
<android.hardware.usb.UsbEndpoint$1: void <init>()>
<android.net.Uri$StringUri: int findSchemeSeparator()>
<com.android.server.pm.PackageManagerService: java.lang.String getEncryptKey()>
<android.bluetooth.BluetoothProfileState: android.bluetooth.BluetoothProfileState$PendingCommandState access$500(android.bluetooth.BluetoothProfileState)>
<android.renderscript.Script: void setVar(int,boolean)>
<com.android.server.am.ActivityManagerService: boolean isAllowedWhileBooting(android.content.pm.ApplicationInfo)>
<android.animation.Animator: android.animation.Animator clone()>
<com.android.internal.telephony.WspTypeDecoder: boolean decodeTextString(int)>
<android.content.res.Resources: void flushLayoutCache()>
<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageI(int,int)>
<android.widget.TabWidget$TabClickListener: void <init>(android.widget.TabWidget,int)>
<com.android.server.wm.InputApplicationHandle: void finalize()>
<android.media.AudioService: android.content.Context access$6200(android.media.AudioService)>
<android.content.IntentFilter: java.lang.String getDataType(int)>
<android.view.ViewRootImpl$3: void setKeepScreenOn(boolean)>
<com.android.server.wm.InputManager: void <init>(android.content.Context,com.android.server.wm.WindowManagerService)>
<android.net.Uri$HierarchicalUri: boolean isRelative()>
<android.ddm.DdmHandleHeap: void <clinit>()>
<android.util.JsonWriter: void string(java.lang.String)>
<android.database.DataSetObserver: void onInvalidated()>
<android.graphics.drawable.GradientDrawable: void onBoundsChange(android.graphics.Rect)>
<android.app.ActivityThread: android.os.Handler getHandler()>
<android.view.ViewRootImpl$RunQueue: void <init>()>
<android.content.res.Resources: android.content.res.XmlResourceParser loadXmlResourceParser(java.lang.String,int,int,java.lang.String)>
<android.media.audiofx.AudioEffect: android.media.audiofx.AudioEffect$Descriptor getDescriptor()>
<android.opengl.GLSurfaceView$DefaultWindowSurfaceFactory: void <init>(android.opengl.GLSurfaceView$1)>
<android.graphics.Bitmap: void eraseColor(int)>
<Wrapper_android_webkit_WebBackForwardList: void test_android_webkit_WebBackForwardList()>
<GenerationGG: android.opengl.GLSurfaceView$EGLContextFactory get_androidopenglGLSurfaceView__EGLContextFactory()>
<com.android.server.WifiService$LockList: int access$3600(com.android.server.WifiService$LockList,android.os.IBinder)>
<android.webkit.GeolocationPermissions: boolean nativeGetAllowed(java.lang.String)>
<android.gesture.GestureOverlayView: void setFadeEnabled(boolean)>
<android.media.AudioService: boolean isStreamMutedByRingerMode(int)>
<android.graphics.Canvas: void drawBitmapMesh(android.graphics.Bitmap,int,int,float[],int,int[],int,android.graphics.Paint)>
<android.gesture.GestureOverlayView: void removeOnGesturingListener(android.gesture.GestureOverlayView$OnGesturingListener)>
<com.android.server.net.NetworkStatsService$1: void <init>(com.android.server.net.NetworkStatsService)>
<GenerationGG: android.graphics.Path$Direction get_androidgraphicsPath__Direction()>
<com.android.internal.telephony.WspTypeDecoder: int getDecodedDataLength()>
<com.android.server.usb.UsbSettingsManager: void writeSettingsLocked()>
<android.widget.HeaderViewListAdapter: android.widget.ListAdapter getWrappedAdapter()>
<android.location.LocationManager$GpsStatusListenerTransport$Nmea: void <init>(android.location.LocationManager$GpsStatusListenerTransport,long,java.lang.String)>
<android.media.JetPlayer: boolean loadJetFile(android.content.res.AssetFileDescriptor)>
<com.android.server.ConnectivityService: android.net.NetworkState getNetworkStateUnchecked(int)>
<android.net.LinkCapabilities: void <clinit>()>
<android.preference.SwitchPreference: java.lang.CharSequence getSwitchTextOn()>
<android.util.JsonReader: java.lang.String nextString()>
<android.widget.ActivityChooserView: android.database.DataSetObserver access$1300(android.widget.ActivityChooserView)>
<android.database.MatrixCursor: byte[] getBlob(int)>
<com.android.internal.widget.IRemoteViewsAdapterConnection$Stub: android.os.IBinder asBinder()>
<android.widget.ExpandableListConnector: void <init>(android.widget.ExpandableListAdapter)>
<android.widget.VideoView: int access$1000(android.widget.VideoView)>
<android.graphics.Canvas: void drawTextOnPath(char[],int,int,android.graphics.Path,float,float,android.graphics.Paint)>
<android.webkit.JWebCoreJavaBridge: void nativeUpdateProxy(java.lang.String,java.lang.String)>
<GenerationGG: android.service.textservice.SpellCheckerService get_androidservicetextserviceSpellCheckerService()>
<com.android.server.sip.SipHelper: javax.sip.address.SipURI createSipUri(java.lang.String,java.lang.String,javax.sip.ListeningPoint)>
<GenerationGG: android.nfc.NdefMessage get_androidnfcNdefMessage()>
<com.android.server.wm.WindowManagerService: int findDesiredInputMethodWindowIndexLocked(boolean)>
<android.app.Dialog: void onContentChanged()>
<android.speech.tts.MessageParams: java.lang.String toString()>
<android.view.animation.AlphaAnimation: void <init>(float,float)>
<android.app.ListActivity$2: void <init>(android.app.ListActivity)>
<android.bluetooth.BluetoothPbap$1: void onServiceDisconnected(android.content.ComponentName)>
<android.content.BroadcastReceiver: void setResultCode(int)>
<android.net.TrafficStats: void setThreadStatsTag(int)>
<GenerationGG: android.text.Selection get_androidtextSelection()>
<android.speech.tts.EventLogger: void onStopped()>
<android.net.EthernetDataTracker$InterfaceObserver: void interfaceLinkStateChanged(java.lang.String,boolean)>
<android.webkit.ZoomManager: boolean access$1000(android.webkit.ZoomManager)>
<android.graphics.Canvas: boolean native_getClipBounds(int,android.graphics.Rect)>
<android.graphics.Paint: void setColor(int)>
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: boolean processMessage(android.os.Message)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: int access$4800(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,java.lang.String)>
<android.view.MotionEvent: int nativeGetDeviceId(int)>
<android.widget.HeaderViewListAdapter: void <clinit>()>
<android.webkit.CacheManager$2: void <init>(java.util.List)>
<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>
<GenerationGG: android.view.InputQueue$Callback get_androidviewInputQueue__Callback()>
<android.test.mock.MockResources: android.content.res.XmlResourceParser getXml(int)>
<com.android.server.net.NetworkAlertObserver: void interfaceAdded(java.lang.String)>
<android.webkit.WebSettings: boolean supportZoom()>
<android.webkit.WebViewCore$EventHub: void access$7600(android.webkit.WebViewCore$EventHub,android.os.Message)>
<android.view.accessibility.AccessibilityNodeInfo: void setParent(android.view.View)>
<android.net.UrlQuerySanitizer: int decodeHexDigit(char)>
<android.view.FocusFinder: int majorAxisDistanceRaw(int,android.graphics.Rect,android.graphics.Rect)>
<GenerationGG: java.util.List get_javautilList()>
<com.android.internal.telephony.sip.SipPhone$SipCall: void <init>(com.android.internal.telephony.sip.SipPhone)>
<android.media.AudioManager: void <init>(android.content.Context)>
<android.graphics.drawable.AnimatedRotateDrawable: void start()>
<com.android.server.wm.InputManager: void setSystemUiVisibility(int)>
<android.text.StaticLayout: android.text.Layout$Directions getLineDirections(int)>
<com.android.internal.widget.ScrollingTabContainerView: android.widget.LinearLayout access$200(com.android.internal.widget.ScrollingTabContainerView)>
<android.util.LongSparseArray: void <clinit>()>
<com.android.server.location.GpsLocationProvider$3: boolean sendNiResponse(int,int)>
<com.android.server.AlarmManagerService: void <clinit>()>
<android.media.MediaRecorder: int getAudioSourceMax()>
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String toString()>
<com.android.server.accessibility.TouchExplorer$PointerTracker: boolean isActivePointer(int)>
<com.android.server.location.GpsLocationProvider: void access$1100(com.android.server.location.GpsLocationProvider)>
<android.app.Dialog: void setOnKeyListener(android.content.DialogInterface$OnKeyListener)>
<com.android.server.PackageManagerBackupAgent: java.util.Set getRestoredPackages()>
<android.view.accessibility.AccessibilityInteractionClient: void finalizeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo,android.accessibilityservice.IAccessibilityServiceConnection,float)>
<android.content.pm.PackageManager$NameNotFoundException: void <init>()>
<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer endTag(java.lang.String,java.lang.String)>
<android.widget.NumberPicker: void <clinit>()>
<android.accounts.AccountManagerService$2: java.lang.String toDebugString(long)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimEprlLoaded: void <init>(com.android.internal.telephony.cdma.CdmaLteUiccRecords,com.android.internal.telephony.cdma.CdmaLteUiccRecords$1)>
<android.graphics.drawable.ScaleDrawable$ScaleState: int getChangingConfigurations()>
<android.widget.BaseAdapter: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.view.HardwareRenderer$GlRenderer: boolean canDraw()>
<com.android.server.sip.SipSessionGroup: void addSipSession(com.android.server.sip.SipSessionGroup$SipSessionImpl)>
<android.database.sqlite.SQLiteDatabase: void logTimeStat(java.lang.String,long)>
<android.inputmethodservice.Keyboard$Key: int[] parseCSV(java.lang.String)>
<android.text.format.Time: int getWeekNumber()>
<GenerationGG: android.test.SingleLaunchActivityTestCase get_androidtestSingleLaunchActivityTestCase()>
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getLine1Number()>
<GenerationGG: android.text.method.BaseMovementMethod get_androidtextmethodBaseMovementMethod()>
<android.webkit.WebView: void updateCachedTextfield(java.lang.String)>
<android.text.method.DateTimeKeyListener: char[] getAcceptedChars()>
<android.widget.ProgressBar$SavedState$1: java.lang.Object[] newArray(int)>
<android.graphics.drawable.shapes.RoundRectShape: android.graphics.drawable.shapes.RectShape clone()>
<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedBy()>
<com.android.server.RandomBlock: void close(java.io.Closeable)>
<android.view.inputmethod.InputMethodInfo: java.lang.String getSettingsActivity()>
<android.webkit.L10nUtils: void <clinit>()>
<android.hardware.usb.UsbAccessory: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebStorage: void getQuotaForOrigin(java.lang.String,android.webkit.ValueCallback)>
<com.android.internal.telephony.sip.SipCommandInterface: void reportSmsMemoryStatus(boolean,android.os.Message)>
<android.widget.OverScroller$SplineOverScroller: void initFromContext(android.content.Context)>
<com.android.server.BatteryService$1: void <init>(com.android.server.BatteryService)>
<android.content.pm.PackageInfoLite: void <clinit>()>
<android.widget.GridLayout: int getRowCount()>
<android.webkit.WebView: int access$3900(android.webkit.WebView)>
<android.net.wifi.p2p.WifiP2pGroup$1: java.lang.Object[] newArray(int)>
<android.view.MotionEvent: int nativeGetEdgeFlags(int)>
<android.graphics.Matrix: void finalizer(int)>
<android.webkit.LoadListener: void handleStatus(int,int,int,java.lang.String)>
<android.webkit.DeviceMotionAndOrientationManager: void onOrientationChange(java.lang.Double,java.lang.Double,java.lang.Double)>
<android.text.style.BulletSpan: void writeToParcel(android.os.Parcel,int)>
<android.graphics.drawable.InsetDrawable: android.graphics.drawable.Drawable mutate()>
<android.renderscript.Allocation: android.renderscript.Allocation createFromString(android.renderscript.RenderScript,java.lang.String,int)>
<android.net.wifi.WifiStateTracker: android.net.NetworkInfo$State access$400(android.net.wifi.WifiStateTracker)>
<android.net.wifi.WifiStateMachine: com.android.internal.util.State access$1000(android.net.wifi.WifiStateMachine)>
<android.media.AudioService$RcClientDeathHandler: void <init>(android.media.AudioService,android.os.IBinder,android.app.PendingIntent)>
<android.net.wifi.WifiStateTracker: void setPolicyDataEnable(boolean)>
<android.text.Layout$SpannedEllipsizer: void <init>(java.lang.CharSequence)>
<android.view.Surface: int describeContents()>
<android.hardware.SensorManager$SensorThread: boolean startLocked()>
<android.text.style.SpellCheckSpan: void <init>(android.os.Parcel)>
<android.net.RouteInfo: android.net.RouteInfo makeHostRoute(java.net.InetAddress)>
<GenerationGG: android.view.ViewGroup$OnHierarchyChangeListener get_androidviewViewGroup__OnHierarchyChangeListener()>
<android.view.Gravity: void <init>()>
<android.telephony.PhoneNumberUtils: int tryGetISODigit(char)>
<android.content.ContentUris: android.net.Uri$Builder appendId(android.net.Uri$Builder,long)>
<android.graphics.Bitmap$Config: void <init>(java.lang.String,int,int)>
<android.view.SurfaceView$4: void setSizeFromLayout()>
<com.android.server.net.NetworkPolicyManagerService: java.util.HashSet access$900(com.android.server.net.NetworkPolicyManagerService)>
<com.android.internal.statusbar.IStatusBar$Stub: com.android.internal.statusbar.IStatusBar asInterface(android.os.IBinder)>
<android.view.PointerIcon: void writeToParcel(android.os.Parcel,int)>
<GenerationGG: android.os.Parcelable[] get_androidosParcelable_ARRAY_()>
<android.app.BackStackRecord: java.lang.String getName()>
<android.app.backup.BackupHelperDispatcher: int writeHeader_native(android.app.backup.BackupHelperDispatcher$Header,java.io.FileDescriptor,int)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void setExitFadeDuration(int)>
<android.view.MotionEvent: void <clinit>()>
<android.net.LocalSocketImpl: java.io.OutputStream getOutputStream()>
<android.bluetooth.BluetoothTetheringDataTracker: boolean isTeardownRequested()>
<com.android.internal.telephony.cat.RilMessageDecoder: void sendCmdForExecution(com.android.internal.telephony.cat.RilMessage)>
<android.widget.ListPopupWindow: android.widget.ListView getListView()>
<android.graphics.Paint: void setARGB(int,int,int,int)>
<android.text.SpannableStringBuilder: void <clinit>()>
<android.webkit.BrowserFrame$1: void cancel()>
<android.accounts.AccountManager$Future2Task: java.lang.Object getResult()>
<android.view.KeyCharacterMap: char nativeGetNumber(int,int)>
<android.app.admin.DeviceAdminInfo: void <clinit>()>
<android.opengl.GLSurfaceView$GLThread: void <init>(android.opengl.GLSurfaceView,android.opengl.GLSurfaceView$Renderer)>
<android.widget.TextView: android.graphics.drawable.Drawable access$6600(android.widget.TextView)>
<android.widget.Scroller: int getCurrX()>
<android.net.wifi.WifiStateMachine: void setWifiApEnabled(android.net.wifi.WifiConfiguration,boolean)>
<com.android.server.wm.WindowManagerService: boolean access$600(com.android.server.wm.WindowManagerService)>
<android.renderscript.Matrix2f: void loadMultiply(android.renderscript.Matrix2f,android.renderscript.Matrix2f)>
<android.widget.RemoteViews$ReflectionAction: java.lang.Class getParameterType()>
<android.media.ExifInterface: double getAltitude(double)>
<GenerationGG: android.view.ViewDebug get_androidviewViewDebug()>
<android.widget.AbsSeekBar: int getThumbOffset()>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.cdma.CdmaCall getRingingCall()>
<android.widget.AutoCompleteTextView: void setDropDownVerticalOffset(int)>
<android.filterfw.core.SimpleFrameManager: android.filterfw.core.Frame releaseFrame(android.filterfw.core.Frame)>
<android.test.mock.MockCursor: int getInt(int)>
<android.bluetooth.BluetoothDeviceProfileState: void deferProfileServiceMessage(int)>
<android.media.audiofx.BassBoost$Settings: java.lang.String toString()>
<android.widget.Gallery$FlingRunnable: android.widget.Scroller access$200(android.widget.Gallery$FlingRunnable)>
<android.media.Metadata: void <init>()>
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getContentDescription()>
<android.text.method.ArrowKeyMovementMethod: void <init>()>
<android.os.PatternMatcher: int describeContents()>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void access$2500(com.android.server.connectivity.Tethering$TetherInterfaceSM,com.android.internal.util.IState)>
<com.android.internal.os.BatteryStatsImpl$Counter: void writeSummaryFromParcelLocked(android.os.Parcel)>
<android.graphics.RectF: void <init>(android.graphics.Rect)>
<com.android.server.am.ActivityManagerService: void scheduleBroadcastsLocked()>
<com.android.internal.location.DummyLocationProvider: boolean hasMonetaryCost()>
<android.os.storage.IMountServiceListener$Stub: void <init>()>
<android.widget.TextView: android.text.style.SuggestionRangeSpan access$2902(android.widget.TextView,android.text.style.SuggestionRangeSpan)>
<android.graphics.drawable.shapes.Shape: void <init>()>
<com.android.internal.net.LegacyVpnInfo: void <clinit>()>
<android.drm.DrmUtils: void quiteDispose(java.io.OutputStream)>
<android.content.SyncAdaptersCache$MySerializer: void <init>()>
<android.os.Messenger$1: android.os.Messenger createFromParcel(android.os.Parcel)>
<com.android.internal.view.InputConnectionWrapper$InputContextCallback: void access$100(com.android.internal.view.InputConnectionWrapper$InputContextCallback)>
<android.view.View$TransformationInfo: int access$500(android.view.View$TransformationInfo)>
<android.net.http.Connection: java.lang.String toString()>
<android.view.VelocityTracker: void setNextPoolable(android.view.VelocityTracker)>
<android.hardware.Sensor: float getPower()>
<android.accounts.AccountManagerService$Session: java.lang.String toDebugString(long)>
<android.content.pm.PackageParser: android.content.pm.ApplicationInfo generateApplicationInfo(android.content.pm.PackageParser$Package,int)>
<GenerationGG: java.lang.Number get_javalangNumber()>
<com.android.internal.telephony.CommandsInterface$RadioState: void <init>(java.lang.String,int,int)>
<android.app.LauncherActivity$ActivityAdapter: java.lang.Object getItem(int)>
<GenerationGG: android.util.Base64 get_androidutilBase64()>
<android.text.method.BaseMovementMethod: boolean end(android.widget.TextView,android.text.Spannable)>
<android.opengl.GLES20: void glGenTextures(int,int[],int)>
<android.app.SearchableInfo: int getVoiceLanguageId()>
<android.widget.Spinner$DropDownAdapter: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.bluetooth.BluetoothHealthAppConfiguration$1: android.bluetooth.BluetoothHealthAppConfiguration createFromParcel(android.os.Parcel)>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.internal.util.State access$1000(com.android.server.connectivity.Tethering$TetherInterfaceSM)>
<android.media.AudioService: void playSoundEffect(int)>
<android.graphics.Paint$Join: void <clinit>()>
<com.android.server.pm.PackageSetting: void <init>(java.lang.String,java.lang.String,java.io.File,java.io.File,java.lang.String,int,int)>
<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder includePackages(java.lang.String[])>
<android.net.wifi.WpsInfo: void <clinit>()>
<android.widget.AdapterViewAnimator$CheckForTap: void <init>(android.widget.AdapterViewAnimator)>
<android.server.BluetoothService: java.lang.String getAdapterPathNative()>
<android.test.mock.MockCursor: java.lang.String getString(int)>
<android.view.View: android.view.ViewGroup$LayoutParams getLayoutParams()>
<android.renderscript.ProgramRaster$Builder: void <init>(android.renderscript.RenderScript)>
<android.graphics.Matrix: boolean native_preConcat(int,int)>
<android.renderscript.Allocation: void copyFrom(float[])>
<android.speech.tts.TextToSpeech$7: void <init>(android.speech.tts.TextToSpeech,java.util.Locale)>
<com.android.server.am.ActivityManagerService: com.android.server.am.ServiceRecord findServiceLocked(android.content.ComponentName,android.os.IBinder)>
<android.hardware.usb.UsbAccessory: boolean compare(java.lang.String,java.lang.String)>
<GenerationGG: android.location.GpsStatus get_androidlocationGpsStatus()>
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setCdmaTechnology(int)>
<com.android.internal.app.ActionBarImpl: android.content.Context access$700(com.android.internal.app.ActionBarImpl)>
<android.filterfw.core.CachedFrameManager: boolean storeFrame(android.filterfw.core.Frame)>
<com.android.internal.telephony.cat.ValueParser: com.android.internal.telephony.cat.Duration retrieveDuration(com.android.internal.telephony.cat.ComprehensionTlv)>
<com.android.server.accessibility.AccessibilityManagerService: int addAccessibilityInteractionConnection(android.view.IWindow,android.view.accessibility.IAccessibilityInteractionConnection)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnablingState: boolean processMessage(android.os.Message)>
<android.server.BluetoothService: boolean setRemoteOutOfBandDataNative(java.lang.String,byte[],byte[],int)>
<android.content.res.AssetManager$AssetInputStream: boolean markSupported()>
<android.net.LinkAddress$1: android.net.LinkAddress[] newArray(int)>
<android.widget.AbsListView: void beforeTextChanged(java.lang.CharSequence,int,int,int)>
<com.android.internal.app.ResolverActivity$DisplayResolveInfo: void <init>(com.android.internal.app.ResolverActivity,android.content.pm.ResolveInfo,java.lang.CharSequence,java.lang.CharSequence,android.content.Intent)>
<com.android.server.wm.WindowManagerService: void placeWindowBefore(com.android.server.wm.WindowState,com.android.server.wm.WindowState)>
<android.widget.ActivityChooserModel: void pruneExcessiveHistoricalRecordsLocked()>
<Wrapper_android_graphics_PorterDuffColorFilter: void test_android_graphics_PorterDuffColorFilter()>
<android.webkit.WebViewCore$MotionUpData: void <init>()>
<android.util.Singleton: void <init>()>
<android.graphics.Paint: boolean getFillPath(android.graphics.Path,android.graphics.Path)>
<GenerationGG: android.telephony.CellLocation get_androidtelephonyCellLocation()>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,int,java.util.List)>
<android.bluetooth.BluetoothDevice: int hashCode()>
<com.android.server.pm.UserManager: void <init>(com.android.server.pm.Installer,java.io.File)>
<android.widget.TextView: void setCompoundDrawablePadding(int)>
<com.android.server.wm.Session: void wallpaperOffsetsComplete(android.os.IBinder)>
<GenerationGG: android.content.ContentResolver get_androidcontentContentResolver()>
<com.android.server.connectivity.Tethering$TetherMasterSM$StopTetheringErrorState: void <init>(com.android.server.connectivity.Tethering$TetherMasterSM)>
<GenerationGG: android.media.ThumbnailUtils get_androidmediaThumbnailUtils()>
<android.util.SparseIntArray: int valueAt(int)>
<android.app.FragmentManagerImpl: boolean executePendingTransactions()>
<android.preference.Preference: int getWidgetLayoutResource()>
<android.content.res.ObbScanner: android.content.res.ObbInfo getObbInfo(java.lang.String)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$800(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,android.os.Message)>
<android.widget.TextView: void beginBatchEdit()>
<android.content.res.AssetManager: int createTheme()>
<android.webkit.WebViewCore$EventHub: void blockMessages()>
<com.android.server.sip.SipService: int getKeepAliveInterval()>
<com.android.server.EntropyService$1: void handleMessage(android.os.Message)>
<com.android.server.pm.Settings: int readInt(org.xmlpull.v1.XmlPullParser,java.lang.String,java.lang.String,int)>
<android.app.WallpaperInfo$1: android.app.WallpaperInfo[] newArray(int)>
<com.android.server.wm.WindowState: boolean stepAnimationLocked(long,int,int)>
<android.server.BluetoothAdapterStateMachine: void access$4600(android.server.BluetoothAdapterStateMachine,android.os.Message)>
<android.net.LinkProperties: void setHttpProxy(android.net.ProxyProperties)>
<android.server.BluetoothEventLoop: android.bluetooth.BluetoothA2dp access$102(android.server.BluetoothEventLoop,android.bluetooth.BluetoothA2dp)>
<android.preference.Preference: java.lang.String getFragment()>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: void detach()>
<com.android.server.am.ActivityManagerService: void revokeUriPermissionFromOwner(android.os.IBinder,android.net.Uri,int)>
<android.text.TextDirectionHeuristics$TextDirectionHeuristicImpl: boolean isRtl(char[],int,int)>
<android.view.textservice.SuggestionsInfo: int getSequence()>
<android.view.ViewRootImpl: void dispatchFinishedEvent(int,boolean)>
<android.animation.IntKeyframeSet: java.lang.Object getValue(float)>
<android.app.Application: void dispatchActivityStarted(android.app.Activity)>
<android.content.res.XmlBlock: int nativeGetIdAttribute(int)>
<android.view.KeyEvent: boolean isTainted()>
<android.widget.ListPopupWindow$ListSelectorHider: void <init>(android.widget.ListPopupWindow,android.widget.ListPopupWindow$1)>
<android.test.mock.MockContentProvider$InversionIContentProvider: void <init>(android.test.mock.MockContentProvider,android.test.mock.MockContentProvider$1)>
<Wrapper_android_database_sqlite_SQLiteDatabaseCorruptException: void test_android_database_sqlite_SQLiteDatabaseCorruptException()>
<android.graphics.YuvImage: int getWidth()>
<android.widget.Spinner: java.lang.CharSequence getPrompt()>
<com.android.internal.telephony.SmsMessageBase: com.android.internal.telephony.SmsHeader getUserDataHeader()>
<android.content.SyncAdaptersCache: void <clinit>()>
<android.os.FileUtils: java.lang.String readTextFile(java.io.File,int,java.lang.String)>
<com.android.internal.telephony.cdma.sms.BearerData: void encodePrivacyIndicator(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)>
<GenerationGG: android.media.MediaPlayer$OnPreparedListener get_androidmediaMediaPlayer__OnPreparedListener()>
<android.view.ViewGroup: boolean hasHoveredChild()>
<android.app.ProgressDialog$1: void <init>(android.app.ProgressDialog)>
<android.net.wifi.p2p.WifiP2pDevice: boolean isGroupOwner()>
<android.preference.MultiSelectListPreference: boolean[] getSelectedItems()>
<android.widget.ZoomButton: boolean onLongClick(android.view.View)>
<com.android.internal.telephony.GsmAlphabet: int findGsmSeptetLimitIndex(java.lang.String,int,int,int,int)>
<android.widget.Spinner$DialogPopup: void setAdapter(android.widget.ListAdapter)>
<android.database.CursorWindow: int getStartPosition()>
<android.bluetooth.BluetoothDeviceProfileState: android.os.Message access$1800(android.bluetooth.BluetoothDeviceProfileState)>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: void <clinit>()>
<com.android.server.wm.WindowManagerService: boolean canBeImeTarget(com.android.server.wm.WindowState)>
<android.view.ViewRootImpl: void forceLayout(android.view.View)>
<android.widget.AdapterView$AdapterDataSetObserver: void <init>(android.widget.AdapterView)>
<com.android.server.MountService: void access$2400(com.android.server.MountService)>
<com.android.server.pm.PackageManagerService: boolean hasSystemUidErrors()>
<com.android.server.ThrottleService: void dispatchPoll()>
<android.bluetooth.BluetoothSocket: void destroyNative()>
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: void <init>(java.util.ArrayList,boolean,android.os.Parcel)>
<android.util.Log: int e(java.lang.String,java.lang.String)>
<GenerationGG: android.widget.NumberPicker$OnValueChangeListener get_androidwidgetNumberPicker__OnValueChangeListener()>
<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageIOO(int,int,java.lang.Object,java.lang.Object)>
<android.app.ContextImpl: void setTheme(int)>
<com.android.server.pm.UserManager: void installPackageForAllUsers(java.lang.String,int)>
<GenerationGG: android.media.effect.Effect get_androidmediaeffectEffect()>
<com.android.server.wm.WindowState: java.lang.String toString()>
<android.view.animation.Animation: void detach()>
<com.android.internal.telephony.gsm.GsmServiceStateTracker: boolean isConcurrentVoiceAndDataAllowed()>
<android.os.StrictMode$AndroidBlockGuardPolicy: void <init>(int)>
<com.android.server.pm.Settings: void dumpReadMessagesLPr(java.io.PrintWriter,com.android.server.pm.PackageManagerService$DumpState)>
<android.view.View$8: void setValue(android.view.View,float)>
<com.android.internal.util.AsyncChannel: int connectSync(android.content.Context,android.os.Handler,android.os.Handler)>
<com.android.internal.telephony.DataConnectionAc: android.net.LinkProperties rspLinkProperties(android.os.Message)>
<android.widget.RemoteViews: void setProgressBar(int,int,int,boolean)>
<com.android.internal.os.BatteryStatsImpl: void notePhoneStateLocked(int,int)>
<android.media.audiofx.AudioEffect: int getParameter(int[],byte[])>
<android.app.IAlarmManager$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setTitleCondensed(java.lang.CharSequence)>
<android.text.format.DateUtils: java.lang.CharSequence formatSameDayTime(long,long,int,int)>
<android.provider.UserDictionary: void <init>()>
<android.widget.TableRow: int getNextLocationOffset(android.view.View)>
<android.widget.NumberPicker$ChangeCurrentByOneFromLongPressCommand: void access$600(android.widget.NumberPicker$ChangeCurrentByOneFromLongPressCommand,boolean)>
<android.text.style.AbsoluteSizeSpan: boolean getDip()>
<com.android.server.accessibility.TouchExplorer$PerformLongPressDelayed: void <init>(com.android.server.accessibility.TouchExplorer)>
<android.opengl.GLU: void <init>()>
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: int getItemViewType(int)>
<android.os.StrictMode$Span: android.os.StrictMode$Span access$1802(android.os.StrictMode$Span,android.os.StrictMode$Span)>
<android.net.wifi.WifiStateMachine$DriverStartingState: void <init>(android.net.wifi.WifiStateMachine)>
<android.drm.mobile1.DrmRawContent$DrmInputStream: void mark(int)>
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance(boolean,boolean)>
<GenerationGG: android.view.Gravity get_androidviewGravity()>
<com.android.internal.telephony.cdma.CDMALTEPhone: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>
<android.media.RemoteControlClient: void access$1700(android.media.RemoteControlClient,int)>
<android.view.GLES20DisplayList: int getSize()>
<com.android.server.BackupManagerService$1: void <init>(com.android.server.BackupManagerService)>
<android.webkit.HTML5VideoFullScreen: int access$100(android.webkit.HTML5VideoFullScreen)>
<android.webkit.WebViewCore: void removeMessages(int)>
<android.view.ViewRootImpl: void disposeResizeBuffer()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: void stopRunningLocked()>
<android.content.pm.Signature$1: void <init>()>
<android.content.IntentFilter: void addAction(java.lang.String)>
<android.content.SyncManager$SyncHandler: int syncResultToErrorNumber(android.content.SyncResult)>
<com.android.server.net.NetworkStatsService$8: void <init>(com.android.server.net.NetworkStatsService)>
<android.accounts.IAccountManager$Stub$Proxy: android.os.IBinder asBinder()>
<android.webkit.WebStorage: void postUIMessage(android.os.Message)>
<com.android.internal.telephony.WspTypeDecoder: boolean decodeTokenText(int)>
<com.android.internal.telephony.ApnContext: void setState(com.android.internal.telephony.DataConnectionTracker$State)>
<android.net.wifi.WifiStateMachine: void setScanOnlyMode(boolean)>
<com.android.server.AppWidgetService: void saveStateLocked()>
<com.android.internal.telephony.cat.ResponseData: void <init>()>
<android.preference.SwitchPreference: java.lang.CharSequence getSwitchTextOff()>
<com.android.internal.telephony.DataConnection$DcInactiveState: void setEnterNotificationParams(com.android.internal.telephony.DataConnection$DisconnectParams)>
<android.hardware.SensorManager: boolean getRotationMatrix(float[],float[],float[],float[])>
<android.webkit.WebView: android.webkit.WebTextView access$1200(android.webkit.WebView)>
<android.opengl.GLSurfaceView$GLThread: void onResume()>
<android.webkit.HTML5VideoView: boolean isFullScreenMode()>
<com.android.server.ConnectivityService: java.lang.Object checkNotNull(java.lang.Object,java.lang.String)>
<android.widget.RelativeLayout$DependencyGraph$Node: java.lang.Object getNextPoolable()>
<android.net.wifi.WifiStateMachine: void access$2700(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.accounts.AccountManager$1: void <init>(android.accounts.AccountManager,android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.Account,java.lang.String[])>
<android.app.ActivityManager: boolean isRunningInTestHarness()>
<DumbClass: void DumbMethod21()>
<android.widget.Spinner$DialogPopup: void setPromptText(java.lang.CharSequence)>
<GenerationGG: android.view.inputmethod.CorrectionInfo get_androidviewinputmethodCorrectionInfo()>
<android.widget.ListView: void clearRecycledState(java.util.ArrayList)>
<android.webkit.HTML5VideoViewProxy$PosterDownloader: void data(byte[],int)>
<com.android.server.wm.WindowState: android.view.IApplicationToken getAppToken()>
<android.text.method.BaseMovementMethod: boolean pageUp(android.widget.TextView,android.text.Spannable)>
<android.view.GLES20Canvas: void drawLines(float[],int,int,android.graphics.Paint)>
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getProtocol()>
<android.preference.PreferenceActivity: android.widget.ListAdapter access$300(android.preference.PreferenceActivity)>
<com.android.internal.telephony.cdma.SmsMessage: int getStatus()>
<android.view.animation.DecelerateInterpolator: void <init>()>
<android.hardware.SensorManager: float getInclination(float[])>
<android.media.audiofx.Virtualizer$BaseParameterListener: void onParameterChange(android.media.audiofx.AudioEffect,int,byte[],byte[])>
<android.app.WallpaperManager: android.app.WallpaperManager getInstance(android.content.Context)>
<android.test.mock.MockCursor: boolean moveToLast()>
<android.widget.CompoundButton$SavedState$1: void <init>()>
<com.android.internal.telephony.cat.IconId: void <init>()>
<android.media.AudioService: int getMsg(int,int)>
<android.webkit.WebViewCore: void nativeTouchUp(int,int,int,int,int)>
<android.widget.RemoteViews$ActionException: void <init>(java.lang.Exception)>
<android.content.res.AssetManager: java.io.InputStream openNonAsset(int,java.lang.String,int)>
<android.preference.TwoStatePreference$SavedState$1: android.preference.TwoStatePreference$SavedState[] newArray(int)>
<android.test.MoreAsserts: java.util.regex.Matcher getMatcher(java.lang.String,java.lang.String)>
<GenerationGG: android.database.sqlite.SQLiteDoneException get_androiddatabasesqliteSQLiteDoneException()>
<android.net.wifi.ScanResult$1: android.net.wifi.ScanResult[] newArray(int)>
<android.os.ConditionVariable: void <init>(boolean)>
<android.media.audiofx.Visualizer: boolean native_getEnabled()>
<Wrapper_android_animation_Keyframe: void test_android_animation_Keyframe()>
<android.os.Message: boolean isInUse()>
<android.net.wifi.WifiStateMachine: com.android.internal.util.State access$7200(android.net.wifi.WifiStateMachine)>
<android.app.Fragment: void onConfigurationChanged(android.content.res.Configuration)>
<GenerationGG: android.graphics.drawable.PictureDrawable get_androidgraphicsdrawablePictureDrawable()>
<android.widget.RelativeLayout: android.widget.RelativeLayout$LayoutParams getRelatedViewParams(int[],int)>
<android.text.style.SubscriptSpan: void <init>(android.os.Parcel)>
<android.graphics.Paint: int native_setRasterizer(int,int)>
<android.widget.SlidingDrawer: void incrementAnimation()>
<com.android.internal.util.StateMachine: void sendMessage(int)>
<android.telephony.SignalStrength$1: void <init>()>
<android.location.Criteria: int access$002(android.location.Criteria,int)>
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: android.content.pm.ResolveInfo getDefaultActivity()>
<android.webkit.WebChromeClient: android.graphics.Bitmap getDefaultVideoPoster()>
<com.android.internal.telephony.DataConnection: int access$508(com.android.internal.telephony.DataConnection)>
<android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristics$TriState isRtlTextOrFormat(int)>
<android.widget.Gallery: int computeHorizontalScrollRange()>
<android.preference.PreferenceGroupAdapter: void onPreferenceHierarchyChange(android.preference.Preference)>
<android.bluetooth.BluetoothDeviceProfileState: void access$7400(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.view.MotionEvent: float getHistoricalToolMinor(int)>
<com.android.server.UiModeManagerService: android.location.LocationListener access$800(com.android.server.UiModeManagerService)>
<android.telephony.gsm.SmsMessage$SubmitPdu: java.lang.String toString()>
<android.widget.ActivityChooserView$3: void <init>(android.widget.ActivityChooserView)>
<android.location.Address: java.lang.String access$302(android.location.Address,java.lang.String)>
<android.content.ContentValues: void putNull(java.lang.String)>
<android.view.accessibility.AccessibilityInteractionClient: void finalizeAccessibilityNodeInfos(java.util.List,android.accessibilityservice.IAccessibilityServiceConnection,float)>
<android.location.IGpsStatusListener$Stub$Proxy: android.os.IBinder asBinder()>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,float,float,float,float,int,float,float,int,int)>
<android.accounts.AuthenticatorException: void <init>()>
<android.net.sip.SipProfile$1: android.net.sip.SipProfile[] newArray(int)>
<java.lang.Object: boolean getFeature(java.lang.String)>
<android.net.http.Connection: void <init>(android.content.Context,org.apache.http.HttpHost,android.net.http.RequestFeeder)>
<android.graphics.Matrix$1: void setSinCos(float,float)>
<android.webkit.HTML5VideoViewProxy: void access$1000(android.webkit.HTML5VideoViewProxy,int)>
<android.webkit.WebViewCore: void access$4100(android.webkit.WebViewCore,boolean)>
<com.android.server.PackageManagerBackupAgent: void writeSignatureArray(java.io.DataOutputStream,android.content.pm.Signature[])>
<android.net.NetworkStatsHistory: int describeContents()>
<junit.runner.BaseTestRunner: java.lang.String truncate(java.lang.String)>
<android.test.suitebuilder.TestGrouping: boolean equals(java.lang.Object)>
<com.android.server.net.NetworkPolicyManagerService: android.util.SparseArray access$1400(com.android.server.net.NetworkPolicyManagerService)>
<com.android.internal.view.menu.SubMenuBuilder: boolean isShortcutsVisible()>
<android.util.Base64OutputStream: void internalWrite(byte[],int,int,boolean)>
<android.renderscript.Allocation: void updateCacheInfo(android.renderscript.Type)>
<com.android.server.pm.PackageManagerService: int[] appendInts(int[],int[])>
<android.webkit.WebSettings: void setPluginsEnabled(boolean)>
<android.text.style.ImageSpan: void <init>(android.graphics.drawable.Drawable)>
<android.view.VelocityTracker: android.view.VelocityTracker getNextPoolable()>
<com.android.internal.telephony.SmsUsageMonitor: boolean isUnderLimit(java.util.ArrayList,int)>
<android.view.ViewRootImpl$3: android.view.Surface getSurface()>
<android.webkit.CookieSyncManager: android.webkit.CookieSyncManager createInstance(android.content.Context)>
<android.app.ExpandableListActivity: long getSelectedPosition()>
<android.net.NetworkTemplate: android.net.NetworkTemplate buildTemplateMobileAll(java.lang.String)>
<com.android.internal.telephony.DataConnection: com.android.internal.telephony.DataConnection$DcActiveState access$1600(com.android.internal.telephony.DataConnection)>
<com.android.internal.location.DummyLocationProvider: void setRequiresCell(boolean)>
<android.widget.GridLayout$6: void <init>()>
<com.android.server.am.ReceiverList: void dumpLocal(java.io.PrintWriter,java.lang.String)>
<android.content.res.AssetManager: void close()>
<android.renderscript.RenderScriptGL: void bindRootScript(android.renderscript.Script)>
<android.util.MonthDisplayHelper: int[] getDigitsForRow(int)>
<com.android.server.pm.PackageManagerService: boolean clearPackagePreferredActivitiesLPw(java.lang.String)>
<com.android.server.LightsService$1: boolean getFlashlightEnabled()>
<android.webkit.WebView$QueuedTouch: void <init>()>
<android.graphics.drawable.InsetDrawable: int getOpacity()>
<android.view.ScaleGestureDetector: float getPreviousSpanY()>
<android.text.SpannableString: int getSpanEnd(java.lang.Object)>
<com.android.internal.telephony.cdma.CdmaCall: void clearDisconnected()>
<android.net.http.HttpsConnection$1: void <init>()>
<android.drm.DrmStore$Action: boolean isValid(int)>
<android.widget.ScrollView: float getBottomFadingEdgeStrength()>
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: int getUpdateVersion()>
<android.preference.ListPreference$SavedState$1: void <init>()>
<android.filterfw.core.FrameFormat: boolean equals(java.lang.Object)>
<android.media.AudioService: void access$5700(android.media.AudioService,java.lang.String)>
<Wrapper_android_graphics_AvoidXfermode: void test_android_graphics_AvoidXfermode()>
<android.app.IActivityManager$WaitResult: void writeToParcel(android.os.Parcel,int)>
<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,int,int,android.graphics.Rect)>
<android.animation.LayoutTransition: long getDuration(int)>
<android.os.Parcel: void readSparseBooleanArrayInternal(android.util.SparseBooleanArray,int)>
<android.net.wifi.WpsStateMachine: android.net.wifi.WpsInfo access$002(android.net.wifi.WpsStateMachine,android.net.wifi.WpsInfo)>
<android.graphics.Canvas: void getMatrix(android.graphics.Matrix)>
<android.net.NetworkTemplate$1: android.net.NetworkTemplate[] newArray(int)>
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String,int,boolean,int,int)>
<android.widget.GridLayout$MutableInt: java.lang.String toString()>
<GenerationGG: android.content.ContentProviderOperation get_androidcontentContentProviderOperation()>
<android.bluetooth.BluetoothDeviceProfileState: int getTrust()>
<android.app.ContextImpl$30: void <init>()>
<android.net.http.RequestQueue: boolean haveRequest(org.apache.http.HttpHost)>
<android.widget.ListView$FocusSelector: void <init>(android.widget.ListView)>
<com.android.internal.telephony.cat.PresentationType: void <clinit>()>
<android.os.Debug: void dumpHprofData(java.lang.String,java.io.FileDescriptor)>
<android.view.MotionEvent: java.lang.String toolTypeToString(int)>
<android.server.search.SearchManagerService$BootCompletedReceiver$1: void <init>(android.server.search.SearchManagerService$BootCompletedReceiver)>
<com.android.server.WifiService: android.app.AlarmManager access$1800(com.android.server.WifiService)>
<android.graphics.Rasterizer: void <init>()>
<android.content.pm.LabeledIntent$1: android.content.pm.LabeledIntent[] newArray(int)>
<android.opengl.GLSurfaceView: void setEGLConfigChooser(int,int,int,int,int,int)>
<android.graphics.drawable.Drawable: void setChangingConfigurations(int)>
<android.text.SpannableStringBuilder: void resizeFor(int)>
<android.app.Dialog: void setDismissMessage(android.os.Message)>
<com.android.internal.telephony.cat.ComprehensionTlv: int getValueIndex()>
<android.test.IsolatedContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>
<android.app.FragmentManagerImpl: int allocBackStackIndex(android.app.BackStackRecord)>
<Wrapper_android_renderscript_Int2: void test_android_renderscript_Int2()>
<android.webkit.GeolocationPermissions: java.util.Set nativeGetOrigins()>
<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean cleanUp()>
<android.net.EthernetDataTracker$1: void <init>(android.net.EthernetDataTracker)>
<android.opengl.GLSurfaceView$GLThreadManager: void <clinit>()>
<com.android.internal.telephony.cdma.sms.BearerData: void decodeIs91Cli(com.android.internal.telephony.cdma.sms.BearerData)>
<android.net.wifi.WpsInfo$1: void <init>()>
<android.graphics.RectF: boolean intersect(android.graphics.RectF)>
<android.view.GLES20Canvas: void disableVsync()>
<android.widget.AdapterViewAnimator: android.widget.AdapterViewAnimator$ViewAndMetaData getMetaDataForChild(android.view.View)>
<android.text.util.Rfc822Token: java.lang.String getName()>
<android.database.CursorWindow: boolean nativeAllocRow(int)>
<android.widget.Gallery$FlingRunnable: void startUsingDistance(int)>
<android.widget.AbsListView: int getCheckedItemPosition()>
<android.test.mock.MockContext: void sendBroadcast(android.content.Intent)>
<android.widget.OverScroller$SplineOverScroller: void <init>()>
<android.test.AndroidTestRunner: junit.framework.TestResult getTestResult()>
<com.android.internal.os.BatteryStatsImpl: long computeBatteryRealtime(long,int)>
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type)>
<com.android.server.am.UsageStatsService: byte[] readFully(java.io.FileInputStream)>
<android.view.animation.GridLayoutAnimationController: int getTransformedRowIndex(android.view.animation.GridLayoutAnimationController$AnimationParameters)>
<GenerationGG: android.content.SyncResult get_androidcontentSyncResult()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$2200(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,com.android.internal.util.IState)>
<android.media.AudioRecord: int getChannelConfiguration()>
<android.net.wifi.WifiApConfigStore: java.lang.Object access$100()>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setStartDelay(long)>
<android.view.ViewConfiguration: int getScaledScrollBarSize()>
<com.android.internal.telephony.PhoneProxy: java.lang.String getLine1AlphaTag()>
<GenerationGG: android.hardware.usb.UsbDeviceConnection get_androidhardwareusbUsbDeviceConnection()>
<android.app.Dialog: void onContextMenuClosed(android.view.Menu)>
<com.android.internal.view.menu.MenuItemImpl: char getShortcut()>
<android.content.res.AssetManager: void access$500(android.content.res.AssetManager,int)>
<com.android.internal.telephony.sip.SipCommandInterface: void getIMEISV(android.os.Message)>
<com.android.server.pm.PackageManagerService: android.content.ComponentName access$2300(com.android.server.pm.PackageManagerService,java.lang.String,java.util.List)>
<android.app.FragmentBreadCrumbs: int getPreEntryCount()>
<com.android.internal.os.BatteryStatsImpl$Counter: void plug(long,long)>
<com.android.internal.telephony.Phone$DataActivityState: void <init>(java.lang.String,int)>
<android.app.backup.IFullBackupRestoreObserver$Stub$Proxy: void <init>(android.os.IBinder)>
<android.database.sqlite.SQLiteDatabase: void <clinit>()>
<com.android.server.net.NetworkPolicyManagerService: android.os.Handler access$000(com.android.server.net.NetworkPolicyManagerService)>
<com.android.internal.textservice.ISpellCheckerSession$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: com.android.internal.os.BatteryStatsImpl getBatteryStats()>
<android.widget.VideoView: android.content.Context access$1700(android.widget.VideoView)>
<android.server.BluetoothAdapterStateMachine$PowerOff: void enter()>
<android.filterfw.core.FilterPort: boolean isOpen()>
<android.text.style.DrawableMarginSpan: void <init>(android.graphics.drawable.Drawable,int)>
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: java.util.HashMap access$800(com.android.server.pm.PackageManagerService$ServiceIntentResolver)>
<android.view.accessibility.AccessibilityRecord: void setEnabled(boolean)>
<GenerationGG: android.provider.AlarmClock get_androidproviderAlarmClock()>
<android.media.audiofx.EnvironmentalReverb$BaseParameterListener: void <init>(android.media.audiofx.EnvironmentalReverb,android.media.audiofx.EnvironmentalReverb$1)>
<android.filterfw.core.FilterContext: void tearDown()>
<com.android.internal.app.ActionBarImpl$ActionModeImpl: android.view.Menu getMenu()>
<GenerationGG: java.net.URLConnection get_javanetURLConnection()>
<GenerationGG: android.text.Html get_androidtextHtml()>
<com.android.internal.util.StateMachine: void sendMessageAtFrontOfQueue(android.os.Message)>
<java.lang.Object: boolean isClosed()>
<android.util.LongSparseArray: void gc()>
<com.android.server.AlarmManagerService$ResultReceiver: void <init>(com.android.server.AlarmManagerService)>
<android.util.Base64InputStream: int available()>
<android.inputmethodservice.AbstractInputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: java.lang.Object getItem(int)>
<GenerationGG: android.view.MotionEvent$PointerCoords get_androidviewMotionEvent__PointerCoords()>
<GenerationGG: android.net.wifi.ScanResult get_androidnetwifiScanResult()>
<android.view.ViewGroup: void setPadding(int,int,int,int)>
<com.android.internal.view.IInputMethodClient$Stub: void <init>()>
<android.os.TokenWatcher: void release(android.os.IBinder)>
<GenerationGG: android.view.InputQueue get_androidviewInputQueue()>
<com.android.internal.telephony.IccRecords: int getVoiceMessageCount()>
<android.telephony.gsm.SmsMessage: java.lang.String getPseudoSubject()>
<android.content.res.StringBlock$StyleIDs: int access$002(android.content.res.StringBlock$StyleIDs,int)>
<android.text.SpannableStringBuilder: char charAt(int)>
<android.webkit.WebView: void dismissFullScreenMode()>
<android.text.format.DateUtils: void <clinit>()>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: java.lang.String getCallId()>
<android.graphics.PathMeasure: boolean native_nextContour(int)>
<android.text.method.AllCapsTransformationMethod: void setLengthChangesAllowed(boolean)>
<android.speech.SpeechRecognizer: void checkIsCalledFromMainThread()>
<android.content.res.XmlBlock$Parser: boolean getAttributeBooleanValue(java.lang.String,java.lang.String,boolean)>
<android.net.NetworkInfo$1: android.net.NetworkInfo[] newArray(int)>
<android.content.res.AssetManager: int retrieveArray(int,int[])>
<com.android.server.connectivity.Tethering: boolean access$200(com.android.server.connectivity.Tethering)>
<android.text.style.RasterizerSpan: void <init>(android.graphics.Rasterizer)>
<android.speech.SpeechRecognizer: java.util.Queue access$600(android.speech.SpeechRecognizer)>
<android.net.RouteInfo: void <clinit>()>
<android.content.ContentValues$1: android.content.ContentValues[] newArray(int)>
<android.hardware.usb.UsbInterface: int getId()>
<android.view.inputmethod.InputMethodManager: boolean isWatchingCursor(android.view.View)>
<android.graphics.Path: void arcTo(android.graphics.RectF,float,float,boolean)>
<android.app.Dialog: void sendShowMessage()>
<android.database.sqlite.DatabaseConnectionPool: java.lang.String toString()>
<android.net.Uri$Builder: android.net.Uri$Builder appendQueryParameter(java.lang.String,java.lang.String)>
<android.view.inputmethod.InputBinding: void writeToParcel(android.os.Parcel,int)>
<android.animation.IntEvaluator: void <init>()>
<GenerationGG: android.net.sip.SipSession get_androidnetsipSipSession()>
<android.widget.ExpandableListConnector$PositionMetadata: void <init>()>
<android.webkit.ZoomManager: void setDefaultZoomScale(float)>
<android.text.method.ScrollingMovementMethod: void <init>()>
<android.telephony.SignalStrength: int getGsmSignalStrength()>
<android.media.JetPlayer: boolean setMuteFlag(int,boolean,boolean)>
<android.renderscript.RenderScript: void rsnAllocationCopyFromBitmap(int,int,android.graphics.Bitmap)>
<android.hardware.Camera: void release()>
<android.graphics.drawable.shapes.PathShape: android.graphics.drawable.shapes.Shape clone()>
<GenerationGG: android.database.sqlite.SQLiteBindOrColumnIndexOutOfRangeException get_androiddatabasesqliteSQLiteBindOrColumnIndexOutOfRangeException()>
<android.os.FileUtils: int setPermissions(java.lang.String,int,int,int)>
<android.view.accessibility.AccessibilityManager$1: void <init>(android.view.accessibility.AccessibilityManager)>
<android.graphics.Path: void rCubicTo(float,float,float,float,float,float)>
<android.test.suitebuilder.AssignableFrom: boolean apply(android.test.suitebuilder.TestMethod)>
<android.widget.ArrayAdapter: long getItemId(int)>
<com.android.server.Watchdog: java.lang.String shouldWeBeBrutalLocked(long)>
<com.android.i18n.phonenumbers.PhoneNumberUtil: boolean isValidRegionCode(java.lang.String)>
<java.lang.Object: int size()>
<android.graphics.Matrix: void native_setRotate(int,float)>
<com.android.internal.os.AtomicFile: void <init>(java.io.File)>
<android.media.audiofx.EnvironmentalReverb: void setRoomHFLevel(short)>
<android.webkit.WebView: void <clinit>()>
<android.net.wifi.WifiWatchdogStateMachine$DnsCheckFailureState: void enter()>
<android.filterfw.core.Frame: boolean isReusable()>
<android.view.SurfaceView: android.view.SurfaceHolder getHolder()>
<android.net.wifi.WifiWatchdogStateMachine: void <clinit>()>
<android.bluetooth.BluetoothClass: void writeToParcel(android.os.Parcel,int)>
<android.widget.Filter$FilterResults: void <init>()>
<android.text.TextPaint: void setUnderlineText(int,float)>
<com.android.server.pm.PendingPackage: void <init>(java.lang.String,java.lang.String,java.io.File,java.io.File,java.lang.String,int,int,int)>
<android.view.VelocityTracker: android.view.VelocityTracker obtain()>
<android.view.VolumePanel$StreamResources: void <init>(java.lang.String,int,int,int,int,int,boolean)>
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.IState access$800(com.android.internal.util.StateMachine$SmHandler)>
<android.widget.AutoCompleteTextView: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>
<android.content.res.AssetManager: int getGlobalAssetCount()>
<android.app.Fragment: boolean isVisible()>
<android.renderscript.Type$Builder: android.renderscript.Type$Builder setY(int)>
<com.android.internal.os.BatteryStatsImpl$Uid: void noteFullWifiLockAcquiredLocked()>
<android.webkit.ZoomManager: float access$900(android.webkit.ZoomManager)>
<android.widget.PopupWindow: void setWindowLayoutType(int)>
<android.app.Fragment: void onPause()>
<com.android.internal.telephony.SMSDispatcher: void finalize()>
<android.view.View: float getX()>
<android.widget.ArrayAdapter: java.util.ArrayList access$102(android.widget.ArrayAdapter,java.util.ArrayList)>
<android.graphics.Canvas$CanvasFinalizer: void <init>(int)>
<com.android.internal.telephony.OperatorInfo$1: void <init>()>
<com.android.server.WallpaperManagerService: int getHeightHint()>
<android.util.XmlPullAttributes: float getAttributeFloatValue(java.lang.String,java.lang.String,float)>
<android.webkit.CookieManager: void waitForCookieOperationsToComplete()>
<com.android.internal.telephony.cdma.sms.SmsEnvelope: void <init>()>
<android.widget.TextView$SelectionActionModeCallback: void <init>(android.widget.TextView,android.widget.TextView$1)>
<android.net.wifi.WifiStateMachine$DriverStoppingState: boolean processMessage(android.os.Message)>
<android.app.Dialog: boolean onPreparePanel(int,android.view.View,android.view.Menu)>
<android.app.backup.RestoreSession$RestoreObserverWrapper: void <init>(android.app.backup.RestoreSession,android.content.Context,android.app.backup.RestoreObserver)>
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getDefaultOutAnimation()>
<com.android.server.pm.Settings: java.lang.String getInstallerPackageNameLPr(java.lang.String)>
<com.android.server.accessibility.AccessibilityManagerService$7: void <init>(com.android.server.accessibility.AccessibilityManagerService,android.view.accessibility.IAccessibilityInteractionConnection,android.view.IWindow)>
<android.graphics.LightingColorFilter: void <init>(int,int)>
<android.database.sqlite.SQLiteBindOrColumnIndexOutOfRangeException: void <init>(java.lang.String)>
<android.view.accessibility.AccessibilityInteractionClient: void setPerformAccessibilityActionResult(boolean,int)>
<android.widget.ListView: int getArrowScrollPreviewLength()>
<android.os.StrictMode$3: void <init>()>
<com.android.server.EntropyService: void writeEntropy()>
<android.ddm.DdmHandleExit: void register()>
<android.animation.PropertyValuesHolder: void setupValue(java.lang.Object,android.animation.Keyframe)>
<android.widget.DialerFilter: java.lang.CharSequence getFilterText()>
<android.widget.RelativeLayout$LayoutParams: int access$302(android.widget.RelativeLayout$LayoutParams,int)>
<com.android.server.location.GpsLocationProvider: boolean hasMonetaryCost()>
<android.graphics.Region: java.lang.String toString()>
<android.content.ISyncContext$Stub$Proxy: void <init>(android.os.IBinder)>
<android.view.ViewDebug$6: void <init>(android.graphics.Bitmap[],android.view.View,boolean,java.util.concurrent.CountDownLatch)>
<GenerationGG: android.test.ActivityTestCase get_androidtestActivityTestCase()>
<android.animation.LayoutTransition: java.util.List getTransitionListeners()>
<android.net.sip.ISipService$Stub$Proxy: void <init>(android.os.IBinder)>
<android.app.ActivityManager$MemoryInfo$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.media.AudioRecord: void native_release()>
<com.android.server.pm.PackageManagerService: int[] getPackageGids(java.lang.String)>
<android.content.AsyncTaskLoader$LoadTask: void <init>(android.content.AsyncTaskLoader)>
<android.widget.TextView$InsertionHandleView: void hideAfterDelay()>
<com.android.server.location.ComprehensiveCountryDetector: void cancelLocationRefresh()>
<GenerationGG: android.accounts.AccountAuthenticatorResponse get_androidaccountsAccountAuthenticatorResponse()>
<android.net.UrlQuerySanitizer: void parseEntry(java.lang.String,java.lang.String)>
<android.widget.SlidingDrawer: void setOnDrawerCloseListener(android.widget.SlidingDrawer$OnDrawerCloseListener)>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int,int[])>
<android.bluetooth.BluetoothClass: int hashCode()>
<android.text.BoringLayout: android.text.Layout$Directions getLineDirections(int)>
<com.android.server.WallpaperManagerService: android.os.ParcelFileDescriptor updateWallpaperBitmapLocked(java.lang.String)>
<com.android.internal.telephony.cat.Tone: com.android.internal.telephony.cat.Tone[] values()>
<android.widget.TableRow: void mapIndexAndColumns()>
<android.accounts.AccountAuthenticatorCache$MySerializer: void <init>(android.accounts.AccountAuthenticatorCache$1)>
<android.text.style.CharacterStyle: android.text.style.CharacterStyle getUnderlying()>
<com.android.server.sip.SipSessionGroup: java.util.EventObject access$1800()>
<Wrapper_com_android_internal_util_Predicate: void test_com_android_internal_util_Predicate()>
<com.android.internal.view.BaseSurfaceHolder: int getRequestedType()>
<android.media.AudioService$SoundPoolCallback: void onLoadComplete(android.media.SoundPool,int,int)>
<com.android.server.am.UriPermission: void clearModes(int)>
<com.android.server.PowerManagerService$PokeLock: void <init>(com.android.server.PowerManagerService,int,android.os.IBinder,java.lang.String)>
<android.webkit.WebView: boolean onHoverEvent(android.view.MotionEvent)>
<android.net.sip.SipSession$1: void onRegistrationDone(android.net.sip.ISipSession,int)>
<android.view.View: int getWindowVisibility()>
<android.net.wifi.WifiConfiguration: int describeContents()>
<android.widget.GridLayout$Axis: int calculateMaxIndex()>
<android.database.CursorToBulkCursorAdaptor: boolean getWantsAllOnMoveCalls()>
<com.android.internal.telephony.cat.PlayToneParams: boolean setIcon(android.graphics.Bitmap)>
<android.app.Fragment: boolean isDetached()>
<android.net.wifi.WifiNative: boolean setScanModeCommand(boolean)>
<android.net.http.RequestQueue: void <init>(android.content.Context)>
<android.content.pm.IPackageMoveObserver$Stub$Proxy: void <init>(android.os.IBinder)>
<android.server.BluetoothBondState: void attempt(java.lang.String)>
<android.bluetooth.BluetoothHealth$BluetoothHealthCallbackWrapper: void onHealthAppConfigurationStatusChange(android.bluetooth.BluetoothHealthAppConfiguration,int)>
<Wrapper_android_accounts_NetworkErrorException: void test_android_accounts_NetworkErrorException()>
<GenerationGG: android.renderscript.Type$CubemapFace get_androidrenderscriptType__CubemapFace()>
<android.net.wifi.p2p.WifiP2pService: android.net.wifi.p2p.WifiP2pService$P2pStateMachine access$300(android.net.wifi.p2p.WifiP2pService)>
<android.content.res.XmlBlock$Parser: void setInput(java.io.Reader)>
<com.android.internal.telephony.RILRequest: void <clinit>()>
<android.webkit.WebViewCore$BaseUrlData: void <init>()>
<android.preference.Preference: void onClick()>
<android.widget.CalendarView: android.content.Context access$1102(android.widget.CalendarView,android.content.Context)>
<android.util.SparseArray: java.lang.Object get(int,java.lang.Object)>
<android.view.WindowManager$LayoutParams: void <init>(int,int)>
<GenerationGG: android.media.MediaRecorder get_androidmediaMediaRecorder()>
<android.app.AlertDialog: void setInverseBackgroundForced(boolean)>
<android.test.AndroidTestRunner: void testStarted(java.lang.String)>
<android.view.GLES20RecordingCanvas$1: void onAcquired(android.util.Poolable)>
<android.view.HardwareCanvas: void <init>()>
<com.android.server.LightsService: int access$100(com.android.server.LightsService)>
<android.view.KeyEvent: boolean isModifierKey(int)>
<android.view.ViewDebug: java.lang.Object resolveId(android.content.Context,int)>
<android.view.View: float getRotationX()>
<android.graphics.drawable.DrawableContainer: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.graphics.Rect: java.lang.String toString()>
<android.hardware.usb.UsbRequest: boolean native_init(android.hardware.usb.UsbDeviceConnection,int,int,int,int)>
<android.bluetooth.BluetoothTetheringDataTracker: void setDependencyMet(boolean)>
<android.app.Activity: java.lang.String savedDialogKeyFor(int)>
<android.view.View$ScrollabilityCache: void setFadeColor(int)>
<android.accounts.Account$1: android.accounts.Account createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.DataConnection: void clearSettings()>
<com.android.server.wm.WindowState: boolean isVisibleOrAdding()>
<android.webkit.WebViewCore: android.webkit.WebSettings access$1200(android.webkit.WebViewCore)>
<com.android.internal.os.BatteryStatsImpl: void <clinit>()>
<android.net.wifi.WifiStateMachine: java.lang.String toString()>
<android.webkit.WebHistoryItem: java.lang.String getUrl()>
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getInterface()>
<com.android.internal.view.IInputMethodSession$Stub: void <init>()>
<GenerationGG: android.graphics.SurfaceTexture get_androidgraphicsSurfaceTexture()>
<com.android.internal.os.ProcessStats: void printProcessCPU(java.io.PrintWriter,java.lang.String,int,java.lang.String,int,int,int,int,int,int,int,int)>
<Wrapper_android_net_SSLSessionCache: void test_android_net_SSLSessionCache()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: byte[] access$102(com.android.internal.telephony.cdma.CdmaLteUiccRecords,byte[])>
<android.animation.ValueAnimator: java.lang.ThreadLocal access$100()>
<com.android.internal.view.menu.BaseMenuPresenter: boolean expandItemActionView(com.android.internal.view.menu.MenuBuilder,com.android.internal.view.menu.MenuItemImpl)>
<android.webkit.WebSettings: void setDoubleTapToastCount(int)>
<android.text.BoringLayout: int getLineCount()>
<com.android.server.wm.WindowManagerService$2: void <init>(com.android.server.wm.WindowManagerService)>
<android.os.StrictMode$ViolationInfo: void <init>(android.os.Parcel,boolean)>
<android.text.TextDirectionHeuristics$AnyStrong: void <init>(boolean)>
<android.test.mock.MockCursor: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>
<com.android.internal.backup.LocalTransport: android.content.Intent configurationIntent()>
<android.webkit.CallbackProxy$UploadFile: void onReceiveValue(android.net.Uri)>
<GenerationGG: android.test.PerformanceTestCase$Intermediates get_androidtestPerformanceTestCase__Intermediates()>
<android.bluetooth.BluetoothUuid: int getServiceIdentifierFromParcelUuid(android.os.ParcelUuid)>
<android.bluetooth.BluetoothTetheringDataTracker: boolean setRadio(boolean)>
<android.widget.TableRow$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>
<android.graphics.Matrix: void mapPoints(float[])>
<android.drm.DrmManagerClient$EventHandler: void handleMessage(android.os.Message)>
<android.net.Uri$PathSegmentsBuilder: void add(java.lang.String)>
<android.hardware.SensorManager: int sensors_module_init()>
<GenerationGG: android.view.ViewTreeObserver$OnScrollChangedListener get_androidviewViewTreeObserver__OnScrollChangedListener()>
<android.widget.BaseExpandableListAdapter: void onGroupCollapsed(int)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimCdmaHomeLoaded: void <init>(com.android.internal.telephony.cdma.CdmaLteUiccRecords)>
<junit.framework.TestCase: void run(junit.framework.TestResult)>
<android.widget.CalendarView$ScrollStateRunnable: void doScrollStateChange(android.widget.AbsListView,int)>
<com.android.internal.telephony.cat.ValueParser: com.android.internal.telephony.cat.CommandDetails retrieveCommandDetails(com.android.internal.telephony.cat.ComprehensionTlv)>
<GenerationGG: android.bluetooth.BluetoothClass get_androidbluetoothBluetoothClass()>
<junit.framework.TestCase: void assertEquals(java.lang.String,float,float,float)>
<android.view.ViewGroup: void requestDisallowInterceptTouchEvent(boolean)>
<android.app.LoadedApk$ReceiverDispatcher: void setUnregisterLocation(java.lang.RuntimeException)>
<android.renderscript.RenderScript: int getTargetSdkVersion(android.content.Context)>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime(long,int)>
<android.view.View: void setCameraDistance(float)>
<android.widget.Toast: int getXOffset()>
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: java.lang.String getFormat()>
<android.mtp.MtpStorageInfo: long getFreeSpace()>
<android.graphics.drawable.shapes.RectShape: void onResize(float,float)>
<android.webkit.BrowserFrame: void destroy()>
<com.android.server.am.ServiceRecord$StartItem: java.lang.String toString()>
<android.location.LocationManager$GpsStatusListenerTransport$1: void handleMessage(android.os.Message)>
<android.renderscript.FieldPacker: void addI16(android.renderscript.Short2)>
<android.view.MotionEvent: float getHistoricalAxisValue(int,int)>
<android.graphics.Paint: void native_setTextAlign(int,int)>
<android.text.method.TextKeyListener: void <clinit>()>
<android.graphics.PointF: int describeContents()>
<android.media.RingtoneManager: java.lang.String constructBooleanTrueWhereClause(java.util.List,boolean)>
<com.android.internal.telephony.sip.SipPhone: java.lang.String getIccSerialNumber()>
<android.renderscript.AllocationAdapter: void setZ(int)>
<android.test.mock.MockContext: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>
<android.os.AsyncTask$3: void <init>(android.os.AsyncTask,java.util.concurrent.Callable)>
<android.test.ProviderTestCase2$MockContext2: android.content.Context getApplicationContext()>
<com.android.server.pm.PackageManagerService$6: void <init>(com.android.server.pm.PackageManagerService)>
<android.widget.PopupWindow: boolean isClippingEnabled()>
<android.graphics.Paint: float measureText(char[],int,int)>
<android.sax.Element: void setEndElementListener(android.sax.EndElementListener)>
<com.android.internal.widget.ScrollingTabContainerView$TabAdapter: void <init>(com.android.internal.widget.ScrollingTabContainerView)>
<com.android.internal.telephony.MccTable: com.android.internal.telephony.MccTable$MccEntry entryForMcc(int)>
<android.content.ComponentName$1: java.lang.Object[] newArray(int)>
<android.speech.tts.TextToSpeech: boolean areDefaultsEnforced()>
<android.webkit.ZoomControlEmbedded$ZoomListener: void <init>(android.webkit.ZoomControlEmbedded)>
<android.content.res.CompatibilityInfo$Translator: void translateLayoutParamsInAppWindowToScreen(android.view.WindowManager$LayoutParams)>
<com.android.server.am.UsageStatsService: void writeStatsFLOCK(java.io.File)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfPlLoaded: java.lang.String getEfName()>
<android.net.wifi.WifiNative: boolean disableNetworkCommand(int)>
<android.graphics.drawable.GradientDrawable: void initializeWithState(android.graphics.drawable.GradientDrawable$GradientState)>
<android.webkit.WebView: java.lang.String findAddress(java.lang.String,boolean)>
<com.android.internal.util.BitwiseInputStream: byte[] readByteArray(int)>
<android.test.mock.MockPackageManager: int getApplicationEnabledSetting(java.lang.String)>
<android.inputmethodservice.KeyboardView: void swipeRight()>
<com.android.internal.telephony.SMSDispatcher$1: void <init>(com.android.internal.telephony.SMSDispatcher)>
<android.webkit.L10nUtils: void setApplicationContext(android.content.Context)>
<android.database.AbstractCursor: void registerDataSetObserver(android.database.DataSetObserver)>
<com.android.server.accessibility.AccessibilityManagerService$5: void <init>(com.android.server.accessibility.AccessibilityManagerService,android.os.Handler)>
<android.webkit.HTML5VideoViewProxy$VideoPlayer: void seek(int,android.webkit.HTML5VideoViewProxy)>
<java.lang.Object: java.lang.String getNamespacePrefix(int)>
<android.test.MoreAsserts: void assertNotMatchesRegex(java.lang.String,java.lang.String)>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker$1: void <init>(com.android.internal.telephony.cdma.CdmaServiceStateTracker,android.os.Handler)>
<android.os.ParcelFileDescriptor: void <init>(java.io.FileDescriptor)>
<android.app.FragmentManagerImpl: void noteStateNotSaved()>
<com.android.server.sip.SipSessionGroup: int allocateLocalPort()>
<com.android.internal.telephony.RestrictedState: boolean isPsRestricted()>
<android.widget.AbsListView: void setCacheColorHint(int)>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: java.lang.String getMdnNumber()>
<android.accessibilityservice.IEventListener$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.internal.telephony.cat.ResultCode: com.android.internal.telephony.cat.ResultCode[] values()>
<android.renderscript.Element: android.renderscript.Element I8_3(android.renderscript.RenderScript)>
<android.content.pm.ActivityInfo: void <clinit>()>
<android.content.CursorLoader: void setProjection(java.lang.String[])>
<android.net.http.RequestHandle: void <init>(android.net.http.RequestQueue,java.lang.String,android.net.WebAddress,java.lang.String,java.util.Map,java.io.InputStream,int,android.net.http.Request)>
<android.location.Location: void <init>(java.lang.String)>
<android.accounts.Account: int describeContents()>
<com.android.internal.telephony.Phone$SuppService: void <clinit>()>
<android.widget.TextView: void setMaxWidth(int)>
<android.app.backup.BackupAgentHelper: void addHelper(java.lang.String,android.app.backup.BackupHelper)>
<android.graphics.SurfaceTexture: long nativeGetTimestamp()>
<android.speech.RecognitionService$Callback: void <init>(android.speech.RecognitionService,android.speech.IRecognitionListener)>
<android.view.ViewTreeObserver: boolean isAlive()>
<android.animation.ValueAnimator: long getStartDelay()>
<android.content.res.StringBlock$StyleIDs: int access$1000(android.content.res.StringBlock$StyleIDs)>
<android.app.ReceiverRestrictedContext: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>
<android.hardware.SensorManager: java.util.List getSensorList(int)>
<android.text.Html$HtmlParser: org.ccil.cowan.tagsoup.HTMLSchema access$000()>
<android.test.mock.MockContext: void sendStickyOrderedBroadcast(android.content.Intent,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.net.sip.SipSession$Listener: void onCallEstablished(android.net.sip.SipSession,java.lang.String)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimImsimLoaded: void <init>(com.android.internal.telephony.cdma.CdmaLteUiccRecords)>
<GenerationGG: android.hardware.Camera$PreviewCallback get_androidhardwareCamera__PreviewCallback()>
<android.widget.TabWidget: int getTabCount()>
<com.android.internal.telephony.cdma.sms.BearerData: boolean decodeValidityAbs(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)>
<android.view.InputDevice: int getId()>
<android.widget.RatingBar: float getRating()>
<android.app.BackStackRecord: android.app.FragmentTransaction setBreadCrumbShortTitle(int)>
<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean setPermissions()>
<android.hardware.Camera: android.hardware.Camera$ErrorCallback access$1100(android.hardware.Camera)>
<android.app.Notification: void setLatestEventInfo(android.content.Context,java.lang.CharSequence,java.lang.CharSequence,android.app.PendingIntent)>
<android.view.View: void setLayerType(int,android.graphics.Paint)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setId(java.lang.String)>
<Wrapper_android_text_style_MaskFilterSpan: void test_android_text_style_MaskFilterSpan()>
<com.android.internal.app.AlertController: android.widget.ListView access$1402(com.android.internal.app.AlertController,android.widget.ListView)>
<android.graphics.drawable.Drawable: int getMinimumWidth()>
<android.content.ClipData$1: void <init>()>
<android.database.CursorIndexOutOfBoundsException: void <init>(java.lang.String)>
<android.content.SyncStorageEngine: android.content.SyncStatusInfo getOrCreateSyncStatus(android.content.SyncStorageEngine$AuthorityInfo)>
<android.view.InputChannel: java.lang.String getName()>
<com.android.internal.telephony.DataConnection$DcActivatingState: void <init>(com.android.internal.telephony.DataConnection)>
<android.widget.ZoomButtonsController: void setTouchTargetView(android.view.View)>
<com.android.internal.telephony.cdma.CdmaCallTracker: boolean isInEmergencyCall()>
<com.android.server.connectivity.Tethering$TetherMasterSM: void access$3700(com.android.server.connectivity.Tethering$TetherMasterSM,com.android.internal.util.IState)>
<android.test.RenamingDelegatingContext: boolean deleteDatabase(java.lang.String)>
<android.os.storage.StorageManager$StorageStateChangedStorageEvent: void <init>(android.os.storage.StorageManager,java.lang.String,java.lang.String,java.lang.String)>
<android.widget.ListPopupWindow: boolean isDropDownAlwaysVisible()>
<java.lang.Object: java.lang.String nextText()>
<android.content.ContentResolver: void maybeLogUpdateToEventLog(long,android.net.Uri,java.lang.String,java.lang.String)>
<com.android.internal.telephony.cdma.sms.UserData: void <clinit>()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: int adjstMinDigits(int)>
<android.preference.Preference: android.os.Bundle getExtras()>
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getDefaultInAnimation()>
<android.view.View: boolean isEnabled()>
<com.android.i18n.phonenumbers.AsYouTypeFormatter: boolean maybeCreateNewTemplate()>
<android.webkit.LoadListener: void setCacheLoader(android.webkit.CacheLoader)>
<android.hardware.usb.UsbDevice$1: java.lang.Object[] newArray(int)>
<android.widget.OverScroller: void startScroll(int,int,int,int)>
<com.android.server.InputMethodManagerService: void <clinit>()>
<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getNewText()>
<android.media.AudioService$RcDisplayDeathHandler: void unlinkToRcDisplayDeath()>
<android.test.mock.MockCursor: void unregisterContentObserver(android.database.ContentObserver)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void loge(java.lang.String)>
<android.test.ComparisonFailure: java.lang.String getMessage()>
<android.app.BackStackRecord: android.app.FragmentTransaction setBreadCrumbTitle(java.lang.CharSequence)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setCountryCode(int)>
<android.media.MediaRecorder: void setAudioChannels(int)>
<android.view.TextureView: void applyTransformMatrix()>
<android.content.ContentProviderClient: void <init>(android.content.ContentResolver,android.content.IContentProvider)>
<android.content.res.TypedArray: int getLayoutDimension(int,java.lang.String)>
<android.graphics.drawable.ShapeDrawable$ShapeState: void <init>(android.graphics.drawable.ShapeDrawable$ShapeState)>
<android.renderscript.RSTextureView: void onSurfaceTextureAvailable(android.graphics.SurfaceTexture,int,int)>
<com.android.server.connectivity.Tethering$StateReceiver: void <init>(com.android.server.connectivity.Tethering,com.android.server.connectivity.Tethering$1)>
<android.graphics.Matrix: void mapVectors(float[],float[])>
<android.net.Uri$HierarchicalUri: android.net.Uri readFrom(android.os.Parcel)>
<android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiWatchdogStateMachine$OnlineWatchState access$1900(android.net.wifi.WifiWatchdogStateMachine)>
<android.content.IntentFilter: boolean matchAction(java.lang.String)>
<android.content.pm.ActivityInfo: java.lang.String toString()>
<com.android.internal.util.StateMachine$SmHandler$QuittingState: boolean processMessage(android.os.Message)>
<android.app.admin.DeviceAdminReceiver: void <init>()>
<android.view.VolumePanel: void onStartTrackingTouch(android.widget.SeekBar)>
<android.hardware.usb.UsbRequest: void native_close()>
<android.preference.PreferenceActivity$Header: void <clinit>()>
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumSymbols(android.content.ComponentName)>
<com.android.server.BackupManagerService$Operation: void <init>(com.android.server.BackupManagerService,int,com.android.server.BackupManagerService$BackupRestoreTask)>
<android.view.MotionEvent$PointerProperties: void <init>()>
<android.app.FragmentManagerImpl: void popBackStack(int,int)>
<com.android.internal.net.DomainNameValidator: boolean matchDns(java.security.cert.X509Certificate,java.lang.String)>
<android.webkit.ZoomManager$FocusMovementQueue: void access$300(android.webkit.ZoomManager$FocusMovementQueue)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: android.net.wifi.p2p.WifiP2pService$P2pStateMachine$InactiveState access$3400(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<com.android.server.am.ActivityManagerService$3: void <init>(com.android.server.am.ActivityManagerService,java.lang.String)>
<com.android.server.PowerManagerService: android.hardware.Sensor access$6000(com.android.server.PowerManagerService)>
<com.android.internal.view.InputConnectionWrapper$InputContextCallback: void <init>()>
<android.view.InputEvent$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.graphics.LightingColorFilter: int native_CreateLightingFilter(int,int)>
<android.graphics.Paint: void setStyle(android.graphics.Paint$Style)>
<GenerationGG: android.graphics.BitmapFactory$Options get_androidgraphicsBitmapFactory__Options()>
<android.app.ContextImpl$2: void <init>()>
<com.android.server.UiModeManagerService: int access$300(com.android.server.UiModeManagerService)>
<com.android.internal.telephony.gsm.GSMPhone: void onMMIDone(com.android.internal.telephony.gsm.GsmMmiCode)>
<android.webkit.WebView: boolean access$4702(android.webkit.WebView,boolean)>
<android.app.ITransientNotification$Stub: android.os.IBinder asBinder()>
<android.test.ViewAsserts: void assertGroupContains(android.view.ViewGroup,android.view.View)>
<android.graphics.drawable.GradientDrawable$GradientState: void setGradientCenter(float,float)>
<com.android.server.sip.SipSessionListenerProxy$1: void <init>(com.android.server.sip.SipSessionListenerProxy,android.net.sip.ISipSession)>
<android.database.sqlite.SQLiteDirectCursorDriver: void <init>(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String)>
<com.android.server.IntentResolver: java.util.List queryIntentFromList(android.content.Intent,java.lang.String,boolean,java.util.ArrayList)>
<java.lang.Object: boolean performIdentifierAction(int,int)>
<android.app.ApplicationPackageManager: java.lang.CharSequence getCachedString(android.app.ApplicationPackageManager$ResourceName)>
<android.speech.tts.PlaybackSynthesisCallback: int audioAvailable(byte[],int,int)>
<GenerationGG: android.widget.AbsListView$OnScrollListener get_androidwidgetAbsListView__OnScrollListener()>
<com.android.server.InputMethodManagerService: java.util.List getInputMethodList()>
<android.opengl.GLES11: void <init>()>
<android.net.wifi.p2p.WifiP2pManager$Channel: android.net.wifi.p2p.WifiP2pManager$ChannelListener access$000(android.net.wifi.p2p.WifiP2pManager$Channel)>
<android.widget.AutoCompleteTextView: android.widget.AdapterView$OnItemSelectedListener getItemSelectedListener()>
<android.webkit.WebView$2: void <init>(android.webkit.WebView,android.os.Message)>
<android.content.ContentResolver: int modeToMode(android.net.Uri,java.lang.String)>
<com.android.server.WifiService$1: void <init>(com.android.server.WifiService)>
<android.location.Criteria$1: void <init>()>
<com.android.server.DevicePolicyManagerService$1: void onReceive(android.content.Context,android.content.Intent)>
<android.app.IProcessObserver$Stub: android.app.IProcessObserver asInterface(android.os.IBinder)>
<android.net.Uri$OpaqueUri: java.lang.String getSchemeSpecificPart()>
<android.preference.PreferenceFragment: android.widget.ListView access$100(android.preference.PreferenceFragment)>
<com.android.server.pm.Installer: void disconnect()>
<android.app.NativeActivity$InputMethodCallback: void <init>(android.app.NativeActivity)>
<android.content.res.XmlBlock: int access$400(int)>
<android.renderscript.Byte2: void <init>(byte,byte)>
<android.graphics.Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String apnListToString(java.util.ArrayList)>
<android.inputmethodservice.InputMethodService$InputMethodImpl: void attachToken(android.os.IBinder)>
<com.android.internal.view.IInputContext$Stub$Proxy: void <init>(android.os.IBinder)>
<android.app.admin.DeviceAdminInfo: boolean isVisible()>
<android.app.NativeActivity: void onGlobalLayout()>
<android.view.ViewRootImpl$RunQueue$HandlerAction: int hashCode()>
<android.view.GLES20RecordingCanvas: void drawPosText(java.lang.String,float[],android.graphics.Paint)>
<android.test.ClassPathPackageInfoSource: void scanForApkFiles(java.io.File,java.lang.String,java.util.Set,java.util.Set)>
<android.widget.TextView$SuggestionsPopupWindow$SuggestionAdapter: int getCount()>
<android.bluetooth.BluetoothDeviceProfileState: void access$10000(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.IState)>
<android.webkit.WebViewCore: void nativeMoveMouseIfLatest(int,int,int,int)>
<com.android.server.pm.PackageSettingBase: void setTimeStamp(long)>
<android.renderscript.Type: int getX()>
<android.text.style.SpellCheckSpan: int describeContents()>
<android.content.BroadcastReceiver: boolean getAbortBroadcast()>
<android.util.SparseArray: void <clinit>()>
<android.net.ProxyProperties: int describeContents()>
<android.util.MonthDisplayHelper: boolean isWithinCurrentMonth(int,int)>
<java.lang.Object: int getAttributeUnsignedIntValue(int,int)>
<android.hardware.usb.UsbInterface: void <clinit>()>
<android.app.Instrumentation: void waitForIdleSync()>
<android.widget.TableRow: int getLocationOffset(android.view.View)>
<com.android.server.MountService: android.os.Parcelable[] getVolumeList()>
<android.preference.MultiSelectListPreference$1: void onClick(android.content.DialogInterface,int,boolean)>
<android.os.BatteryStats: void <clinit>()>
<android.media.AudioManager: android.media.AudioManager$FocusEventHandlerDelegate access$200(android.media.AudioManager)>
<com.android.internal.os.BatteryStatsImpl$Timer: void plug(long,long)>
<android.widget.AbsListView: boolean isVerticalScrollBarHidden()>
<android.graphics.Paint: void setShadowLayer(float,float,float,int)>
<com.android.internal.telephony.IccCard: void access$200(com.android.internal.telephony.IccCard,android.os.AsyncResult)>
<android.net.http.RequestQueue$ActivePool: void startConnectionThread()>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.CallTracker getCallTracker()>
<android.animation.AnimatorSet$AnimatorSetListener: void onAnimationStart(android.animation.Animator)>
<android.app.ApplicationLoaders: android.app.ApplicationLoaders getDefault()>
<android.view.GLES20Canvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>
<android.graphics.drawable.GradientDrawable$GradientState: boolean access$100(android.graphics.drawable.GradientDrawable$GradientState)>
<GenerationGG: android.content.IntentSender get_androidcontentIntentSender()>
<android.view.ViewRootImpl: android.view.ViewGroup findAncestorToTakeFocusInTouchMode(android.view.View)>
<android.widget.ProgressBar: int getResolvedLayoutDirection(android.graphics.drawable.Drawable)>
<android.net.DhcpStateMachine: void access$2200(android.net.DhcpStateMachine,com.android.internal.util.IState)>
<android.app.AlertDialog: void setButton(java.lang.CharSequence,android.os.Message)>
<android.content.Intent: java.lang.String getAction()>
<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int,int)>
<android.drm.DrmUtils: byte[] readBytes(java.io.File)>
<android.view.accessibility.AccessibilityNodeInfo: void addAction(int)>
<android.renderscript.Element: android.renderscript.Element RGBA_8888(android.renderscript.RenderScript)>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String getActionSymbolicName(int)>
<com.android.internal.telephony.IccCardApplication$AppState: boolean isPinRequired()>
<android.app.backup.RestoreSet$1: android.app.backup.RestoreSet createFromParcel(android.os.Parcel)>
<android.webkit.WebView: int nativeCursorFramePointer()>
<android.content.IntentFilter: boolean hasDataAuthority(android.net.Uri)>
<android.media.RingtoneManager: boolean getIncludeDrm()>
<android.net.http.Request: void addHeader(java.lang.String,java.lang.String)>
<android.webkit.WebViewCore: void access$5000(android.webkit.WebViewCore)>
<Wrapper_android_drm_DrmInfoRequest: void test_android_drm_DrmInfoRequest()>
<android.webkit.WebSettings: void setDefaultFixedFontSize(int)>
<android.view.Surface: android.graphics.Canvas lockCanvas(android.graphics.Rect)>
<Wrapper_android_security_KeyChainAliasCallback: void test_android_security_KeyChainAliasCallback()>
<android.widget.RemoteViews$SetEmptyView: void <init>(android.widget.RemoteViews,int,int)>
<android.net.rtp.RtpStream: int dup()>
<android.text.SpannableStringInternal: int nextSpanTransition(int,int,java.lang.Class)>
<android.media.AudioManager: void setBluetoothA2dpOn(boolean)>
<android.content.Intent: void <clinit>()>
<android.graphics.drawable.ClipDrawable: int getIntrinsicHeight()>
<android.webkit.WebIconDatabase: android.graphics.Bitmap nativeIconForPageUrl(java.lang.String)>
<GenerationGG: android.view.View$OnClickListener get_androidviewView__OnClickListener()>
<android.opengl.GLWrapperBase: void <init>(javax.microedition.khronos.opengles.GL)>
<com.android.internal.os.BatteryStatsImpl: java.util.Map parseProcWakelocks(byte[],int)>
<com.android.internal.telephony.cat.ResultCode: com.android.internal.telephony.cat.ResultCode fromInt(int)>
<com.android.internal.telephony.cdma.sms.BearerData: boolean decodeMsgCount(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)>
<android.content.IntentFilter: java.util.Iterator typesIterator()>
<com.android.server.pm.PackageManagerService: java.io.File createTempPackageFile(java.io.File)>
<android.widget.RadioGroup$LayoutParams: void <init>(int,int)>
<com.android.server.am.UriPermissionOwner: void addReadPermission(com.android.server.am.UriPermission)>
<android.view.animation.AnimationSet: void restrictDuration(long)>
<android.text.TextDirectionHeuristics$FirstStrong: void <clinit>()>
<DumbClass: void DumbMethod2()>
<android.app.ContextImpl$11: java.lang.Object createService(android.app.ContextImpl)>
<android.graphics.drawable.Drawable: void jumpToCurrentState()>
<android.content.pm.ManifestDigest$1: void <init>()>
<android.content.pm.Signature: void <init>(java.lang.String)>
<android.gesture.GestureOverlayView: float getGestureStrokeSquarenessTreshold()>
<com.android.internal.telephony.GsmAlphabet: java.lang.String gsm7BitPackedToString(byte[],int,int)>
<android.widget.ListView: int getFooterViewsCount()>
<android.graphics.drawable.RotateDrawable: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
<android.widget.RemoteViews$MemoryUsageCounter: int getBitmapHeapMemoryUsage()>
<android.webkit.WebView: android.webkit.WebView$TouchEventQueue access$6100(android.webkit.WebView)>
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String toString()>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int)>
<android.content.pm.Signature: void <clinit>()>
<android.app.ApplicationErrorReport$CrashInfo: void writeToParcel(android.os.Parcel,int)>
<android.webkit.ConsoleMessage$MessageLevel: void <init>(java.lang.String,int)>
<android.widget.RelativeLayout: android.view.View getRelatedView(int[],int)>
<android.speech.SpeechRecognizer$InternalListener$1: void <init>(android.speech.SpeechRecognizer$InternalListener)>
<GenerationGG: android.graphics.Bitmap$Config get_androidgraphicsBitmap__Config()>
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord getRecordForAppLocked(android.app.IApplicationThread)>
<android.content.IntentFilter: java.lang.String getCategory(int)>
<android.graphics.drawable.GradientDrawable$GradientState: void setCornerRadius(float)>
<android.widget.GridLayout$PackedMap: java.lang.Object getValue(int)>
<android.server.BluetoothHealthProfileHandler: java.lang.String access$300(android.server.BluetoothHealthProfileHandler,int)>
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getIccSerialNumber()>
<android.net.NetworkStatsHistory: long randomLong(java.util.Random,long,long)>
<android.location.Criteria: void setCostAllowed(boolean)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimEprlLoaded: void onRecordLoaded(android.os.AsyncResult)>
<android.app.FragmentManager: void <init>()>
<android.widget.ShareActionProvider$ShareAcitivityChooserModelPolicy: boolean onChooseActivity(android.widget.ActivityChooserModel,android.content.Intent)>
<android.net.wifi.WifiNative: java.lang.String signalPoll()>
<com.android.internal.util.XmlUtils: int convertValueToList(java.lang.CharSequence,java.lang.String[],int)>
<android.util.Log: int d(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.text.style.TypefaceSpan: void writeToParcel(android.os.Parcel,int)>
<android.webkit.WebViewCore$WebCoreThread: void <init>()>
<android.hardware.Camera$EventHandler: void <init>(android.hardware.Camera,android.hardware.Camera,android.os.Looper)>
<com.android.server.VibratorService$Vibration: void <init>(com.android.server.VibratorService,android.os.IBinder,long,int)>
<android.widget.GridLayout: int getDefaultMarginValue(android.view.View,android.widget.GridLayout$LayoutParams,boolean,boolean)>
<android.server.BluetoothAdapterStateMachine: void access$3700(android.server.BluetoothAdapterStateMachine,com.android.internal.util.IState)>
<android.media.AudioService: void ensureValidStreamType(int)>
<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageIO(int,int,java.lang.Object)>
<android.hardware.usb.UsbDeviceConnection: int native_control_request(int,int,int,int,byte[],int,int)>
<com.android.internal.telephony.ApnContext: void setEnabled(boolean)>
<android.webkit.WebSettings: void setDefaultFontSize(int)>
<Wrapper_android_test_suitebuilder_annotation_Suppress: void test_android_test_suitebuilder_annotation_Suppress()>
<android.nfc.FormatException: void <init>()>
<android.net.LocalServerSocket: java.io.FileDescriptor getFileDescriptor()>
<android.graphics.Point: int hashCode()>
<android.view.HardwareRenderer: void setRequested(boolean)>
<android.net.wifi.WifiStateMachine: android.net.DhcpStateMachine access$10300(android.net.wifi.WifiStateMachine)>
<android.webkit.WebView: int contentToViewDimension(int)>
<GenerationGG: android.view.MenuItem get_androidviewMenuItem()>
<android.telephony.PhoneNumberUtils: int getFormatTypeForLocale(java.util.Locale)>
<Wrapper_android_util_EventLogTags: void test_android_util_EventLogTags()>
<android.view.View: void invalidate(int,int,int,int)>
<java.lang.Object: java.lang.String getIdAttribute()>
<android.renderscript.Allocation: void setFromFieldPacker(int,int,android.renderscript.FieldPacker)>
<com.android.internal.content.PackageMonitor: java.lang.String getPackageName(android.content.Intent)>
<com.android.internal.os.BatteryStatsImpl: int getLowDischargeAmountSinceCharge()>
<android.webkit.OverScrollGlow: void setOverScrollDeltas(int,int)>
<android.text.method.AllCapsTransformationMethod: java.lang.CharSequence getTransformation(java.lang.CharSequence,android.view.View)>
<com.android.server.location.MockProvider: long getStatusUpdateTime()>
<com.android.internal.telephony.cdma.EriManager: void loadEriFileFromModem()>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Iterable)>
<com.android.server.PowerManagerService$UnsynchronizedWakeLock: void <init>(com.android.server.PowerManagerService,int,java.lang.String,boolean)>
<android.renderscript.RenderScript: int rsnFileA3DCreateFromAssetStream(int,int)>
<android.net.wifi.WifiStateMachine$2: void <init>(android.net.wifi.WifiStateMachine)>
<android.speech.tts.FileSynthesisCallback: byte[] makeWavHeader(int,int,int,int)>
<android.view.InputDevice$MotionRange: void <init>(int,int,float,float,float,float,android.view.InputDevice$1)>
<android.opengl.GLUtils: int native_texImage2D(int,int,int,android.graphics.Bitmap,int,int)>
<android.net.http.SslCertificate: java.util.Date getValidNotBeforeDate()>
<android.net.LocalSocketImpl: void connect(android.net.LocalSocketAddress,int)>
<com.android.server.location.PassiveProvider: boolean meetsCriteria(android.location.Criteria)>
<android.webkit.WebView$HitTestResult: void setExtra(java.lang.String)>
<com.android.server.DevicePolicyManagerService: void syncDeviceCapabilitiesLocked()>
<android.media.audiofx.EnvironmentalReverb$BaseParameterListener: void <init>(android.media.audiofx.EnvironmentalReverb)>
<com.android.server.net.NetworkAlertObserver: void interfaceStatusChanged(java.lang.String,boolean)>
<android.drm.DrmErrorEvent: void <init>(int,int,java.lang.String,java.util.HashMap)>
<android.text.DynamicLayout: int getEllipsisCount(int)>
<com.android.internal.widget.ActionBarView: int getDisplayOptions()>
<android.content.IContentService$Stub: android.content.IContentService asInterface(android.os.IBinder)>
<com.android.server.usb.UsbSettingsManager$AccessoryFilter: boolean equals(java.lang.Object)>
<com.android.internal.telephony.DefaultPhoneNotifier: com.android.internal.telephony.Phone$DataState convertDataState(int)>
<android.graphics.NinePatch: void <init>(android.graphics.NinePatch)>
<android.net.wifi.WifiStateMachine: void sendBluetoothAdapterStateChange(int)>
<android.widget.TimePicker$1: void onTimeChanged(android.widget.TimePicker,int,int)>
<android.os.ZygoteStartFailedEx: void <init>(java.lang.Throwable)>
<android.widget.FrameLayout: android.widget.FrameLayout$LayoutParams generateDefaultLayoutParams()>
<android.webkit.ViewManager$3: void <init>(android.webkit.ViewManager)>
<com.android.internal.telephony.cdma.RuimRecords: void dispose()>
<android.appwidget.AppWidgetHostView$1: void <init>()>
<android.util.Xml: org.xmlpull.v1.XmlSerializer newSerializer()>
<android.accounts.AccountManager$11: void <init>(android.accounts.AccountManager,android.accounts.OnAccountsUpdateListener,android.accounts.Account[])>
<com.android.server.usb.UsbDeviceManager: boolean nativeIsStartRequested()>
<android.webkit.WebViewCore: void access$2900(android.webkit.WebViewCore)>
<android.os.ConditionVariable: void <init>()>
<android.widget.Gallery: int getChildDrawingOrder(int,int)>
<android.media.AudioService: void unregisterRemoteControlClient(android.app.PendingIntent,android.media.IRemoteControlClient)>
<android.widget.ExpandableListPosition: android.widget.ExpandableListPosition obtainPosition(long)>
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getDeviceSvn()>
<android.test.mock.MockContext: android.content.res.Resources getResources()>
<android.app.ActivityManagerNative: android.os.IBinder asBinder()>
<android.graphics.Canvas: boolean clipRect(android.graphics.Rect,android.graphics.Region$Op)>
<android.drm.DrmManagerClient: android.drm.DrmSupportInfo[] _getAllSupportInfo(int)>
<android.view.ViewGroup$LayoutParams: java.lang.String debug(java.lang.String)>
<com.android.server.InputMethodManagerService$ScreenOnOffReceiver: void <init>(com.android.server.InputMethodManagerService)>
<android.webkit.WebStorage$2: void <init>(android.webkit.WebStorage)>
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.Input geInput()>
<GenerationGG: android.renderscript.Allocation$MipmapControl get_androidrenderscriptAllocation__MipmapControl()>
<android.view.animation.Animation: float getScaleFactor()>
<android.inputmethodservice.AbstractInputMethodService: boolean onTrackballEvent(android.view.MotionEvent)>
<android.view.accessibility.IAccessibilityManager$Stub: android.view.accessibility.IAccessibilityManager asInterface(android.os.IBinder)>
<com.android.server.wm.InputManager: void setInputFilter(com.android.server.wm.InputFilter)>
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: android.widget.RemoteViewsAdapter$RemoteViewsMetaData getMetaData()>
<android.speech.tts.TtsEngines$EngineInfoComparator: void <clinit>()>
<android.server.BluetoothService: boolean setPairingConfirmationNative(java.lang.String,boolean,int)>
<android.net.wifi.WifiStateMachine$ConnectingState: void <init>(android.net.wifi.WifiStateMachine)>
<com.android.server.am.ReceiverList: boolean equals(java.lang.Object)>
<android.content.res.ColorStateList: int describeContents()>
<android.test.TestPrinter: void <init>(java.lang.String,boolean)>
<android.telephony.cdma.CdmaCellLocation: void setStateInvalid()>
<com.android.internal.telephony.cdma.sms.BearerData: boolean decodeMsgDeliveryAlert(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)>
<android.hardware.Camera: void takePicture(android.hardware.Camera$ShutterCallback,android.hardware.Camera$PictureCallback,android.hardware.Camera$PictureCallback)>
<android.widget.TextView: void setWidth(int)>
<android.widget.ExpandableListConnector$PositionMetadata: void <clinit>()>
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List access$202(com.android.internal.telephony.gsm.SimSmsInterfaceManager,java.util.List)>
<android.media.MediaRecorder: void setVideoSize(int,int)>
<android.database.sqlite.SQLiteCursor: int getColumnIndex(java.lang.String)>
<android.accounts.IAccountAuthenticatorResponse$Stub$Proxy: android.os.IBinder asBinder()>
<android.widget.StackView$StackSlider: float getDurationForNeutralPosition()>
<android.preference.DialogPreference: void requestInputMethod(android.app.Dialog)>
<android.content.SyncAdapterType: java.lang.String toString()>
<android.test.ClassPathPackageInfoSource: void <clinit>()>
<android.view.inputmethod.BaseInputConnection: void <init>(android.view.View,boolean)>
<android.test.ViewAsserts: void assertLeftAligned(android.view.View,android.view.View,int)>
<android.net.wifi.p2p.WifiP2pService: android.net.wifi.p2p.WifiP2pDevice access$4500(android.net.wifi.p2p.WifiP2pService)>
<android.database.sqlite.DatabaseConnectionPool$PoolObj: void <clinit>()>
<com.android.internal.os.BatteryStatsImpl: int getDischargeStartLevel()>
<android.webkit.WebView: int getViewHeight()>
<android.net.DhcpStateMachine: void access$1000(android.net.DhcpStateMachine,com.android.internal.util.IState)>
<android.util.TimeUtils: void <clinit>()>
<android.widget.TextView: android.content.Context access$4600(android.widget.TextView)>
<com.android.server.location.GpsLocationProvider: boolean native_set_position_mode(int,int,int,int,int)>
<java.lang.Object: int describeContents()>
<android.text.util.Rfc822Tokenizer: android.text.util.Rfc822Token[] tokenize(java.lang.CharSequence)>
<android.filterfw.core.SimpleFrame: boolean hasNativeAllocation()>
<android.view.KeyEvent: android.view.KeyEvent createFromParcelBody(android.os.Parcel)>
<android.graphics.Typeface: int nativeCreateFromTypeface(int,int)>
<GenerationGG: android.content.ActivityNotFoundException get_androidcontentActivityNotFoundException()>
<android.app.NativeActivity: void onInputChannelCreatedNative(int,android.view.InputChannel)>
<android.app.PendingIntent$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.net.http.RequestQueue$1: void <init>(android.net.http.RequestQueue)>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: boolean isErrored()>
<android.webkit.WebView: java.lang.String nativeImageURI(int,int)>
<android.app.BackStackState: void <init>(android.app.FragmentManagerImpl,android.app.BackStackRecord)>
<android.net.wifi.WifiConfiguration: void <init>(android.net.wifi.WifiConfiguration)>
<android.webkit.URLUtil: boolean isContentUrl(java.lang.String)>
<android.provider.BrowserContract$History: void <clinit>()>
<com.android.server.am.UsageStatsService: int[] access$000()>
<android.util.JsonWriter: void close()>
<android.location.Address: java.lang.String access$1202(android.location.Address,java.lang.String)>
<Wrapper_android_renderscript_Short4: void test_android_renderscript_Short4()>
<android.graphics.Shader: void setLocalMatrix(android.graphics.Matrix)>
<android.widget.RemoteViews: void setChar(int,java.lang.String,char)>
<android.content.ContentValues: boolean containsKey(java.lang.String)>
<android.webkit.WebViewDatabase$1: void <init>(android.webkit.WebViewDatabase,android.content.Context)>
<android.net.LocalSocket: void <init>(android.net.LocalSocketImpl)>
<android.webkit.WebChromeClient: void onReachedMaxAppCacheSize(long,long,android.webkit.WebStorage$QuotaUpdater)>
<android.opengl.GLES20: void _nativeClassInit()>
<android.nfc.tech.NfcB: byte[] getProtocolInfo()>
<android.widget.ScrollBarDrawable: void <init>()>
<android.util.MathUtils: int constrain(int,int,int)>
<android.net.wifi.WifiNative: boolean startSupplicant()>
<android.media.MediaRecorder: void setParameter(java.lang.String)>
<android.os.Message: android.os.Bundle getData()>
<android.webkit.HTML5VideoView: int getCurrentPosition()>
<android.view.inputmethod.InputMethodInfo$1: java.lang.Object[] newArray(int)>
<com.android.internal.util.MemInfoReader: long extractMemValue(byte[],int)>
<android.widget.Spinner$DropdownPopup$1: void <init>(android.widget.Spinner$DropdownPopup,android.widget.Spinner)>
<android.graphics.Bitmap: boolean nativeWriteToParcel(int,boolean,int,android.os.Parcel)>
<com.android.server.net.NetworkPolicyManagerService$1: void onForegroundActivitiesChanged(int,int,boolean)>
<android.test.mock.MockContext: boolean deleteDatabase(java.lang.String)>
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipCall access$900(com.android.internal.telephony.sip.SipPhone$SipConnection)>
<android.net.wifi.p2p.WifiP2pManager$Channel$P2pHandler: void handleMessage(android.os.Message)>
<android.graphics.Region: boolean nativeEquals(int,int)>
<android.app.FragmentState: void <init>(android.os.Parcel)>
<android.database.DatabaseUtils: int getKeyLen(byte[])>
<android.util.Base64OutputStream: void <clinit>()>
<GenerationGG: android.test.InstrumentationTestRunner get_androidtestInstrumentationTestRunner()>
<android.filterfw.core.SimpleFrame: java.lang.String toString()>
<com.android.internal.telephony.IccCard: boolean access$600(com.android.internal.telephony.IccCard)>
<com.android.server.wm.WindowState: void dump(java.io.PrintWriter,java.lang.String,boolean)>
<com.android.internal.app.ResolverActivity$ResolveListAdapter: java.lang.Object getItem(int)>
<android.graphics.Bitmap: int ni()>
<com.android.server.BackupManagerService: java.lang.String buildPasswordHash(java.lang.String,byte[],int)>
<android.view.ViewGroup: void setBooleanFlag(int,boolean)>
<android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiWatchdogStateMachine$NotConnectedState access$300(android.net.wifi.WifiWatchdogStateMachine)>
<android.os.Environment: java.io.File getDownloadCacheDirectory()>
<android.test.mock.MockPackageManager: void <init>()>
<android.renderscript.FieldPacker: void addI16(android.renderscript.Short3)>
<com.android.server.am.BatteryStatsService: com.android.internal.os.BatteryStatsImpl getActiveStatistics()>
<android.test.mock.MockPackageManager: boolean isSafeMode()>
<android.test.ClassPathPackageInfo: java.util.Set getSubpackages()>
<com.android.server.IntentResolver: boolean remove_all_objects(java.util.List,java.lang.Object)>
<android.database.DatabaseUtils: byte[] getCollationKeyInBytes(java.lang.String)>
<android.webkit.WebView$InvokeListBox$MyArrayListAdapter: android.webkit.WebView$InvokeListBox$Container item(int)>
<android.text.util.Rfc822Token: java.lang.String quoteName(java.lang.String)>
<com.android.internal.os.ProcessStats: int countStats()>
<android.os.storage.StorageManager$MountServiceBinderListener: void <init>(android.os.storage.StorageManager)>
<Wrapper_android_graphics_MaskFilter: void test_android_graphics_MaskFilter()>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void parseSidNid(java.lang.String,java.lang.String)>
<android.app.ActivityThread$NewIntentData: void <init>()>
<Wrapper_android_content_SyncStats: void test_android_content_SyncStats()>
<android.view.animation.AccelerateInterpolator: void <init>(float)>
<GenerationGG: javax.microedition.khronos.opengles.GL10 get_javaxmicroeditionkhronosopenglesGL10()>
<android.text.method.TextKeyListener: android.text.method.TextKeyListener getInstance()>
<android.app.IBackupAgent$Stub: void <init>()>
<android.app.NativeActivity: void onWindowFocusChangedNative(int,boolean)>
<com.android.internal.telephony.IPhoneSubInfo$Stub$Proxy: void <init>(android.os.IBinder)>
<android.net.Uri$Part: void <clinit>()>
<android.net.NetworkPolicy: boolean isOverLimit(long)>
<android.drm.mobile1.DrmRawContent$DrmInputStream: void reset()>
<android.view.VolumePanel$StreamResources: void <clinit>()>
<android.text.method.NumberKeyListener: boolean ok(char[],char)>
<android.os.storage.StorageManager$ObbStateChangedStorageEvent: void <init>(android.os.storage.StorageManager,java.lang.String,int)>
<android.content.ComponentName: java.lang.String getClassName()>
<android.location.Location: double access$102(android.location.Location,double)>
<android.filterfw.core.FrameFormat: int getBytesPerSample()>
<android.graphics.Color: void colorToHSV(int,float[])>
<android.view.MotionEvent: int getFlags()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$600(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,java.lang.String)>
<android.filterfw.core.VertexFrame: boolean nativeDeallocate()>
<GenerationGG: android.net.VpnService get_androidnetVpnService()>
<android.net.wifi.p2p.WifiP2pConfig: void <clinit>()>
<android.os.Process: android.os.Process$ProcessStartResult start(java.lang.String,java.lang.String,int,int,int[],int,int,java.lang.String[])>
<android.server.search.SearchManagerService$BootCompletedReceiver: void <init>(android.server.search.SearchManagerService)>
<android.webkit.WebViewCore: void access$2400(android.webkit.WebViewCore,int,int,int,int)>
<com.android.internal.statusbar.IStatusBarService$Stub: void <init>()>
<android.renderscript.Matrix4f: void loadRotate(float,float,float,float)>
<com.android.internal.view.menu.ActionMenuView: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<android.widget.Scroller: int getStartY()>
<android.view.View: android.view.ViewTreeObserver getViewTreeObserver()>
<android.text.StaticLayout: void calculateEllipsis(int,int,float[],int,float,android.text.TextUtils$TruncateAt,int,float,android.text.TextPaint,boolean)>
<android.net.wifi.WifiWatchdogStateMachine: void access$3900(android.net.wifi.WifiWatchdogStateMachine,com.android.internal.util.IState)>
<android.content.pm.PackageParser$Instrumentation: java.lang.String toString()>
<android.nfc.NfcEvent: void <init>(android.nfc.NfcAdapter)>
<android.webkit.WebViewCore: java.lang.String saveWebArchive(java.lang.String,boolean)>
<android.net.DhcpStateMachine: java.lang.String access$100(android.net.DhcpStateMachine)>
<android.webkit.WebSettings: boolean getLoadWithOverviewMode()>
<android.os.Binder: void flushPendingCommands()>
<android.webkit.JWebCoreJavaBridge: void fireSharedTimer()>
<GenerationGG: android.util.LruCache get_androidutilLruCache()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$1: void <init>(com.android.internal.telephony.gsm.GsmDataConnectionTracker)>
<android.view.animation.GridLayoutAnimationController: void setDirection(int)>
<com.android.server.location.LocationProviderProxy$Connection: void <init>(com.android.server.location.LocationProviderProxy)>
<android.content.pm.VerifierInfo: void <init>(android.os.Parcel)>
<com.android.internal.telephony.gsm.GsmConnection: void onHangupLocal()>
<android.graphics.Rasterizer: void finalize()>
<android.animation.ObjectAnimator: android.animation.Animator clone()>
<android.gesture.GestureStore: int getSequenceType()>
<android.view.animation.LayoutAnimationController: android.view.animation.Interpolator getInterpolator()>
<android.webkit.HTML5VideoViewProxy$1: void handleMessage(android.os.Message)>
<com.android.internal.telephony.DataConnection$CallSetupException: int getRetryOverride()>
<android.widget.GridLayout$Axis: java.lang.String arcsToString(java.util.List)>
<android.net.Uri$HierarchicalUri: android.net.Uri$Builder buildUpon()>
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: java.lang.Object clone()>
<android.content.res.AssetManager: android.content.res.XmlBlock openXmlBlockAsset(int,java.lang.String)>
<android.util.JsonToken: void <clinit>()>
<com.android.internal.app.ActionBarImpl: android.app.ActionBar$Tab getTabAt(int)>
<android.app.Dialog: void setOnCancelListener(android.content.DialogInterface$OnCancelListener)>
<android.os.IPowerManager$Stub: android.os.IBinder asBinder()>
<android.content.SyncManager$4: void <init>(android.content.SyncManager)>
<android.text.method.WordIterator: void setCharSequence(java.lang.CharSequence,int,int)>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: void endCall()>
<android.accounts.IAccountAuthenticator$Stub$Proxy: android.os.IBinder asBinder()>
<android.animation.Keyframe$ObjectKeyframe: android.animation.Keyframe clone()>
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: int getViewTypeCount()>
<android.net.wifi.WifiStateMachine: long access$5902(android.net.wifi.WifiStateMachine,long)>
<android.widget.CalendarView: int access$2100(android.widget.CalendarView)>
<com.android.internal.telephony.AdnRecord: void <init>(int,int,java.lang.String,java.lang.String)>
<GenerationGG: android.widget.PopupMenu$OnDismissListener get_androidwidgetPopupMenu__OnDismissListener()>
<android.view.View: boolean hasOpaqueScrollbars()>
<android.os.IHardwareService$Stub$Proxy: android.os.IBinder asBinder()>
<android.webkit.JWebCoreJavaBridge: void addPackageNames(java.util.Set)>
<android.speech.tts.AudioPlaybackHandler$ListEntry: void <init>(android.speech.tts.AudioPlaybackHandler,int,android.speech.tts.MessageParams,int)>
<android.server.BluetoothService: int bluezStringToScanMode(boolean,boolean)>
<android.widget.PopupWindow: boolean isOutsideTouchable()>
<GenerationGG: android.media.SoundPool get_androidmediaSoundPool()>
<android.renderscript.RenderScript: void rsnAllocationData2D(int,int,int,int,int,int,int,int,short[],int)>
<android.os.Messenger: android.os.Messenger readMessengerOrNullFromParcel(android.os.Parcel)>
<com.android.server.sip.SipHelper: javax.sip.header.MaxForwardsHeader createMaxForwardsHeader()>
<com.android.server.AlarmManagerService: int access$1400(com.android.server.AlarmManagerService)>
<android.content.IntentFilter: java.lang.String matchCategories(java.util.Set)>
<android.widget.AbsListView$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.graphics.Shader$TileMode: void <init>(java.lang.String,int,int)>
<android.text.style.TextAppearanceSpan: int getTextSize()>
<android.graphics.Region: boolean equals(java.lang.Object)>
<android.net.LocalSocketImpl$SocketInputStream: int read()>
<com.android.internal.telephony.gsm.GsmCallTracker: void registerForVoiceCallEnded(android.os.Handler,int,java.lang.Object)>
<com.android.server.PowerManagerService$UnsynchronizedWakeLock: java.lang.String toString()>
<GenerationGG: android.app.SearchManager get_androidappSearchManager()>
<android.app.ISearchManager$Stub$Proxy: void <init>(android.os.IBinder)>
<android.location.Location: java.lang.String getProvider()>
<android.content.pm.ManifestDigest: int hashCode()>
<android.webkit.WebBackForwardList: int getSize()>
<android.os.PatternMatcher: void writeToParcel(android.os.Parcel,int)>
<android.webkit.WebView: int nativeFocusCandidatePointer()>
<android.graphics.Bitmap: void nativePrepareToDraw(int)>
<com.android.server.pm.PackageManagerService: java.lang.String fixProcessName(java.lang.String,java.lang.String,int)>
<android.app.admin.DeviceAdminReceiver: void onPasswordSucceeded(android.content.Context,android.content.Intent)>
<android.graphics.drawable.DrawableContainer: boolean isStateful()>
<android.accounts.AuthenticatorDescription: java.lang.String toString()>
<android.webkit.WebViewCore: java.lang.String access$1400(android.webkit.WebViewCore,int,int)>
<java.lang.Object: boolean hasStableIds()>
<com.android.internal.view.InputBindResult: int describeContents()>
<android.graphics.SurfaceTexture$EventHandler: void handleMessage(android.os.Message)>
<com.android.server.wm.WindowManagerService: boolean isHardKeyboardEnabled()>
<com.android.server.am.AppErrorResult: void set(int)>
<android.view.ViewTreeObserver: void removeGlobalOnLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.animation.PropertyValuesHolder: void setProperty(android.util.Property)>
<android.renderscript.RenderScript: void rsnContextSetSurfaceTexture(int,int,int,android.graphics.SurfaceTexture)>
<android.view.animation.AnticipateOvershootInterpolator: float a(float,float)>
<android.widget.CalendarView: android.widget.CalendarView$WeeksAdapter access$400(android.widget.CalendarView)>
<android.webkit.MimeTypeMap: java.lang.String getExtensionFromMimeType(java.lang.String)>
<android.widget.SpellChecker: int nextSpellCheckSpanIndex()>
<android.view.inputmethod.ExtractedText: void <clinit>()>
<android.net.NetworkStats: void <clinit>()>
<android.widget.AlphabetIndexer: void onInvalidated()>
<com.android.server.wm.DimSurface: void printTo(java.lang.String,java.io.PrintWriter)>
<android.text.DynamicLayout: int getLineDescent(int)>
<GenerationGG: android.net.wifi.p2p.WifiP2pDeviceList get_androidnetwifip2pWifiP2pDeviceList()>
<com.android.server.WifiService: int access$2302(com.android.server.WifiService,int)>
<android.app.SearchableInfo: boolean autoUrlDetect()>
<android.nfc.tech.NdefFormatable: android.nfc.tech.NdefFormatable get(android.nfc.Tag)>
<android.database.CursorWindow: void nativeFreeLastRow(int)>
<android.widget.TextView: boolean canCopy()>
<android.provider.DrmStore$Audio: void <clinit>()>
<com.android.internal.telephony.cat.ToneSettings$1: void <init>()>
<android.widget.LinearLayout: int getLocationOffset(android.view.View)>
<com.android.internal.view.menu.MenuBuilder: int findGroupIndex(int,int)>
<android.view.animation.LayoutAnimationController: long getDelayForView(android.view.View)>
<android.renderscript.Double2: void <init>()>
<android.filterfw.core.Frame: int decRefCount()>
<android.webkit.WebView: int getTitleHeight()>
<android.view.GLES20DisplayList: android.view.HardwareCanvas start()>
<android.graphics.Canvas: void drawTextOnPath(java.lang.String,android.graphics.Path,float,float,android.graphics.Paint)>
<android.test.suitebuilder.TestGrouping$SortBySimpleName: void <init>()>
<android.graphics.Canvas: boolean clipRegion(android.graphics.Region)>
<android.view.ViewRootImpl$W: void windowFocusChanged(boolean,boolean)>
<Wrapper_android_hardware_usb_UsbAccessory: void test_android_hardware_usb_UsbAccessory()>
<android.database.sqlite.SQLiteDatabase: void lock()>
<android.util.PrefixPrinter: android.util.Printer create(android.util.Printer,java.lang.String)>
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLowerCase(android.content.ComponentName)>
<com.android.server.MountService: void addObbStateLocked(com.android.server.MountService$ObbState)>
<android.renderscript.RSSurfaceView: void surfaceCreated(android.view.SurfaceHolder)>
<GenerationGG: android.widget.AdapterView get_androidwidgetAdapterView()>
<android.view.GLES20Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)>
<android.view.animation.Animation: boolean getFillAfter()>
<android.app.ActionBar$LayoutParams: void <init>(int,int,int)>
<android.os.Messenger: void <clinit>()>
<android.widget.ExpandableListConnector: boolean isEmpty()>
<com.android.internal.backup.LocalTransport: void deleteContents(java.io.File)>
<android.webkit.ZoomControlEmbedded: android.widget.ZoomButtonsController access$200(android.webkit.ZoomControlEmbedded)>
<android.net.DhcpInfoInternal: void addRoute(android.net.RouteInfo)>
<android.renderscript.BaseObj: void finalize()>
<android.media.MediaMetadataRetriever: byte[] getEmbeddedPicture(int)>
<android.net.http.SslError: java.lang.String getUrl()>
<com.android.internal.telephony.cat.ResultException: void <init>(com.android.internal.telephony.cat.ResultCode)>
<android.util.Base64: byte[] decode(byte[],int,int,int)>
<android.widget.AbsListView$PositionScroller: void start(int,int)>
<android.net.rtp.AudioStream: void setCodec(android.net.rtp.AudioCodec)>
<android.view.InputChannel: int describeContents()>
<android.graphics.DashPathEffect: int nativeCreate(float[],float)>
<android.net.wifi.WifiStateMachine: void access$6200(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.view.ViewDebug: void stopLooperProfiling()>
<com.android.internal.telephony.IccFileNotFound: void <init>()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$5100(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,java.lang.String,int)>
<android.telephony.PhoneStateListener$1: void onMessageWaitingIndicatorChanged(boolean)>
<android.util.EventLog: int writeEvent(int,int)>
<com.android.internal.util.ArrayUtils: java.lang.Object[] emptyArray(java.lang.Class)>
<android.widget.OverScroller: boolean computeScrollOffset()>
<android.view.KeyEvent: boolean isFunctionPressed()>
<android.database.StaleDataException: void <init>()>
<android.text.method.WordIterator: int following(int)>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void access$2700(com.android.server.connectivity.Tethering$TetherInterfaceSM,com.android.internal.util.IState)>
<android.test.mock.MockResources: int getIdentifier(java.lang.String,java.lang.String,java.lang.String)>
<android.text.style.RasterizerSpan: void updateDrawState(android.text.TextPaint)>
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void <init>(com.android.internal.util.StateMachine$SmHandler)>
<android.webkit.URLUtil: boolean isValidUrl(java.lang.String)>
<com.android.server.wm.InputManager: void nativeSetInputWindows(com.android.server.wm.InputWindowHandle[])>
<android.view.ActionProvider: boolean onPerformDefaultAction()>
<com.android.internal.telephony.cdma.RuimRecords: void log(java.lang.String)>
<com.android.server.am.ActivityStack: com.android.server.am.ActivityRecord findTaskLocked(android.content.Intent,android.content.pm.ActivityInfo)>
<com.android.internal.app.AlertController: void setView(android.view.View,int,int,int,int)>
<GenerationGG: android.net.UrlQuerySanitizer$ValueSanitizer get_androidnetUrlQuerySanitizer__ValueSanitizer()>
<com.android.server.accessibility.TouchExplorer: boolean isDraggingGesture(android.view.MotionEvent)>
<android.webkit.HttpAuthHandler: void proceed(java.lang.String,java.lang.String)>
<com.android.server.PowerManagerService: long access$5802(com.android.server.PowerManagerService,long)>
<android.net.wifi.WifiStateMachine: com.android.internal.util.State access$14700(android.net.wifi.WifiStateMachine)>
<com.android.server.MountService: boolean isObbMounted(java.lang.String)>
<com.android.internal.telephony.SmsMessageBase: java.lang.String getMessageBody()>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder enable(int)>
<android.view.View: boolean awakenScrollBars(int)>
<GenerationGG: org.xml.sax.Attributes get_orgxmlsaxAttributes()>
<android.media.JetPlayer: android.media.JetPlayer$OnJetEventListener access$100(android.media.JetPlayer)>
<android.content.res.AssetManager: java.lang.String[] getArrayStringResource(int)>
<android.view.View: boolean onKeyShortcut(int,android.view.KeyEvent)>
<android.graphics.Region: void <init>(int,int,int,int)>
<GenerationGG: android.view.animation.LinearInterpolator get_androidviewanimationLinearInterpolator()>
<android.webkit.ClientCertRequestHandler: void cancel()>
<android.net.wifi.WifiConfigStore: android.net.wifi.WpsResult startWpsWithPinFromAccessPoint(android.net.wifi.WpsInfo)>
<android.text.method.PasswordTransformationMethod$PasswordCharSequence: int length()>
<com.android.server.location.PassiveProvider: boolean requiresSatellite()>
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcastRange(int,int)>
<Wrapper_android_drm_DrmInfoStatus: void test_android_drm_DrmInfoStatus()>
<GenerationGG: android.drm.DrmErrorEvent get_androiddrmDrmErrorEvent()>
<android.content.pm.ResolveInfo: java.lang.String toString()>
<android.hardware.Camera$CameraInfo: void <init>()>
<android.webkit.WebSettings$EventHandler$1: void <init>(android.webkit.WebSettings$EventHandler)>
<android.media.JetPlayer: boolean setMuteArray(boolean[],boolean)>
<android.widget.CalendarView$WeekView: void init(int,int,int)>
<android.animation.PropertyValuesHolder: void setIntValues(int[])>
<android.test.mock.MockResources: java.lang.String getResourceEntryName(int)>
<android.widget.AbsSpinner: android.view.View getSelectedView()>
<java.lang.Object: java.lang.String getInputEncoding()>
<android.speech.tts.SynthesisRequest: java.lang.String getVariant()>
<android.graphics.Rect: void set(int,int,int,int)>
<com.android.server.UiModeManagerService$2: void <init>(com.android.server.UiModeManagerService)>
<android.text.format.DateFormat: java.lang.String getYearString(java.util.Calendar,int)>
<com.android.internal.view.menu.ActionMenuView: void setOverflowReserved(boolean)>
<com.android.internal.view.BaseSurfaceHolder: void setFixedSize(int,int)>
<com.android.server.am.ActivityManagerService: int oomAdjToImportance(int,android.app.ActivityManager$RunningAppProcessInfo)>
<android.app.ApplicationThreadProxy: android.os.IBinder asBinder()>
<android.webkit.WebSettings$PluginState: void <init>(java.lang.String,int)>
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void finalize()>
<android.content.pm.LabeledIntent: int getIconResource()>
<com.android.i18n.phonenumbers.PhoneNumberUtil: void init(java.lang.String)>
<Wrapper_android_webkit_WebResourceResponse: void test_android_webkit_WebResourceResponse()>
<com.android.server.sip.SipHelper: javax.sip.header.FromHeader createFromHeader(android.net.sip.SipProfile,java.lang.String)>
<com.android.internal.os.BatteryStatsImpl$Counter: void detach()>
<android.view.View: android.view.View findFocus()>
<Wrapper_android_animation_ArgbEvaluator: void test_android_animation_ArgbEvaluator()>
<android.view.textservice.SpellCheckerSession: void <clinit>()>
<android.media.AudioService: android.content.ContentResolver access$2600(android.media.AudioService)>
<GenerationGG: android.webkit.JsPromptResult get_androidwebkitJsPromptResult()>
<android.webkit.CookieManager: java.lang.String getBaseDomain(java.lang.String)>
<android.graphics.Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>
<android.view.InputEventConsistencyVerifier: boolean isInstrumentationEnabled()>
<com.android.internal.telephony.cdma.CdmaConnection: int getCnapNamePresentation()>
<android.net.wifi.WifiStateMachine: void access$5600(android.net.wifi.WifiStateMachine,java.lang.String)>
<android.widget.VideoView: android.widget.MediaController access$800(android.widget.VideoView)>
<android.test.suitebuilder.TestGrouping$TestCasePredicate: boolean hasValidConstructor(java.lang.Class)>
<android.view.InputChannel: void nativeDispose(boolean)>
<android.content.res.XmlBlock: int nativeCreateParseState(int)>
<android.media.AudioService$VolumeStreamState: java.lang.String access$3700(android.media.AudioService$VolumeStreamState)>
<com.android.server.wm.WindowManagerService: float fixScale(float)>
<android.app.Service: void attach(android.content.Context,android.app.ActivityThread,java.lang.String,android.os.IBinder,android.app.Application,java.lang.Object)>
<android.bluetooth.BluetoothClass$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.graphics.Point$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isPassword()>
<android.text.Selection$START: void <init>()>
<android.location.Location: void set(android.location.Location)>
<android.graphics.LayerRasterizer: void nativeAddLayer(int,int,float,float)>
<GenerationGG: android.widget.NumberPicker$OnScrollListener get_androidwidgetNumberPicker__OnScrollListener()>
<android.graphics.Paint: int getAlpha()>
<android.view.SurfaceView$4: boolean isCreating()>
<android.net.wifi.WifiApConfigStore: java.lang.String access$000()>
<android.text.AutoText: java.lang.String lookup(java.lang.CharSequence,int,int)>
<android.view.View: boolean isHapticFeedbackEnabled()>
<android.filterfw.core.FrameFormat: java.lang.String toString()>
<android.view.GLES20DisplayList$DisplayListFinalizer: void finalize()>
<android.server.BluetoothService: android.bluetooth.BluetoothHeadset access$802(android.server.BluetoothService,android.bluetooth.BluetoothHeadset)>
<com.android.internal.telephony.cdma.CDMAPhone: void notifyNewRingingConnection(com.android.internal.telephony.Connection)>
<GenerationGG: android.test.SyncBaseInstrumentation get_androidtestSyncBaseInstrumentation()>
<android.text.style.BackgroundColorSpan: void <init>(int)>
<android.content.res.AssetManager: void setConfiguration(int,int,java.lang.String,int,int,int,int,int,int,int,int,int,int,int,int,int,int)>
<android.net.wifi.WifiStateMachine: void access$6300(android.net.wifi.WifiStateMachine,android.os.Message)>
<android.widget.RemoteViews$ReflectionActionWithoutParams: void <init>(android.widget.RemoteViews,android.os.Parcel)>
<android.content.Intent: android.content.Intent setPackage(java.lang.String)>
<android.util.Property: void set(java.lang.Object,java.lang.Object)>
<android.location.Location: float access$1002(android.location.Location,float)>
<android.media.audiofx.AudioEffect: int getParameter(int,int[])>
<android.net.http.RequestHandle: void <init>(android.net.http.RequestQueue,java.lang.String,android.net.WebAddress,java.lang.String,java.util.Map,java.io.InputStream,int,android.net.http.Request,android.net.http.Connection)>
<android.net.http.IdleCache: void <init>()>
<java.lang.Object: void clear()>
<android.widget.TabHost: void setOnTabChangedListener(android.widget.TabHost$OnTabChangeListener)>
<com.android.internal.telephony.cat.ValueObject: void <init>()>
<android.content.res.Resources: java.lang.String getResourceTypeName(int)>
<android.app.DownloadManager$Query: void <init>()>
<android.graphics.Matrix$1: boolean postScale(float,float)>
<android.widget.TextView: int extractRangeStartFromLong(long)>
<android.webkit.WebSettings: android.content.Context access$400(android.webkit.WebSettings)>
<java.lang.Object: int nextSpanTransition(int,int,java.lang.Class)>
<com.android.internal.widget.AbsActionBarView$VisibilityAnimListener: com.android.internal.widget.AbsActionBarView$VisibilityAnimListener withFinalVisibility(int)>
<android.content.SyncManager$ActiveSyncContext: void onFinished(android.content.SyncResult)>
<android.database.sqlite.SQLiteDatabase: boolean isReadOnly()>
<android.view.animation.GridLayoutAnimationController: long getDelayForView(android.view.View)>
<com.android.server.accessibility.TouchExplorer$PointerTracker: void clear()>
<com.android.server.DeviceStorageMonitorService$CachePackageDataObserver: void onRemoveCompleted(java.lang.String,boolean)>
<com.android.internal.telephony.gsm.GsmCallTracker: void unregisterForVoiceCallStarted(android.os.Handler)>
<android.os.BatteryStats$HistoryItem: int buildBatteryLevelInt()>
<android.graphics.drawable.GradientDrawable$GradientState: void setStroke(int,int,float,float)>
<android.os.WorkSource: void <clinit>()>
<android.net.SSLCertificateSocketFactory: javax.net.SocketFactory getDefault(int)>
<com.android.server.accessibility.AccessibilityManagerService: void access$600(com.android.server.accessibility.AccessibilityManagerService)>
<com.android.server.BackupManagerService$FullRestoreParams: void <init>(com.android.server.BackupManagerService,android.os.ParcelFileDescriptor)>
<android.widget.AbsoluteLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: android.net.wifi.p2p.WifiP2pDeviceList access$1000(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<android.content.pm.PermissionInfo: java.lang.String toString()>
<GenerationGG: android.util.MonthDisplayHelper get_androidutilMonthDisplayHelper()>
<android.view.ViewGroup: boolean canAnimate()>
<android.view.animation.AnimationSet: void scaleCurrentDuration(float)>
<android.os.MemoryFile: int access$200(android.os.MemoryFile)>
<android.text.method.QwertyKeyListener$Replaced: void <init>(char[])>
<com.android.internal.telephony.PhoneBase: void notifyIncomingRing()>
<android.webkit.WebViewCore: void key(android.view.KeyEvent,boolean)>
<android.content.pm.PackageParser: android.content.pm.PermissionInfo generatePermissionInfo(android.content.pm.PackageParser$Permission,int)>
<GenerationGG: android.os.ParcelFileDescriptor get_androidosParcelFileDescriptor()>
<com.android.server.InputMethodManagerService: void hideInputMethodMenu()>
<android.widget.TextView$InsertionHandleView$1: void <init>(android.widget.TextView$InsertionHandleView)>
<android.media.AudioService: boolean access$6302(android.media.AudioService,boolean)>
<android.view.Surface: void copyFrom(android.view.Surface)>
<android.content.ContentService: void registerContentObserver(android.net.Uri,boolean,android.database.IContentObserver)>
<com.android.internal.telephony.DataConnection$UpdateLinkPropertyResult: void <init>(android.net.LinkProperties)>
<android.graphics.Canvas: boolean native_quickReject(int,android.graphics.RectF,int)>
<android.media.audiofx.AudioEffect: int getParameter(int,byte[])>
<android.graphics.Path: void native_quadTo(int,float,float,float,float)>
<android.os.StrictMode$InstanceTracker: void <clinit>()>
<android.opengl.GLES20: void <init>()>
<android.media.audiofx.BassBoost: void setStrength(short)>
<android.renderscript.Element: android.renderscript.Element RGBA_4444(android.renderscript.RenderScript)>
<android.view.VelocityTracker$1: void onAcquired(android.view.VelocityTracker)>
<android.net.sip.SipProfile$Builder: android.net.sip.SipProfile$Builder setPassword(java.lang.String)>
<android.location.Country$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.os.Handler: boolean sendMessage(android.os.Message)>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: int getCellLocationId()>
<android.media.FaceDetector: void <clinit>()>
<android.widget.ListView$ArrowScrollFocusResult: int getSelectedPosition()>
<GenerationGG: android.net.LocalSocketAddress get_androidnetLocalSocketAddress()>
<android.view.accessibility.AccessibilityNodeInfo: void init(android.view.accessibility.AccessibilityNodeInfo)>
<android.net.http.HttpAuthHeader: void parseStale(java.lang.String)>
<android.app.ActivityThread$BindServiceData: java.lang.String toString()>
<android.view.ViewDebug: java.lang.reflect.Method[] getExportedPropertyMethods(java.lang.Class)>
<android.view.ContextThemeWrapper: void attachBaseContext(android.content.Context)>
<android.content.pm.UserInfo$1: void <init>()>
<android.os.AsyncTask$SerialExecutor: void <init>()>
<android.renderscript.Script: void setVar(int,double)>
<android.media.AudioTrack: int native_get_position()>
<android.os.Parcel: void destroy()>
<Wrapper_android_renderscript_Matrix2f: void test_android_renderscript_Matrix2f()>
<android.content.res.AssetManager: long seekAsset(int,long,int)>
<android.renderscript.Element$1: void <clinit>()>
<android.media.AudioTrack: int setLoopPoints(int,int,int)>
<android.speech.tts.TextToSpeechService$1: java.lang.String intern(java.lang.String)>
<android.test.ViewAsserts: void assertTopAligned(android.view.View,android.view.View,int)>
<com.android.server.CountryDetectorService: void <init>(android.content.Context)>
<com.android.internal.util.StateMachine$SmHandler: void setInitialState(com.android.internal.util.State)>
<android.database.DataSetObserver: void <init>()>
<android.webkit.WebView: void incrementTextGeneration()>
<android.speech.SpeechRecognizer: android.speech.IRecognitionService access$502(android.speech.SpeechRecognizer,android.speech.IRecognitionService)>
<DumbClass: void DumbMethod12()>
<android.webkit.WebViewCore$EventHub: void access$7500(android.webkit.WebViewCore$EventHub,android.os.Message)>
<android.os.StrictMode$LogStackTrace: void <init>(android.os.StrictMode$1)>
<com.android.server.accessibility.AccessibilityManagerService: void executeMessage(android.os.Message)>
<Wrapper_android_opengl_Matrix: void test_android_opengl_Matrix()>
<android.view.KeyEvent: android.view.KeyEvent changeAction(android.view.KeyEvent,int)>
<android.os.PatternMatcher: int getType()>
<android.util.JsonReader: void expect(android.util.JsonToken)>
<android.os.Binder: void init()>
<android.nfc.TechListParcel$1: void <init>()>
<android.app.Activity: boolean onPreparePanel(int,android.view.View,android.view.Menu)>
<android.widget.TwoLineListItem: android.widget.TextView getText1()>
<com.android.server.usb.UsbDeviceManager: android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)>
<GenerationGG: android.view.ContextThemeWrapper get_androidviewContextThemeWrapper()>
<GenerationGG: android.widget.SimpleCursorAdapter$CursorToStringConverter get_androidwidgetSimpleCursorAdapter__CursorToStringConverter()>
<android.widget.Scroller: int getFinalX()>
<android.view.inputmethod.InputMethodInfo: java.lang.String getServiceName()>
<com.android.internal.appwidget.IAppWidgetHost$Stub: com.android.internal.appwidget.IAppWidgetHost asInterface(android.os.IBinder)>
<android.graphics.drawable.AnimationDrawable: void unscheduleSelf(java.lang.Runnable)>
<android.animation.ObjectAnimator: void setIntValues(int[])>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setNoInternationalDialling(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<android.view.OrientationListener$OrientationEventListenerInternal: void onOrientationChanged(int)>
<android.net.ConnectivityManager: boolean isNetworkTypeValid(int)>
<android.media.RemoteControlClient: void onNewInternalClientGen(java.lang.Integer,int,int)>
<android.webkit.SslClientCertLookupTable: void Deny(java.lang.String)>
<android.view.Gravity: boolean isVertical(int)>
<android.net.wifi.WifiStateMachine: void access$11900(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<com.android.server.DevicePolicyManagerService: int getStorageEncryptionStatus()>
<android.view.Display: int getRawWidthNative()>
<android.content.ContextWrapper: void setTheme(int)>
<android.view.MotionEvent: void recycle()>
<android.view.inputmethod.ExtractedTextRequest$1: java.lang.Object[] newArray(int)>
<android.telephony.ServiceState: int hashCode()>
<android.app.ActivityThread$ServiceArgsData: java.lang.String toString()>
<android.webkit.WebView: boolean access$8002(android.webkit.WebView,boolean)>
<junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.Throwable)>
<android.content.pm.PackageParser: void setOnlyCoreApps(boolean)>
<android.content.pm.ActivityInfo: int describeContents()>
<android.content.SyncResult: java.lang.String toString()>
<android.server.BluetoothService: int getAdapterConnectionState()>
<com.android.server.NotificationManagerService: void access$1300(com.android.server.NotificationManagerService)>
<android.location.Address: void clearLongitude()>
<android.os.BatteryStats: void prepareForDumpLocked()>
<android.renderscript.RenderScriptGL: void bindProgramRaster(android.renderscript.ProgramRaster)>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteCompiledSql getCompiledStatementForSql(java.lang.String)>
<android.content.IntentFilter: void <init>(android.content.IntentFilter)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$6500(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,com.android.internal.util.IState)>
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Phone getPhone()>
<android.media.audiofx.AudioEffect: int native_setup(java.lang.Object,java.lang.String,java.lang.String,int,int,int[],java.lang.Object[])>
<android.webkit.WebView: void nativeSelectAll()>
<GenerationGG: android.animation.Keyframe[] get_androidanimationKeyframe_ARRAY_()>
<android.widget.TextView: android.graphics.drawable.Drawable access$7202(android.widget.TextView,android.graphics.drawable.Drawable)>
<android.drm.DrmEvent: java.lang.String getMessage()>
<GenerationGG: android.content.pm.PathPermission get_androidcontentpmPathPermission()>
<GenerationGG: android.view.ViewDebug$RecyclerTraceType get_androidviewViewDebug__RecyclerTraceType()>
<android.database.sqlite.SQLiteDatabase: void releaseDbConnection(android.database.sqlite.SQLiteDatabase)>
<android.webkit.CallbackProxy: void setWebViewClient(android.webkit.WebViewClient)>
<android.view.MotionEvent: android.view.MotionEvent split(int)>
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country access$202(com.android.server.location.ComprehensiveCountryDetector,android.location.Country)>
<android.test.mock.MockContentProvider$InversionIContentProvider: android.content.res.AssetFileDescriptor openTypedAssetFile(android.net.Uri,java.lang.String,android.os.Bundle)>
<android.test.InstrumentationTestRunner: void <init>()>
<android.inputmethodservice.Keyboard: java.util.List getModifierKeys()>
<com.android.internal.appwidget.IAppWidgetHost$Stub: void <init>()>
<android.graphics.SweepGradient: void <init>(float,float,int[],float[])>
<android.net.wifi.WifiNative: boolean isDriverLoaded()>
<android.test.mock.MockCursor: void <init>()>
<android.test.mock.MockPackageManager: int getComponentEnabledSetting(android.content.ComponentName)>
<android.database.sqlite.SQLiteDatabase: java.lang.String getPath()>
<android.os.RemoteCallback: int hashCode()>
<com.android.server.net.NetworkPolicyManagerService$1: void <init>(com.android.server.net.NetworkPolicyManagerService)>
<com.android.internal.telephony.IccFileTypeMismatch: void <init>()>
<com.android.internal.telephony.cdma.RuimRecords: int getDisplayRule(java.lang.String)>
<android.opengl.GLES10Ext: void <clinit>()>
<android.util.EventLog: int writeEvent(int,long)>
<android.content.pm.ManifestDigest: android.content.pm.ManifestDigest fromAttributes(java.util.jar.Attributes)>
<android.media.audiofx.AudioEffect: boolean getEnabled()>
<android.accounts.AccountManagerService$DatabaseHelper: void <init>(android.accounts.AccountManagerService,android.content.Context)>
<android.widget.NumberPicker: float getTopFadingEdgeStrength()>
<GenerationGG: android.media.audiofx.AudioEffect get_androidmediaaudiofxAudioEffect()>
<com.android.internal.telephony.DataCallState: java.lang.String toString()>
<android.view.View: boolean isPressed()>
<android.widget.Filter$RequestArguments: void <init>(android.widget.Filter$1)>
<android.content.pm.PackageParser$Activity: void setPackageName(java.lang.String)>
<com.android.internal.app.AlertController: int access$1100(com.android.internal.app.AlertController)>
<com.android.server.wm.InputManager$2: void <init>(com.android.server.wm.InputManager,android.os.Handler)>
<android.os.HandlerThread: void <init>(java.lang.String,int)>
<com.android.internal.view.InputConnectionWrapper$InputContextCallback: com.android.internal.view.InputConnectionWrapper$InputContextCallback getInstance()>
<android.view.FocusFinder: boolean beamBeats(int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>
<android.renderscript.Matrix4f: void loadOrtho(float,float,float,float,float,float)>
<com.android.server.NotificationPlayer$Command: void <init>()>
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: long computeRunTimeLocked(long)>
<android.animation.AnimatorSet: boolean access$302(android.animation.AnimatorSet,boolean)>
<android.content.SyncResult: void <clinit>()>
<android.content.pm.ManifestDigest: int describeContents()>
<android.view.View$AttachInfo$InvalidateInfo: android.view.View$AttachInfo$InvalidateInfo acquire()>
<android.graphics.Region: boolean nativeGetBoundaryPath(int,int)>
<android.database.CursorWindow: byte[] nativeGetBlob(int,int,int)>
<android.view.ViewTreeObserver: void removeOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)>
<android.webkit.LoadListener: void clearNativeLoader()>
<com.android.internal.telephony.IntRangeManager$IntRange: void <init>(com.android.internal.telephony.IntRangeManager,com.android.internal.telephony.IntRangeManager$ClientRange)>
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedSchemeSpecificPart()>
<android.graphics.Path: void cubicTo(float,float,float,float,float,float)>
<android.app.WallpaperManager$FastBitmapDrawable: void setFilterBitmap(boolean)>
<android.net.wifi.WifiConfiguration$ProxySettings: android.net.wifi.WifiConfiguration$ProxySettings[] values()>
<android.webkit.HTML5VideoFullScreen: int access$902(android.webkit.HTML5VideoFullScreen,int)>
<android.app.backup.BackupDataOutput: int writeEntityData(byte[],int)>
<android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper: boolean isActive()>
<com.android.internal.telephony.cat.CatCmdMessage$1: void <init>()>
<android.preference.Preference: boolean hasSpecifiedLayout()>
<android.view.ViewRootImpl: void setLayoutParams(android.view.WindowManager$LayoutParams,boolean)>
<com.android.internal.app.AlertController: void setCustomTitle(android.view.View)>
<android.drm.DrmManagerClient: android.drm.DrmInfo _acquireDrmInfo(int,android.drm.DrmInfoRequest)>
<com.android.server.ConnectivityService$FeatureUser: java.lang.String toString()>
<android.widget.SlidingDrawer$SlidingHandler: void <init>(android.widget.SlidingDrawer,android.widget.SlidingDrawer$1)>
<android.graphics.Interpolator: void nativeSetRepeatMirror(int,float,boolean)>
<android.graphics.drawable.InsetDrawable$InsetState: int getChangingConfigurations()>
<android.os.Power: int setLastUserActivityTimeout(long)>
<android.app.Activity: java.lang.CharSequence onCreateDescription()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: java.lang.String access$202(com.android.internal.telephony.cdma.CdmaLteUiccRecords,java.lang.String)>
<android.os.storage.StorageManager: int access$300(android.os.storage.StorageManager)>
<android.content.SyncInfo: void <clinit>()>
<Wrapper_android_util_AndroidException: void test_android_util_AndroidException()>
<android.test.MoreAsserts: void assertAssignableFrom(java.lang.Class,java.lang.Class)>
<com.android.internal.telephony.gsm.GsmServiceStateTracker: int regCodeToServiceState(int)>
<android.widget.AlphabetIndexer: int compare(java.lang.String,java.lang.String)>
<android.net.RouteInfo: boolean isDefaultRoute()>
<android.speech.tts.TextToSpeechService: android.speech.tts.AudioPlaybackHandler access$200(android.speech.tts.TextToSpeechService)>
<com.android.server.BackupManagerService: java.lang.String byteArrayToHex(byte[])>
<com.android.internal.os.BatteryStatsImpl$Uid: void noteUserActivityLocked(int)>
<android.content.ContentValues: void <init>(android.content.ContentValues)>
<android.widget.RelativeLayout: void centerHorizontal(android.view.View,android.widget.RelativeLayout$LayoutParams,int)>
<com.android.server.WifiService$LockList: boolean access$2600(com.android.server.WifiService$LockList)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isScrollable()>
<android.location.Address: java.util.Locale getLocale()>
<android.server.BluetoothService: boolean isEnabledInternal()>
<android.view.AbsSavedState: void <init>(android.view.AbsSavedState$1)>
<com.android.server.location.GpsLocationProvider: void setMinTime(long,android.os.WorkSource)>
<android.graphics.Matrix$1: void setSkew(float,float)>
<android.content.ContextWrapper: android.content.Context getBaseContext()>
<android.webkit.WebView: int nativeSelectionX()>
<android.view.ViewRootImpl: void childDrawableStateChanged(android.view.View)>
<android.view.GLES20Canvas: void onPostDraw()>
<android.widget.AbsListView: android.view.ContextMenu$ContextMenuInfo createContextMenuInfo(android.view.View,int,long)>
<android.view.textservice.TextInfo$1: android.view.textservice.TextInfo[] newArray(int)>
<android.webkit.HTML5VideoView: int getDuration()>
<android.util.TypedValue: float complexToFloat(int)>
<android.renderscript.RenderScript: void nAllocationData1D(int,int,int,int,byte[],int)>
<android.net.DhcpInfoInternal: java.lang.String toString()>
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: void <init>(com.android.internal.os.BatteryStatsImpl$Uid,int)>
<com.android.server.MountService$DefaultContainerConnection: void <init>(com.android.server.MountService)>
<android.test.suitebuilder.TestMethod: junit.framework.TestCase instantiateTest(java.lang.Class,java.lang.String)>
<android.view.InputDevice$MotionRange: int access$000(android.view.InputDevice$MotionRange)>
<android.widget.GridLayout: android.widget.GridLayout$LayoutParams generateDefaultLayoutParams()>
<android.app.ContextImpl: android.os.IBinder getActivityToken()>
<android.ddm.DdmHandleNativeHeap: void <init>()>
<android.os.IMessenger$Stub: android.os.IMessenger asInterface(android.os.IBinder)>
<android.view.ViewRootImpl$TakenSurfaceHolder: void setFixedSize(int,int)>
<android.content.SyncStats$1: void <init>()>
<android.app.FragmentManagerImpl: void dispatchConfigurationChanged(android.content.res.Configuration)>
<android.util.TypedValue: float complexToFraction(int,float,float)>
<android.view.ViewRootImpl$3: void addCallback(android.view.SurfaceHolder$Callback)>
<android.graphics.Path: void offset(float,float)>
<android.filterfw.core.CachedFrameManager: android.filterfw.core.Frame releaseFrame(android.filterfw.core.Frame)>
<android.widget.RemoteViewsAdapter$RemoteViewsMetaData: int getMappedViewType(int)>
<GenerationGG: android.gesture.GesturePoint get_androidgestureGesturePoint()>
<com.android.internal.util.ArrayUtils: int idealFloatArraySize(int)>
<android.view.View: void setId(int)>
<android.widget.SlidingDrawer: android.view.View getContent()>
<android.os.StrictMode: void executeDeathPenalty(android.os.StrictMode$ViolationInfo)>
<android.widget.ViewFlipper: boolean isFlipping()>
<com.android.internal.util.AsyncChannel$SyncMessenger$SyncHandler: void <init>(com.android.internal.util.AsyncChannel$SyncMessenger,android.os.Looper,com.android.internal.util.AsyncChannel$1)>
<android.widget.HorizontalScrollView: void setSmoothScrollingEnabled(boolean)>
<com.android.server.TextServicesManagerService$InternalDeathRecipient: com.android.server.TextServicesManagerService$SpellCheckerBindGroup access$900(com.android.server.TextServicesManagerService$InternalDeathRecipient)>
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: void setStale()>
<android.widget.TextView$InsertionHandleView: int getCurrentCursorOffset()>
<android.speech.tts.AudioPlaybackHandler: void removeAllMessages()>
<android.view.animation.BounceInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.content.res.ColorStateList$1: android.content.res.ColorStateList createFromParcel(android.os.Parcel)>
<android.view.ViewRootImpl$InputMethodCallback: void sessionCreated(com.android.internal.view.IInputMethodSession)>
<android.webkit.WebView: int nativeScrollableLayer(int,int,android.graphics.Rect,android.graphics.Rect)>
<android.view.InputEventConsistencyVerifier: boolean startEvent(android.view.InputEvent,int,java.lang.String)>
<android.media.AudioService: java.lang.String[] access$4100()>
<android.widget.AbsListView: float getBottomFadingEdgeStrength()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: java.lang.String access$1302(com.android.internal.telephony.cdma.CdmaLteUiccRecords,java.lang.String)>
<android.net.Uri$OpaqueUri: java.lang.String toString()>
<android.text.SpannableString: int nextSpanTransition(int,int,java.lang.Class)>
<android.view.InputDevice$MotionRange: float access$500(android.view.InputDevice$MotionRange)>
<com.android.internal.telephony.gsm.SimSmsInterfaceManager$CellBroadcastRangeManager: void addRange(int,int,boolean)>
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean disableCellBroadcast(int)>
<android.widget.AdapterViewAnimator: void initViewAnimator()>
<android.renderscript.Allocation: void copyFrom(byte[])>
<Wrapper_android_webkit_URLUtil: void test_android_webkit_URLUtil()>
<com.android.internal.telephony.gsm.SIMRecords$Get_Spn_Fsm_State: void <init>(java.lang.String,int)>
<android.appwidget.AppWidgetProviderInfo$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.util.JsonReader: void checkLenient()>
<android.test.suitebuilder.TestSuiteBuilder: android.test.suitebuilder.TestSuiteBuilder excludePackages(java.lang.String[])>
<com.android.internal.os.BatteryStatsImpl: void noteFullWifiLockAcquiredFromSourceLocked(android.os.WorkSource)>
<android.content.BroadcastReceiver$PendingResult: void <init>(int,java.lang.String,android.os.Bundle,int,boolean,boolean,android.os.IBinder)>
<com.android.server.usb.UsbSettingsManager: void clearDefaults(java.lang.String)>
<android.view.ViewPropertyAnimator$NameValuesHolder: void <init>(int,float,float)>
<android.graphics.RegionIterator: void finalize()>
<android.renderscript.Type: android.renderscript.Element getElement()>
<android.content.pm.PackageManager: void <init>()>
<GenerationGG: android.app.Instrumentation$ActivityMonitor get_androidappInstrumentation__ActivityMonitor()>
<android.os.StrictMode: void incrementExpectedActivityCount(java.lang.Class)>
<android.app.FragmentManagerImpl: int transitToStyleIndex(int,boolean)>
<android.widget.ZoomButtonsController: boolean isAutoDismissed()>
<android.webkit.WebResourceResponse: void <init>(java.lang.String,java.lang.String,java.io.InputStream)>
<android.test.mock.MockPackageManager: java.lang.String[] currentToCanonicalPackageNames(java.lang.String[])>
<android.net.sip.SimpleSessionDescription$Media: void <init>(java.lang.String,int,int,java.lang.String,android.net.sip.SimpleSessionDescription$1)>
<android.net.WebAddress: java.lang.String toString()>
<android.bluetooth.BluetoothSocket: java.io.InputStream getInputStream()>
<android.view.accessibility.AccessibilityNodeInfo: void setSelected(boolean)>
<android.webkit.ZoomManager: float getDefaultScale()>
<android.drm.DrmInfoEvent: void <init>(int,int,java.lang.String,java.util.HashMap)>
<com.android.server.PackageManagerBackupAgent$Metadata: void <init>(com.android.server.PackageManagerBackupAgent,int,android.content.pm.Signature[])>
<android.renderscript.Element: android.renderscript.Element RGB_565(android.renderscript.RenderScript)>
<android.renderscript.AllocationAdapter: void setLOD(int)>
<android.webkit.PluginFullScreenHolder: void hide()>
<android.location.Address: java.lang.String getAdminArea()>
<android.webkit.WebTextView: android.webkit.WebView access$000(android.webkit.WebTextView)>
<android.widget.VideoView: int access$1100(android.widget.VideoView)>
<android.content.pm.ServiceInfo: void <init>()>
<com.android.internal.view.menu.MenuPopupHelper: void initForMenu(android.content.Context,com.android.internal.view.menu.MenuBuilder)>
<android.test.InstrumentationTestRunner: java.lang.ClassLoader getLoader()>
<com.android.server.LocationManagerService$ProximityListener: void onProviderEnabled(java.lang.String)>
<android.view.GLES20Canvas: void nSetupShadow(int,float,float,float,int)>
<com.android.server.am.ActivityStack$ActivityState: void <init>(java.lang.String,int)>
<android.telephony.ServiceState: void copyFrom(android.telephony.ServiceState)>
<android.hardware.SensorManager$ListenerDelegate$1: void <init>(android.hardware.SensorManager$ListenerDelegate,android.os.Looper,android.hardware.SensorManager)>
<android.media.audiofx.EnvironmentalReverb: short getDensity()>
<android.app.ActivityManager$MemoryInfo: void writeToParcel(android.os.Parcel,int)>
<com.android.server.pm.Settings: void <init>()>
<android.drm.DrmManagerClient: android.content.ContentValues getMetadata(java.lang.String)>
<GenerationGG: android.widget.DatePicker$OnDateChangedListener get_androidwidgetDatePicker__OnDateChangedListener()>
<GenerationGG: android.graphics.drawable.shapes.ArcShape get_androidgraphicsdrawableshapesArcShape()>
<GenerationGG: android.bluetooth.BluetoothDevice get_androidbluetoothBluetoothDevice()>
<android.renderscript.RenderScript: void rsnAllocationRead(int,int,byte[])>
<android.preference.Preference$BaseSavedState: void <clinit>()>
<com.android.server.AlarmManagerService: int access$000(com.android.server.AlarmManagerService)>
<com.android.server.pm.PackageManagerService: com.android.server.pm.BasePermission findPermissionTreeLP(java.lang.String)>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: void writeToParcelLocked(android.os.Parcel)>
<android.webkit.WebView: int nativeCacheHitFramePointer()>
<android.content.Intent$1: android.content.Intent[] newArray(int)>
<com.android.server.sip.SipService: com.android.server.sip.SipWakeLock access$400(com.android.server.sip.SipService)>
<android.webkit.WebViewCore: java.lang.String nativeRetrieveAnchorText(int,int)>
<android.test.IsolatedContext: void unregisterReceiver(android.content.BroadcastReceiver)>
<android.accounts.AccountManagerResponse: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.WifiConfigStore$1: void <clinit>()>
<android.location.LocationManager$GpsStatusListenerTransport: void onNmeaReceived(long,java.lang.String)>
<android.view.KeyEvent: android.view.KeyEvent obtain(android.view.KeyEvent)>
<android.text.Annotation: java.lang.String getValue()>
<android.app.LoadedApk$ReceiverDispatcher: void <init>(android.content.BroadcastReceiver,android.content.Context,android.os.Handler,android.app.Instrumentation,boolean)>
<android.graphics.drawable.Drawable: boolean isVisible()>
<android.app.ApplicationErrorReport: void <clinit>()>
<android.filterfw.core.FilterPort: void close()>
<android.webkit.WebStorage: void nativeSetQuotaForOrigin(java.lang.String,long)>
<android.media.AudioService$VolumeStreamState$VolumeDeathHandler: android.os.IBinder access$3400(android.media.AudioService$VolumeStreamState$VolumeDeathHandler)>
<com.android.internal.os.ProcessStats: int countWorkingStats()>
<android.widget.VideoView: boolean canSeekBackward()>
<com.android.internal.telephony.DataConnection: int access$000(com.android.internal.telephony.DataConnection)>
<android.net.wifi.p2p.WifiP2pService: android.net.NetworkInfo access$3900(android.net.wifi.p2p.WifiP2pService)>
<android.net.LinkAddress: int getNetworkPrefixLength()>
<android.text.Layout: boolean primaryIsTrailingPrevious(int)>
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,java.lang.String,boolean)>
<android.graphics.drawable.AnimatedRotateDrawable$AnimatedRotateState: int getChangingConfigurations()>
<java.lang.Object: boolean getWantsAllOnMoveCalls()>
<com.android.server.wm.StrictModeFlash: void drawIfNeeded()>
<android.renderscript.RenderScript: void nDeviceDestroy(int)>
<android.text.method.Touch: int getInitialScrollX(android.widget.TextView,android.text.Spannable)>
<com.android.internal.telephony.BaseCommands: void unregisterForNVReady(android.os.Handler)>
<android.hardware.SensorManager$LegacyListener: void <init>(android.hardware.SensorManager,android.hardware.SensorListener)>
<android.media.MediaPlayer: void _setDataSource(java.lang.String,java.lang.String[],java.lang.String[])>
<android.media.AudioService: java.lang.String access$5902(android.media.AudioService,java.lang.String)>
<com.android.server.pm.PackageSetting: java.lang.String toString()>
<com.android.internal.view.menu.MenuPopupHelper$ExpandedIndexObserver: void <init>(com.android.internal.view.menu.MenuPopupHelper)>
<android.graphics.Matrix$1: boolean preSkew(float,float,float,float)>
<Wrapper_android_sax_RootElement: void test_android_sax_RootElement()>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccCard getIccCard()>
<android.webkit.WebView: boolean nativeMoveCursorToNextTextInput()>
<android.os.Binder: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.io.File)>
<android.view.ViewTreeObserver: void merge(android.view.ViewTreeObserver)>
<android.graphics.drawable.GradientDrawable$GradientState: int getChangingConfigurations()>
<com.android.internal.telephony.DataConnectionTracker$State: void <init>(java.lang.String,int)>
<com.android.internal.telephony.RestrictedState: void setCsEmergencyRestricted(boolean)>
<android.widget.DatePicker$SavedState: void <init>(android.os.Parcelable,int,int,int)>
<android.webkit.WebChromeClient: void onHideCustomView()>
<android.renderscript.FieldPacker: void addU16(android.renderscript.Int2)>
<com.android.internal.os.BatteryStatsImpl: void notePhoneSignalStrengthLocked(android.telephony.SignalStrength)>
<android.content.res.Configuration: void <init>(android.os.Parcel)>
<android.text.method.DateKeyListener: void <init>()>
<com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaRedirectingNumberInfoRec: java.lang.String toString()>
<android.speech.RecognitionService: android.os.Handler access$600(android.speech.RecognitionService)>
<com.android.server.PowerManagerService: int access$200(com.android.server.PowerManagerService)>
<Wrapper_android_net_http_AndroidHttpClient: void test_android_net_http_AndroidHttpClient()>
<android.widget.TableRow: android.view.View getVirtualChildAt(int)>
<android.view.IWindow$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.server.NativeDaemonConnector: void sendCommandLocked(java.lang.String)>
<android.graphics.drawable.LayerDrawable: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
<com.android.server.net.NetworkStatsService$4: void <init>(com.android.server.net.NetworkStatsService)>
<android.webkit.WebView: android.webkit.WebViewCore$CursorData cursorDataNoPosition()>
<android.net.MobileDataStateTracker$MdstHandler: void handleMessage(android.os.Message)>
<android.gesture.GestureLibrary: boolean isReadOnly()>
<android.location.CountryDetector$ListenerTransport$1: void <init>(android.location.CountryDetector$ListenerTransport,android.location.Country)>
<android.renderscript.Allocation: void copy1DRangeFrom(int,int,byte[])>
<android.net.TrafficStats: long getRxPackets(java.lang.String)>
<android.webkit.WebSettings: void setDomStorageEnabled(boolean)>
<android.net.wifi.IWifiManager$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.internal.os.BinderInternal: long getLastGcTime()>
<com.android.internal.widget.IRemoteViewsAdapterConnection$Stub: com.android.internal.widget.IRemoteViewsAdapterConnection asInterface(android.os.IBinder)>
<android.webkit.WebView: void nativeHideCursor()>
<android.renderscript.FieldPacker: void addBoolean(boolean)>
<com.android.internal.util.TypedProperties: void <clinit>()>
<android.webkit.LoadListener: void sendMessageInternal(android.os.Message)>
<Wrapper_android_test_suitebuilder_TestMethod: void test_android_test_suitebuilder_TestMethod()>
<android.location.IGpsStatusListener$Stub$Proxy: void <init>(android.os.IBinder)>
<android.opengl.ETC1Util: void <init>()>
<android.graphics.Matrix: void native_set(int,int)>
<com.android.server.BackupManagerService$RunInitializeReceiver: void <init>(com.android.server.BackupManagerService,com.android.server.BackupManagerService$1)>
<android.content.res.CompatibilityInfo$Translator: void translatePointInScreenToAppWindow(android.graphics.PointF)>
<android.widget.RadioGroup: int access$400(android.widget.RadioGroup)>
<GenerationGG: android.test.InstrumentationTestSuite get_androidtestInstrumentationTestSuite()>
<android.hardware.usb.UsbAccessory$1: android.hardware.usb.UsbAccessory createFromParcel(android.os.Parcel)>
<android.webkit.ZoomManager: float access$402(android.webkit.ZoomManager,float)>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: void addExcessiveCpu(long,long)>
<android.graphics.RegionIterator: void <init>(android.graphics.Region)>
<android.server.BluetoothAdapterStateMachine: void access$6500(android.server.BluetoothAdapterStateMachine,com.android.internal.util.IState)>
<android.webkit.WebSettings$TextSize: void <init>(java.lang.String,int,int)>
<java.lang.Object: void removeGroup(int)>
<android.widget.Scroller: int getCurrY()>
<android.widget.TextView: boolean access$7702(android.widget.TextView,boolean)>
<android.widget.GridLayout: boolean getUseDefaultMargins()>
<com.android.internal.view.menu.MenuPopupHelper: void onViewDetachedFromWindow(android.view.View)>
<android.graphics.Path: void native_addPath(int,int,int)>
<android.widget.TextView$InsertionPointCursorController: void <init>(android.widget.TextView,android.widget.TextView$1)>
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getPreferredDomesticCarrierCode()>
<android.mtp.MtpObjectInfo: java.lang.String getName()>
<android.test.mock.MockPackageManager: java.lang.String[] getPackagesForUid(int)>
<com.android.internal.os.BinderInternal: void forceGc(java.lang.String)>
<android.view.MotionEvent: int getDeviceId()>
<android.graphics.Matrix: boolean native_postRotate(int,float)>
<com.android.internal.policy.PolicyManager: android.view.WindowManagerPolicy makeNewWindowManager()>
<android.media.AudioTrack: int native_get_marker_pos()>
<android.net.wifi.WifiStateMachine: void access$900(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.os.storage.StorageManager$ListenerDelegate: void sendShareAvailabilityChanged(boolean)>
<android.graphics.Paint: float getFontSpacing()>
<android.widget.TextView: int getPaintFlags()>
<android.provider.MediaStore: android.net.Uri getMediaScannerUri()>
<android.webkit.WebView$HitTestResult: int getType()>
<android.location.Location: void setAccuracy(float)>
<android.media.audiofx.AudioEffect: byte[] shortToByteArray(short)>
<com.android.internal.util.AsyncChannel: void replyDisconnected(int)>
<android.media.AudioService: boolean shouldVibrate(int)>
<android.app.BackStackRecord: android.app.FragmentTransaction hide(android.app.Fragment)>
<GenerationGG: android.widget.RadioGroup$OnCheckedChangeListener get_androidwidgetRadioGroup__OnCheckedChangeListener()>
<com.android.server.NotificationManagerService$ToastRecord: void dump(java.io.PrintWriter,java.lang.String)>
<junit.framework.TestCase: int countTestCases()>
<android.widget.RemoteViews: void setLong(int,java.lang.String,long)>
<android.app.Notification$Builder: android.app.Notification$Builder setDefaults(int)>
<android.net.wifi.WifiStateMachine: void setScanResults(java.lang.String)>
<android.os.MemoryFile$MemoryOutputStream: void write(int)>
<android.view.animation.Animation: long getDuration()>
<android.graphics.drawable.AnimatedRotateDrawable: boolean getPadding(android.graphics.Rect)>
<android.webkit.WebView$InvokeListBox$Container: java.lang.String toString()>
<android.webkit.AccessibilityInjector$AccessibilityWebContentKeyBinding: int getModifiers()>
<android.view.HardwareRenderer$Gl20Renderer: void destroy(boolean)>
<android.server.BluetoothBondState: void copyAutoPairingData()>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMessage(java.lang.CharSequence)>
<GenerationGG: android.text.Layout get_androidtextLayout()>
<android.service.wallpaper.IWallpaperEngine$Stub: android.service.wallpaper.IWallpaperEngine asInterface(android.os.IBinder)>
<android.widget.ExpandableListPosition: void <init>()>
<android.net.http.HttpsConnection: javax.net.ssl.SSLSocketFactory getSocketFactory()>
<android.view.View: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)>
<android.view.KeyEvent: long getEventTime()>
<android.os.Parcel: void writeFileDescriptor(java.io.FileDescriptor)>
<android.webkit.WebViewCore: void webkitDraw()>
<com.android.internal.widget.ActionBarView: android.widget.LinearLayout access$800(com.android.internal.widget.ActionBarView)>
<android.util.SparseIntArray: void removeAt(int)>
<GenerationGG: android.text.method.DialerKeyListener get_androidtextmethodDialerKeyListener()>
<android.app.ActivityThread$ApplicationThread: void scheduleCreateBackupAgent(android.content.pm.ApplicationInfo,android.content.res.CompatibilityInfo,int)>
<android.widget.AbsListView$WindowRunnnable: void rememberWindowAttachCount()>
<android.renderscript.FieldPacker: void addF32(android.renderscript.Float3)>
<android.animation.LayoutTransition: long access$600(android.animation.LayoutTransition)>
<com.android.internal.view.menu.ActionMenuItem: android.view.SubMenu getSubMenu()>
<GenerationGG: android.graphics.RegionIterator get_androidgraphicsRegionIterator()>
<android.widget.GridView: void adjustViewsUpOrDown()>
<android.webkit.WebSettings: boolean getLoadsImagesAutomatically()>
<android.view.textservice.SpellCheckerSession: android.view.textservice.SpellCheckerSession$SpellCheckerSessionListenerImpl access$300(android.view.textservice.SpellCheckerSession)>
<GenerationGG: android.graphics.Paint$Cap get_androidgraphicsPaint__Cap()>
<android.content.pm.ManifestDigest: void <clinit>()>
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void enter()>
<com.android.internal.telephony.SMSDispatcher: int getNextConcatenatedRef()>
<com.android.internal.statusbar.StatusBarIconList$1: java.lang.Object[] newArray(int)>
<android.util.ReflectiveProperty: boolean isReadOnly()>
<android.widget.TextView: boolean isTextEditable()>
<android.server.BluetoothService$Reaper: void <init>(android.server.BluetoothService,int,int,int)>
<android.util.Log: int w(java.lang.String,java.lang.Throwable)>
<android.accounts.AuthenticatorException: void <init>(java.lang.Throwable)>
<android.view.KeyEvent: boolean isGamepadButton(int)>
<android.app.Activity: void setProgress(int)>
<android.widget.StackView$LayoutParams: void resetInvalidateRect()>
<android.view.DragEvent$1: java.lang.Object[] newArray(int)>
<android.widget.ActivityChooserView: android.content.Context access$1400(android.widget.ActivityChooserView)>
<GenerationGG: android.util.EventLog get_androidutilEventLog()>
<android.location.IGeocodeProvider$Stub: android.location.IGeocodeProvider asInterface(android.os.IBinder)>
<android.graphics.Picture: void draw(android.graphics.Canvas)>
<android.webkit.GeolocationPermissions: void postMessage(android.os.Message)>
<com.android.server.StatusBarManagerService: void setNotificationCallbacks(com.android.server.StatusBarManagerService$NotificationCallbacks)>
<GenerationGG: android.app.Service get_androidappService()>
<com.android.server.pm.PackageManagerService: boolean access$1100(java.lang.String)>
<android.graphics.Bitmap: int getDefaultDensity()>
<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region,android.graphics.Region$Op)>
<android.app.IBackupAgent$Stub: android.app.IBackupAgent asInterface(android.os.IBinder)>
<android.net.LocalSocketImpl$SocketOutputStream: void <init>(android.net.LocalSocketImpl)>
<com.android.internal.net.DomainNameValidator: boolean domainTokenMatch(java.lang.String,java.lang.String)>
<com.android.server.connectivity.Tethering$TetherInterfaceSM$StartingState: void <init>(com.android.server.connectivity.Tethering$TetherInterfaceSM)>
<android.hardware.GeomagneticField$LegendreTable: void <init>(int,float)>
<android.net.sip.SipAudioCall$1: void <init>(android.net.sip.SipAudioCall)>
<com.android.internal.telephony.gsm.GsmCallTracker: void finalize()>
<android.util.TypedValue: java.lang.String coerceToString(int,int)>
<android.os.Registrant: void <init>(android.os.Handler,int,java.lang.Object)>
<android.content.IntentSender: void writeToParcel(android.os.Parcel,int)>
<com.android.server.am.ActivityManagerService: void broadcastTimeoutLocked(boolean)>
<com.android.server.pm.PackageManagerService$13: void <init>(com.android.server.pm.PackageManagerService,int,com.android.server.pm.PackageManagerService$MoveParams)>
<com.android.server.net.NetworkPolicyManagerService: android.os.RemoteCallbackList access$1300(com.android.server.net.NetworkPolicyManagerService)>
<android.gesture.GestureStore: void load(java.io.InputStream,boolean)>
<android.os.MemoryFile$MemoryInputStream: void <init>(android.os.MemoryFile)>
<android.webkit.WebViewWorker$CacheEncoding: void <init>()>
<GenerationGG: android.util.PrintStreamPrinter get_androidutilPrintStreamPrinter()>
<com.android.server.MountService$1: void <init>(com.android.server.MountService)>
<com.android.internal.telephony.OperatorInfo$1: com.android.internal.telephony.OperatorInfo[] newArray(int)>
<GenerationGG: android.drm.DrmManagerClient$OnEventListener get_androiddrmDrmManagerClient__OnEventListener()>
<android.app.Dialog: void takeKeyEvents(boolean)>
<android.app.SearchDialog$1: void <init>(android.app.SearchDialog)>
<android.content.SyncStats: void <clinit>()>
<android.net.INetworkManagementEventObserver$Stub: android.os.IBinder asBinder()>
<android.view.KeyEvent$DispatcherState: void <init>()>
<android.app.ActivityManager$RunningAppProcessInfo$1: void <init>()>
<android.content.ContentProviderOperation$1: android.content.ContentProviderOperation[] newArray(int)>
<android.net.NetworkIdentity: java.lang.String scrubSubscriberId(java.lang.String)>
<android.renderscript.RenderScript: void rsnContextSetSurface(int,int,int,android.view.Surface)>
<com.android.server.LocationManagerService: java.lang.Object access$300(com.android.server.LocationManagerService)>
<android.widget.TextView: android.content.Context access$1900(android.widget.TextView)>
<com.android.server.accessibility.TouchExplorer$PointerTracker: int getNotInjectedActivePointerCount()>
<android.widget.OverScroller$SplineOverScroller: boolean access$002(android.widget.OverScroller$SplineOverScroller,boolean)>
<android.accounts.AccountAuthenticatorCache$MySerializer: void <init>()>
<GenerationGG: java.lang.Double get_javalangDouble()>
<android.graphics.Matrix: void native_setSkew(int,float,float)>
<android.app.Activity: boolean onPrepareOptionsMenu(android.view.Menu)>
<android.os.Messenger: void writeToParcel(android.os.Parcel,int)>
<android.os.Bundle: void <init>(android.os.Parcel,int)>
<android.graphics.SweepGradient: int nativeCreate2(float,float,int,int)>
<android.view.accessibility.AccessibilityNodeInfo: void setContentDescription(java.lang.CharSequence)>
<android.webkit.ZoomControlEmbedded: boolean isVisible()>
<com.android.internal.telephony.IccCardStatus: int getNumApplications()>
<android.test.IsolatedContext: boolean bindService(android.content.Intent,android.content.ServiceConnection,int)>
<android.media.ExifInterface: void <init>(java.lang.String)>
<android.content.res.ObbInfo: int describeContents()>
<android.appwidget.AppWidgetProviderInfo$1: android.appwidget.AppWidgetProviderInfo[] newArray(int)>
<android.webkit.WebBackForwardList: int getCurrentIndex()>
<com.android.internal.telephony.BaseCommands: void unSetOnCatCallSetUp(android.os.Handler)>
<android.os.StrictMode$AndroidCloseGuardReporter: void <init>(android.os.StrictMode$1)>
<android.net.wifi.p2p.WifiP2pDeviceList: java.lang.String toString()>
<android.graphics.ColorMatrix: void <init>(android.graphics.ColorMatrix)>
<android.view.ViewDebug: void stopHierarchyTracing()>
<com.android.server.ConnectivityService: android.content.Context access$300(com.android.server.ConnectivityService)>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$RecoveryAction: void <clinit>()>
<android.widget.AdapterView: void onLayout(boolean,int,int,int,int)>
<com.android.internal.widget.ActionBarView: boolean isSplitActionBar()>
<android.text.util.Linkify$3: java.lang.String transformUrl(java.util.regex.Matcher,java.lang.String)>
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorListener,int)>
<android.net.http.HttpResponseCache: int getNetworkCount()>
<android.app.FragmentState$1: void <init>()>
<android.os.DropBoxManager$Entry: java.lang.String getText(int)>
<android.view.animation.Animation: android.view.animation.Interpolator getInterpolator()>
<android.view.View: android.view.IWindowSession getWindowSession()>
<android.content.IntentSender: android.content.IntentSender readIntentSenderOrNullFromParcel(android.os.Parcel)>
<android.net.wifi.p2p.WifiP2pService: com.android.internal.util.AsyncChannel access$7900(android.net.wifi.p2p.WifiP2pService)>
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setActionView(android.view.View)>
<android.net.EthernetDataTracker$InterfaceObserver: void interfaceStatusChanged(java.lang.String,boolean)>
<Wrapper_android_app_backup_BackupDataOutput: void test_android_app_backup_BackupDataOutput()>
<android.webkit.DeviceOrientationService: void maybeSendChange(double,double,double)>
<android.os.Registrant: android.os.Message messageForRegistrant()>
<android.media.JetPlayer: boolean native_pauseJet()>
<com.android.server.MountService: boolean getUmsEnabling()>
<android.content.ContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>
<android.view.View: void onDisplayHint(int)>
<android.widget.AbsSpinner: void requestLayout()>
<android.renderscript.Element: android.renderscript.Element F64_3(android.renderscript.RenderScript)>
<android.text.style.IconMarginSpan: void <init>(android.graphics.Bitmap,int)>
<android.view.GLES20Canvas: int setupColorFilter(android.graphics.Paint)>
<com.android.server.BackupManagerService: int generateToken()>
<com.android.internal.view.menu.BaseMenuPresenter: void initForMenu(android.content.Context,com.android.internal.view.menu.MenuBuilder)>
<android.database.CursorWindowAllocationException: void <init>(java.lang.String)>
<android.view.GLES20Canvas: void translate(float,float)>
<android.net.sip.SimpleSessionDescription$Fields: void access$200(android.net.sip.SimpleSessionDescription$Fields,java.lang.StringBuilder)>
<android.hardware.Camera: android.hardware.Camera$FaceDetectionListener access$1000(android.hardware.Camera)>
<android.content.IIntentSender$Stub$Proxy: void <init>(android.os.IBinder)>
<android.graphics.Path: int native_getFillType(int)>
<android.app.ProgressDialog: int getSecondaryProgress()>
<android.content.ISyncAdapter$Stub: android.content.ISyncAdapter asInterface(android.os.IBinder)>
<com.android.server.EntropyService: void loadInitialEntropy()>
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOff()>
<com.android.internal.telephony.gsm.GsmSMSDispatcher$SmsCbConcatInfo: int hashCode()>
<android.content.pm.PathPermission: java.lang.String getWritePermission()>
<android.widget.MultiAutoCompleteTextView$CommaTokenizer: int findTokenEnd(java.lang.CharSequence,int)>
<android.util.JsonWriter: android.util.JsonWriter nullValue()>
<android.view.inputmethod.CompletionInfo: java.lang.CharSequence getLabel()>
<android.app.DownloadManager$Request: void <clinit>()>
<android.renderscript.Element: android.renderscript.Element U64_3(android.renderscript.RenderScript)>
<android.gesture.GestureOverlayView: void cancelGesture()>
<com.android.internal.statusbar.StatusBarIcon: void <init>(java.lang.String,int,int,int,java.lang.CharSequence)>
<android.text.style.BackgroundColorSpan: void updateDrawState(android.text.TextPaint)>
<android.graphics.Picture: int nativeCreateFromStream(java.io.InputStream,byte[])>
<android.inputmethodservice.InputMethodService$1: void onComputeInternalInsets(android.view.ViewTreeObserver$InternalInsetsInfo)>
<android.location.GpsStatus: void <init>()>
<android.media.audiofx.AudioEffect: void native_finalize()>
<android.renderscript.Element: android.renderscript.Element PROGRAM_RASTER(android.renderscript.RenderScript)>
<android.widget.TextView$TextAlign: void <init>(java.lang.String,int)>
<android.media.AudioService$RcDisplayDeathHandler: void <init>(android.media.AudioService,android.os.IBinder)>
<android.os.RemoteCallback$1: void <init>()>
<com.android.server.IntentResolver: boolean isFilterStopped(android.content.IntentFilter)>
<android.os.Debug: void resetGlobalClassInitTime()>
<android.widget.SlidingDrawer: boolean isMoving()>
<com.android.internal.telephony.sip.SipPhone: java.lang.String getPhoneName()>
<android.view.MenuInflater$MenuState: void <init>(android.view.MenuInflater,android.view.Menu)>
<android.text.util.Linkify: void <init>()>
<com.android.internal.location.DummyLocationProvider: boolean supportsAltitude()>
<com.android.server.pm.BasePermission: void <init>(java.lang.String,java.lang.String,int)>
<android.bluetooth.BluetoothUuid: void <clinit>()>
<android.webkit.WebView: boolean nativeCursorWantsKeyEvents()>
<android.view.MotionEvent: long getHistoricalEventTime(int)>
<android.graphics.Point: void <init>(int,int)>
<com.android.internal.textservice.ITextServicesSessionListener$Stub$Proxy: void <init>(android.os.IBinder)>
<android.graphics.Matrix: void mapVectors(float[])>
<android.app.Dialog: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
<android.view.Surface$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.cdma.CdmaCall: void connectionDisconnected(com.android.internal.telephony.cdma.CdmaConnection)>
<com.android.server.accessibility.AccessibilityManagerService: boolean tryRemoveServiceLocked(com.android.server.accessibility.AccessibilityManagerService$Service)>
<android.view.View: float getScaleY()>
<android.media.audiofx.EnvironmentalReverb: void <init>(int,int)>
<android.accounts.IAccountAuthenticatorResponse$Stub: android.accounts.IAccountAuthenticatorResponse asInterface(android.os.IBinder)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setPager(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<android.test.mock.MockContext: void revokeUriPermission(android.net.Uri,int)>
<android.renderscript.Matrix2f: void loadRotate(float)>
<GenerationGG: android.app.LoaderManager$LoaderCallbacks get_androidappLoaderManager__LoaderCallbacks()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void setConstantSize(boolean)>
<android.net.http.HttpResponseCache: java.net.CacheResponse get(java.net.URI,java.lang.String,java.util.Map)>
<android.app.Application: void dispatchActivitySaveInstanceState(android.app.Activity,android.os.Bundle)>
<android.view.animation.AnticipateOvershootInterpolator: void <init>(float,float)>
<android.media.audiofx.AudioEffect: android.media.audiofx.AudioEffect$Descriptor[] queryEffects()>
<android.webkit.WebViewClient: void onUnhandledKeyEvent(android.webkit.WebView,android.view.KeyEvent)>
<com.android.server.DevicePolicyManagerService$ActiveAdmin: void writeToXml(org.xmlpull.v1.XmlSerializer)>
<android.text.style.RelativeSizeSpan: void <init>(android.os.Parcel)>
<android.content.PeriodicSync: int describeContents()>
<com.android.internal.telephony.IccUtils: java.lang.String bytesToHexString(byte[])>
<android.app.IUiModeManager$Stub$Proxy: void <init>(android.os.IBinder)>
<android.app.ActivityManager$RunningTaskInfo: void <clinit>()>
<android.os.Looper: android.os.Looper myLooper()>
<GenerationGG: android.database.sqlite.SQLiteTransactionListener get_androiddatabasesqliteSQLiteTransactionListener()>
<android.view.accessibility.IAccessibilityManager$Stub: void <init>()>
<android.view.InputEventConsistencyVerifier: void addKeyState(int,int,int)>
<android.text.method.MetaKeyKeyListener: void <clinit>()>
<com.android.internal.telephony.BaseCommands: void registerForCallWaitingInfo(android.os.Handler,int,java.lang.Object)>
<android.os.Build: java.lang.String getRadioVersion()>
<android.app.ActivityThread$ApplicationThread: void requestThumbnail(android.os.IBinder)>
<android.graphics.Bitmap: void setNinePatchChunk(byte[])>
<android.graphics.drawable.PictureDrawable: void <init>(android.graphics.Picture)>
<android.text.Selection: int getSelectionStart(java.lang.CharSequence)>
<com.android.internal.telephony.cdma.sms.BearerData: void encodeMsgStatus(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)>
<com.android.server.ThrottleService: long access$1400(com.android.server.ThrottleService)>
<android.net.LocalSocketImpl$SocketInputStream: int read(byte[])>
<android.webkit.WebView: boolean nativeWordSelection(int,int)>
<android.test.suitebuilder.TestMethod: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>
<com.android.internal.textservice.ITextServicesSessionListener$Stub: android.os.IBinder asBinder()>
<android.app.Fragment: boolean isRemoving()>
<android.test.mock.MockResources: java.lang.CharSequence getText(int,java.lang.CharSequence)>
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: void loge(java.lang.String)>
<android.webkit.WebView: int access$4200(android.webkit.WebView)>
<Wrapper_android_speech_tts_SynthesisRequest: void test_android_speech_tts_SynthesisRequest()>
<android.widget.ScrollView: void requestLayout()>
<android.test.mock.MockPackageManager: java.lang.String[] getSystemSharedLibraryNames()>
<android.renderscript.ProgramStore: android.renderscript.ProgramStore BLEND_ALPHA_DEPTH_TEST(android.renderscript.RenderScript)>
<android.os.FileObserver: void <init>(java.lang.String,int)>
<android.gesture.GestureUtils: float[] scale(float[],float,float)>
<android.renderscript.FileA3D: android.renderscript.FileA3D createFromFile(android.renderscript.RenderScript,java.lang.String)>
<android.inputmethodservice.Keyboard$Key: void onPressed()>
<com.android.internal.telephony.gsm.GsmCall: java.util.List getConnections()>
<android.graphics.Interpolator: void setKeyFrame(int,int,float[],float[])>
<android.renderscript.RenderScript: void nAllocationGenerateMipmaps(int)>
<android.widget.OverScroller$SplineOverScroller: void updateScroll(float)>
<android.location.Address: java.lang.String getPostalCode()>
<android.widget.HorizontalScrollView: void requestLayout()>
<android.text.method.BaseMovementMethod: int getMovementMetaState(android.text.Spannable,android.view.KeyEvent)>
<android.renderscript.Script: void setVar(int,float)>
<android.bluetooth.BluetoothDeviceProfileState: void access$11000(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.IState)>
<android.widget.TabHost: android.view.View getCurrentView()>
<com.android.server.am.ActivityManagerService: int checkUriPermission(android.net.Uri,int,int,int)>
<android.content.pm.ConfigurationInfo$1: void <init>()>
<android.os.IMessenger$Stub: void <init>()>
<android.database.sqlite.SQLiteDatabase: void setLockingEnabled(boolean)>
<android.net.wifi.WifiStateMachine$WaitForP2pDisableState: void enter()>
<android.telephony.gsm.SmsMessage: boolean isCphsMwiMessage()>
<android.test.mock.MockContentProvider$InversionIContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getDeviceId()>
<android.view.ViewGroup: android.view.animation.LayoutAnimationController getLayoutAnimation()>
<Wrapper_android_graphics_RadialGradient: void test_android_graphics_RadialGradient()>
<com.android.internal.app.IBatteryStats$Stub$Proxy: void <init>(android.os.IBinder)>
<android.graphics.drawable.ShapeDrawable$ShapeState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>
<com.android.server.pm.PackageManagerService: boolean verifyPackageUpdateLPr(com.android.server.pm.PackageSetting,android.content.pm.PackageParser$Package)>
<android.media.AudioManager$FocusEventHandlerDelegate$1: void <init>(android.media.AudioManager$FocusEventHandlerDelegate,android.os.Looper,android.media.AudioManager)>
<android.animation.ValueAnimator: boolean access$700(android.animation.ValueAnimator,long)>
<android.widget.TableLayout: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>
<com.android.server.pm.PackageManagerService$HandlerParams: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$1)>
<android.renderscript.Font$1: void <clinit>()>
<android.widget.RadioGroup$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>
<android.util.JsonReader: int nextInt()>
<android.service.wallpaper.IWallpaperConnection$Stub: void <init>()>
<com.android.server.wm.WindowManagerService: int getPropertyInt(java.lang.String[],int,int,int,android.util.DisplayMetrics)>
<com.android.internal.os.BatteryStatsImpl: int describeContents()>
<android.app.WallpaperInfo: void <clinit>()>
<android.content.ContentService$ObserverNode: void collectMyObserversLocked(boolean,android.database.IContentObserver,boolean,java.util.ArrayList)>
<com.android.server.am.ProcessList: void <init>()>
<com.android.internal.view.IInputConnectionWrapper: android.os.Message obtainMessageISC(int,int,int,com.android.internal.view.IInputContextCallback)>
<android.os.PatternMatcher$1: android.os.PatternMatcher createFromParcel(android.os.Parcel)>
<com.android.server.sip.SipSessionListenerProxy$3: void <init>(com.android.server.sip.SipSessionListenerProxy,android.net.sip.ISipSession)>
<android.graphics.Canvas: void drawText(char[],int,int,float,float,android.graphics.Paint)>
<android.accounts.AccountManager$8: void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.Account,java.lang.String,android.app.Activity,android.os.Bundle)>
<android.text.method.WordIterator: int getBeginning(int)>
<com.android.server.wm.InputMonitor: void freezeInputDispatchingLw()>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccCard getIccCard()>
<com.android.server.usb.UsbDeviceManager$UsbHandler: boolean setUsbConfig(java.lang.String)>
<android.renderscript.RenderScript: void _nInit()>
<android.renderscript.Int4: void <init>()>
<android.webkit.WebView: android.webkit.AccessibilityInjector access$9500(android.webkit.WebView)>
<android.content.res.XmlBlock: void access$1800(int)>
<android.security.SystemKeyStore: void <clinit>()>
<android.app.ActivityThread$ApplicationThread: void printRow(java.io.PrintWriter,java.lang.String,java.lang.Object[])>
<android.widget.TextView: boolean verifyDrawable(android.graphics.drawable.Drawable)>
<android.renderscript.RenderScript: void nAllocationData1D(int,int,int,int,short[],int)>
<android.content.res.AssetFileDescriptor: java.lang.String toString()>
<android.preference.EditTextPreference: boolean needInputMethod()>
<android.app.Instrumentation$1MenuRunnable: void <init>(android.app.Instrumentation,android.app.Activity,int,int)>
<GenerationGG: android.view.Window$Callback get_androidviewWindow__Callback()>
<android.database.sqlite.SQLiteDatabase$DatabaseReentrantLock: java.lang.String getOwnerDescription()>
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: void <init>(com.android.server.pm.PackageManagerService)>
<com.android.internal.view.menu.MenuBuilder: com.android.internal.view.menu.MenuBuilder getRootMenu()>
<android.graphics.drawable.PictureDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.graphics.NinePatch: void nativeDraw(int,android.graphics.RectF,int,byte[],int,int,int)>
<android.webkit.HttpAuthHandler: boolean useHttpAuthUsernamePassword()>
<com.android.server.pm.PackageManagerService$DumpState: boolean getTitlePrinted()>
<android.view.ViewGroup$MarginLayoutParams: void setMargins(int,int,int,int)>
<android.graphics.NinePatch: void <init>(android.graphics.Bitmap,byte[],java.lang.String)>
<com.android.internal.telephony.WapPushOverSms$WapPushConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<android.net.IConnectivityManager$Stub: android.net.IConnectivityManager asInterface(android.os.IBinder)>
<com.android.server.MountService: com.android.server.NativeDaemonConnector access$1400(com.android.server.MountService)>
<android.graphics.drawable.NinePatchDrawable: int getIntrinsicWidth()>
<com.android.internal.os.BatteryStatsImpl: boolean getNextHistoryLocked(android.os.BatteryStats$HistoryItem)>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void loge(java.lang.String)>
<GenerationGG: android.view.AbsSavedState get_androidviewAbsSavedState()>
<android.content.Entity: java.lang.String toString()>
<android.widget.OverScroller: void <init>(android.content.Context,android.view.animation.Interpolator,float,float)>
<android.os.Parcel: int readInt()>
<android.appwidget.AppWidgetProvider: void onEnabled(android.content.Context)>
<android.app.backup.BackupDataInput: int readEntityData_native(int,byte[],int,int)>
<com.android.server.wm.WindowManagerService: boolean injectPointerEvent(android.view.MotionEvent,boolean)>
<android.database.sqlite.DatabaseConnectionPool$PoolObj: void access$300(android.database.sqlite.DatabaseConnectionPool$PoolObj)>
<com.android.server.wm.InputManager: void nativeStart()>
<android.content.Intent: java.lang.String getScheme()>
<com.android.server.am.BroadcastRecord: void dump(java.io.PrintWriter,java.lang.String)>
<android.util.Patterns: java.lang.String concatGroups(java.util.regex.Matcher)>
<android.net.http.AndroidHttpClient: org.apache.http.params.HttpParams getParams()>
<android.graphics.Paint: float getTextRunAdvances(char[],int,int,int,int,int,float[],int)>
<android.view.GLES20RecordingCanvas$1: void <init>()>
<GenerationGG: android.webkit.WebSettings$TextSize get_androidwebkitWebSettings__TextSize()>
<com.android.internal.telephony.IccFileHandler: java.lang.String getCommonIccEFPath(int)>
<android.widget.ViewAnimator: void setOutAnimation(android.view.animation.Animation)>
<android.content.pm.RegisteredServicesCache$ServiceInfo: void <init>(java.lang.Object,android.content.ComponentName,int)>
<android.view.InputChannel: void readFromParcel(android.os.Parcel)>
<android.media.MediaPlayer: android.media.MediaPlayer$OnTimedTextListener access$900(android.media.MediaPlayer)>
<GenerationGG: android.net.Proxy get_androidnetProxy()>
<GenerationGG: android.graphics.Paint$Align get_androidgraphicsPaint__Align()>
<Wrapper_android_renderscript_Double2: void test_android_renderscript_Double2()>
<android.os.IVibratorService$Stub: void <init>()>
<android.view.View: void setContentDescription(java.lang.CharSequence)>
<com.android.server.wm.InputManager: void getInputConfiguration(android.content.res.Configuration)>
<android.content.res.Resources: void <clinit>()>
<Wrapper_android_text_style_AbsoluteSizeSpan: void test_android_text_style_AbsoluteSizeSpan()>
<android.app.SearchableInfo$1: android.app.SearchableInfo[] newArray(int)>
<android.content.pm.UserInfo: void writeToParcel(android.os.Parcel,int)>
<Wrapper_android_graphics_ComposePathEffect: void test_android_graphics_ComposePathEffect()>
<com.android.internal.telephony.gsm.VoiceMailConstants: boolean containsCarrier(java.lang.String)>
<android.test.mock.MockCursor: int getColumnCount()>
<android.view.VelocityTracker: void finalize()>
<android.server.BluetoothService: java.lang.Object[] getAdapterPropertiesNative()>
<com.android.internal.view.IInputContext$Stub$Proxy: android.os.IBinder asBinder()>
<android.os.StrictMode$ViolationInfo: void writeToParcel(android.os.Parcel,int)>
<Wrapper_android_view_OrientationEventListener: void test_android_view_OrientationEventListener()>
<android.widget.RelativeLayout$DependencyGraph: void clear()>
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setActionProvider(android.view.ActionProvider)>
<android.view.HardwareRenderer$GlRenderer: void <init>(int,boolean)>
<android.view.ViewDebug: android.view.View findView(android.view.ViewGroup,java.lang.String,int)>
<android.os.DropBoxManager$Entry: void <init>(java.lang.String,long,java.io.File,int)>
<com.android.internal.view.IInputConnectionWrapper$MyHandler: void <init>(com.android.internal.view.IInputConnectionWrapper,android.os.Looper)>
<android.renderscript.RSTextureView: void setRenderScriptGL(android.renderscript.RenderScriptGL)>
<android.content.res.ColorStateList: boolean isStateful()>
<com.android.server.NotificationManagerService: com.android.server.NotificationManagerService$NotificationRecord access$602(com.android.server.NotificationManagerService,com.android.server.NotificationManagerService$NotificationRecord)>
<com.android.server.DeviceStorageMonitorService$1: void <init>(com.android.server.DeviceStorageMonitorService)>
<android.app.ActivityGroup: void <init>(boolean)>
<android.view.inputmethod.EditorInfo: void <clinit>()>
<android.app.Application: void onTrimMemory(int)>
<android.animation.AnimatorSet$Dependency: void <init>(android.animation.AnimatorSet$Node,int)>
<android.webkit.AccessibilityInjector: boolean isEnterActionKey(int)>
<android.renderscript.RenderScript: void rsnAllocationElementData1D(int,int,int,int,int,byte[],int)>
<com.android.internal.os.RuntimeInit: void <clinit>()>
<com.android.internal.telephony.sip.SipCommandInterface: void getIMSI(android.os.Message)>
<android.webkit.WebSettings: void setNavDump(boolean)>
<android.net.Uri$StringUri: java.util.List getPathSegments()>
<android.graphics.Bitmap: android.graphics.Bitmap extractAlpha()>
<GenerationGG: android.media.AudioRecord get_androidmediaAudioRecord()>
<android.view.KeyCharacterMap: void nativeDispose(int)>
<android.content.res.XmlBlock: int access$1000(int,int)>
<com.android.internal.os.PkgUsageStats$1: com.android.internal.os.PkgUsageStats createFromParcel(android.os.Parcel)>
<android.widget.CalendarView: long getMaxDate()>
<GenerationGG: android.speech.tts.SynthesisCallback get_androidspeechttsSynthesisCallback()>
<android.inputmethodservice.InputMethodService$InputMethodImpl: void unbindInput()>
<com.android.server.accessibility.AccessibilityManagerService: void <clinit>()>
<android.provider.Settings$NameValueTable: android.net.Uri getUriFor(android.net.Uri,java.lang.String)>
<android.graphics.Shader$TileMode: void <clinit>()>
<android.server.BluetoothHealthProfileHandler$HealthChannel: int access$1100(android.server.BluetoothHealthProfileHandler$HealthChannel)>
<com.android.internal.os.BatteryStatsImpl: void noteBluetoothOnLocked()>
<android.widget.AbsListView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<com.android.server.NotificationPlayer$CmdThread: void <init>(com.android.server.NotificationPlayer)>
<android.view.GLES20Canvas$CanvasFinalizer: void <init>(int)>
<android.media.TimedText$Text: void <init>(android.media.TimedText)>
<GenerationGG: android.media.AudioTrack get_androidmediaAudioTrack()>
<android.test.mock.MockContext: void startIntentSender(android.content.IntentSender,android.content.Intent,int,int,int)>
<android.widget.ImageView: void setBaselineAlignBottom(boolean)>
<android.os.MemoryFile$MemoryInputStream: boolean markSupported()>
<android.server.BluetoothPanProfileHandler: android.content.BroadcastReceiver access$100(android.server.BluetoothPanProfileHandler)>
<android.content.Intent$ShortcutIconResource: int describeContents()>
<android.hardware.Camera: void <init>(int)>
<android.database.CursorToBulkCursorAdaptor$ContentObserverProxy: void <init>(android.database.IContentObserver,android.os.IBinder$DeathRecipient)>
<com.android.server.connectivity.Tethering$TetherMasterSM: void access$4100(com.android.server.connectivity.Tethering$TetherMasterSM,com.android.internal.util.IState)>
<com.android.internal.telephony.sip.SipCommandInterface: void hangupWaitingOrBackground(android.os.Message)>
<android.view.MotionEvent: android.view.MotionEvent obtain(long,long,int,int,int[],android.view.MotionEvent$PointerCoords[],int,float,float,int,int,int,int)>
<com.android.internal.telephony.BaseCommands: void unregisterForSIMLockedOrAbsent(android.os.Handler)>
<android.widget.AbsListView: boolean isScrollingCacheEnabled()>
<android.view.View$AttachInfo$InvalidateInfo: void <init>()>
<android.telephony.PhoneNumberUtils: int charToBCD(char)>
<android.test.mock.MockResources: void getValue(java.lang.String,android.util.TypedValue,boolean)>
<android.app.ApplicationErrorReport$1: android.app.ApplicationErrorReport[] newArray(int)>
<android.graphics.Path: void native_setLastPoint(int,float,float)>
<android.media.AudioService$VolumeStreamState: void mute(android.os.IBinder,boolean)>
<com.android.internal.telephony.DataConnection: int access$510(com.android.internal.telephony.DataConnection)>
<android.server.BluetoothService: java.lang.Object[] getDevicePropertiesNative(java.lang.String)>
<android.webkit.CacheManager: boolean cleanupCacheFile(android.webkit.CacheManager$CacheResult)>
<android.media.audiofx.Virtualizer: void setParameterListener(android.media.audiofx.Virtualizer$OnParameterChangeListener)>
<android.service.wallpaper.WallpaperService$Engine: void onSurfaceRedrawNeeded(android.view.SurfaceHolder)>
<android.os.Message: void setTarget(android.os.Handler)>
<android.webkit.HttpAuthHandlerImpl: void cancel()>
<android.os.storage.IMountServiceListener$Stub: android.os.storage.IMountServiceListener asInterface(android.os.IBinder)>
<android.view.ViewPropertyAnimator: float getValue(int)>
<android.widget.TextView: void setFilters(android.text.InputFilter[])>
<com.android.server.AlarmManagerService: android.app.PendingIntent access$1800(com.android.server.AlarmManagerService)>
<android.database.MergeCursor: void unregisterContentObserver(android.database.ContentObserver)>
<android.content.ComponentName: java.lang.String getPackageName()>
<android.opengl.ETC1Util: void loadTexture(int,int,int,int,int,android.opengl.ETC1Util$ETC1Texture)>
<android.renderscript.Short4: void <init>()>
<android.content.pm.VerifierDeviceIdentity: void writeToParcel(android.os.Parcel,int)>
<com.android.server.wm.WindowManagerService: boolean isHardKeyboardAvailable()>
<com.android.internal.os.PkgUsageStats: java.lang.String toString()>
<android.view.View$8: java.lang.Object get(java.lang.Object)>
<com.android.internal.telephony.cdma.CDMAPhone: boolean needsOtaServiceProvisioning()>
<android.location.Criteria: boolean isSpeedRequired()>
<android.view.View: int computeVerticalScrollExtent()>
<android.telephony.PhoneNumberUtils: void <clinit>()>
<com.android.server.MountService: int doUnmountVolume(java.lang.String,boolean,boolean)>
<android.text.PackedIntVector: void <init>(int)>
<GenerationGG: android.view.ViewGroup$LayoutParams get_androidviewViewGroup__LayoutParams()>
<android.content.ContentProvider: void <init>()>
<android.os.StrictMode$Span: android.os.StrictMode$Span access$1800(android.os.StrictMode$Span)>
<android.app.ActivityThread$AppBindData: java.lang.String toString()>
<android.webkit.HttpAuthHandlerImpl: void <clinit>()>
<android.opengl.GLES11Ext: void glMatrixIndexPointerOESBounds(int,int,int,java.nio.Buffer,int)>
<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicBoolean access$7100(android.net.wifi.WifiStateMachine)>
<com.android.internal.view.menu.ActionMenuPresenter$SavedState: int describeContents()>
<com.android.server.location.LocationProviderProxy: int getAccuracy()>
<com.android.server.sip.SipSessionListenerProxy: void onCalling(android.net.sip.ISipSession)>
<Wrapper_android_nfc_FormatException: void test_android_nfc_FormatException()>
<android.content.SyncManager: void dumpDayStatistics(java.io.PrintWriter)>
<android.view.View: int getTextDirection()>
<com.android.server.net.NetworkPolicyManagerService: android.net.INetworkStatsService access$1000(com.android.server.net.NetworkPolicyManagerService)>
<com.android.internal.telephony.gsm.GsmDataConnection: boolean isIpAddress(java.lang.String)>
<com.android.server.pm.Settings: int removePackageLPw(java.lang.String)>
<android.renderscript.ProgramRaster$Builder: android.renderscript.ProgramRaster create()>
<Wrapper_android_drm_DrmUtils: void test_android_drm_DrmUtils()>
<android.os.RemoteCallbackList: void onCallbackDied(android.os.IInterface)>
<android.widget.QuickContactBadge: android.net.Uri access$002(android.widget.QuickContactBadge,android.net.Uri)>
<com.android.server.wm.InputManager$1: void <init>(com.android.server.wm.InputManager,android.os.Handler)>
<android.app.FragmentManagerImpl: java.util.ArrayList retainNonConfig()>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: void doCommandAsync(java.util.EventObject)>
<android.widget.AbsListView: void onSecondaryPointerUp(android.view.MotionEvent)>
<com.android.internal.telephony.cdma.CDMAPhone: boolean isInEmergencyCall()>
<android.app.backup.BackupDataInput: int getDataSize()>
<Wrapper_android_renderscript_Int3: void test_android_renderscript_Int3()>
<android.graphics.Typeface: boolean isBold()>
<android.inputmethodservice.ExtractEditText: void setIME(android.inputmethodservice.InputMethodService)>
<android.renderscript.FieldPacker: void addObj(android.renderscript.BaseObj)>
<java.lang.Object: boolean onKeyLongPress(int,android.view.KeyEvent)>
<com.android.server.am.ConnectionRecord: void dump(java.io.PrintWriter,java.lang.String)>
<android.test.ActivityUnitTestCase$MockParent: android.view.Window getWindow()>
<android.view.KeyCharacterMap: char nativeGetDisplayLabel(int,int)>
<android.nfc.tech.MifareClassic: void <clinit>()>
<android.view.textservice.SpellCheckerSubtype$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: int getCountryCode()>
<com.android.server.wm.WindowManagerService: android.content.res.Configuration computeNewConfigurationLocked()>
<com.android.server.wm.AppWindowToken: boolean stepAnimationLocked(long,int,int)>
<android.webkit.CacheManager: void init(android.content.Context)>
<GenerationGG: android.net.wifi.p2p.WifiP2pManager$ConnectionInfoListener get_androidnetwifip2pWifiP2pManager__ConnectionInfoListener()>
<android.view.View$TransformationInfo: void <init>()>
<android.net.wifi.WifiStateMachine: com.android.internal.util.State access$5200(android.net.wifi.WifiStateMachine)>
<android.app.Instrumentation: android.app.Application newApplication(java.lang.ClassLoader,java.lang.String,android.content.Context)>
<android.graphics.Region: boolean nativeSetRegion(int,int)>
<Wrapper_android_database_SQLException: void test_android_database_SQLException()>
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder nativeNewInstance(java.io.FileDescriptor,boolean)>
<com.android.server.WifiService$LockList: void access$2800(com.android.server.WifiService$LockList,java.io.PrintWriter)>
<android.net.EthernetDataTracker: boolean reconnect()>
<android.view.GLES20Layer: boolean copyInto(android.graphics.Bitmap)>
<android.renderscript.Matrix4f: void rotate(float,float,float,float)>
<android.os.Debug: void stopNativeTracing()>
<android.widget.ListPopupWindow: void setAnimationStyle(int)>
<android.view.TextureView: void setOpaque(boolean)>
<android.app.Service: void onCreate()>
<com.android.internal.view.IInputMethodCallback$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.internal.view.IInputMethodClient$Stub: com.android.internal.view.IInputMethodClient asInterface(android.os.IBinder)>
<com.android.internal.telephony.cat.RilMessageDecoder$StateStart: void <init>(com.android.internal.telephony.cat.RilMessageDecoder)>
<android.widget.CalendarView$WeeksAdapter: java.lang.Object getItem(int)>
<junit.framework.TestCase: void assertEquals(long,long)>
<android.location.ILocationProvider$Stub$Proxy: android.os.IBinder asBinder()>
<android.webkit.CookieManager: java.util.ArrayList getUpdatedCookiesSince(long)>
<com.android.internal.telephony.sip.SipCommandInterface: void sendEnvelope(java.lang.String,android.os.Message)>
<android.accounts.Account: void <init>(android.os.Parcel)>
<android.media.ToneGenerator: boolean startTone(int)>
<android.os.Parcel: void writeSparseBooleanArray(android.util.SparseBooleanArray)>
<android.app.LauncherActivity$ActivityAdapter: android.widget.Filter getFilter()>
<com.android.internal.telephony.IntRangeManager$IntRange: void <init>(com.android.internal.telephony.IntRangeManager,int,int,java.lang.String)>
<android.net.wifi.WifiStateMachine: int access$5100(android.net.wifi.WifiStateMachine)>
<android.content.IIntentReceiver$Stub: void <init>()>
<com.android.internal.view.menu.ActionMenuPresenter: boolean shouldIncludeItem(int,com.android.internal.view.menu.MenuItemImpl)>
<android.webkit.HTML5VideoView: void deleteSurfaceTexture()>
<android.widget.CalendarView$WeekView: void onSizeChanged(int,int,int,int)>
<android.graphics.Paint: int getColor()>
<DumbClass: void DumbMethod71()>
<android.widget.ScrollView: boolean inChild(int,int)>
<com.android.server.UiModeManagerService: android.content.Intent buildHomeIntent(java.lang.String)>
<android.widget.PopupWindow: java.lang.ref.WeakReference access$000(android.widget.PopupWindow)>
<android.webkit.CallbackProxy: android.webkit.WebBackForwardList getBackForwardList()>
<android.webkit.WebView: void nativeSetFindIsEmpty()>
<android.text.method.DialerKeyListener: void <clinit>()>
<com.android.internal.http.HttpDateTime$TimeOfDay: void <init>(int,int,int)>
<android.view.textservice.TextInfo: void <init>(android.os.Parcel)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$7200(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,com.android.internal.util.IState)>
<android.widget.TextView: void cancelLongPress()>
<com.android.internal.telephony.cat.LaunchBrowserMode: void <clinit>()>
<android.net.http.HttpAuthHeader: java.lang.String getOpaque()>
<android.graphics.Path: void native_addPath(int,int,float,float)>
<android.view.View: int combineMeasuredStates(int,int)>
<com.android.server.MountService: void setUmsEnabling(boolean)>
<android.content.ContentValues: void <init>()>
<GenerationGG: android.graphics.LinearGradient get_androidgraphicsLinearGradient()>
<android.widget.ExpandableListView: void setChildIndicatorBounds(int,int)>
<android.app.ApplicationErrorReport$RunningServiceInfo: void dump(android.util.Printer,java.lang.String)>
<android.view.ViewGroup: void setClipChildren(boolean)>
<com.android.internal.telephony.CallerInfo: java.lang.String toString()>
<android.gesture.GestureStroke: void makePath()>
<android.content.res.AssetManager$AssetInputStream: int read(byte[])>
<android.opengl.GLLogWrapper$PointerInfo: void <init>(android.opengl.GLLogWrapper)>
<android.view.HardwareRenderer$Gl20Renderer: void destroyLayers(android.view.View)>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Phone$State getState()>
<android.renderscript.RSSurfaceView: void pause()>
<junit.runner.BaseTestRunner: void startTest(junit.framework.Test)>
<android.media.AudioService$VolumeStreamState$VolumeDeathHandler: void <init>(android.media.AudioService$VolumeStreamState,android.os.IBinder)>
<android.app.Application: void onTerminate()>
<android.content.IntentSender$1: java.lang.Object[] newArray(int)>
<android.widget.CalendarView$WeekView: int getMonthOfFirstWeekDay()>
<android.app.FragmentManagerImpl: void popBackStack(java.lang.String,int)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: java.lang.String getPrlVersion()>
<android.widget.ListView: void setDivider(android.graphics.drawable.Drawable)>
<android.location.Location: void dump(android.util.Printer,java.lang.String)>
<android.test.MoreAsserts: java.util.regex.MatchResult assertMatchesRegex(java.lang.String,java.lang.String)>
<com.android.server.ConnectivityService$FeatureUser: void unlinkDeathRecipient()>
<com.android.internal.telephony.cdma.RuimFileHandler: void finalize()>
<android.gesture.GestureOverlayView: void setGestureStrokeWidth(float)>
<android.os.ParcelFileDescriptor: int getFdNative()>
<android.renderscript.Allocation: void validate2DRange(int,int,int,int)>
<android.content.IntentFilter$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.app.admin.DeviceAdminInfo: java.lang.String getPackageName()>
<android.widget.LinearLayout: void setMeasureWithLargestChildEnabled(boolean)>
<android.content.res.CompatibilityInfo$Translator: android.graphics.Rect getTranslatedVisibleInsets(android.graphics.Rect)>
<android.animation.Animator: void end()>
<android.widget.TextView$Drawables: void <init>(android.widget.TextView)>
<android.widget.RelativeLayout$LayoutParams: int[] access$700(android.widget.RelativeLayout$LayoutParams)>
<GenerationGG: android.media.AudioTrack$OnPlaybackPositionUpdateListener get_androidmediaAudioTrack__OnPlaybackPositionUpdateListener()>
<android.app.ActivityManagerNative: void <clinit>()>
<android.hardware.SensorManager$SensorThread$SensorThreadRunnable: void <init>(android.hardware.SensorManager$SensorThread)>
<android.net.sip.ISipService$Stub: android.net.sip.ISipService asInterface(android.os.IBinder)>
<android.view.MotionEvent: float getHistoricalToolMinor(int,int)>
<android.mtp.MtpObjectInfo: int getProtectionStatus()>
<android.app.ActivityThread: void access$2200(android.app.ActivityThread,android.app.ActivityThread$DumpComponentInfo)>
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getVoiceMailNumber()>
<android.media.audiofx.Equalizer: android.media.audiofx.Equalizer$OnParameterChangeListener access$100(android.media.audiofx.Equalizer)>
<android.widget.TabHost: void setup()>
<GenerationGG: java.lang.ClassLoader get_javalangClassLoader()>
<com.android.internal.view.menu.MenuPopupHelper: boolean collapseItemActionView(com.android.internal.view.menu.MenuBuilder,com.android.internal.view.menu.MenuItemImpl)>
<android.widget.ExpandableListConnector$GroupMetadata$1: java.lang.Object[] newArray(int)>
<com.android.server.am.UsageStatsService$PkgUsageStatsExtended: void <init>(com.android.server.am.UsageStatsService)>
<android.graphics.SumPathEffect: void <init>(android.graphics.PathEffect,android.graphics.PathEffect)>
<com.android.server.wm.InputFilter: void <init>(android.os.Looper)>
<com.android.internal.telephony.cdma.EriInfo: void <init>(int,int,int,java.lang.String,int,int)>
<com.android.internal.telephony.cdma.CdmaConnection: boolean isIncoming()>
<android.net.Uri$AbstractPart: void <init>(java.lang.String,java.lang.String)>
<com.android.server.NotificationManagerService$2: void <init>(com.android.server.NotificationManagerService)>
<android.graphics.Interpolator: void reset(int,int)>
<com.android.i18n.phonenumbers.AsYouTypeFormatter: java.lang.String inputDigitHelper(char)>
<android.app.Instrumentation$SyncRunnable: void <init>(java.lang.Runnable)>
<android.telephony.gsm.SmsMessage: boolean isEmail()>
<GenerationGG: android.view.animation.Animation get_androidviewanimationAnimation()>
<android.graphics.drawable.InsetDrawable: void unscheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable)>
<android.graphics.drawable.AnimationDrawable: android.graphics.drawable.Drawable mutate()>
<android.text.method.DialerKeyListener: int getInputType()>
<android.hardware.SensorManager: int getRotation()>
<android.view.inputmethod.CorrectionInfo: int getOffset()>
<android.app.Activity: boolean hasWindowFocus()>
<com.android.internal.os.BatteryStatsImpl: void finishIteratingOldHistoryLocked()>
<com.android.internal.os.BatteryStatsImpl: int getDischargeCurrentLevel()>
<android.net.wifi.p2p.WifiP2pDeviceList$1: void <init>()>
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>
<android.view.GLES20Layer$Finalizer: void finalize()>
<GenerationGG: java.util.Map get_javautilMap()>
<com.android.server.VibratorService: boolean isAll0(long[])>
<android.text.format.Time: java.lang.String getCurrentTimezone()>
<android.widget.MediaController: void updateFloatingWindowLayout()>
<android.test.mock.MockPackageManager: android.content.pm.ResolveInfo resolveService(android.content.Intent,int)>
<com.android.server.location.LocationProviderProxy: boolean hasMonetaryCost()>
<junit.framework.TestCase: void assertEquals(java.lang.String,byte,byte)>
<android.content.res.XmlBlock: android.content.res.StringBlock access$200(android.content.res.XmlBlock)>
<android.graphics.drawable.ClipDrawable: int getIntrinsicWidth()>
<android.preference.Preference: boolean isSelectable()>
<com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaSignalInfoRec: java.lang.String toString()>
<DumbClass: void DumbMethod35()>
<android.webkit.WebView: int nativeCursorNodePointer()>
<android.content.ClipDescription: boolean compareMimeTypes(java.lang.String,java.lang.String)>
<android.app.ActivityManager$TaskThumbnails: void <clinit>()>
<android.net.wifi.WifiNative: java.lang.String doStringCommand(java.lang.String)>
<GenerationGG: android.view.inputmethod.InputMethod$SessionCallback get_androidviewinputmethodInputMethod__SessionCallback()>
<android.test.mock.MockPackageManager: java.util.List getAllPermissionGroups(int)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$400(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,java.lang.String)>
<android.service.wallpaper.WallpaperService$Engine$2: boolean onAllowLockCanvas()>
<com.android.server.am.TaskAccessInfo: void <init>()>
<android.os.WorkSource: void <init>()>
<android.widget.RelativeLayout$DependencyGraph$Node: boolean isPooled()>
<android.text.TextUtils$1: void <init>()>
<android.preference.Preference: android.graphics.drawable.Drawable getIcon()>
<android.view.ViewRootImpl: void removeSendWindowContentChangedCallback()>
<com.android.server.InputMethodManagerService$3: void onCancel(android.content.DialogInterface)>
<android.bluetooth.BluetoothDeviceProfileState$BondedDevice: void <init>(android.bluetooth.BluetoothDeviceProfileState,android.bluetooth.BluetoothDeviceProfileState$1)>
<android.app.Instrumentation: boolean onException(java.lang.Object,java.lang.Throwable)>
<com.android.server.BackupManagerService: void startConfirmationTimeout(int,com.android.server.BackupManagerService$FullParams)>
<android.view.View: void performCollectViewAttributes(int)>
<android.service.wallpaper.WallpaperService$Engine$4: void resized(int,int,android.graphics.Rect,android.graphics.Rect,boolean,android.content.res.Configuration)>
<android.telephony.SignalStrength: java.lang.String toString()>
<GenerationGG: android.util.TimeUtils get_androidutilTimeUtils()>
<android.animation.ValueAnimator: int getCurrentAnimationsCount()>
<android.net.sip.SipProfile$1: void <init>()>
<android.webkit.DateSorter: long getBoundary(int)>
<android.graphics.Matrix$1: boolean preConcat(android.graphics.Matrix)>
<android.graphics.RectF: void round(android.graphics.Rect)>
<com.android.internal.os.BatteryStatsImpl: long getBatteryUptimeLocked()>
<android.net.LinkProperties$1: java.lang.Object[] newArray(int)>
<com.android.server.DropBoxManagerService: long access$102(com.android.server.DropBoxManagerService,long)>
<android.view.View$AttachInfo$InvalidateInfo: boolean isPooled()>
<android.net.LocalServerSocket: void close()>
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>
<com.android.internal.view.menu.ActionMenuItem: boolean isChecked()>
<android.view.View: boolean pointInView(float,float)>
<android.bluetooth.BluetoothClass$1: android.bluetooth.BluetoothClass createFromParcel(android.os.Parcel)>
<android.os.RemoteCallbackList: boolean register(android.os.IInterface)>
<android.graphics.PathEffect: void nativeDestructor(int)>
<android.net.http.RequestHandle: void handleSslErrorResponse(boolean)>
<android.test.mock.MockPackageManager: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],android.content.Intent,int)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofKeyframe(java.lang.String,android.animation.Keyframe[])>
<android.app.Service: void onConfigurationChanged(android.content.res.Configuration)>
<android.widget.TextView: android.content.Context access$5900(android.widget.TextView)>
<com.android.server.AlarmManagerService: java.util.HashMap access$1900(com.android.server.AlarmManagerService)>
<android.view.accessibility.AccessibilityNodeInfo: int getActions()>
<com.android.internal.telephony.AdnRecordCache: void notifyWaiters(java.util.ArrayList,android.os.AsyncResult)>
<android.content.res.XmlBlock$Parser: int getAttributeNameResource(int)>
<android.preference.PreferenceGroupAdapter$PreferenceLayout: void <init>()>
<android.hardware.Camera: android.hardware.Camera open()>
<android.opengl.GLSurfaceView: android.opengl.GLSurfaceView$GLThread access$1100(android.opengl.GLSurfaceView)>
<android.server.BluetoothAdapterStateMachine$HotOff: void enter()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimCdmaHomeLoaded: void onRecordLoaded(android.os.AsyncResult)>
<android.content.AsyncTaskLoader: void <init>(android.content.Context)>
<android.telephony.NeighboringCellInfo$1: android.telephony.NeighboringCellInfo[] newArray(int)>
<android.widget.RemoteViewsAdapter$RemoteViewsMetaData: void <init>(android.widget.RemoteViewsAdapter)>
<android.test.MoreAsserts: void assertNotContainsRegex(java.lang.String,java.lang.String,java.lang.String)>
<android.widget.AbsListView: int getListPaddingLeft()>
<android.view.accessibility.AccessibilityRecord: void setCurrentItemIndex(int)>
<com.android.internal.telephony.DataConnection: java.util.List access$600(com.android.internal.telephony.DataConnection)>
<android.app.backup.BackupHelperDispatcher: int skipChunk_native(java.io.FileDescriptor,int)>
<com.android.server.net.NetworkStatsService: java.io.File getSystemDir()>
<com.android.internal.util.StateMachine$SmHandler: void moveDeferredMessageAtFrontOfQueue()>
<com.android.internal.textservice.ISpellCheckerService$Stub: android.os.IBinder asBinder()>
<android.content.SyncResult$1: android.content.SyncResult createFromParcel(android.os.Parcel)>
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void <init>(com.android.server.connectivity.Tethering$TetherMasterSM)>
<android.view.textservice.TextInfo: void <clinit>()>
<android.animation.PropertyValuesHolder: void <clinit>()>
<android.content.pm.PackageParser: java.lang.String buildProcessName(java.lang.String,java.lang.String,java.lang.CharSequence,int,java.lang.String[],java.lang.String[])>
<android.os.Bundle$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.gesture.GestureOverlayView: void setGestureColor(int)>
<android.app.ActivityManager$TaskThumbnails: void <init>()>
<android.media.AudioService: void ensureValidDirection(int)>
<android.graphics.Matrix$1: boolean postScale(float,float,float,float)>
<com.android.internal.telephony.DataConnection$DcActiveState: void <init>(com.android.internal.telephony.DataConnection)>
<android.graphics.Paint: int getFlags()>
<android.view.VolumePanel$4: void <init>(android.view.VolumePanel)>
<com.android.internal.os.HandlerCaller: void sendMessage(android.os.Message)>
<android.widget.TabHost$TabSpec: void <init>(android.widget.TabHost,java.lang.String)>
<android.net.rtp.AudioStream: void <init>(java.net.InetAddress)>
<android.service.wallpaper.WallpaperService$Engine: void onCreate(android.view.SurfaceHolder)>
<android.util.LogPrinter: void println(java.lang.String)>
<android.media.audiofx.AudioEffect: int setParameter(int,byte[])>
<android.app.ActivityThread$Idler: void <init>(android.app.ActivityThread)>
<com.android.i18n.phonenumbers.RegexCache$LRUCache: void put(java.lang.Object,java.lang.Object)>
<android.text.Editable$Factory: void <init>()>
<android.database.BulkCursorToCursorAdaptor: void initialize(android.database.IBulkCursor,int,int,boolean)>
<android.os.SystemProperties: java.lang.String native_get(java.lang.String)>
<com.android.internal.telephony.DataConnection: void access$1100(com.android.internal.telephony.DataConnection,com.android.internal.util.IState)>
<com.android.server.accessibility.TouchExplorer$SendHoverDelayed: void forceSendAndRemove()>
<GenerationGG: android.content.ClipDescription get_androidcontentClipDescription()>
<android.renderscript.Element: android.renderscript.Element I32_3(android.renderscript.RenderScript)>
<android.graphics.Bitmap: int getScaledHeight(android.util.DisplayMetrics)>
<com.android.internal.telephony.SmsMessageBase: java.lang.String getEmailBody()>
<android.media.AudioSystem: int getForceUse(int)>
<DumbClass: void DumbMethod13()>
<android.widget.Gallery: void offsetChildrenLeftAndRight(int)>
<android.view.GLES20TextureLayer: android.graphics.SurfaceTexture getSurfaceTexture()>
<android.database.SQLException: void <init>(java.lang.String)>
<com.android.internal.telephony.ApnContext: void setDataConnection(com.android.internal.telephony.DataConnection)>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean isApnTypeActive(java.lang.String)>
<android.accounts.OperationCanceledException: void <init>(java.lang.Throwable)>
<android.content.ContentProvider: android.content.pm.PathPermission[] getPathPermissions()>
<android.database.BulkCursorNative: android.database.IBulkCursor asInterface(android.os.IBinder)>
<com.android.internal.telephony.gsm.GsmCallTracker: void unregisterForVoiceCallEnded(android.os.Handler)>
<android.view.View: boolean isSaveEnabled()>
<android.text.Selection$START: void <init>(android.text.Selection$1)>
<android.content.res.CompatibilityInfo: java.lang.String toString()>
<android.telephony.PhoneNumberUtils: boolean compareLoosely(java.lang.String,java.lang.String)>
<com.android.server.wm.InputFilter: android.view.InputEventConsistencyVerifier access$100(com.android.server.wm.InputFilter)>
<android.widget.AbsListView: void positionSelector(int,int,int,int)>
<android.net.RouteInfo: android.net.LinkAddress getDestination()>
<android.database.AbstractCursor: android.os.Bundle getExtras()>
<android.app.ApplicationPackageManager$ResourceName: boolean equals(java.lang.Object)>
<com.android.server.accessibility.TouchExplorer: android.os.Handler access$400(com.android.server.accessibility.TouchExplorer)>
<android.app.Activity: void invalidateOptionsMenu()>
<android.app.Activity: android.view.WindowManager getWindowManager()>
<android.hardware.Camera: void setPreviewCallback(android.hardware.Camera$PreviewCallback)>
<android.telephony.TelephonyManager: int getSimState()>
<com.android.internal.os.BatteryStatsImpl$Uid: void reportExcessiveCpuLocked(java.lang.String,long,long)>
<android.database.CursorJoiner: int compareStrings(java.lang.String[])>
<android.net.wifi.WifiStateMachine: java.lang.String getConfigFile()>
<android.content.SyncAdapterType$1: android.content.SyncAdapterType[] newArray(int)>
<android.app.IServiceConnection$Stub: android.app.IServiceConnection asInterface(android.os.IBinder)>
<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean canRetrieveWindowContent(com.android.server.accessibility.AccessibilityManagerService$Service)>
<android.content.pm.LabeledIntent: void <init>(java.lang.String,java.lang.CharSequence,int)>
<android.database.sqlite.SQLiteDatabase: void native_setSqliteSoftHeapLimit(int)>
<com.android.internal.telephony.ServiceStateTracker: void registerForRoamingOff(android.os.Handler,int,java.lang.Object)>
<android.net.NetworkStats: int size()>
<android.view.Display: void getMetricsWithSize(android.util.DisplayMetrics,int,int)>
<android.app.IProcessObserver$Stub: void <init>()>
<com.android.internal.telephony.gsm.SimSmsInterfaceManager$1: void handleMessage(android.os.Message)>
<android.widget.Toast$TN: void show()>
<android.media.AudioTrack: int setPlaybackRate(int)>
<android.widget.HeaderViewListAdapter: int getFootersCount()>
<android.graphics.Bitmap: int getPixel(int,int)>
<android.os.Debug$MemoryInfo$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.test.IsolatedContext$MockAccountManager$MockAccountManagerFuture: java.lang.Object getResult()>
<android.content.res.AssetFileDescriptor$1: java.lang.Object[] newArray(int)>
<com.android.server.pm.Settings: void readPermissionsLPw(java.util.HashMap,org.xmlpull.v1.XmlPullParser)>
<android.animation.ValueAnimator: boolean isStarted()>
<android.test.mock.MockPackageManager: java.util.List getInstalledPackages(int)>
<android.view.SurfaceView$4: void <init>(android.view.SurfaceView)>
<GenerationGG: android.text.style.RasterizerSpan get_androidtextstyleRasterizerSpan()>
<android.graphics.Region$1: java.lang.Object[] newArray(int)>
<android.widget.RadioGroup: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.renderscript.ProgramVertexFixedFunction: void bindConstants(android.renderscript.ProgramVertexFixedFunction$Constants)>
<GenerationGG: android.animation.LayoutTransition get_androidanimationLayoutTransition()>
<android.text.method.QwertyKeyListener: void <clinit>()>
<android.view.IRotationWatcher$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: void <init>(com.android.server.usb.UsbSettingsManager,com.android.server.usb.UsbSettingsManager$1)>
<android.media.AudioManager$FocusEventHandlerDelegate: android.os.Handler getHandler()>
<GenerationGG: android.gesture.GestureLibraries get_androidgestureGestureLibraries()>
<android.view.VolumePanel$3: void onDismiss(android.content.DialogInterface)>
<android.opengl.GLUtils: void texImage2D(int,int,android.graphics.Bitmap,int)>
<android.graphics.drawable.AnimatedRotateDrawable: boolean isRunning()>
<android.widget.SpellChecker$SpellParser: void <init>(android.widget.SpellChecker)>
<android.net.NetworkState$1: android.net.NetworkState[] newArray(int)>
<android.widget.ToggleButton: void setTextOff(java.lang.CharSequence)>
<android.net.wifi.WifiStateMachine: void access$6100(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<Wrapper_android_opengl_GLES11: void test_android_opengl_GLES11()>
<android.accounts.AuthenticatorException: void <init>(java.lang.String,java.lang.Throwable)>
<GenerationGG: android.hardware.usb.UsbInterface get_androidhardwareusbUsbInterface()>
<android.media.audiofx.AudioEffect: void checkState(java.lang.String)>
<android.nfc.Tag: byte[] getId()>
<android.widget.OverScroller$SplineOverScroller: float access$200(android.widget.OverScroller$SplineOverScroller)>
<android.graphics.drawable.DrawableContainer: int getMinimumWidth()>
<android.animation.PropertyValuesHolder: java.lang.String getMethodName(java.lang.String,java.lang.String)>
<android.server.BluetoothService: int isEnabledNative()>
<Wrapper_android_text_SpanWatcher: void test_android_text_SpanWatcher()>
<android.util.SparseArray: java.lang.Object valueAt(int)>
<android.content.IOnPrimaryClipChangedListener$Stub$Proxy: android.os.IBinder asBinder()>
<android.media.AudioService$VolumeStreamState: int access$700(android.media.AudioService$VolumeStreamState,int)>
<android.app.Activity: void setIntent(android.content.Intent)>
<android.os.Handler: boolean postAtFrontOfQueue(java.lang.Runnable)>
<android.widget.CalendarView$WeeksAdapter: void access$200(android.widget.CalendarView$WeeksAdapter)>
<android.net.wifi.SupplicantStateTracker$ScanState: void <init>(android.net.wifi.SupplicantStateTracker)>
<android.os.BatteryStats$HistoryItem: void <init>()>
<android.sax.RootElement: void <init>(java.lang.String)>
<android.net.ProxyProperties$1: java.lang.Object[] newArray(int)>
<com.android.internal.telephony.DriverCall$State: com.android.internal.telephony.DriverCall$State[] values()>
<android.webkit.WebSettings: void setSupportMultipleWindows(boolean)>
<android.widget.RemoteViewsAdapter: int getItemViewType(int)>
<com.android.internal.os.BatteryStatsImpl$2: com.android.internal.os.BatteryStatsImpl[] newArray(int)>
<android.content.SyncAdapterType: boolean isUserVisible()>
<com.android.internal.os.BatteryStatsImpl: void noteScanWifiLockAcquiredLocked(int)>
<android.webkit.BrowserFrame: void nativeLoadUrl(java.lang.String,java.util.Map)>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy build()>
<android.content.SyncManager: boolean access$3102(android.content.SyncManager,boolean)>
<android.content.pm.IPackageManager$Stub$Proxy: void <init>(android.os.IBinder)>
<android.net.DhcpStateMachine$WaitBeforeStartState: void enter()>
<android.app.backup.BackupDataInput: void skipEntityData()>
<android.content.res.StringBlock$StyleIDs: int access$600(android.content.res.StringBlock$StyleIDs)>
<java.lang.Object: int getAttributeIntValue(int,int)>
<android.hardware.Camera: void stopFaceDetection()>
<com.android.internal.os.BatteryStatsImpl: void noteNetworkInterfaceTypeLocked(java.lang.String,int)>
<android.view.VelocityTracker: void addMovement(android.view.MotionEvent)>
<com.android.internal.telephony.DataConnectionTracker$State: com.android.internal.telephony.DataConnectionTracker$State[] values()>
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.shapes.Shape getShape()>
<android.webkit.DateSorter: int getIndex(long)>
<android.widget.ListView: int distanceToView(android.view.View)>
<android.app.Activity: android.app.Dialog onCreateDialog(int)>
<android.content.AbstractThreadedSyncAdapter: java.util.concurrent.atomic.AtomicInteger access$500(android.content.AbstractThreadedSyncAdapter)>
<android.widget.RadioGroup: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<android.location.LocationManager$GpsStatusListenerTransport: void <init>(android.location.LocationManager,android.location.GpsStatus$Listener)>
<android.app.backup.RestoreSession$RestoreObserverWrapper: void restoreStarting(int)>
<android.util.Base64InputStream: void reset()>
<com.android.internal.telephony.SMSDispatcher$2: void <init>(com.android.internal.telephony.SMSDispatcher)>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void access$2300(com.android.server.connectivity.Tethering$TetherInterfaceSM,com.android.internal.util.IState)>
<android.widget.AbsListView: boolean checkInputConnectionProxy(android.view.View)>
<com.android.internal.telephony.BaseCommands: void unregisterForIccRefresh(android.os.Handler)>
<android.widget.CalendarView: android.widget.ListView access$1800(android.widget.CalendarView)>
<android.telephony.NeighboringCellInfo: void <init>(int,int)>
<android.graphics.Color: void <init>()>
<android.text.style.ReplacementSpan: void <init>()>
<android.animation.AnimatorSet$AnimatorSetListener: void onAnimationRepeat(android.animation.Animator)>
<com.android.server.pm.Settings: void dumpPackagesLPr(java.io.PrintWriter,java.lang.String,com.android.server.pm.PackageManagerService$DumpState)>
<android.app.ActionBar: void setHomeButtonEnabled(boolean)>
<android.widget.OverScroller$SplineOverScroller: void fitOnBounceCurve(int,int,int)>
<android.view.inputmethod.InputMethodManager$2: void <init>(android.view.inputmethod.InputMethodManager)>
<android.net.sip.SipSession$Listener: void onCallTransferring(android.net.sip.SipSession,java.lang.String)>
<android.test.AndroidTestCase: void testAndroidTestCaseSetupProperly()>
<android.webkit.WebSettings: void setGeolocationEnabled(boolean)>
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(java.lang.String)>
<android.widget.FrameLayout: boolean shouldDelayChildPressedState()>
<android.renderscript.RenderScript: void rsnAllocationData1D(int,int,int,int,int,byte[],int)>
<android.webkit.WebView: void nativeFindNext(boolean)>
<android.os.Bundle: void <init>(int)>
<GenerationGG: android.view.DragEvent get_androidviewDragEvent()>
<android.gesture.GestureLibrary: int getOrientationStyle()>
<android.media.MediaPlayer: void _reset()>
<android.content.IntentFilter: void <init>(java.lang.String)>
<android.text.method.MetaKeyKeyListener: int getMetaState(java.lang.CharSequence,int)>
<com.android.server.wm.WindowManagerService: int tmpRemoveWindowLocked(int,com.android.server.wm.WindowState)>
<android.location.LocationManager$GpsStatusListenerTransport: void onGpsStarted()>
<com.android.internal.telephony.sip.SipCommandInterface: void getDataRegistrationState(android.os.Message)>
<android.view.LayoutInflater$BlinkLayout: void makeBlink()>
<android.renderscript.Font: android.renderscript.Font createFromFile(android.renderscript.RenderScript,android.content.res.Resources,java.io.File,float)>
<com.android.internal.telephony.cdma.SmsMessage: boolean isReplyPathPresent()>
<com.android.server.AlarmManagerService: void triggerAlarmsLocked(java.util.ArrayList,java.util.ArrayList,long)>
<android.view.InputEventConsistencyVerifier: void finishEvent()>
<android.widget.TextView: void addTextChangedListener(android.text.TextWatcher)>
<android.text.method.Touch$DragState: void <init>(float,float,int,int)>
<android.text.style.SuggestionSpan: int describeContents()>
<android.renderscript.RenderScript: void nAllocationCopyFromBitmap(int,android.graphics.Bitmap)>
<com.android.server.location.GpsLocationProvider: void native_send_ni_response(int,int)>
<android.net.wifi.SupplicantStateTracker$DisconnectedState: void <init>(android.net.wifi.SupplicantStateTracker)>
<android.text.method.DateKeyListener: void <clinit>()>
<android.view.MotionEvent: float getHistoricalToolMajor(int)>
<GenerationGG: android.renderscript.Element get_androidrenderscriptElement()>
<com.android.internal.telephony.SmsMessageBase: java.lang.String getDisplayMessageBody()>
<android.widget.HorizontalScrollView: boolean isViewDescendantOf(android.view.View,android.view.View)>
<android.graphics.Bitmap: int describeContents()>
<android.app.LocalActivityManager: java.util.HashMap dispatchRetainNonConfigurationInstance()>
<android.media.MediaRecorder: void setOutputFile(java.lang.String)>
<android.net.http.RequestQueue: void requeueRequest(android.net.http.Request)>
<android.view.ViewTreeObserver: void addOnTouchModeChangeListener(android.view.ViewTreeObserver$OnTouchModeChangeListener)>
<android.widget.ViewFlipper: boolean access$002(android.widget.ViewFlipper,boolean)>
<android.content.SyncManager$SyncTimeTracker: long timeSpentSyncing()>
<android.net.Uri$PathPart: android.net.Uri$PathSegments getPathSegments()>
<GenerationGG: android.view.View$OnCreateContextMenuListener get_androidviewView__OnCreateContextMenuListener()>
<android.speech.tts.AudioPlaybackHandler: void enqueueSynthesisDone(android.speech.tts.SynthesisMessageParams)>
<android.bluetooth.BluetoothDeviceProfileState: void access$8900(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<com.android.server.PowerManagerService: void setScreenOffTimeoutsLocked()>
<android.text.style.BulletSpan: void <init>()>
<android.app.ContextImpl$32: void <init>()>
<android.server.BluetoothService: boolean disconnectPanServerDeviceNative(java.lang.String,java.lang.String,java.lang.String)>
<android.widget.RelativeLayout$LayoutParams: java.lang.String debug(java.lang.String)>
<android.net.wifi.WifiApConfigStore$FileReadWriteHandler: void writeApConfiguration(android.net.wifi.WifiConfiguration)>
<android.widget.AdapterViewFlipper: boolean access$300(android.widget.AdapterViewFlipper)>
<android.opengl.Matrix: void translateM(float[],int,float[],int,float,float,float)>
<android.view.animation.AnimationSet: boolean hasAlpha()>
<java.lang.Object: float getAttributeFloatValue(java.lang.String,java.lang.String,float)>
<android.widget.TextView$Marquee: boolean isStopped()>
<com.android.server.IntentResolver: int unregister_intent_filter(android.content.IntentFilter,java.util.Iterator,java.util.HashMap,java.lang.String)>
<android.view.ViewRootImpl$RunQueue: void postDelayed(java.lang.Runnable,long)>
<android.inputmethodservice.ExtractEditText: boolean isFocused()>
<android.app.Notification$1: void <init>()>
<com.android.internal.telephony.IccSmsInterfaceManager: void <init>(com.android.internal.telephony.PhoneBase)>
<android.app.ActivityThread$ActivityClientRecord: void <init>()>
<com.android.server.ThrottleService: long access$1402(com.android.server.ThrottleService,long)>
<com.android.server.ConnectivityService: void loge(java.lang.String)>
<android.app.ActivityManager$ProcessErrorStateInfo: void readFromParcel(android.os.Parcel)>
<com.android.server.am.PendingIntentRecord: void dump(java.io.PrintWriter,java.lang.String)>
<android.view.InputChannel: void transferTo(android.view.InputChannel)>
<android.telephony.PhoneNumberUtils: boolean isISODigit(char)>
<com.android.server.location.LocationProviderProxy: boolean requiresCell()>
<android.view.ViewRootImpl$3: void <init>(android.view.ViewRootImpl)>
<android.server.BluetoothPanProfileHandler: void debugLog(java.lang.String)>
<android.view.accessibility.AccessibilityInteractionClient: void <clinit>()>
<android.media.AudioService: void unloadSoundEffects()>
<Wrapper_android_sax_EndElementListener: void test_android_sax_EndElementListener()>
<android.app.Instrumentation: void init(android.app.ActivityThread,android.content.Context,android.content.Context,android.content.ComponentName,android.app.IInstrumentationWatcher)>
<android.media.JetPlayer: boolean queueJetSegmentMuteArray(int,int,int,int,boolean[],byte)>
<android.media.TimedText: void readFont()>
<android.view.VolumePanel: void access$000(android.view.VolumePanel)>
<android.view.accessibility.AccessibilityRecord: int getFromIndex()>
<android.widget.AutoCompleteTextView: void setDropDownAnimationStyle(int)>
<android.app.ActionBar: void <init>()>
<android.widget.CursorFilter: void <init>(android.widget.CursorFilter$CursorFilterClient)>
<com.android.internal.telephony.DataConnection: com.android.internal.telephony.DataConnection$DcDisconnectingState access$2600(com.android.internal.telephony.DataConnection)>
<android.net.NetworkUtils: java.lang.String[] makeStrings(java.util.Collection)>
<android.accounts.AccountManager: java.util.HashMap access$1300(android.accounts.AccountManager)>
<android.webkit.WebView: int access$3000(android.webkit.WebView)>
<android.accounts.AccountAuthenticatorResponse$1: android.accounts.AccountAuthenticatorResponse createFromParcel(android.os.Parcel)>
<android.os.Parcel: java.util.ArrayList createBinderArrayList()>
<android.server.BluetoothService: boolean setBluetoothTetheringNative(boolean,java.lang.String,java.lang.String)>
<android.view.MotionEvent: android.view.InputEvent copy()>
<GenerationGG: android.location.Location get_androidlocationLocation()>
<android.content.Intent: void setExtrasClassLoader(java.lang.ClassLoader)>
<com.android.server.wm.DragState: void reset()>
<android.net.wifi.p2p.WifiP2pDevice$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.view.ViewRootImpl: int getHostVisibility()>
<android.webkit.JWebCoreJavaBridge: void <clinit>()>
<android.text.HtmlToSpannedConverter: java.util.HashMap buildColorMap()>
<android.view.GLES20DisplayList: void end()>
<android.renderscript.FieldPacker: void addU32(android.renderscript.Long2)>
<android.server.BluetoothService: boolean setupNativeDataNative()>
<android.os.Debug: int getBinderProxyObjectCount()>
<android.graphics.Matrix: void <init>(android.graphics.Matrix)>
<android.net.http.AndroidHttpClient: void modifyRequestToAcceptGzipResponse(org.apache.http.HttpRequest)>
<GenerationGG: android.view.textservice.SpellCheckerSession get_androidviewtextserviceSpellCheckerSession()>
<android.view.HardwareRenderer$GlRenderer: void destroy(boolean)>
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: java.lang.Object newResult(android.content.IntentFilter,int)>
<android.view.animation.Animation: void reset()>
<android.media.audiofx.Visualizer: int native_setCaptureSize(int)>
<android.renderscript.Element: android.renderscript.Element SCRIPT(android.renderscript.RenderScript)>
<android.media.MediaPlayer: void setDataSource(java.io.FileDescriptor,long,long)>
<android.webkit.WebViewCore: void clearCache(boolean)>
<android.widget.TextView: android.content.res.ColorStateList getTextColors()>
<android.graphics.Matrix: void checkPointArrays(float[],int,float[],int,int)>
<android.net.ProxyProperties: void <init>(android.net.ProxyProperties)>
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub: void <init>()>
<android.speech.tts.AudioPlaybackHandler$ListEntry: void <init>(android.speech.tts.AudioPlaybackHandler,int,android.speech.tts.MessageParams,android.speech.tts.AudioPlaybackHandler$1)>
<android.view.GLES20Canvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>
<com.android.internal.telephony.cdma.CDMAPhone: void notifyPreciseCallStateChanged()>
<android.graphics.Camera: void finalize()>
<android.renderscript.Element: android.renderscript.Element U8_2(android.renderscript.RenderScript)>
<android.view.DragEvent: android.view.DragEvent obtain(int,float,float,java.lang.Object,android.content.ClipDescription,android.content.ClipData,boolean)>
<com.android.internal.app.AlertController: void setInverseBackgroundForced(boolean)>
<GenerationGG: android.view.animation.Interpolator get_androidviewanimationInterpolator()>
<android.webkit.WebViewCore: void nativeSendListBoxChoices(boolean[],int)>
<android.text.style.URLSpan: java.lang.String getURL()>
<com.android.internal.view.InputConnectionWrapper$InputContextCallback: void setExtractedText(android.view.inputmethod.ExtractedText,int)>
<android.view.View: void setSystemUiVisibility(int)>
<android.view.ViewConfiguration: int getMinimumFlingVelocity()>
<android.content.res.AssetManager: int readAsset(int,byte[],int,int)>
<android.telephony.SmsMessage: java.lang.String getEmailFrom()>
<android.net.wifi.WifiNative: int addNetworkCommand()>
<GenerationGG: android.media.AudioManager$OnAudioFocusChangeListener get_androidmediaAudioManager__OnAudioFocusChangeListener()>
<android.widget.AutoCompleteTextView: int getDropDownHeight()>
<android.server.BluetoothPanProfileHandler$BluetoothPanDevice: int access$400(android.server.BluetoothPanProfileHandler$BluetoothPanDevice)>
<android.text.TextLine: void updateMetrics(android.graphics.Paint$FontMetricsInt,int,int,int,int,int)>
<android.net.rtp.AudioGroup: void nativeSetMode(int)>
<com.android.internal.os.LoggingPrintStream$1: void write(int)>
<android.graphics.Path: void transform(android.graphics.Matrix,android.graphics.Path)>
<com.android.server.LocationManagerService$LpCapabilityComparator: void <init>(com.android.server.LocationManagerService,com.android.server.LocationManagerService$1)>
<GenerationGG: android.widget.SlidingDrawer$OnDrawerScrollListener get_androidwidgetSlidingDrawer__OnDrawerScrollListener()>
<android.content.ClipData: int getItemCount()>
<android.graphics.drawable.RotateDrawable: android.graphics.drawable.Drawable getDrawable()>
<android.test.suitebuilder.TestMethod: void <init>(java.lang.reflect.Method,java.lang.Class)>
<android.text.util.Linkify$1: void <init>()>
<android.content.ContentService$ObserverCall: void <init>(android.content.ContentService$ObserverNode,android.database.IContentObserver,boolean)>
<com.android.internal.telephony.cat.ComprehensionTlvTag: void <init>(java.lang.String,int,int)>
<android.bluetooth.BluetoothDeviceProfileState$2: void <init>(android.bluetooth.BluetoothDeviceProfileState)>
<android.view.MotionEvent: float getHistoricalSize(int,int)>
<com.android.internal.telephony.IccCardApplication$AppState: void <init>(java.lang.String,int)>
<android.media.AudioService$FocusStackEntry: void unlinkToDeath()>
<android.webkit.HttpAuthHandler: void <init>()>
<android.os.StrictMode$ThreadPolicy: void <clinit>()>
<android.graphics.Bitmap: void setHasAlpha(boolean)>
<android.telephony.PhoneNumberUtils: int tryGetTrunkPrefixOmittedIndex(java.lang.String,int)>
<android.content.pm.ConfigurationInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.PackageParser: void setSeparateProcesses(java.lang.String[])>
<com.android.internal.widget.ScrollingTabContainerView$VisibilityAnimListener: void onAnimationRepeat(android.animation.Animator)>
<android.preference.MultiSelectListPreference: java.lang.CharSequence[] access$100(android.preference.MultiSelectListPreference)>
<android.media.audiofx.EnvironmentalReverb: void setProperties(android.media.audiofx.EnvironmentalReverb$Settings)>
<android.content.IntentFilter$1: java.lang.Object[] newArray(int)>
<android.widget.GridView: android.widget.Adapter getAdapter()>
<android.app.DialogFragment: void dismissAllowingStateLoss()>
<android.widget.TextView: android.content.Context access$6700(android.widget.TextView)>
<android.text.SpannableStringBuilder: java.lang.String region(int,int)>
<android.webkit.WebView: boolean isEnterActionKey(int)>
<android.graphics.Rect: void union(int,int)>
<android.graphics.PorterDuffXfermode: int nativeCreateXfermode(int)>
<android.media.RemoteControlClient$MetadataEditor: java.lang.Object clone()>
<android.inputmethodservice.IInputMethodSessionWrapper: android.view.inputmethod.InputMethodSession getInternalInputMethodSession()>
<android.hardware.SensorManager$ListenerDelegate: android.hardware.SensorEventListener access$100(android.hardware.SensorManager$ListenerDelegate)>
<com.android.server.wm.ViewServer: boolean isRunning()>
<android.text.style.URLSpan: int getSpanTypeId()>
<android.test.InstrumentationTestRunner$WatcherResultPrinter: void writeBeginSnapshot(java.lang.String)>
<android.widget.GridView: int getStretchMode()>
<com.android.internal.telephony.gsm.SimCard: void <init>(com.android.internal.telephony.PhoneBase,java.lang.String,java.lang.Boolean)>
<com.android.internal.os.BatteryStatsImpl$Timer: void writeToParcel(android.os.Parcel,long)>
<android.os.BatteryStats$HistoryItem: void setTo(long,byte,android.os.BatteryStats$HistoryItem)>
<android.accounts.Account$1: void <init>()>
<com.android.server.am.PendingIntentRecord: void completeFinalize()>
<android.net.NetworkStatsHistory: void <init>(long,int)>
<com.android.internal.telephony.cat.Tone$1: com.android.internal.telephony.cat.Tone createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void log(java.lang.String)>
<com.android.internal.util.FastXmlSerializer: void append(char)>
<GenerationGG: android.text.util.Linkify get_androidtextutilLinkify()>
<com.android.internal.util.StateMachine$SmHandler: void access$1200(com.android.internal.util.StateMachine$SmHandler,android.os.Message)>
<android.net.Uri$HierarchicalUri: boolean isHierarchical()>
<android.app.Fragment: void onStop()>
<android.content.pm.ManifestDigest: void <init>(android.os.Parcel,android.content.pm.ManifestDigest$1)>
<android.media.AudioService: java.lang.Object access$6700()>
<android.view.animation.AnticipateOvershootInterpolator: void <init>()>
<android.animation.LayoutTransition$1: void <init>(android.animation.LayoutTransition,android.view.ViewGroup)>
<android.net.wifi.WifiNative: boolean p2pGroupRemove(java.lang.String)>
<android.widget.HeaderViewListAdapter: boolean removeFooter(android.view.View)>
<android.graphics.drawable.ShapeDrawable: void setShaderFactory(android.graphics.drawable.ShapeDrawable$ShaderFactory)>
<GenerationGG: android.app.backup.BackupDataOutput get_androidappbackupBackupDataOutput()>
<android.bluetooth.BluetoothHealth$BluetoothHealthCallbackWrapper: void onHealthChannelStateChange(android.bluetooth.BluetoothHealthAppConfiguration,android.bluetooth.BluetoothDevice,int,int,android.os.ParcelFileDescriptor,int)>
<android.net.http.RequestQueue: org.apache.http.HttpHost determineHost(org.apache.http.HttpHost)>
<android.widget.ActivityChooserModel: java.lang.Object access$600(android.widget.ActivityChooserModel)>
<android.media.MediaRecorder: void _prepare()>
<android.view.InputChannel$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.text.format.Time: boolean parse(java.lang.String)>
<android.app.DialogFragment: boolean isCancelable()>
<android.widget.ZoomButtonsController: android.widget.ZoomButtonsController$OnZoomListener access$600(android.widget.ZoomButtonsController)>
<android.view.animation.Animation: float resolveSize(int,float,int,int)>
<android.os.ParcelFileDescriptor$AutoCloseInputStream: void close()>
<java.lang.Object: int getStyleAttribute()>
<android.widget.TextView$PositionListener: void removeSubscriber(android.widget.TextView$TextViewPositionListener)>
<com.android.internal.textservice.ITextServicesManager$Stub: void <init>()>
<android.view.View: boolean verifyDrawable(android.graphics.drawable.Drawable)>
<android.webkit.StreamLoader: boolean sendData()>
<android.view.InputQueue: void nativeFinished(long,boolean)>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Phone$DataState getDataConnectionState(java.lang.String)>
<android.webkit.WebSettings: void setAllowContentAccess(boolean)>
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.PhoneNumberUtil getInstance()>
<android.widget.GridLayout$Assoc: void put(java.lang.Object,java.lang.Object)>
<com.android.internal.telephony.gsm.SIMFileHandler: void finalize()>
<android.view.View: int getLayoutDirection()>
<android.speech.tts.AudioPlaybackHandler: void stop(android.speech.tts.MessageParams)>
<com.android.internal.util.HexDump: void <clinit>()>
<android.renderscript.FileA3D$IndexEntry: void <init>(android.renderscript.RenderScript,int,int,java.lang.String,android.renderscript.FileA3D$EntryType)>
<android.media.MediaPlayer: void native_setup(java.lang.Object)>
<android.content.pm.VerifierDeviceIdentity: void <init>(android.os.Parcel)>
<GenerationGG: android.content.UriMatcher get_androidcontentUriMatcher()>
<android.media.AudioSystem: java.lang.String getParameters(java.lang.String)>
<android.telephony.SignalStrength: void <init>(android.telephony.SignalStrength)>
<android.graphics.drawable.NinePatchDrawable$NinePatchState: void <init>(android.graphics.NinePatch,android.graphics.Rect)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(java.lang.Object,java.lang.String,int[])>
<android.net.NetworkIdentity: java.lang.String getSubscriberId()>
<android.os.Debug: long getNativeHeapAllocatedSize()>
<com.android.internal.telephony.cdma.SmsMessage: int getProtocolIdentifier()>
<android.net.INetworkPolicyListener$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.server.WifiService: void evaluateTrafficStatsPolling()>
<android.renderscript.Allocation: void copyFrom(int[])>
<android.view.MotionEvent: int nativeGetMetaState(int)>
<android.bluetooth.BluetoothDeviceProfileState: boolean access$6200(android.bluetooth.BluetoothDeviceProfileState)>
<android.content.SyncStorageEngine: java.util.ArrayList getSyncHistory()>
<android.graphics.Canvas: void setDensity(int)>
<android.net.wifi.WifiStateMachine: void access$15200(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<com.android.internal.os.BatteryStatsImpl$Uid: boolean reset()>
<android.view.View: int getMeasuredHeightAndState()>
<android.net.wifi.p2p.WifiP2pService: boolean access$4700(android.net.wifi.p2p.WifiP2pService)>
<android.widget.GridLayout$PackedMap: java.lang.Object[] compact(java.lang.Object[],int[])>
<android.net.wifi.WifiStateMachine: void access$10800(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.graphics.Canvas: void drawPicture(android.graphics.Picture,android.graphics.Rect)>
<GenerationGG: android.net.sip.SipErrorCode get_androidnetsipSipErrorCode()>
<android.graphics.Paint: float ascent()>
<Wrapper_android_text_style_StrikethroughSpan: void test_android_text_style_StrikethroughSpan()>
<GenerationGG: android.content.AbstractThreadedSyncAdapter get_androidcontentAbstractThreadedSyncAdapter()>
<android.animation.ValueAnimator: long getDuration()>
<com.android.server.net.NetworkAlertObserver: void interfaceLinkStateChanged(java.lang.String,boolean)>
<android.graphics.Region: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.WifiStateMachine: android.net.ConnectivityManager access$12200(android.net.wifi.WifiStateMachine)>
<android.os.storage.StorageManager: int getNextNonce()>
<android.view.ViewGroup: void setLayoutAnimationListener(android.view.animation.Animation$AnimationListener)>
<android.graphics.PorterDuff$Mode: void <clinit>()>
<android.hardware.Sensor: void setLegacyType(int)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setGeneralDesc(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<Wrapper_android_app_backup_FileBackupHelper: void test_android_app_backup_FileBackupHelper()>
<android.graphics.Rect: void inset(int,int)>
<android.content.IntentFilter: void <init>(android.os.Parcel,android.content.IntentFilter$1)>
<android.webkit.WebSettings: void setRenderPriority(android.webkit.WebSettings$RenderPriority)>
<android.speech.tts.AudioPlaybackHandler: boolean isSpeaking()>
<android.view.MotionEvent: float nativeGetXOffset(int)>
<com.android.server.CountryDetectorService: android.os.Handler access$100(com.android.server.CountryDetectorService)>
<android.view.View: int getSystemUiVisibility()>
<android.text.InputFilter$LengthFilter: java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int)>
<android.widget.AbsListView: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>
<android.webkit.WebChromeClient: void openFileChooser(android.webkit.ValueCallback,java.lang.String)>
<android.os.ParcelFileDescriptor: void finalize()>
<android.net.wifi.WpsStateMachine$ActiveState: void <init>(android.net.wifi.WpsStateMachine)>
<android.widget.HorizontalScrollView: int getScrollRange()>
<android.os.storage.StorageVolume: void <init>(java.lang.String,java.lang.String,boolean,boolean,int,int,boolean,long,android.os.storage.StorageVolume$1)>
<android.bluetooth.BluetoothSocket: void initSocketNative()>
<android.graphics.drawable.ColorDrawable: void <init>(android.graphics.drawable.ColorDrawable$ColorState)>
<Wrapper_android_renderscript_Byte3: void test_android_renderscript_Byte3()>
<android.os.StatFs: int getBlockSize()>
<GenerationGG: android.text.method.ScrollingMovementMethod get_androidtextmethodScrollingMovementMethod()>
<android.webkit.ZoomControlExternal: android.os.Handler access$200(android.webkit.ZoomControlExternal)>
<android.view.animation.OvershootInterpolator: void <init>()>
<android.app.ContextImpl$ServiceFetcher: void <init>()>
<android.media.AudioTrack: void native_finalize()>
<android.app.Dialog: int getVolumeControlStream()>
<GenerationGG: android.inputmethodservice.InputMethodService get_androidinputmethodserviceInputMethodService()>
<android.media.AudioTrack: void play()>
<com.android.internal.os.BatteryStatsImpl: int getStartCount()>
<com.android.server.sip.SipSessionListenerProxy: void onCallBusy(android.net.sip.ISipSession)>
<android.content.SyncStorageEngine: java.util.ArrayList getPendingOperations()>
<android.content.IClipboard$Stub: android.os.IBinder asBinder()>
<android.app.Instrumentation: void onStart()>
<android.os.RecoverySystem: void verifyPackage(java.io.File,android.os.RecoverySystem$ProgressListener,java.io.File)>
<android.speech.tts.AudioPlaybackHandler: android.speech.tts.MessageParams getCurrentParams()>
<android.renderscript.Matrix4f: float[] getArray()>
<android.view.accessibility.AccessibilityNodeInfo: boolean equals(java.lang.Object)>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(int,java.lang.String)>
<android.telephony.PhoneStateListener: void onDataConnectionStateChanged(int)>
<android.webkit.WebViewCore: void nativeSaveDocumentState(int)>
<android.webkit.LoadListener: boolean ignoreCallbacks()>
<android.widget.TextView: int getBaseline()>
<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer attribute(java.lang.String,java.lang.String,java.lang.String)>
<android.media.MediaPlayer: void setSurface(android.view.Surface)>
<GenerationGG: android.renderscript.ProgramRaster get_androidrenderscriptProgramRaster()>
<GenerationGG: java.text.NumberFormat get_javatextNumberFormat()>
<android.graphics.Camera: void <init>()>
<com.android.server.pm.PackageManagerService$DumpState: boolean isDumping(int)>
<android.net.wifi.SupplicantStateTracker: void access$500(android.net.wifi.SupplicantStateTracker,com.android.internal.util.IState)>
<android.net.DummyDataStateTracker: void setUserDataEnable(boolean)>
<android.util.XmlPullAttributes: java.lang.String getPositionDescription()>
<android.net.http.RequestQueue$SyncFeeder: android.net.http.Request getRequest()>
<com.android.internal.telephony.DataConnectionTracker$Activity: void <init>(java.lang.String,int)>
<android.database.CursorWindow: int nativeGetType(int,int,int)>
<com.android.server.NetworkManagementService: void <init>(android.content.Context)>
<GenerationGG: android.renderscript.BaseObj get_androidrenderscriptBaseObj()>
<android.graphics.Region: void <init>(int)>
<com.android.internal.view.menu.MenuItemImpl: java.lang.String getShortcutLabel()>
<android.graphics.drawable.BitmapDrawable: android.graphics.Shader$TileMode getTileModeX()>
<android.media.AudioService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.renderscript.RenderScriptGL: void <init>(android.content.Context,android.renderscript.RenderScriptGL$SurfaceConfig)>
<com.android.internal.telephony.cdma.sms.BearerData: void encodeUserData(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)>
<GenerationGG: android.net.wifi.p2p.WifiP2pInfo get_androidnetwifip2pWifiP2pInfo()>
<android.text.SpannableStringBuilder: void checkRange(java.lang.String,int,int)>
<android.webkit.BrowserFrame: void access$200(android.webkit.BrowserFrame,int)>
<android.media.audiofx.Visualizer: void finalize()>
<com.android.internal.telephony.cat.CommandParamsFactory: com.android.internal.telephony.cat.CommandDetails processCommandDetails(java.util.List)>
<android.hardware.usb.UsbDeviceConnection: boolean native_open(java.lang.String,java.io.FileDescriptor)>
<com.android.internal.telephony.CallTracker: android.os.Message obtainNoPollCompleteMessage(int)>
<android.telephony.gsm.GsmCellLocation: int getCid()>
<android.widget.Toast: void setGravity(int,int,int)>
<android.content.res.XmlBlock: int access$1200(int,java.lang.String,java.lang.String)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void access$1400(com.android.internal.telephony.cdma.CdmaLteUiccRecords,android.os.AsyncResult)>
<android.animation.ValueAnimator: android.animation.ValueAnimator ofObject(android.animation.TypeEvaluator,java.lang.Object[])>
<android.widget.CalendarView: int access$2400(android.widget.CalendarView)>
<android.view.View$12: void <init>(java.lang.String)>
<com.android.server.ThrottleService: com.android.server.ThrottleService$DataRecorder access$102(com.android.server.ThrottleService,com.android.server.ThrottleService$DataRecorder)>
<android.webkit.CookieManager: boolean nativeAcceptCookie()>
<android.webkit.WebIconDatabase: void releaseIconForPageUrl(java.lang.String)>
<android.database.AbstractCursor: void registerContentObserver(android.database.ContentObserver)>
<android.widget.ListPopupWindow$DropDownListView: boolean hasFocus()>
<android.view.PointerIcon: android.view.PointerIcon getNullIcon()>
<android.net.http.Headers: void setConnectionType(org.apache.http.util.CharArrayBuffer,int)>
<android.graphics.drawable.ShapeDrawable: android.graphics.Paint getPaint()>
<Wrapper_android_content_res_AssetFileDescriptor: void test_android_content_res_AssetFileDescriptor()>
<android.view.KeyEvent: boolean metaStateHasNoModifiers(int)>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>
<com.android.internal.widget.LockPatternView: void drawCircle(android.graphics.Canvas,int,int,boolean)>
<android.graphics.Region: boolean nativeOp(int,int,int,int)>
<android.view.animation.Animation: void restrictDuration(long)>
<android.net.http.Headers: void setXPermittedCrossDomainPolicies(java.lang.String)>
<android.widget.RatingBar: void onKeyChange()>
<android.net.sip.SipProfile: java.lang.String getPassword()>
<android.webkit.WebViewCore: void nativeDeleteSelection(int,int,int)>
<com.android.internal.view.menu.MenuPopupHelper: void onViewAttachedToWindow(android.view.View)>
<android.content.pm.RegisteredServicesCache: android.content.pm.RegisteredServicesCache$ServiceInfo getServiceInfo(java.lang.Object)>
<android.net.http.RequestHandle: java.lang.String H(java.lang.String)>
<GenerationGG: org.apache.http.client.ResponseHandler get_orgapachehttpclientResponseHandler()>
<android.util.XmlPullAttributes: int getAttributeIntValue(int,int)>
<android.webkit.WebView: void onGlobalFocusChanged(android.view.View,android.view.View)>
<android.test.mock.MockContentProvider$InversionIContentProvider: android.os.ParcelFileDescriptor openFile(android.net.Uri,java.lang.String)>
<android.content.SyncStorageEngine: android.content.SyncStorageEngine$AuthorityInfo getAuthorityLocked(android.accounts.Account,java.lang.String,java.lang.String)>
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: void <init>(android.os.IBinder)>
<GenerationGG: java.util.Comparator get_javautilComparator()>
<android.text.style.QuoteSpan: int describeContents()>
<android.mtp.MtpDevice: boolean native_delete_object(int)>
<android.net.wifi.p2p.WifiP2pInfo: void <clinit>()>
<android.server.BluetoothService: boolean connectInputDeviceNative(java.lang.String)>
<android.nfc.TransceiveResult$1: android.nfc.TransceiveResult[] newArray(int)>
<android.graphics.Canvas: boolean clipRect(android.graphics.Rect)>
<android.preference.ListPreference: void setEntryValues(java.lang.CharSequence[])>
<android.net.wifi.WifiInfo: void setMacAddress(java.lang.String)>
<android.widget.ArrayAdapter: java.util.List access$302(android.widget.ArrayAdapter,java.util.List)>
<android.media.audiofx.BassBoost: short getRoundedStrength()>
<com.android.internal.telephony.sip.SipCommandInterface: void writeSmsToSim(int,java.lang.String,java.lang.String,android.os.Message)>
<com.android.server.AppWidgetService$ServiceConnectionProxy: void <init>(android.util.Pair,android.os.IBinder)>
<android.view.PointerIcon: int access$102(android.view.PointerIcon,int)>
<com.android.server.MountService: com.android.internal.app.IMediaContainerService access$1802(com.android.server.MountService,com.android.internal.app.IMediaContainerService)>
<android.os.Handler: void removeMessages(int,java.lang.Object)>
<android.webkit.WebSettings: java.lang.String getCursiveFontFamily()>
<android.net.wifi.WifiStateMachine$ScanModeState: boolean processMessage(android.os.Message)>
<android.preference.RingtonePreference: void setRingtoneType(int)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Float)>
<android.gesture.GestureOverlayView: void setUncertainGestureColor(int)>
<com.android.internal.util.StateMachine: android.os.Message obtainMessage(int,java.lang.Object)>
<com.android.server.ThrottleService$InterfaceObserver: void limitReached(java.lang.String,java.lang.String)>
<android.media.AudioService: boolean isStreamMute(int)>
<com.android.internal.telephony.cat.ImageDescriptor: com.android.internal.telephony.cat.ImageDescriptor parse(byte[],int)>
<android.media.audiofx.AudioEffect: int getId()>
<android.animation.ValueAnimator: void setValues(android.animation.PropertyValuesHolder[])>
<android.inputmethodservice.KeyboardView: void resetMultiTap()>
<android.hardware.usb.UsbDevice: boolean equals(java.lang.Object)>
<android.view.accessibility.AccessibilityEvent: java.lang.CharSequence getPackageName()>
<android.net.wifi.WifiStateMachine$DisconnectedState: void <init>(android.net.wifi.WifiStateMachine)>
<android.webkit.WebView: boolean nativeFocusCandidateHasNextTextfield()>
<android.widget.PopupWindow: void <clinit>()>
<android.os.WorkSource: void <init>(int)>
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.DataConnectionTracker$State getState()>
<android.view.View$3: boolean apply(android.view.View)>
<android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy: android.os.IBinder asBinder()>
<android.server.BluetoothAdapterStateMachine: void access$7200(android.server.BluetoothAdapterStateMachine,android.os.Message)>
<android.preference.Preference: long getId()>
<android.content.IntentFilter$AuthorityEntry: void <init>(android.os.Parcel)>
<android.webkit.WebView: boolean nativeFocusCandidateIsSpellcheck()>
<GenerationGG: android.renderscript.Script get_androidrenderscriptScript()>
<android.os.Bundle: void readFromParcelInner(android.os.Parcel,int)>
<android.view.View: void requestLayout()>
<android.preference.PreferenceActivity: java.util.ArrayList access$100(android.preference.PreferenceActivity)>
<android.app.SearchDialog: void updateSearchAutoComplete()>
<android.text.util.Rfc822Tokenizer: void tokenize(java.lang.CharSequence,java.util.Collection)>
<com.android.internal.telephony.ApnSetting: com.android.internal.telephony.ApnSetting fromString(java.lang.String)>
<com.android.server.WifiService$3: void <init>(com.android.server.WifiService)>
<android.view.GLES20Canvas: boolean clipRect(float,float,float,float,android.graphics.Region$Op)>
<android.view.InputQueue: void unregisterInputChannel(android.view.InputChannel)>
<android.graphics.Camera: void getMatrix(android.graphics.Matrix)>
<android.content.Loader: void forceLoad()>
<android.app.DownloadManager$Query: java.lang.String joinStrings(java.lang.String,java.lang.Iterable)>
<android.webkit.WebViewCore: void access$5200(android.webkit.WebViewCore,int,int)>
<android.view.animation.AnimationSet: java.util.List getAnimations()>
<android.app.backup.BackupHelperDispatcher: void addHelper(java.lang.String,android.app.backup.BackupHelper)>
<android.view.animation.Animation: void initializeInvalidateRegion(int,int,int,int)>
<android.widget.CalendarView$WeeksAdapter$CalendarGestureListener: void <init>(android.widget.CalendarView$WeeksAdapter)>
<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.opengles.GL createEglSurface(android.view.SurfaceHolder)>
<android.text.style.BulletSpan: void <init>(int)>
<android.webkit.WebView$HitTestResult: void <init>(android.webkit.WebView)>
<android.app.LocalActivityManager: android.app.Activity getCurrentActivity()>
<com.android.internal.telephony.cat.CatCmdMessage: void <init>(com.android.internal.telephony.cat.CommandParams)>
<android.webkit.ViewManager: void <init>(android.webkit.WebView)>
<com.android.internal.os.BatteryStatsImpl$Uid$Wakelock: void <init>(com.android.internal.os.BatteryStatsImpl$Uid)>
<android.os.RemoteCallback: void <init>(android.os.IRemoteCallback)>
<android.preference.ListPreference: int access$002(android.preference.ListPreference,int)>
<android.webkit.WebViewCore: void nativeFreeMemory()>
<android.view.GLES20Canvas: void nDrawColor(int,int,int)>
<com.android.server.AlarmManagerService: java.util.ArrayList getAlarmList(int)>
<android.view.animation.Animation: void setBackgroundColor(int)>
<android.graphics.Movie: android.graphics.Movie decodeFile(java.lang.String)>
<com.android.internal.os.BatteryStatsImpl$Uid: long getWifiRunningTime(long,int)>
<android.opengl.GLUtils: int getType(android.graphics.Bitmap)>
<android.text.style.SuggestionRangeSpan: void updateDrawState(android.text.TextPaint)>
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: void setSubtitle(int)>
<android.test.suitebuilder.TestMethod: java.lang.String getEnclosingClassname()>
<android.graphics.Canvas$EdgeType: void <clinit>()>
<GenerationGG: android.graphics.drawable.Drawable get_androidgraphicsdrawableDrawable()>
<android.text.HtmlToSpannedConverter: void <clinit>()>
<android.os.Handler: void handleMessage(android.os.Message)>
<com.android.server.connectivity.Tethering$TetherMasterSM: void <init>(com.android.server.connectivity.Tethering,java.lang.String,android.os.Looper)>
<android.service.wallpaper.WallpaperService$Engine$4: void dispatchWallpaperOffsets(float,float,float,float,boolean)>
<android.os.Process: void setThreadPriority(int)>
<android.widget.SimpleExpandableListAdapter: int getGroupCount()>
<com.android.server.PowerManagerService$TimeoutTask: void <init>(com.android.server.PowerManagerService)>
<android.text.style.StyleSpan: void updateDrawState(android.text.TextPaint)>
<android.webkit.WebSettings$PluginState: void <clinit>()>
<android.media.AudioTrack: int native_set_pos_update_period(int)>
<android.widget.GridLayout: void invalidateValues()>
<android.os.Message: int describeContents()>
<android.app.NativeActivity$InputMethodCallback: void finishedEvent(int,boolean)>
<GenerationGG: android.test.mock.MockContentProvider get_androidtestmockMockContentProvider()>
<android.app.backup.BackupAgentHelper: void onRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)>
<com.android.server.AlarmManagerService: int setKernelTimezone(int,int)>
<android.net.wifi.WifiConfigStore: void markAllNetworksDisabledExcept(int)>
<android.renderscript.RenderScript: void rsnContextBindRootScript(int,int)>
<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptor()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc setPossibleNumberPattern(java.lang.String)>
<android.widget.TextView$SuggestionsPopupWindow$SuggestionInfo: void removeMisspelledFlag()>
<android.view.ViewRootImpl: void dispatchDragEvent(android.view.DragEvent)>
<android.view.View: void <clinit>()>
<android.app.Instrumentation: void validateNotAppThread()>
<android.view.ViewGroup: boolean onRequestSendAccessibilityEventInternal(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.location.Address: java.lang.String access$702(android.location.Address,java.lang.String)>
<android.os.Process: void openZygoteSocketIfNeeded()>
<Wrapper_android_graphics_Shader: void test_android_graphics_Shader()>
<android.bluetooth.IBluetoothHeadset$Stub: android.bluetooth.IBluetoothHeadset asInterface(android.os.IBinder)>
<android.server.BluetoothAdapterStateMachine: void access$2100(android.server.BluetoothAdapterStateMachine,com.android.internal.util.IState)>
<com.android.server.location.PassiveProvider: int getPowerRequirement()>
<android.view.GLES20Canvas: void getMatrix(android.graphics.Matrix)>
<android.app.SearchableInfo: void <clinit>()>
<android.content.res.Resources: android.content.res.Resources getSystem()>
<android.net.LinkProperties: int describeContents()>
<android.view.GLES20Canvas: int setupModifiers(android.graphics.Paint)>
<android.app.Dialog: void setContentView(int)>
<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothSocket acceptNative(int)>
<android.nfc.NfcActivityManager: android.nfc.NdefMessage createMessage()>
<Wrapper_android_net_rtp_AudioStream: void test_android_net_rtp_AudioStream()>
<android.renderscript.Matrix4f: void load(android.renderscript.Matrix4f)>
<com.android.server.am.ProcessRecord: void resetPackageList()>
<android.webkit.Network: void setProxyUsername(java.lang.String)>
<android.view.KeyCharacterMap: char getNumber(int)>
<android.graphics.Canvas: void drawPoints(float[],android.graphics.Paint)>
<android.bluetooth.BluetoothAdapter$RfcommChannelPicker: void <clinit>()>
<android.net.NetworkStatsHistory: void recordEntireHistory(android.net.NetworkStatsHistory)>
<com.android.server.ThrottleService: int access$702(com.android.server.ThrottleService,int)>
<android.net.wifi.WifiStateMachine$WaitForP2pDisableState: void <init>(android.net.wifi.WifiStateMachine)>
<android.view.ViewRootImpl: boolean isViewDescendantOf(android.view.View,android.view.View)>
<android.content.BroadcastReceiver: android.os.Bundle getResultExtras(boolean)>
<com.android.internal.telephony.gsm.SmsMessage: boolean isMWIClearMessage()>
<com.android.server.am.ActivityManagerService: android.os.IBinder newUriPermissionOwner(java.lang.String)>
<android.os.Power: void acquireWakeLock(int,java.lang.String)>
<android.net.MobileDataStateTracker$MobileDataStateReceiver: void <init>(android.net.MobileDataStateTracker)>
<android.net.wifi.WifiStateMachine: void disableNetwork(android.os.Messenger,int,int)>
<android.webkit.WebStorage$Origin: void <init>(java.lang.String,long,long)>
<android.database.sqlite.SQLiteDatabase$1: void entryRemoved(boolean,java.lang.String,android.database.sqlite.SQLiteCompiledSql,android.database.sqlite.SQLiteCompiledSql)>
<android.webkit.WebViewCore: android.webkit.BrowserFrame access$1100(android.webkit.WebViewCore)>
<android.widget.GridLayout: void setOrientation(int)>
<android.webkit.WebViewCore: void nativeRegisterURLSchemeAsLocal(java.lang.String)>
<android.database.AbstractCursor: boolean isClosed()>
<android.view.GLES20RecordingCanvas: void drawPosText(char[],int,int,float[],android.graphics.Paint)>
<com.android.server.net.NetworkPolicyManagerService: void writePolicyLocked()>
<android.view.InflateException: void <init>(java.lang.String)>
<com.android.server.wm.WindowManagerService: int findIdxBasedOnAppTokens(com.android.server.wm.WindowState)>
<android.os.Parcel: android.os.Bundle readBundle()>
<android.app.BackStackState$1: void <init>()>
<com.android.internal.view.IInputConnectionWrapper: boolean isActive()>
<com.android.internal.net.NetworkStatsFactory: void <init>()>
<com.android.internal.telephony.CallTracker: boolean isCommandExceptionRadioNotAvailable(java.lang.Throwable)>
<android.preference.DialogPreference: void setDialogMessage(java.lang.CharSequence)>
<android.webkit.URLUtil: int parseHex(byte)>
<Wrapper_android_net_rtp_RtpStream: void test_android_net_rtp_RtpStream()>
<android.graphics.drawable.StateListDrawable: int[] getStateSet(int)>
<android.net.wifi.WifiApConfigStore$FileReadWriteHandler: void <init>(android.os.Looper)>
<android.app.ActivityManagerNative: android.app.IActivityManager asInterface(android.os.IBinder)>
<android.content.SyncResult: void <init>(android.os.Parcel)>
<android.widget.LinearLayout: int getNextLocationOffset(android.view.View)>
<android.app.backup.BackupDataOutput: int writeEntityHeader(java.lang.String,int)>
<com.android.server.wm.WindowManagerService: android.os.IBinder prepareDragSurface(android.view.IWindow,android.view.SurfaceSession,int,int,int,android.view.Surface)>
<GenerationGG: android.net.sip.SipException get_androidnetsipSipException()>
<android.view.View: boolean getKeepScreenOn()>
<android.net.UrlQuerySanitizer: boolean isHexDigit(char)>
<android.view.View: void onFinishTemporaryDetach()>
<com.android.server.PreferredComponent: void <init>(com.android.server.PreferredComponent$Callbacks,org.xmlpull.v1.XmlPullParser)>
<android.view.ViewDebug: android.view.View findView(android.view.View,java.lang.String)>
<android.app.Activity: android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet)>
<android.app.Instrumentation$ActivityMonitor: void <init>(java.lang.String,android.app.Instrumentation$ActivityResult,boolean)>
<com.android.internal.telephony.gsm.GsmDataConnection: void <init>(com.android.internal.telephony.PhoneBase,java.lang.String,int,com.android.internal.telephony.RetryManager)>
<android.util.NtpTrustedTime: long getCachedNtpTimeReference()>
<android.view.ViewGroup: android.view.ViewGroup$TouchTarget addTouchTarget(android.view.View,int)>
<android.widget.TextView: android.content.Context access$3600(android.widget.TextView)>
<android.util.TimeUtils: int accumField(int,int,boolean,int)>
<android.content.ClipData$Item: java.lang.CharSequence getText()>
<com.android.server.wm.WindowManagerService: void notifyHardKeyboardStatusChange()>
<android.view.View: void getFocusedRect(android.graphics.Rect)>
<android.net.NetworkStatsHistory$1: android.net.NetworkStatsHistory[] newArray(int)>
<com.android.internal.widget.LockPatternUtils: java.lang.String toHex(byte[])>
<android.graphics.BitmapRegionDecoder: android.graphics.Bitmap decodeRegion(android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<com.android.server.NetworkManagementSocketTagger$1: void <init>()>
<android.webkit.WebViewCore$EventHub: void sendMessageDelayed(android.os.Message,long)>
<android.webkit.CacheManager: boolean startCacheTransaction()>
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInParent(android.graphics.Rect)>
<android.view.ViewGroup: void removePointersFromTouchTargets(int)>
<com.android.server.pm.PackageSettingBase: boolean disableComponentLPw(java.lang.String)>
<com.android.server.accessibility.TouchExplorer$SendHoverDelayed: void <init>(com.android.server.accessibility.TouchExplorer,com.android.server.accessibility.TouchExplorer$1)>
<android.net.LocalSocketImpl: int getOption_native(java.io.FileDescriptor,int)>
<android.location.Location: boolean hasAltitude()>
<android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp: void <init>(android.bluetooth.BluetoothDeviceProfileState,android.bluetooth.BluetoothDeviceProfileState$1)>
<android.graphics.drawable.ScaleDrawable: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.widget.GridLayout$Spec: int getFlexibility()>
<android.content.pm.PathPermission$1: android.content.pm.PathPermission createFromParcel(android.os.Parcel)>
<android.graphics.Canvas: void native_drawTextOnPath(int,char[],int,int,int,float,float,int,int)>
<android.opengl.GLU: void <clinit>()>
<com.android.server.pm.PackageManagerService$1: void <init>(com.android.server.pm.PackageManagerService,long,android.content.pm.IPackageDataObserver)>
<android.accounts.AccountAuthenticatorActivity: void setAccountAuthenticatorResult(android.os.Bundle)>
<android.text.style.EasyEditSpan: void writeToParcel(android.os.Parcel,int)>
<android.webkit.SearchBoxImpl: void handleSuggestions(java.lang.String,java.util.List)>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(android.util.AttributeSet,int[])>
<android.accounts.IAccountManagerResponse$Stub$Proxy: void <init>(android.os.IBinder)>
<android.location.Address: java.lang.String getPhone()>
<com.android.server.wm.WindowManagerService: int reduceCompatConfigWidthSize(int,int,android.util.DisplayMetrics,int,int)>
<android.view.MotionEvent: int nativeGetPointerCount(int)>
<com.android.server.LocationManagerService$ProximityAlert: void dump(java.io.PrintWriter,java.lang.String)>
<android.database.sqlite.SQLiteStatement: long native_1x1_long()>
<android.webkit.WebViewCore: boolean access$6502(android.webkit.WebViewCore,boolean)>
<android.widget.ShareActionProvider$ShareAcitivityChooserModelPolicy: void <init>(android.widget.ShareActionProvider)>
<android.telephony.PhoneNumberUtils: boolean isDialable(java.lang.String)>
<com.android.server.LocationManagerService: java.util.HashSet access$1600(com.android.server.LocationManagerService)>
<com.android.server.am.ActivityManagerService$1: java.lang.String packageForFilter(android.content.IntentFilter)>
<android.app.backup.IBackupManager$Stub$Proxy: void <init>(android.os.IBinder)>
<android.content.ContentProvider: void onLowMemory()>
<android.media.AudioTrack: android.os.Looper access$000(android.media.AudioTrack)>
<GenerationGG: android.hardware.Camera get_androidhardwareCamera()>
<android.net.wifi.WifiStateMachine: void disconnectCommand()>
<android.widget.ExpandableListView: android.widget.ExpandableListAdapter getExpandableListAdapter()>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String,android.graphics.BitmapFactory$Options)>
<android.view.animation.AccelerateInterpolator: void <init>()>
<com.android.i18n.phonenumbers.AsYouTypeFormatter: char normalizeAndAccrueDigitsAndPlusSign(char,boolean)>
<android.content.res.ObbInfo$1: android.content.res.ObbInfo[] newArray(int)>
<GenerationGG: android.gesture.GestureOverlayView$OnGesturePerformedListener get_androidgestureGestureOverlayView__OnGesturePerformedListener()>
<android.media.AudioTrack: int getMinBufferSize(int,int,int)>
<com.android.internal.telephony.DataConnectionTracker: java.lang.String[] getActiveApnTypes()>
<android.os.Message: void <init>()>
<android.view.textservice.SuggestionsInfo: void writeToParcel(android.os.Parcel,int)>
<android.net.Uri$PathSegments: void <clinit>()>
<android.net.LocalSocketAddress: android.net.LocalSocketAddress$Namespace getNamespace()>
<android.webkit.Network: java.lang.String getProxyUsername()>
<android.view.HardwareRenderer$GlRenderer: void onPostDraw()>
<android.net.wifi.WifiStateMachine$ScanModeState: void <init>(android.net.wifi.WifiStateMachine)>
<android.content.res.ObbInfo$1: java.lang.Object[] newArray(int)>
<android.filterfw.core.GLEnvironment: boolean nativeInitWithCurrentContext()>
<com.android.server.BackupManagerService: long getAvailableRestoreToken(java.lang.String)>
<android.text.Editable$Factory: android.text.Editable$Factory getInstance()>
<android.graphics.drawable.ColorDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<android.view.ViewConfiguration: int getPressedStateDuration()>
<com.android.internal.view.menu.MenuItemImpl: boolean setVisibleInt(boolean)>
<com.android.server.BackupManagerService: void removeEverBackedUp(java.lang.String)>
<android.content.SyncStats$1: android.content.SyncStats[] newArray(int)>
<com.android.server.LocationManagerService$UpdateRecord: java.lang.String toString()>
<android.widget.ImageView: void setBaseline(int)>
<android.view.KeyCharacterMap: char nativeGetCharacter(int,int,int)>
<android.text.SpannableStringBuilder: int getSpanStart(java.lang.Object)>
<android.content.Intent: int filterHashCode()>
<android.os.StrictMode: void access$1300(android.os.StrictMode$ViolationInfo)>
<android.net.wifi.WifiStateMachine: boolean access$402(android.net.wifi.WifiStateMachine,boolean)>
<com.android.server.wm.InputManager: void nativeSetInputDispatchMode(boolean,boolean)>
<android.net.wifi.p2p.WifiP2pDevice: boolean wpsDisplaySupported()>
<android.widget.Switch: void setSwitchTypefaceByIndex(int,int)>
<com.android.server.location.LocationProviderProxy: int getPowerRequirement()>
<android.speech.tts.TextToSpeech: int addSpeech(java.lang.String,java.lang.String)>
<GenerationGG: android.hardware.Camera$OnZoomChangeListener get_androidhardwareCamera__OnZoomChangeListener()>
<android.webkit.BrowserFrame: java.lang.String nativeSaveWebArchive(java.lang.String,boolean)>
<Wrapper_android_app_backup_SharedPreferencesBackupHelper: void test_android_app_backup_SharedPreferencesBackupHelper()>
<Wrapper_android_renderscript_RSDriverException: void test_android_renderscript_RSDriverException()>
<com.android.internal.content.PackageMonitor: void onPackageAppeared(java.lang.String,int)>
<android.view.GLES20RecordingCanvas: void drawTextRun(char[],int,int,int,int,float,float,int,android.graphics.Paint)>
<android.app.BackStackRecord: android.app.FragmentTransaction replace(int,android.app.Fragment,java.lang.String)>
<com.android.internal.widget.ActionBarView: boolean shouldDelayChildPressedState()>
<android.app.KeyguardManager$1: void onKeyguardExitResult(boolean)>
<android.app.LocalActivityManager$LocalActivityRecord: void <init>(java.lang.String,android.content.Intent)>
<android.widget.AutoCompleteTextView: android.widget.AdapterView$OnItemSelectedListener getOnItemSelectedListener()>
<android.widget.TextView$EasyEditPopupWindow: int clipVertically(int)>
<android.webkit.WebSyncManager: void startSync()>
<android.view.ViewDebug: void startHierarchyTracing(java.lang.String,android.view.View)>
<com.android.internal.telephony.Connection$PostDialState: void <clinit>()>
<android.media.AudioService$ScoClient: void <init>(android.media.AudioService,android.os.IBinder)>
<android.webkit.CookieManager$2: void <init>(android.webkit.CookieManager)>
<android.telephony.TelephonyManager: void <init>()>
<android.content.ContentValues: void put(java.lang.String,java.lang.Double)>
<com.android.server.am.StrictModeViolationDialog: com.android.server.am.AppErrorResult access$100(com.android.server.am.StrictModeViolationDialog)>
<android.graphics.Canvas: void drawColor(int,android.graphics.PorterDuff$Mode)>
<com.android.internal.widget.LockPatternView: void onSizeChanged(int,int,int,int)>
<android.widget.AbsListView$LayoutParams: void <init>(int,int,int)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: boolean hasNationalPrefix()>
<android.content.UriMatcher: void addURI(java.lang.String,java.lang.String,int)>
<android.media.CamcorderProfile: boolean hasProfile(int,int)>
<android.widget.AbsListView: int getSolidColor()>
<android.preference.PreferenceActivity$Header$1: android.preference.PreferenceActivity$Header[] newArray(int)>
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void resetPollStats()>
<android.widget.TableLayout: android.widget.LinearLayout$LayoutParams generateDefaultLayoutParams()>
<com.android.server.pm.PackageManagerService: android.content.ComponentName matchComponentForVerifier(java.lang.String,java.util.List)>
<com.android.internal.statusbar.StatusBarNotification: void <clinit>()>
<android.animation.KeyframeSet: android.animation.KeyframeSet ofInt(int[])>
<com.android.internal.widget.ScrollingTabContainerView$VisibilityAnimListener: void <init>(com.android.internal.widget.ScrollingTabContainerView)>
<android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs: boolean isPooled()>
<com.android.internal.os.BatteryStatsImpl$Counter: void unplug(long,long)>
<android.media.CameraProfile: void <init>()>
<android.widget.RemoteViews$SetPendingIntentTemplate$1: void <init>(android.widget.RemoteViews$SetPendingIntentTemplate)>
<android.view.GLES20RecordingCanvas: void setPooled(boolean)>
<com.android.internal.telephony.PhoneProxy: java.lang.String getDeviceSvn()>
<android.server.BluetoothDeviceProperties: boolean isEmpty()>
<android.provider.Telephony$Mms: void <clinit>()>
<android.graphics.Matrix: void native_setSkew(int,float,float,float,float)>
<android.accounts.NetworkErrorException: void <init>(java.lang.String)>
<android.view.inputmethod.InputMethodInfo: int describeContents()>
<android.media.MediaPlayer: android.media.MediaPlayer$OnCompletionListener access$200(android.media.MediaPlayer)>
<android.graphics.Canvas: void native_drawPaint(int,int)>
<android.server.search.Searchables: android.content.ComponentName getWebSearchActivity()>
<android.view.View: android.view.KeyEvent$DispatcherState getKeyDispatcherState()>
<com.android.internal.telephony.cdma.SmsMessage: int getMessageType()>
<android.database.sqlite.SQLiteCompiledSql: void release()>
<android.hardware.usb.UsbRequest: boolean cancel()>
<android.content.Intent$ShortcutIconResource: java.lang.String toString()>
<com.android.server.location.MockProvider: void removeListener(int)>
<android.location.ILocationListener$Stub: void <init>()>
<GenerationGG: android.os.Debug get_androidosDebug()>
<android.graphics.Shader: void <init>()>
<android.widget.CursorAdapter$MyDataSetObserver: void <init>(android.widget.CursorAdapter)>
<com.android.internal.view.menu.MenuItemImpl: boolean shouldShowIcon()>
<com.android.internal.widget.ScrollingTabContainerView$TabView: android.app.ActionBar$Tab getTab()>
<Wrapper_android_renderscript_Byte2: void test_android_renderscript_Byte2()>
<android.view.accessibility.AccessibilityManager: boolean isTouchExplorationEnabled()>
<android.graphics.Canvas: void native_drawBitmap(int,int,float,float,int,int,int,int)>
<android.text.style.SuperscriptSpan: void updateMeasureState(android.text.TextPaint)>
<android.content.SearchRecentSuggestionsProvider: void <init>()>
<android.os.storage.StorageManager$ObbListenerDelegate: android.os.storage.OnObbStateChangeListener getListener()>
<android.os.Bundle: void typeWarning(java.lang.String,java.lang.Object,java.lang.String,java.lang.Object,java.lang.ClassCastException)>
<android.net.wifi.WifiConfigStore: java.lang.String getConfigFile()>
<android.content.res.XmlBlock$Parser: int getStyleAttribute()>
<java.lang.Object: void setFeature(java.lang.String,boolean)>
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void <init>(com.android.internal.telephony.gsm.GSMPhone,com.android.internal.telephony.SMSDispatcher)>
<android.widget.PopupWindow: int computeAnimationResource()>
<android.net.RouteInfo: void <init>(java.net.InetAddress)>
<android.animation.Keyframe$FloatKeyframe: java.lang.Object getValue()>
<android.sax.Element: void setStartElementListener(android.sax.StartElementListener)>
<android.net.LocalSocketImpl: void setOption_native(java.io.FileDescriptor,int,int,int)>
<android.graphics.drawable.GradientDrawable: android.graphics.Path buildRing(android.graphics.drawable.GradientDrawable$GradientState)>
<android.view.accessibility.AccessibilityRecord: void setChecked(boolean)>
<android.view.View: java.lang.String debugIndent(int)>
<com.android.server.am.ActivityManagerService$7: void <init>(com.android.server.am.ActivityManagerService)>
<android.test.suitebuilder.TestGrouping$TestMethodPredicate: void <init>()>
<android.app.ContextImpl: boolean deleteFile(java.lang.String)>
<android.util.DisplayMetrics: void setTo(android.util.DisplayMetrics)>
<com.android.internal.telephony.DataConnection: void access$1400(com.android.internal.telephony.DataConnection,android.os.Message)>
<android.bluetooth.BluetoothSocket: int readNative(byte[],int,int)>
<android.text.style.ScaleXSpan: void updateDrawState(android.text.TextPaint)>
<android.widget.CalendarView: int access$3000(android.widget.CalendarView)>
<android.net.NetworkStats: android.net.NetworkStats$Entry getTotal(android.net.NetworkStats$Entry,java.util.HashSet,int)>
<android.animation.PropertyValuesHolder: void <init>(java.lang.String)>
<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable getDrawable(int)>
<GenerationGG: java.lang.Runnable get_javalangRunnable()>
<android.view.View: void dispatchCollectViewAttributes(int)>
<android.app.Instrumentation: void <init>()>
<android.graphics.Paint: int breakText(char[],int,int,float,float[])>
<android.telephony.PhoneNumberUtils: void internalCalledPartyBCDFragmentToString(java.lang.StringBuilder,byte[],int,int)>
<android.media.AudioSystem: int getDevicesForStream(int)>
<android.widget.GridLayout$MutableInt: void <init>()>
<com.android.internal.net.LegacyVpnInfo$1: java.lang.Object[] newArray(int)>
<Wrapper_android_location_GpsSatellite: void test_android_location_GpsSatellite()>
<com.android.internal.os.BatteryStatsImpl: void <init>(java.lang.String)>
<android.view.textservice.SpellCheckerInfo$1: java.lang.Object[] newArray(int)>
<android.view.ScaleGestureDetector: int findNewActiveIndex(android.view.MotionEvent,int,int)>
<android.security.KeyChainException: void <init>(java.lang.String)>
<junit.runner.BaseTestRunner: boolean inVAJava()>
<android.graphics.Matrix: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)>
<android.net.wifi.SupplicantStateTracker: int access$002(android.net.wifi.SupplicantStateTracker,int)>
<android.webkit.WebSettings: boolean getHardwareAccelSkiaEnabled()>
<android.content.Loader: void onForceLoad()>
<android.media.RingtoneManager: void setFilterColumnsList(int)>
<com.android.server.PowerManagerService: void <init>()>
<android.app.Dialog: void onAttachedToWindow()>
<android.server.BluetoothService: int disableNative()>
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: void updateCurrentReportedTotalTime(long)>
<android.view.Surface: void unfreezeDisplay(int)>
<android.view.KeyEvent: int getKeyCode()>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()>
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: void write(byte[])>
<android.widget.ProgressBar: int getSecondaryProgress()>
<android.widget.AbsListView$RecycleBin: android.widget.AbsListView$RecyclerListener access$3502(android.widget.AbsListView$RecycleBin,android.widget.AbsListView$RecyclerListener)>
<GenerationGG: android.opengl.GLES11Ext get_androidopenglGLES11Ext()>
<android.net.http.Headers: void setExpires(java.lang.String)>
<android.hardware.usb.UsbDevice$1: android.hardware.usb.UsbDevice[] newArray(int)>
<android.content.Intent$ShortcutIconResource$1: void <init>()>
<android.widget.CalendarView$WeeksAdapter: void init()>
<android.view.animation.LayoutAnimationController: int getOrder()>
<android.view.MotionEvent: long nativeGetDownTimeNanos(int)>
<android.view.VolumePanel$2: boolean onTouchEvent(android.view.MotionEvent)>
<android.util.JsonWriter: void beforeName()>
<android.content.BroadcastReceiver: void setPendingResult(android.content.BroadcastReceiver$PendingResult)>
<android.renderscript.Matrix4f: float computeCofactor(int,int)>
<android.widget.SuggestionsAdapter$1: long getPostingDelay(java.lang.CharSequence)>
<android.view.GLES20Canvas: boolean quickReject(float,float,float,float,android.graphics.Canvas$EdgeType)>
<android.widget.SimpleAdapter: java.lang.String[] access$400(android.widget.SimpleAdapter)>
<android.text.style.ScaleXSpan: int getSpanTypeId()>
<android.media.AudioTrack: void native_setVolume(float,float)>
<com.android.server.sip.SipSessionGroup: void removeSipSession(com.android.server.sip.SipSessionGroup$SipSessionImpl)>
<android.widget.ResourceCursorAdapter: android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup)>
<android.graphics.ColorMatrix: void <init>()>
<android.webkit.URLUtil: void <clinit>()>
<android.net.http.Headers: void setContentDisposition(java.lang.String)>
<android.app.SearchManager: void onDismiss(android.content.DialogInterface)>
<android.preference.PreferenceManager: void registerOnActivityResultListener(android.preference.PreferenceManager$OnActivityResultListener)>
<com.android.internal.os.BatteryStatsImpl: long computeBatteryUptime(long,int)>
<android.animation.ObjectAnimator: android.animation.ValueAnimator clone()>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: int regCodeToServiceState(int)>
<android.content.Intent: android.content.Intent setClassName(java.lang.String,java.lang.String)>
<android.view.textservice.TextInfo: int describeContents()>
<android.webkit.WebStorage$1: void <init>(android.webkit.WebStorage)>
<android.graphics.drawable.NinePatchDrawable$NinePatchState: void <init>(android.graphics.NinePatch,android.graphics.Rect,boolean)>
<android.database.sqlite.SQLiteDatabaseLockedException: void <init>()>
<android.os.StrictMode$StrictModeDiskReadViolation: void <init>(int)>
<android.accounts.AccountManager$AmsTask$1: void <init>(android.accounts.AccountManager)>
<android.renderscript.RenderScript$MessageThread: void <init>(android.renderscript.RenderScript)>
<GenerationGG: android.os.IInterface get_androidosIInterface()>
<android.server.BluetoothService: java.lang.String getMainChannelNative(java.lang.String)>
<Wrapper_android_text_style_TypefaceSpan: void test_android_text_style_TypefaceSpan()>
<android.widget.PopupWindow: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)>
<android.os.Environment: boolean isEncryptedFilesystemEnabled()>
<android.webkit.WebStorage: void deleteOrigin(java.lang.String)>
<android.os.ServiceManagerProxy: void <init>(android.os.IBinder)>
<android.webkit.WebViewCore: void access$3000(android.webkit.WebViewCore)>
<android.net.Uri$PathPart: android.net.Uri$PathPart appendEncodedSegment(android.net.Uri$PathPart,java.lang.String)>
<android.animation.PropertyValuesHolder: void <init>(java.lang.String,android.animation.PropertyValuesHolder$1)>
<com.android.internal.view.menu.MenuBuilder: java.util.ArrayList getVisibleItems()>
<android.net.wifi.WifiInfo: void setSupplicantState(android.net.wifi.SupplicantState)>
<android.webkit.WebSettings: void setAppCachePath(java.lang.String)>
<Wrapper_android_content_ReceiverCallNotAllowedException: void test_android_content_ReceiverCallNotAllowedException()>
<android.provider.Settings$Secure: android.net.Uri getUriFor(java.lang.String)>
<com.android.server.LocationManagerService$ProximityAlert: boolean isInProximity(double,double,float)>
<com.android.internal.telephony.cdma.CDMAPhone: void setNetworkSelectionModeAutomatic(android.os.Message)>
<android.app.ContextImpl$24: java.lang.Object createService(android.app.ContextImpl)>
<java.lang.Object: java.lang.String toString()>
<android.net.wifi.p2p.WifiP2pConfig$Persist: void <init>(java.lang.String,int)>
<android.os.BatteryStats$Uid: void <clinit>()>
<android.widget.EdgeEffect: void update()>
<android.content.IContentService$Stub$Proxy: void <init>(android.os.IBinder)>
<android.view.MotionEvent: void addBatch(long,float,float,float,float,int)>
<android.view.GLES20Canvas: void outputDisplayList(android.view.DisplayList)>
<android.text.util.Linkify: void pruneOverlaps(java.util.ArrayList)>
<android.media.audiofx.EnvironmentalReverb: void setRoomLevel(short)>
<android.graphics.Bitmap: int scaleFromDensity(int,int,int)>
<android.widget.TextView: long packRangeInLong(int,int)>
<android.view.HardwareRenderer$GlRenderer: void destroySurface()>
<android.util.XmlPullAttributes: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>
<android.widget.ListView: android.graphics.drawable.Drawable getOverscrollHeader()>
<android.test.IsolatedContext$MockAccountManager$MockAccountManagerFuture: boolean isCancelled()>
<android.animation.ValueAnimator$2: void <init>()>
<com.android.internal.util.AsyncChannel$SyncMessenger$SyncHandler: android.os.Message access$402(com.android.internal.util.AsyncChannel$SyncMessenger$SyncHandler,android.os.Message)>
<android.location.Address: void setSubThoroughfare(java.lang.String)>
<android.widget.PopupWindow: void setInputMethodMode(int)>
<android.graphics.drawable.GradientDrawable: int getChangingConfigurations()>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder detectAll()>
<android.webkit.WebViewCore: void nativeSetSelection(int,int)>
<android.graphics.SurfaceTexture: void <clinit>()>
<android.graphics.RectF: void set(android.graphics.Rect)>
<android.net.wifi.WifiNative: boolean setBluetoothCoexistenceModeCommand(int)>
<android.net.http.Request: void handleSslErrorResponse(boolean)>
<android.os.Parcel$1: java.lang.String createFromParcel(android.os.Parcel)>
<android.app.ActivityThread: android.app.LoadedApk peekPackageInfo(java.lang.String,boolean)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: void <init>()>
<com.android.server.am.CoreSettingsObserver: void <clinit>()>
<android.text.style.LeadingMarginSpan$Standard: int getSpanTypeId()>
<com.android.server.LocationManagerService$2: void onPackageUpdateFinished(java.lang.String,int)>
<com.android.server.BackupManagerService$PerformBackupTask: void clearMetadata()>
<android.drm.DrmManagerClient: android.drm.DrmManagerClient$OnEventListener access$500(android.drm.DrmManagerClient)>
<android.graphics.Matrix$1: void setScale(float,float,float,float)>
<GenerationGG: android.app.backup.BackupAgentHelper get_androidappbackupBackupAgentHelper()>
<android.renderscript.RenderScript: void nAllocationData2D(int,int,int,int,int,int,int,int[],int)>
<com.android.internal.os.BatteryStatsImpl: void noteBluetoothOffLocked()>
<android.view.MotionEvent$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.internal.widget.AbsActionBarView: void setSplitActionBar(boolean)>
<android.net.wifi.WifiStateMachine: void access$11500(android.net.wifi.WifiStateMachine,android.os.Message)>
<android.widget.PopupWindow: void setWidth(int)>
<android.view.View$13: java.lang.Object get(java.lang.Object)>
<android.webkit.WebViewCore$EventHub: void removeMessages(int)>
<com.android.internal.app.AlertController: android.os.Message access$500(com.android.internal.app.AlertController)>
<com.android.internal.telephony.cat.LaunchBrowserParams: void <init>(com.android.internal.telephony.cat.CommandDetails,com.android.internal.telephony.cat.TextMessage,java.lang.String,com.android.internal.telephony.cat.LaunchBrowserMode)>
<android.media.AudioSystem: int setPhoneState(int)>
<android.widget.AdapterView$AdapterDataSetObserver: void clearSavedState()>
<android.animation.AnimatorSet: android.animation.AnimatorSet clone()>
<android.server.BluetoothBondState$1: void onServiceConnected(int,android.bluetooth.BluetoothProfile)>
<android.view.animation.Animation$Description: void <init>()>
<android.net.MobileDataStateTracker: void loge(java.lang.String)>
<android.view.inputmethod.CorrectionInfo$1: void <init>()>
<com.android.server.UiModeManagerService: int getCurrentModeType()>
<android.view.inputmethod.InputMethodInfo: boolean isAuxiliaryIme()>
<android.app.Activity$NonConfigurationInstances: void <init>()>
<android.database.sqlite.SQLiteCompiledSql: void native_compile(java.lang.String)>
<android.content.pm.ServiceInfo$1: java.lang.Object[] newArray(int)>
<com.android.internal.telephony.AdnRecordLoader: void <init>(com.android.internal.telephony.PhoneBase)>
<android.content.SyncStorageEngine: android.content.SyncStatusInfo getOrCreateSyncStatusLocked(int)>
<com.android.server.pm.PackageManagerService$FileInstallArgs: void <init>(com.android.server.pm.PackageManagerService,android.net.Uri,java.lang.String,java.lang.String)>
<android.view.ViewGroup$TouchTarget: android.view.ViewGroup$TouchTarget obtain(android.view.View,int)>
<android.view.VelocityTracker: java.lang.Object getNextPoolable()>
<android.webkit.WebViewCore$EventHub: int access$2600(android.webkit.WebViewCore$EventHub)>
<android.view.View$10: java.lang.Float get(android.view.View)>
<android.view.View: boolean isRootNamespace()>
<android.bluetooth.BluetoothUuid: boolean isUuidPresent(android.os.ParcelUuid[],android.os.ParcelUuid)>
<GenerationGG: android.webkit.PluginStub get_androidwebkitPluginStub()>
<com.android.internal.telephony.DataConnectionTracker: void onEnableNewApn()>
<com.android.server.wm.InputManager: android.view.InputChannel monitorInput(java.lang.String)>
<com.android.internal.telephony.cat.IconLoader: android.graphics.Bitmap parseToBnW(byte[],int)>
<com.android.internal.telephony.cat.Item$1: com.android.internal.telephony.cat.Item[] newArray(int)>
<android.text.TextDirectionHeuristics$TextDirectionHeuristicLocale: void <clinit>()>
<android.webkit.WebView: void dumpDomTree(boolean)>
<android.graphics.Camera: void setLocation(float,float,float)>
<Wrapper_android_os_RemoteCallbackList: void test_android_os_RemoteCallbackList()>
<android.content.pm.PackageParser: android.content.pm.ServiceInfo generateServiceInfo(android.content.pm.PackageParser$Service,int)>
<android.view.Surface: void <init>(android.view.SurfaceSession,int,java.lang.String,int,int,int,int,int)>
<GenerationGG: javax.microedition.khronos.egl.EGL get_javaxmicroeditionkhronoseglEGL()>
<android.view.View: void setDrawingCacheBackgroundColor(int)>
<android.sax.Element: void setEndTextElementListener(android.sax.EndTextElementListener)>
<android.graphics.Bitmap$1: android.graphics.Bitmap[] newArray(int)>
<android.animation.AnimatorSet: java.util.ArrayList access$400(android.animation.AnimatorSet)>
<com.android.server.ThrottleService: long ntpToWallTime(long)>
<android.os.UEventObserver: void <init>()>
<android.graphics.Point: void negate()>
<android.widget.TextView: int getCurrentHintTextColor()>
<android.renderscript.Element: android.renderscript.Element I8_4(android.renderscript.RenderScript)>
<android.hardware.usb.UsbDevice: int native_get_device_id(java.lang.String)>
<android.test.MoreAsserts: void assertEmpty(java.lang.Iterable)>
<com.android.internal.statusbar.IStatusBarService$Stub$Proxy: android.os.IBinder asBinder()>
<android.widget.CalendarView: int access$1300(android.widget.CalendarView,java.util.Calendar)>
<android.app.LoaderManagerImpl$LoaderInfo: void retain()>
<android.content.ComponentName: void <init>(android.content.Context,java.lang.Class)>
<android.server.BluetoothEventLoop: void start()>
<android.net.RouteInfo: boolean matches(java.net.InetAddress)>
<android.view.InputChannel: java.lang.String nativeGetName()>
<android.accounts.AccountManager: android.accounts.IAccountManager access$000(android.accounts.AccountManager)>
<android.graphics.Rect: android.graphics.Rect unflattenFromString(java.lang.String)>
<android.app.SharedPreferencesImpl: int access$308(android.app.SharedPreferencesImpl)>
<com.android.internal.telephony.RestrictedState: boolean equals(java.lang.Object)>
<android.app.ActivityThread: void queueOrSendMessage(int,java.lang.Object)>
<android.renderscript.Type$CubemapFace: void <clinit>()>
<Wrapper_android_content_ComponentName: void test_android_content_ComponentName()>
<com.android.server.NotificationManagerService: void updateNotificationPulse()>
<com.android.internal.util.BitwiseOutputStream: byte[] toByteArray()>
<android.service.wallpaper.WallpaperService$Engine$2: boolean isCreating()>
<com.android.server.am.AppNotRespondingDialog: com.android.server.am.ActivityManagerService access$100(com.android.server.am.AppNotRespondingDialog)>
<android.accounts.AuthenticatorDescription: boolean equals(java.lang.Object)>
<android.util.MonthDisplayHelper: int getYear()>
<com.android.internal.http.HttpDateTime: int getYear(java.lang.String)>
<android.widget.Scroller: void fling(int,int,int,int,int,int,int,int)>
<android.text.SpannableStringBuilder: int nextSpanTransition(int,int,java.lang.Class)>
<android.util.LruCache: java.util.Map snapshot()>
<android.webkit.WebView: boolean nativeHitSelection(int,int)>
<android.text.method.BaseMovementMethod: boolean down(android.widget.TextView,android.text.Spannable)>
<android.net.sip.SimpleSessionDescription$Media: void <init>(java.lang.String,int,int,java.lang.String)>
<android.location.Criteria: int access$102(android.location.Criteria,int)>
<com.android.internal.net.DNParser: java.lang.String nextAT()>
<Wrapper_android_renderscript_ProgramStore: void test_android_renderscript_ProgramStore()>
<android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiInfo access$1302(android.net.wifi.WifiWatchdogStateMachine,android.net.wifi.WifiInfo)>
<android.net.wifi.WifiStateMachine: boolean access$502(android.net.wifi.WifiStateMachine,boolean)>
<android.widget.DatePicker: long getMaxDate()>
<android.text.method.Touch: int getInitialScrollY(android.widget.TextView,android.text.Spannable)>
<android.view.ViewGroup: void setLayoutAnimation(android.view.animation.LayoutAnimationController)>
<android.security.Credentials: java.util.List convertFromPem(byte[])>
<android.os.Debug: void stopMethodTracing()>
<android.accounts.IAccountManagerResponse$Stub: android.os.IBinder asBinder()>
<GenerationGG: android.net.sip.SipSession$Listener get_androidnetsipSipSession__Listener()>
<android.graphics.Interpolator: int nativeTimeToValues(int,int,float[])>
<android.graphics.Point: boolean equals(int,int)>
<android.os.Parcel: void writeException(java.lang.Exception)>
<android.graphics.Paint: void nativeGetCharArrayBounds(int,char[],int,int,android.graphics.Rect)>
<android.test.InstrumentationTestRunner: com.android.internal.util.Predicate getSizePredicateFromArg(java.lang.String)>
<android.media.audiofx.AudioEffect: int byteArrayToInt(byte[])>
<android.nfc.NdefRecord: void <init>(short,byte[],byte[],byte[],byte)>
<android.util.LogWriter: void <init>(int,java.lang.String)>
<android.view.accessibility.AccessibilityEvent$1: android.view.accessibility.AccessibilityEvent[] newArray(int)>
<GenerationGG: junit.framework.Test get_junitframeworkTest()>
<android.widget.GridLayout: boolean isRowOrderPreserved()>
<android.webkit.HTML5VideoView: boolean fullScreenExited()>
<android.content.SyncAdaptersCache$MySerializer: void writeAsXml(android.content.SyncAdapterType,org.xmlpull.v1.XmlSerializer)>
<android.view.GLES20RecordingCanvas: boolean isPooled()>
<Wrapper_android_net_Credentials: void test_android_net_Credentials()>
<android.graphics.Bitmap$1: java.lang.Object[] newArray(int)>
<android.widget.NumberPicker: void initializeSelectorWheelIndices()>
<android.os.StrictMode$4: void <init>(java.lang.String,int,android.os.StrictMode$ViolationInfo)>
<android.view.Surface: void destroy()>
<android.telephony.TelephonyManager: java.lang.String getSimOperatorName()>
<com.android.internal.telephony.IPhoneSubInfo$Stub: void <init>()>
<com.android.server.IntentResolver: void dumpFilter(java.io.PrintWriter,java.lang.String,android.content.IntentFilter)>
<android.accessibilityservice.IAccessibilityServiceConnection$Stub: void <init>()>
<android.view.ViewGroup: int getDescendantFocusability()>
<android.widget.ActivityChooserModel$DataModelPackageMonitor: void <init>(android.widget.ActivityChooserModel,android.widget.ActivityChooserModel$1)>
<android.widget.RemoteViewsAdapter: java.lang.Object getItem(int)>
<android.opengl.GLES10: void glVertexPointer(int,int,int,java.nio.Buffer)>
<android.content.res.ColorStateList: android.content.res.ColorStateList withAlpha(int)>
<com.android.internal.util.StateMachine: void addState(com.android.internal.util.State)>
<android.net.VpnService: android.os.IBinder onBind(android.content.Intent)>
<android.view.InputDevice: void addMotionRange(int,int,float,float,float,float)>
<android.telephony.PhoneNumberUtils: java.lang.String toCallerIDMinMatch(java.lang.String)>
<android.view.animation.AnticipateOvershootInterpolator: void <init>(float)>
<com.android.internal.telephony.cat.Duration$TimeUnit: int value()>
<android.net.http.HttpAuthHeader: java.lang.String getQop()>
<android.webkit.HTML5VideoInline: void <clinit>()>
<com.android.internal.view.menu.SubMenuBuilder: boolean isQwertyMode()>
<android.bluetooth.BluetoothDeviceProfileState: boolean access$1200(android.bluetooth.BluetoothDeviceProfileState)>
<android.accounts.IAccountAuthenticatorResponse$Stub$Proxy: void <init>(android.os.IBinder)>
<android.media.IMediaScannerListener$Stub: android.os.IBinder asBinder()>
<android.view.View: boolean fitSystemWindows(android.graphics.Rect)>
<android.view.ViewGroup: void attachLayoutAnimationParameters(android.view.View,android.view.ViewGroup$LayoutParams,int,int)>
<android.app.ContextImpl$25: void <init>()>
<android.text.style.BackgroundColorSpan: int getBackgroundColor()>
<android.speech.SpeechRecognizer$Connection: void <init>(android.speech.SpeechRecognizer,android.speech.SpeechRecognizer$1)>
<android.net.wifi.WifiWatchdogStateMachine: boolean rssiStrengthAboveCutoff(int)>
<android.webkit.HTML5VideoView: void decideDisplayMode()>
<com.android.i18n.phonenumbers.AsYouTypeFormatter: boolean attemptToExtractCountryCallingCode()>
<android.view.animation.AlphaAnimation: boolean hasAlpha()>
<android.media.FaceDetector: int fft_detect(android.graphics.Bitmap)>
<GenerationGG: android.content.SyncInfo get_androidcontentSyncInfo()>
<android.content.SyncManager$ActiveSyncContext: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<android.telephony.ServiceState: void setCdmaRoamingIndicator(int)>
<java.lang.Object: java.lang.String getPositionDescription()>
<android.net.wifi.WifiConfiguration$1: android.net.wifi.WifiConfiguration[] newArray(int)>
<android.content.res.AssetFileDescriptor: void <init>(android.os.ParcelFileDescriptor,long,long)>
<android.widget.RemoteViewsAdapter: android.os.Handler access$1000(android.widget.RemoteViewsAdapter)>
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance()>
<android.webkit.WebChromeClient: void onShowCustomView(android.view.View,int,android.webkit.WebChromeClient$CustomViewCallback)>
<android.graphics.drawable.Drawable: boolean onLevelChange(int)>
<android.os.Parcel: void writeDouble(double)>
<android.view.SurfaceSession: void kill()>
<android.app.Notification: int describeContents()>
<GenerationGG: android.widget.PopupWindow$OnDismissListener get_androidwidgetPopupWindow__OnDismissListener()>
<android.renderscript.RSTextureView: void init()>
<android.location.Address: void setPostalCode(java.lang.String)>
<GenerationGG: android.view.MenuItem$OnMenuItemClickListener get_androidviewMenuItem__OnMenuItemClickListener()>
<android.util.Xml$Encoding: void <init>(java.lang.String,int,java.lang.String)>
<android.view.ViewGroup: boolean fitSystemWindows(android.graphics.Rect)>
<android.app.ActivityManager$TaskThumbnails: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.WifiStateMachine: void access$13100(android.net.wifi.WifiStateMachine,android.os.Message)>
<android.net.http.Request: void addHeaders(java.util.Map)>
<com.android.internal.telephony.DataConnection: void tearDown(java.lang.String,android.os.Message)>
<android.text.method.PasswordTransformationMethod$ViewReference: void <init>(android.view.View)>
<android.os.Environment: java.io.File getExternalStorageAppObbDirectory(java.lang.String)>
<android.text.style.DrawableMarginSpan: int getLeadingMargin(boolean)>
<android.location.Location: void setSpeed(float)>
<android.view.InputEventConsistencyVerifier: void ensureHistorySizeIsZeroForThisAction(android.view.MotionEvent)>
<android.content.pm.PackageParser: java.lang.String validateName(java.lang.String,boolean)>
<android.app.Activity: void onAttachFragment(android.app.Fragment)>
<android.appwidget.AppWidgetHostView: int getAppWidgetId()>
<android.content.CursorLoader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.renderscript.FieldPacker: void addI8(android.renderscript.Byte2)>
<android.view.ScaleGestureDetector: float getPreviousSpanX()>
<android.server.BluetoothAdapterStateMachine: void access$3000(android.server.BluetoothAdapterStateMachine,com.android.internal.util.IState)>
<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable mutate()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getAllButNulLegal()>
<android.webkit.WebSettings$ZoomDensity: void <clinit>()>
<Wrapper_android_Manifest: void test_android_Manifest()>
<android.content.pm.VerifierDeviceIdentity: boolean equals(java.lang.Object)>
<com.android.server.UiModeManagerService: android.location.LocationListener access$1000(com.android.server.UiModeManagerService)>
<android.content.res.AssetManager: void incRefsLocked(int)>
<android.os.RemoteCallback$1: android.os.RemoteCallback createFromParcel(android.os.Parcel)>
<DumbClass: void DumbMethod10()>
<android.server.BluetoothService: void classInitNative()>
<android.widget.NumberPicker: android.animation.AnimatorSet access$500(android.widget.NumberPicker)>
<android.app.ActivityThread$Profiler: void setProfiler(java.lang.String,android.os.ParcelFileDescriptor)>
<com.android.server.sip.SipService$AutoRegistrationProcess: int backoffDuration()>
<android.bluetooth.BluetoothDeviceProfileState: android.bluetooth.BluetoothDeviceProfileState$IncomingHid access$3300(android.bluetooth.BluetoothDeviceProfileState)>
<android.text.style.CharacterStyle: void <init>()>
<android.media.TimedText$CharPos: void <init>(android.media.TimedText)>
<android.app.Instrumentation: void stopAllocCounting()>
<android.net.LocalSocket: java.io.FileDescriptor[] getAncillaryFileDescriptors()>
<com.android.internal.telephony.IccRecords: void registerForRecordsLoaded(android.os.Handler,int,java.lang.Object)>
<android.app.Instrumentation: java.util.List access$300(android.app.Instrumentation)>
<android.media.RingtoneManager: void <clinit>()>
<android.gesture.GestureStroke: void <init>(java.util.ArrayList)>
<com.android.internal.telephony.cdma.CdmaConnection$1: void <clinit>()>
<android.test.mock.MockContext: void sendBroadcast(android.content.Intent,java.lang.String)>
<android.drm.DrmInfoRequest: int getInfoType()>
<com.android.server.am.ProcessList: void applyDisplaySize(com.android.server.wm.WindowManagerService)>
<android.animation.LayoutTransition: java.util.HashMap access$100(android.animation.LayoutTransition)>
<com.android.internal.os.SamplingProfilerIntegration: void writeSnapshot(java.lang.String,android.content.pm.PackageInfo)>
<android.net.sip.SimpleSessionDescription$Fields: void setAttribute(java.lang.String,java.lang.String)>
<android.database.CursorWindow: int nativeGetNumRows(int)>
<com.android.server.usb.UsbDeviceManager: void setCurrentFunction(java.lang.String,boolean)>
<android.renderscript.Allocation: void copyTo(float[])>
<android.util.XmlPullAttributes: int getAttributeNameResource(int)>
<android.speech.tts.SilenceMessageParams: int getType()>
<android.hardware.usb.UsbDevice: int getDeviceClass()>
<android.location.Criteria: void setAltitudeRequired(boolean)>
<android.app.PendingIntent$CanceledException: void <init>()>
<com.android.internal.telephony.cat.Duration$TimeUnit: com.android.internal.telephony.cat.Duration$TimeUnit[] values()>
<android.graphics.Matrix: boolean setPolyToPoly(float[],int,float[],int,int)>
<android.net.wifi.SupplicantState$1: android.net.wifi.SupplicantState createFromParcel(android.os.Parcel)>
<android.text.method.TextKeyListener$Capitalize: android.text.method.TextKeyListener$Capitalize[] values()>
<android.os.storage.StorageManager$ListenerDelegate: android.os.storage.StorageEventListener getListener()>
<android.view.View: int getBottom()>
<android.view.View$13: java.lang.Float get(android.view.View)>
<android.view.MotionEvent: void setEdgeFlags(int)>
<GenerationGG: android.database.sqlite.SQLiteMisuseException get_androiddatabasesqliteSQLiteMisuseException()>
<android.telephony.SmsMessage: int getStatusOnIcc()>
<android.graphics.RectF: boolean contains(float,float)>
<android.widget.ZoomButtonsController$3: void <init>(android.widget.ZoomButtonsController)>
<android.webkit.WebView: android.graphics.Rect nativeFocusNodeBounds()>
<android.text.format.DateFormat: java.text.DateFormat getMediumDateFormat(android.content.Context)>
<android.content.pm.VerifierInfo: int describeContents()>
<android.app.Activity: boolean onKeyLongPress(int,android.view.KeyEvent)>
<com.android.internal.util.FastXmlSerializer: void append(java.lang.String,int,int)>
<com.android.server.pm.PackageManagerService: java.util.List queryPermissionsByGroup(java.lang.String,int)>
<android.net.http.RequestHandle: java.lang.String computeCnonce()>
<android.view.IWindow$Stub$Proxy: android.os.IBinder asBinder()>
<android.app.ProgressDialog: void setIndeterminateDrawable(android.graphics.drawable.Drawable)>
<android.graphics.Typeface: android.graphics.Typeface defaultFromStyle(int)>
<java.lang.Object: boolean isChildSelectable(int,int)>
<android.mtp.MtpObjectInfo: int getAssociationType()>
<android.webkit.HTML5VideoView: void setOnInfoListener(android.webkit.HTML5VideoViewProxy)>
<android.test.mock.MockContext: android.content.pm.PackageManager getPackageManager()>
<com.android.internal.telephony.IccRecords: java.lang.String getVoiceMailAlphaTag()>
<android.view.HardwareRenderer: boolean isRequested()>
<android.speech.tts.AudioMessageParams: android.speech.tts.BlockingMediaPlayer getPlayer()>
<android.widget.CursorAdapter: java.lang.CharSequence convertToString(android.database.Cursor)>
<android.widget.RemoteViews$MemoryUsageCounter: void <init>(android.widget.RemoteViews,android.widget.RemoteViews$1)>
<android.view.textservice.SuggestionsInfo$1: android.view.textservice.SuggestionsInfo[] newArray(int)>
<com.android.internal.database.SortCursor: int access$102(com.android.internal.database.SortCursor,int)>
<android.widget.Chronometer: void dispatchChronometerTick()>
<android.app.NotificationManager: void <init>(android.content.Context,android.os.Handler)>
<android.net.DnsPinger: void sendResponse(int,int,int)>
<android.view.HardwareRenderer$Gl20Renderer: int[] getConfig(boolean)>
<android.net.IConnectivityManager$Stub$Proxy: android.os.IBinder asBinder()>
<android.text.TextDirectionHeuristics$TextDirectionHeuristicLocale: boolean defaultIsRtl()>
<android.webkit.WebSettings: boolean isNarrowColumnLayout()>
<GenerationGG: android.util.Log get_androidutilLog()>
<android.nfc.TransceiveResult$1: java.lang.Object[] newArray(int)>
<android.server.BluetoothHealthProfileHandler$HealthChannel: android.bluetooth.BluetoothHealthAppConfiguration access$800(android.server.BluetoothHealthProfileHandler$HealthChannel)>
<android.webkit.WebView: int nativeFocusCandidateType()>
<com.android.server.wm.InputApplicationHandle: void <init>(com.android.server.wm.AppWindowToken)>
<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageII(int,int,int)>
<android.text.Layout: void replaceWith(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)>
<android.widget.ListPopupWindow: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>
<android.os.StrictMode: void setThreadPolicy(android.os.StrictMode$ThreadPolicy)>
<GenerationGG: android.content.res.AssetManager get_androidcontentresAssetManager()>
<android.provider.ContactsContract$Contacts: void <clinit>()>
<android.test.mock.MockPackageManager: java.util.List queryBroadcastReceivers(android.content.Intent,int)>
<android.content.IntentFilter: int describeContents()>
<android.test.mock.MockPackageManager: void removePackageFromPreferred(java.lang.String)>
<android.app.ActivityManager: int getMemoryClass()>
<android.util.AndroidException: void <init>(java.lang.Exception)>
<android.hardware.usb.UsbDeviceConnection: void native_close()>
<com.android.server.am.ActivityStack: void dismissKeyguardOnNextActivityLocked()>
<com.android.internal.telephony.IccCardApplication$AppState: boolean isPukRequired()>
<GenerationGG: android.appwidget.AppWidgetProviderInfo get_androidappwidgetAppWidgetProviderInfo()>
<android.graphics.drawable.AnimatedRotateDrawable: android.graphics.drawable.Drawable mutate()>
<android.content.IntentSender$FinishedDispatcher: void run()>
<android.widget.GridLayout: int protect(int)>
<android.widget.ScrollView: void setFillViewport(boolean)>
<android.graphics.PathMeasure: void finalize()>
<android.net.wifi.p2p.WifiP2pService: android.app.Notification access$8002(android.net.wifi.p2p.WifiP2pService,android.app.Notification)>
<android.graphics.RectF: java.lang.String toShortString()>
<android.graphics.drawable.AnimatedRotateDrawable: void setFramesDuration(int)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection: java.util.List getMetadataList()>
<GenerationGG: android.gesture.GestureOverlayView$OnGestureListener get_androidgestureGestureOverlayView__OnGestureListener()>
<android.os.SystemProperties: java.lang.String native_get(java.lang.String,java.lang.String)>
<DumbClass: void DumbMethod36()>
<android.graphics.ColorMatrixColorFilter: void <init>(android.graphics.ColorMatrix)>
<android.security.IKeyChainAliasCallback$Stub: android.os.IBinder asBinder()>
<com.android.internal.telephony.RestrictedState: boolean isCsEmergencyRestricted()>
<android.view.View$DragShadowBuilder: void <init>(android.view.View)>
<android.app.Notification: void <clinit>()>
<GenerationGG: android.app.ActionBar$LayoutParams get_androidappActionBar__LayoutParams()>
<android.widget.DatePicker$SavedState: void <clinit>()>
<android.app.AlertDialog$Builder: android.content.Context getContext()>
<android.text.method.CharacterPickerDialog$OptionsAdapter: int getCount()>
<android.widget.Switch: void onLayout(boolean,int,int,int,int)>
<android.content.res.AssetManager: int loadResourceBagValue(int,int,android.util.TypedValue,boolean)>
<com.android.internal.telephony.DataConnectionTracker: void resetAllRetryCounts()>
<android.graphics.YuvImage: int[] calculateStrides(int,int)>
<com.android.server.connectivity.Tethering: void interfaceRemoved(java.lang.String)>
<android.os.Parcel: void writeByteArray(byte[],int,int)>
<android.renderscript.Allocation: void setFromFieldPacker(int,android.renderscript.FieldPacker)>
<android.server.BluetoothHealthProfileHandler: void <clinit>()>
<android.telephony.PhoneNumberUtils: java.lang.String calledPartyBCDFragmentToString(byte[],int,int)>
<com.android.internal.textservice.ISpellCheckerSession$Stub: android.os.IBinder asBinder()>
<android.widget.TextView$InsertionHandleView: void removeHiderCallback()>
<android.widget.TextView: android.content.Context access$6000(android.widget.TextView)>
<android.media.AudioRecord: int getChannelCount()>
<android.media.AudioService: android.media.AudioService$ScoClient getScoClient(android.os.IBinder,boolean)>
<GenerationGG: java.io.OutputStream get_javaioOutputStream()>
<com.android.internal.view.menu.MenuBuilder: void findItemsWithShortcutForKey(java.util.List,int,android.view.KeyEvent)>
<com.android.server.AlarmManagerService: java.util.ArrayList access$800(com.android.server.AlarmManagerService)>
<android.webkit.ZoomManager: void setZoomOverviewWidth(int)>
<android.renderscript.Matrix3f: void loadRotate(float,float,float,float)>
<android.webkit.JWebCoreJavaBridge: void setNetworkType(java.lang.String,java.lang.String)>
<GenerationGG: android.net.DhcpInfo get_androidnetDhcpInfo()>
<android.app.LoadedApk$ReceiverDispatcher$Args: void <init>(android.app.LoadedApk$ReceiverDispatcher,android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean)>
<android.graphics.SumPathEffect: int nativeCreate(int,int)>
<com.android.server.usb.UsbSettingsManager$DeviceFilter: boolean matches(com.android.server.usb.UsbSettingsManager$DeviceFilter)>
<android.view.WindowManagerImpl: android.view.WindowManagerImpl getDefault()>
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: void <init>(android.widget.ActivityChooserView)>
<android.renderscript.RenderScript: void nContextSetSurface(int,int,android.view.Surface)>
<com.android.server.sip.SipService$MyExecutor: void <init>(com.android.server.sip.SipService)>
<android.widget.RelativeLayout$DependencyGraph: void add(android.view.View)>
<com.android.internal.telephony.cat.LanguageResponseData: void <init>(java.lang.String)>
<android.widget.TextView: void resetResolvedDrawables()>
<android.media.audiofx.Virtualizer$BaseParameterListener: void <init>(android.media.audiofx.Virtualizer)>
<GenerationGG: android.gesture.GestureStroke get_androidgestureGestureStroke()>
<android.os.Handler: boolean postAtTime(java.lang.Runnable,java.lang.Object,long)>
<android.widget.ExpandableListPosition: long getPackedPosition()>
<android.content.res.TypedArray: int getDimensionPixelOffset(int,int)>
<android.net.http.HttpResponseCache: long size()>
<android.content.SyncInfo$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.net.EthernetDataTracker: android.net.NetworkInfo getNetworkInfo()>
<android.graphics.RectF: void union(float,float,float,float)>
<android.media.AudioFormat: void <init>()>
<DumbClass: void DumbMethod43()>
<com.android.server.sip.SipSessionListenerProxy$6: void <init>(com.android.server.sip.SipSessionListenerProxy,android.net.sip.ISipSession,java.lang.String)>
<android.content.res.TypedArray: int getIndex(int)>
<android.os.Debug$MemoryInfo: void readFromParcel(android.os.Parcel)>
<android.test.mock.MockCursor: boolean requery()>
<android.widget.ScrollView: void initOrResetVelocityTracker()>
<android.graphics.Canvas: void drawVertices(android.graphics.Canvas$VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)>
<android.widget.CalendarView: android.content.Context access$1200(android.widget.CalendarView)>
<android.app.SharedPreferencesImpl$2: void <init>(android.app.SharedPreferencesImpl,android.app.SharedPreferencesImpl$MemoryCommitResult,java.lang.Runnable)>
<android.appwidget.AppWidgetHostView$ParcelableSparseArray: void <init>()>
<com.android.server.PowerManagerService$BatteryReceiver: void <init>(com.android.server.PowerManagerService)>
<android.os.StrictMode$Span: java.lang.String access$1902(android.os.StrictMode$Span,java.lang.String)>
<android.content.res.XmlBlock$Parser: boolean getAttributeBooleanValue(int,boolean)>
<android.os.PatternMatcher$1: java.lang.Object[] newArray(int)>
<android.media.audiofx.EnvironmentalReverb: short getDiffusion()>
<com.android.internal.telephony.cdma.CdmaLteUiccFileHandler: void <init>(com.android.internal.telephony.cdma.CDMALTEPhone)>
<android.widget.ImageView: void <clinit>()>
<android.webkit.ZoomManager$FocusMovementQueue: void add(float)>
<com.android.internal.telephony.Connection$PostDialState: void <init>(java.lang.String,int)>
<android.accounts.AccountManager$BaseFutureTask: void access$700(android.accounts.AccountManager$BaseFutureTask,java.lang.Object)>
<android.animation.PropertyValuesHolder: java.lang.Object clone()>
<android.app.ActivityThread: boolean releaseProvider(android.content.IContentProvider)>
<android.widget.RadioGroup$PassThroughHierarchyChangeListener: void <init>(android.widget.RadioGroup)>
<android.inputmethodservice.InputMethodService: boolean onShowInputRequested(int,boolean)>
<com.android.internal.telephony.gsm.SimTlv: byte[] getData()>
<com.android.internal.telephony.gsm.SimCard: void dispose()>
<android.graphics.Canvas: void drawPoints(float[],int,int,android.graphics.Paint)>
<android.preference.DialogPreference: android.view.View onCreateDialogView()>
<android.net.wifi.WifiStateTracker: android.os.Handler access$500(android.net.wifi.WifiStateTracker)>
<com.android.server.am.UsageStatsService$TimeStats: void writeToParcel(android.os.Parcel)>
<com.android.internal.telephony.gsm.SmsMessage: boolean isCphsMwiMessage()>
<android.net.http.HttpAuthHeader: java.lang.String trimDoubleQuotesIfAny(java.lang.String)>
<android.graphics.drawable.BitmapDrawable: android.graphics.Paint getPaint()>
<android.nfc.NdefRecord: android.nfc.NdefRecord createUri(java.lang.String)>
<android.net.wifi.WifiNative: boolean doBooleanCommand(java.lang.String)>
<GenerationGG: android.test.suitebuilder.TestMethod get_androidtestsuitebuilderTestMethod()>
<android.media.AudioRecord: int read(java.nio.ByteBuffer,int)>
<android.view.ViewRootImpl: void bringChildToFront(android.view.View)>
<com.android.i18n.phonenumbers.PhoneNumberUtil: int getCountryCodeForRegion(java.lang.String)>
<android.text.method.DigitsKeyListener: void <clinit>()>
<android.database.sqlite.DatabaseConnectionPool$PoolObj: void verify()>
<android.net.wifi.WifiStateTracker: android.net.LinkProperties access$200(android.net.wifi.WifiStateTracker)>
<android.graphics.Region: void scale(float)>
<GenerationGG: android.text.style.AbsoluteSizeSpan get_androidtextstyleAbsoluteSizeSpan()>
<com.android.internal.widget.ScrollingTabContainerView$TabAdapter: java.lang.Object getItem(int)>
<android.net.NetworkUtils: boolean addressTypeMatches(java.net.InetAddress,java.net.InetAddress)>
<android.test.MoreAsserts: void assertEquals(java.lang.String,byte[],byte[])>
<com.android.server.NetworkManagementSocketTagger: void <clinit>()>
<com.android.internal.telephony.BaseCommands: void registerForRUIMReady(android.os.Handler,int,java.lang.Object)>
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: int getMaxActivityCount()>
<com.android.server.am.ActivityRecord: void putInHistory()>
<android.widget.ListPopupWindow$PopupScrollListener: void <init>(android.widget.ListPopupWindow,android.widget.ListPopupWindow$1)>
<android.renderscript.Allocation: android.renderscript.Element elementFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)>
<GenerationGG: android.hardware.Camera$PictureCallback get_androidhardwareCamera__PictureCallback()>
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder nativeNewInstance(int,boolean)>
<android.widget.ArrayAdapter: void setNotifyOnChange(boolean)>
<android.gesture.Gesture: int getStrokesCount()>
<android.widget.AbsListView: boolean touchModeDrawsInPressedState()>
<android.preference.DialogPreference: void setDialogIcon(android.graphics.drawable.Drawable)>
<android.webkit.WebView: android.graphics.Rect nativeCacheHitNodeBounds()>
<DumbClass: void DumbMethod7()>
<android.app.NativeActivity: void onPauseNative(int)>
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getPackageStats()>
<com.android.server.MountService: void doShareUnshareVolume(java.lang.String,java.lang.String,boolean)>
<com.android.server.BackupManagerService$ActiveRestoreSession$EndRestoreRunnable: void <init>(com.android.server.BackupManagerService$ActiveRestoreSession,com.android.server.BackupManagerService,com.android.server.BackupManagerService$ActiveRestoreSession)>
<android.content.pm.RegisteredServicesCache: void notifyListener(java.lang.Object,boolean)>
<android.app.backup.BackupAgent: void <init>()>
<GenerationGG: android.drm.DrmManagerClient get_androiddrmDrmManagerClient()>
<android.webkit.WebSyncManager: java.lang.Object clone()>
<android.widget.TextView: void resetResolvedLayoutDirection()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$3500(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,com.android.internal.util.IState)>
<android.animation.ValueAnimator: boolean access$802(android.animation.ValueAnimator,boolean)>
<android.hardware.Camera: void autoFocus(android.hardware.Camera$AutoFocusCallback)>
<com.android.internal.telephony.BaseCommands: int getLteOnCdmaMode()>
<com.android.internal.telephony.cat.CommandDetails$1: void <init>()>
<android.graphics.Paint: float native_getTextRunAdvances(int,char[],int,int,int,int,int,float[],int,int)>
<android.view.SurfaceView$3: void <init>(android.view.SurfaceView)>
<com.android.internal.content.NativeLibraryHelper: int nativeCopyNativeBinaries(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.app.Activity: android.app.Dialog onCreateDialog(int,android.os.Bundle)>
<android.net.Uri$StringUri: int describeContents()>
<android.graphics.Matrix$1: void setValues(float[])>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void access$2600(com.android.server.connectivity.Tethering$TetherInterfaceSM,com.android.internal.util.IState)>
<android.content.SyncStorageEngine: boolean isSyncPending(android.accounts.Account,java.lang.String)>
<android.os.DeadObjectException: void <init>()>
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setAlphabeticShortcut(char)>
<Wrapper_android_location_Criteria: void test_android_location_Criteria()>
<com.android.internal.telephony.cat.Input$1: com.android.internal.telephony.cat.Input[] newArray(int)>
<com.android.i18n.phonenumbers.AsYouTypeFormatter: boolean isDigitOrLeadingPlusSign(char)>
<com.android.server.AlarmManagerService: void set(int,int,long,long)>
<android.webkit.SelectActionModeCallback: void setWebView(android.webkit.WebView)>
<com.android.server.RandomBlock: com.android.server.RandomBlock fromStream(java.io.InputStream)>
<android.net.wifi.WifiStateMachine: android.os.Message access$3000(android.net.wifi.WifiStateMachine)>
<android.widget.StackView$LayoutParams: android.graphics.Rect getInvalidateRect()>
<android.view.TextureView: android.graphics.Bitmap getBitmap()>
<android.graphics.Canvas: void <init>(android.graphics.Bitmap)>
<Wrapper_android_provider_CallLog: void test_android_provider_CallLog()>
<android.widget.TextView: void setOnEditorActionListener(android.widget.TextView$OnEditorActionListener)>
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getAddress()>
<com.android.server.wm.WindowState$DeathRecipient: void <init>(com.android.server.wm.WindowState)>
<com.android.server.pm.Installer: int moveFiles()>
<android.widget.RelativeLayout$DependencyGraph$Node$1: android.util.Poolable newInstance()>
<android.media.audiofx.EnvironmentalReverb: short getReverbLevel()>
<android.view.MotionEvent: android.view.MotionEvent obtainNoHistory(android.view.MotionEvent)>
<android.net.LocalSocketImpl: int readba_native(byte[],int,int,java.io.FileDescriptor)>
<android.view.textservice.TextInfo$1: java.lang.Object[] newArray(int)>
<android.view.textservice.SuggestionsInfo: void <init>(int,java.lang.String[])>
<com.android.internal.telephony.cat.RilMessageDecoder: void access$800(com.android.internal.telephony.cat.RilMessageDecoder,com.android.internal.util.IState)>
<android.webkit.WebIconDatabase: void open(java.lang.String)>
<android.net.wifi.WifiStateMachine: com.android.internal.util.State access$7800(android.net.wifi.WifiStateMachine)>
<android.app.Instrumentation: void setAutomaticPerformanceSnapshots()>
<android.app.ActivityThread: void handleTrimMemory(int)>
<android.media.AudioTrack: int native_get_pos_update_period()>
<android.test.suitebuilder.annotation.HasMethodAnnotation: void <init>(java.lang.Class)>
<android.webkit.JsPromptResult: void confirm(java.lang.String)>
<android.hardware.SensorManager$LmsFilter: void <init>(android.hardware.SensorManager)>
<android.animation.ValueAnimator: long access$300(android.animation.ValueAnimator)>
<com.android.internal.telephony.DataConnectionTracker: void onSetDependencyMet(java.lang.String,boolean)>
<android.security.IKeyChainAliasCallback$Stub$Proxy: android.os.IBinder asBinder()>
<android.renderscript.Double4: void <init>(double,double,double,double)>
<android.content.res.XmlBlock$Parser: java.lang.String getPositionDescription()>
<android.widget.TextView$SelectionActionModeCallback: void <init>(android.widget.TextView)>
<android.filterfw.core.FrameFormat: int hashCode()>
<android.view.animation.RotateAnimation: void initialize(int,int,int,int)>
<android.view.inputmethod.BaseInputConnection: boolean performEditorAction(int)>
<com.android.internal.widget.LockPatternView: int getSuggestedMinimumHeight()>
<android.widget.OverScroller$SplineOverScroller: int access$100(android.widget.OverScroller$SplineOverScroller)>
<android.widget.VideoView: void seekTo(int)>
<android.media.FaceDetector: void finalize()>
<com.android.server.WifiService: java.util.List access$100(com.android.server.WifiService)>
<android.view.DragEvent: void <clinit>()>
<android.widget.TimePicker$SavedState: void <init>(android.os.Parcelable,int,int)>
<android.view.FocusFinder: boolean beamsOverlap(int,android.graphics.Rect,android.graphics.Rect)>
<android.service.wallpaper.WallpaperService$Engine$2: void setKeepScreenOn(boolean)>
<android.renderscript.Element: boolean isComplex()>
<android.webkit.WebView: int getViewWidth()>
<android.os.FileUtils: boolean sync(java.io.FileOutputStream)>
<android.opengl.GLSurfaceView$GLThread: void setRenderMode(int)>
<android.view.View: boolean canScrollVertically(int)>
<android.graphics.SurfaceTexture: void nativeFinalize()>
<com.android.server.AppWidgetService: void incrementAppWidgetServiceRefCount(int,android.content.Intent$FilterComparison)>
<android.renderscript.RenderScript: void finish()>
<android.content.AbstractThreadedSyncAdapter: android.accounts.Account access$100(android.content.AbstractThreadedSyncAdapter,android.accounts.Account)>
<android.filterfw.core.FrameFormat: java.lang.String baseTypeToString(int)>
<com.android.internal.http.HttpDateTime: int getDate(java.lang.String)>
<com.android.internal.util.XmlUtils: int convertValueToUnsignedInt(java.lang.String,int)>
<com.android.internal.telephony.gsm.GsmConnection: boolean isConnectingInOrOut()>
<com.android.internal.telephony.gsm.GsmServiceStateTracker$2: void <init>(com.android.internal.telephony.gsm.GsmServiceStateTracker,android.os.Handler)>
<com.android.server.net.NetworkStatsService$DefaultNetworkStatsSettings: long getTimeCacheMaxAge()>
<com.android.server.IntentResolver: java.util.List queryIntent(android.content.Intent,java.lang.String,boolean)>
<GenerationGG: android.util.Xml get_androidutilXml()>
<android.content.SyncManager: android.net.ConnectivityManager access$300(android.content.SyncManager)>
<android.bluetooth.BluetoothServerSocket: android.bluetooth.BluetoothSocket accept(int)>
<com.android.server.MountService: void removeObbStateLocked(com.android.server.MountService$ObbState)>
<android.widget.BaseExpandableListAdapter: boolean areAllItemsEnabled()>
<android.animation.LayoutTransition: long access$200(android.animation.LayoutTransition)>
<android.widget.SearchView$SearchAutoComplete: void setThreshold(int)>
<android.webkit.WebViewDatabase: android.webkit.WebViewDatabase getInstance(android.content.Context)>
<com.android.server.location.MockProvider: int getPowerRequirement()>
<android.content.res.CompatibilityInfo$Translator: void translateCanvas(android.graphics.Canvas)>
<android.content.ContextWrapper: java.io.FileInputStream openFileInput(java.lang.String)>
<android.widget.GridLayout: android.widget.GridLayout$LayoutParams getLayoutParams1(android.view.View)>
<android.view.SurfaceView$4: void setFixedSize(int,int)>
<android.content.res.CompatibilityInfo$Translator: android.graphics.Rect getTranslatedContentInsets(android.graphics.Rect)>
<android.view.DragEvent: void init(int,float,float,android.content.ClipDescription,android.content.ClipData,java.lang.Object,boolean)>
<android.app.BackStackRecord: android.app.FragmentTransaction addToBackStack(java.lang.String)>
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getLine1Number()>
<android.view.View: boolean hasAncestorThatBlocksDescendantFocus()>
<com.android.server.MountService: com.android.server.pm.PackageManagerService access$300(com.android.server.MountService)>
<com.android.server.LightsService$Light: void pulse(int,int)>
<android.bluetooth.BluetoothDeviceProfileState: void access$9900(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.IState)>
<GenerationGG: android.content.SharedPreferences$OnSharedPreferenceChangeListener get_androidcontentSharedPreferences__OnSharedPreferenceChangeListener()>
<android.widget.RatingBar: float getProgressPerStar()>
<android.view.KeyEvent$1: android.view.KeyEvent[] newArray(int)>
<android.view.MotionEvent: android.view.MotionEvent obtain()>
<android.view.View: void setAccessibilityDelegate(android.view.View$AccessibilityDelegate)>
<android.widget.Spinner$DialogPopup: void <init>(android.widget.Spinner)>
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.lang.String,boolean)>
<GenerationGG: android.net.wifi.p2p.WifiP2pManager$Channel get_androidnetwifip2pWifiP2pManager__Channel()>
<android.media.AudioService$3: void onCallStateChanged(int,java.lang.String)>
<android.os.Parcel: byte[] createByteArray()>
<com.android.internal.telephony.sip.SipConnectionBase: com.android.internal.telephony.Connection$PostDialState getPostDialState()>
<android.renderscript.Element$DataType: void <init>(java.lang.String,int,int,int)>
<com.android.internal.telephony.RILRequest: void <init>()>
<android.bluetooth.BluetoothDeviceProfileState: android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree access$2200(android.bluetooth.BluetoothDeviceProfileState)>
<GenerationGG: android.opengl.ETC1 get_androidopenglETC1()>
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void loge(java.lang.String)>
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getUserInfo()>
<android.view.ViewRootImpl$AccessibilityInteractionController: void findAccessibilityNodeInfoByViewIdClientThread(int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,long)>
<android.widget.AbsListView: void setMultiChoiceModeListener(android.widget.AbsListView$MultiChoiceModeListener)>
<com.android.internal.telephony.cdma.sms.BearerData: boolean decodeValidityRel(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)>
<com.android.internal.telephony.gsm.GSMPhone: void notifySuppServiceFailed(com.android.internal.telephony.Phone$SuppService)>
<android.database.sqlite.SQLiteQueryBuilder: void setDistinct(boolean)>
<android.widget.GridLayout$Axis: void <init>(android.widget.GridLayout,boolean)>
<android.net.sip.SipProfile: java.lang.String getAuthUserName()>
<GenerationGG: android.view.ContextMenu$ContextMenuInfo get_androidviewContextMenu__ContextMenuInfo()>
<com.android.server.WifiService$LockList: void dump(java.io.PrintWriter)>
<android.widget.AbsListView: void setScrollingCacheEnabled(boolean)>
<android.view.KeyCharacterMap: char nativeGetMatch(int,int,char[],int)>
<com.android.internal.os.BatteryStatsImpl$Uid: void <init>(com.android.internal.os.BatteryStatsImpl,int)>
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: void writeSummaryFromParcelLocked(android.os.Parcel,long)>
<android.telephony.PhoneNumberUtils: boolean matchIntlPrefix(java.lang.String,int)>
<com.android.server.accessibility.AccessibilityInputFilter: void <init>(android.content.Context)>
<com.android.internal.telephony.cdma.sms.UserData: java.lang.String toString()>
<android.animation.ValueAnimator: android.animation.ValueAnimator clone()>
<android.drm.DrmEvent: int getType()>
<Wrapper_android_graphics_Color: void test_android_graphics_Color()>
<com.android.internal.os.AtomicFile: java.io.File getBaseFile()>
<android.graphics.drawable.shapes.PathShape: void draw(android.graphics.Canvas,android.graphics.Paint)>
<com.android.internal.telephony.ApnContext: boolean isEnabled()>
<com.android.server.pm.PackageManagerService$FileInstallArgs: int doPreInstall(int)>
<android.telephony.SignalStrength: int describeContents()>
<android.util.XmlPullAttributes: int getIdAttributeResourceValue(int)>
<com.android.server.InputMethodManagerService$InputMethodSettings: void <init>(android.content.res.Resources,android.content.ContentResolver,java.util.HashMap,java.util.ArrayList)>
<android.server.BluetoothService: int enableNative()>
<android.mtp.MtpDevice: android.mtp.MtpObjectInfo native_get_object_info(int)>
<com.android.server.pm.PackageManagerService$DefaultContainerConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<android.net.MobileDataStateTracker: android.os.Messenger access$1000(android.net.MobileDataStateTracker)>
<android.preference.EditTextPreference$SavedState: void <clinit>()>
<GenerationGG: android.text.method.QwertyKeyListener get_androidtextmethodQwertyKeyListener()>
<android.view.textservice.SpellCheckerSession$SpellCheckerSessionListenerImpl: boolean checkOpenConnection()>
<com.android.server.accessibility.TouchExplorer$PerformLongPressDelayed: void clear()>
<android.net.wifi.WifiStateMachine: void log(java.lang.String)>
<android.server.BluetoothAdapterStateMachine: void access$7300(android.server.BluetoothAdapterStateMachine,android.os.Message)>
<java.lang.Object: java.lang.String[] getColumnNames()>
<com.android.internal.util.FastXmlSerializer: void <clinit>()>
<android.webkit.WebStorage$Origin: long getUsage()>
<android.text.TextLine: void expandMetricsFromPaint(android.graphics.Paint$FontMetricsInt,android.text.TextPaint)>
<android.app.Activity: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>
<com.android.server.pm.PackageManagerService$InstallParams: void handleReturnCode()>
<com.android.internal.os.BatteryStatsImpl$StopwatchTimer: void stopRunningLocked(com.android.internal.os.BatteryStatsImpl)>
<GenerationGG: android.view.View$OnGenericMotionListener get_androidviewView__OnGenericMotionListener()>
<com.android.server.wm.WindowState: boolean isDisplayedLw()>
<android.widget.ScrollView: void onSecondaryPointerUp(android.view.MotionEvent)>
<android.os.Handler: android.os.Message getPostMessage(java.lang.Runnable,java.lang.Object)>
<android.app.FragmentManagerImpl: void setBackStackIndex(int,android.app.BackStackRecord)>
<android.widget.RemoteViews: void setBitmap(int,java.lang.String,android.graphics.Bitmap)>
<com.android.internal.telephony.SmsHeader: java.lang.String toString()>
<android.graphics.Paint$FontMetricsInt: void <init>()>
<GenerationGG: android.test.AssertionFailedError get_androidtestAssertionFailedError()>
<android.content.ClipData: void <init>(java.lang.CharSequence,java.lang.String[],android.content.ClipData$Item)>
<android.hardware.usb.UsbDeviceConnection: byte[] getRawDescriptors()>
<android.location.ICountryListener$Stub: android.os.IBinder asBinder()>
<android.drm.DrmUtils$ExtendedMetadataParser: void <init>(byte[])>
<Wrapper_android_text_style_IconMarginSpan: void test_android_text_style_IconMarginSpan()>
<android.net.ProxyProperties$1: void <init>()>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>
<com.android.server.wm.AppWindowToken: java.lang.String toString()>
<android.graphics.Rasterizer: void finalizer(int)>
<com.android.server.pm.PackageManagerService$SdInstallArgs: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,java.lang.String,java.lang.String)>
<android.os.Environment: java.io.File getSystemSecureDirectory()>
<android.preference.ListPreference: int findIndexOfValue(java.lang.String)>
<android.net.ConnectivityManager: boolean isNetworkTypeMobile(int)>
<android.net.wifi.p2p.WifiP2pGroup: int describeContents()>
<android.os.Binder: int getCallingPid()>
<android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState[] values()>
<android.animation.Animator: void setupStartValues()>
<android.os.Parcel: java.lang.String[] createStringArray()>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.ServiceStateTracker getServiceStateTracker()>
<android.accounts.AccountManagerService$6: void <init>(android.accounts.AccountManagerService,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,android.accounts.Account,java.lang.String,android.os.Bundle)>
<GenerationGG: android.test.suitebuilder.annotation.SmallTest get_androidtestsuitebuilderannotationSmallTest()>
<com.android.server.InputMethodManagerService$InputMethodSettings: java.util.List createEnabledInputMethodListLocked(java.util.List)>
<android.os.Looper: void prepare()>
<android.telephony.ServiceState: void setRadioTechnology(int)>
<java.lang.Object: long getLong(int)>
<android.net.LocalSocket: java.lang.String toString()>
<android.renderscript.Byte4: void <init>(byte,byte,byte,byte)>
<android.filterfw.core.GLEnvironment: void initWithCurrentContext()>
<com.android.internal.app.ActionBarImpl$1: void <init>(com.android.internal.app.ActionBarImpl)>
<android.net.LinkCapabilities: java.util.HashMap access$000(android.net.LinkCapabilities)>
<android.content.pm.PackageParser$PermissionGroup: java.lang.String toString()>
<GenerationGG: android.appwidget.AppWidgetProvider get_androidappwidgetAppWidgetProvider()>
<android.telephony.gsm.SmsMessage: byte[] getPdu()>
<android.view.View: void postInvalidate()>
<android.gesture.GestureStore: void removeEntry(java.lang.String)>
<android.database.CursorToBulkCursorAdaptor: void <init>(android.database.Cursor,android.database.IContentObserver,java.lang.String)>
<android.os.ParcelFileDescriptor: int detachFd()>
<android.view.View: int getFadeHeight(boolean)>
<com.android.internal.os.ProcessStats: void init()>
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener)>
<com.android.internal.util.StateMachine: void sendMessageDelayed(android.os.Message,long)>
<com.android.server.location.MockProvider: void dump(java.io.PrintWriter,java.lang.String)>
<android.view.View: boolean isHovered()>
<android.bluetooth.BluetoothDevice: int describeContents()>
<android.widget.TextView: android.os.Bundle getInputExtras(boolean)>
<android.app.ActivityManager$ProcessErrorStateInfo$1: android.app.ActivityManager$ProcessErrorStateInfo[] newArray(int)>
<android.opengl.Matrix: void frustumM(float[],int,float,float,float,float,float,float)>
<android.content.ContentProviderOperation$1: void <init>()>
<android.widget.TableLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<com.android.internal.telephony.cat.Duration$1: com.android.internal.telephony.cat.Duration createFromParcel(android.os.Parcel)>
<android.widget.AutoCompleteTextView: void setOnClickListener(android.view.View$OnClickListener)>
<android.webkit.WebViewCore: void access$3500(android.webkit.WebViewCore,int,java.lang.String,int,int,boolean,boolean,boolean,boolean)>
<android.view.MotionEvent: float getRawY()>
<android.os.StrictMode$6: void <init>()>
<android.test.mock.MockContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter,java.lang.String,android.os.Handler)>
<com.android.internal.widget.ActionBarContextView: android.animation.Animator makeInAnimation()>
<android.animation.AnimatorSet: java.lang.Object clone()>
<android.widget.TimePicker$SavedState: void <init>(android.os.Parcelable,int,int,android.widget.TimePicker$1)>
<android.webkit.HTML5VideoViewProxy: void dispatchOnPaused()>
<android.widget.ArrayAdapter: java.util.List access$300(android.widget.ArrayAdapter)>
<android.widget.Scroller: void setFriction(float)>
<android.accounts.AuthenticatorDescription: void <init>(java.lang.String)>
<android.graphics.Matrix: java.lang.String toString()>
<android.media.audiofx.BassBoost: android.media.audiofx.BassBoost$Settings getProperties()>
<com.android.internal.telephony.SmsRawData$1: com.android.internal.telephony.SmsRawData createFromParcel(android.os.Parcel)>
<android.widget.ArrayAdapter: java.lang.Object access$200(android.widget.ArrayAdapter)>
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: void write(int)>
<android.renderscript.FieldPacker: void addMatrix(android.renderscript.Matrix2f)>
<android.content.pm.IPackageDeleteObserver$Stub$Proxy: android.os.IBinder asBinder()>
<android.net.Uri$Part: android.net.Uri$Part nonNull(android.net.Uri$Part)>
<android.webkit.WebView: boolean isPaused()>
<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo generatePackageInfo(android.content.pm.PackageParser$Package,int)>
<android.content.pm.ComponentInfo: void <init>()>
<android.text.method.TimeKeyListener: android.text.method.TimeKeyListener getInstance()>
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getHost()>
<android.net.http.LoggingEventHandler: void error(int,java.lang.String)>
<android.webkit.CacheManager: boolean cacheDisabled()>
<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.Rect,android.graphics.Paint)>
<com.android.server.NativeDaemonConnectorException: void <init>(java.lang.String)>
<android.test.mock.MockPackageManager: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)>
<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getApplicationLogo(java.lang.String)>
<android.renderscript.RenderScript: void rsnContextPause(int)>
<com.android.server.pm.PackageVerificationResponse: void <init>(int,int)>
<android.app.Fragment: boolean isInLayout()>
<android.provider.MediaStore$Audio$Media: android.net.Uri getContentUri(java.lang.String)>
<android.content.res.AssetManager: int getNativeStringBlock(int)>
<com.android.internal.telephony.DataConnection: void increaseRetryCount()>
<android.widget.DatePicker$SavedState: void <init>(android.os.Parcelable,int,int,int,android.widget.DatePicker$1)>
<android.graphics.BitmapFactory: android.graphics.Bitmap nativeDecodeStream(java.io.InputStream,byte[],android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.webkit.WebView: int access$8400(android.webkit.WebView)>
<android.widget.NumberPicker$1: java.lang.String format(int)>
<com.android.internal.os.BatteryStatsImpl: long getScreenBrightnessTime(int,long,int)>
<android.app.Dialog: void setOnDismissListener(android.content.DialogInterface$OnDismissListener)>
<android.view.DragEvent: java.lang.Object getLocalState()>
<android.test.InstrumentationTestSuite: void <init>(android.app.Instrumentation)>
<com.android.internal.os.BatteryStatsImpl$Counter: int getCountLocked(int)>
<android.widget.RemoteViews: void setViewVisibility(int,int)>
<android.util.Property: boolean isReadOnly()>
<android.view.TextureView: java.lang.Object[] access$000(android.view.TextureView)>
<android.webkit.GeolocationPermissions: void clear(java.lang.String)>
<android.hardware.Camera: boolean access$500(android.hardware.Camera)>
<com.android.server.am.ActivityRecord: java.lang.String toString()>
<android.drm.DrmManagerClient: int checkRightsStatus(java.lang.String,int)>
<android.graphics.Bitmap: int nativeRowBytes(int)>
<android.graphics.Camera: void nativeConstructor()>
<com.android.internal.telephony.Phone$SuppService: void <init>(java.lang.String,int)>
<com.android.server.BackupManagerService$RunBackupReceiver: void <init>(com.android.server.BackupManagerService,com.android.server.BackupManagerService$1)>
<android.renderscript.Matrix4f: void loadMultiply(android.renderscript.Matrix4f,android.renderscript.Matrix4f)>
<android.view.ViewGroup$HoverTarget: void <init>()>
<android.test.mock.MockContext: void startActivities(android.content.Intent[])>
<android.view.GLES20Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>
<android.os.BatteryStats$HistoryItem: void readFromParcel(android.os.Parcel)>
<android.graphics.SurfaceTexture: void getTransformMatrix(float[])>
<android.view.InputDevice$MotionRange: float access$800(android.view.InputDevice$MotionRange)>
<android.os.Handler: boolean sendEmptyMessageDelayed(int,long)>
<android.widget.SimpleAdapter: java.util.ArrayList access$102(android.widget.SimpleAdapter,java.util.ArrayList)>
<android.graphics.drawable.Drawable: void copyBounds(android.graphics.Rect)>
<android.webkit.WebView: java.lang.String nativeGetSelection()>
<GenerationGG: android.content.pm.PermissionInfo get_androidcontentpmPermissionInfo()>
<GenerationGG: android.os.TokenWatcher get_androidosTokenWatcher()>
<android.server.BluetoothService: boolean createDeviceNative(java.lang.String)>
<android.net.NetworkPolicyManager: void dumpPolicy(java.io.PrintWriter,int)>
<android.database.CharArrayBuffer: void <init>(char[])>
<GenerationGG: android.media.audiofx.Visualizer$OnDataCaptureListener get_androidmediaaudiofxVisualizer__OnDataCaptureListener()>
<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbDeviceManager$UsbHandler access$100(com.android.server.usb.UsbDeviceManager)>
<com.android.internal.os.BatteryStatsImpl: void noteStartWakeLocked(int,int,java.lang.String,int)>
<com.android.internal.content.PackageMonitor: void onUidRemoved(int)>
<android.view.GLES20Canvas: void nOutputDisplayList(int,int)>
<android.view.animation.Animation: void setDetachWallpaper(boolean)>
<android.media.AudioService: int access$3300(android.media.AudioService)>
<android.inputmethodservice.KeyboardView: void onSizeChanged(int,int,int,int)>
<android.widget.Gallery: int getCenterOfGallery()>
<android.net.http.AndroidHttpClient: void close()>
<android.view.accessibility.AccessibilityRecord: java.lang.String toString()>
<android.app.ContextImpl: android.content.Context getReceiverRestrictedContext()>
<android.widget.ZoomButton: void setZoomSpeed(long)>
<android.net.INetworkPolicyManager$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.server.am.ActivityStack: boolean updateLRUListLocked(com.android.server.am.ActivityRecord)>
<com.android.server.am.TransferPipe: android.os.ParcelFileDescriptor getWriteFd()>
<android.server.BluetoothAdapterStateMachine: void access$5800(android.server.BluetoothAdapterStateMachine,android.os.Message)>
<Wrapper_android_graphics_PathEffect: void test_android_graphics_PathEffect()>
<android.view.SurfaceView$4: android.graphics.Canvas internalLockCanvas(android.graphics.Rect)>
<android.webkit.BrowserFrame: java.lang.String documentAsText()>
<GenerationGG: android.app.DialogFragment get_androidappDialogFragment()>
<android.app.SearchableInfo: java.lang.String getSuggestPackage()>
<com.android.server.WifiService$WifiStateMachineHandler: void <init>(com.android.server.WifiService,android.os.Looper)>
<android.animation.PropertyValuesHolder: void <init>(android.util.Property)>
<android.util.FloatMath: float cos(float)>
<java.lang.Object: android.os.Bundle getExtras()>
<android.net.DhcpStateMachine$DhcpAction: void <clinit>()>
<android.renderscript.ProgramStore$BlendSrcFunc: void <init>(java.lang.String,int,int)>
<android.preference.PreferenceManager: void init(android.content.Context)>
<com.android.server.am.ServiceRecord$StartItem: com.android.server.am.UriPermissionOwner getUriPermissionsLocked()>
<android.content.SyncStatusInfo$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.org.bouncycastle.util.encoders.Base64: byte[] encode(byte[])>
<android.animation.AnimatorSet: void <init>()>
<android.test.MoreAsserts: void assertNotEmpty(java.lang.String,java.util.Map)>
<android.widget.EdgeEffect: void onAbsorb(int)>
<android.hardware.usb.UsbRequest: boolean initialize(android.hardware.usb.UsbDeviceConnection,android.hardware.usb.UsbEndpoint)>
<com.android.internal.policy.PolicyManager: android.view.FallbackEventHandler makeNewFallbackEventHandler(android.content.Context)>
<android.media.audiofx.Virtualizer: android.media.audiofx.Virtualizer$Settings getProperties()>
<android.content.SyncAdapterType: java.lang.String getSettingsActivity()>
<android.app.Activity$ManagedCursor: boolean access$200(android.app.Activity$ManagedCursor)>
<android.net.NetworkUtils: java.net.InetAddress intToInetAddress(int)>
<android.media.SoundPool: void <clinit>()>
<GenerationGG: android.app.Instrumentation get_androidappInstrumentation()>
<android.graphics.Paint: float getFontMetrics(android.graphics.Paint$FontMetrics)>
<android.graphics.DrawFilter: void nativeDestructor(int)>
<android.database.sqlite.SQLiteProgram: void native_bind_string(int,java.lang.String)>
<android.view.Surface: void <init>()>
<GenerationGG: android.widget.BaseExpandableListAdapter get_androidwidgetBaseExpandableListAdapter()>
<com.android.internal.view.menu.MenuItemImpl: boolean requestsActionButton()>
<com.android.server.wm.WindowState: boolean isPotentialDragTarget()>
<com.android.server.AppWidgetService$1: void onServiceDisconnected(android.content.ComponentName)>
<android.media.AudioService: void access$6600(android.media.AudioService,java.lang.String)>
<android.os.StrictMode: void setVmPolicy(android.os.StrictMode$VmPolicy)>
<android.preference.TwoStatePreference$SavedState$1: void <init>()>
<android.app.ProgressDialog: int getProgress()>
<com.android.internal.telephony.AdnRecord$1: java.lang.Object[] newArray(int)>
<android.media.audiofx.EnvironmentalReverb: short getReflectionsLevel()>
<GenerationGG: android.database.StaleDataException get_androiddatabaseStaleDataException()>
<android.location.Criteria: void setAccuracy(int)>
<android.view.inputmethod.InputBinding$1: java.lang.Object[] newArray(int)>
<android.telephony.SmsMessage: boolean isStatusReportMessage()>
<android.os.RemoteCallbackList: void kill()>
<android.hardware.usb.UsbInterface: int getInterfaceSubclass()>
<android.graphics.LayerRasterizer: int nativeConstructor()>
<android.app.admin.IDevicePolicyManager$Stub: android.os.IBinder asBinder()>
<android.net.LocalSocketImpl: java.lang.Object getOption(int)>
<android.content.ClipData$Item: void <init>(java.lang.CharSequence,android.content.Intent,android.net.Uri)>
<android.app.LoadedApk$WarningContextClassLoader: void <clinit>()>
<com.android.server.pm.Settings$1: java.lang.String packageForFilter(com.android.server.pm.PreferredActivity)>
<GenerationGG: java.io.PrintStream get_javaioPrintStream()>
<android.view.View: void setLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.appwidget.AppWidgetProviderInfo: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiManager access$4800(android.net.wifi.WifiWatchdogStateMachine)>
<android.os.MemoryFile$MemoryInputStream: int read()>
<android.net.wifi.WifiWatchdogStateMachine: void access$5100(android.net.wifi.WifiWatchdogStateMachine,com.android.internal.util.IState)>
<android.view.GLES20Canvas: void drawPosText(char[],int,int,float[],android.graphics.Paint)>
<android.content.res.XmlBlock: int nativeGetAttributeIndex(int,java.lang.String,java.lang.String)>
<android.media.RingtoneManager: boolean getStopPreviousRingtone()>
<android.os.Environment: java.io.File getRootDirectory()>
<android.webkit.BrowserFrame: void nativeCallPolicyFunction(int,int)>
<android.app.Fragment: boolean onOptionsItemSelected(android.view.MenuItem)>
<android.database.BulkCursorToCursorAdaptor: int getCount()>
<android.widget.AdapterView: int getLastVisiblePosition()>
<android.gesture.OrientedBoundingBox: void <init>(float,float,float,float,float)>
<android.accessibilityservice.IAccessibilityServiceConnection$Stub: android.accessibilityservice.IAccessibilityServiceConnection asInterface(android.os.IBinder)>
<android.view.TextureView: void setTransform(android.graphics.Matrix)>
<android.media.AudioService: int[][] access$4000(android.media.AudioService)>
<android.widget.CalendarView: int access$2600(android.widget.CalendarView)>
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.Connection$DisconnectCause disconnectCauseFromCode(int)>
<android.content.SyncInfo: void writeToParcel(android.os.Parcel,int)>
<android.os.ParcelFileDescriptor$1: android.os.ParcelFileDescriptor createFromParcel(android.os.Parcel)>
<android.os.StrictMode$8: void <init>()>
<android.hardware.usb.UsbAccessory: java.lang.String getManufacturer()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getChildCount()>
<android.net.http.Connection: boolean clearPipe(java.util.LinkedList)>
<android.graphics.Bitmap: boolean sameAs(android.graphics.Bitmap)>
<android.webkit.WebView: int nativeGetBlockLeftEdge(int,int,float)>
<android.widget.Gallery: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.webkit.HTML5VideoView: void init(int,int,boolean)>
<android.net.wifi.WifiStateMachine$SoftApStartingState: void <init>(android.net.wifi.WifiStateMachine)>
<android.test.MoreAsserts: void failWrongLength(java.lang.String,int,int)>
<com.android.internal.view.menu.ActionMenuItem: java.lang.CharSequence getTitle()>
<android.webkit.WebView: void nativeClearCursor()>
<android.telephony.SmsMessage: java.lang.String getDisplayMessageBody()>
<android.drm.DrmInfo: java.lang.String getMimeType()>
<com.android.internal.util.StateMachine: android.os.Message obtainMessage(int)>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getSettingsActivityName()>
<GenerationGG: android.opengl.GLSurfaceView$Renderer get_androidopenglGLSurfaceView__Renderer()>
<android.webkit.SelectActionModeCallback: void <init>()>
<android.widget.HeaderViewListAdapter: boolean areAllListInfosSelectable(java.util.ArrayList)>
<android.graphics.ColorMatrix: void preConcat(android.graphics.ColorMatrix)>
<android.graphics.Paint: void native_getTextPath(int,int,char[],int,int,float,float,int)>
<com.android.server.NotificationManagerService: com.android.server.LightsService$Light access$1400(com.android.server.NotificationManagerService)>
<android.graphics.SurfaceTexture: void nativeInit(int,java.lang.Object,boolean)>
<android.view.View: void computeOpaqueFlags()>
<android.os.ResultReceiver$1: android.os.ResultReceiver[] newArray(int)>
<android.webkit.Network: boolean access$002(android.webkit.Network,boolean)>
<android.inputmethodservice.InputMethodService$2: void <init>(android.inputmethodservice.InputMethodService)>
<com.android.internal.telephony.cdma.RuimRecords: void <init>(com.android.internal.telephony.cdma.CDMAPhone)>
<android.test.mock.MockContext: java.lang.String getPackageName()>
<GenerationGG: android.util.Pair get_androidutilPair()>
<android.media.audiofx.Visualizer: int setCaptureSize(int)>
<Wrapper_android_accounts_AccountManagerFuture: void test_android_accounts_AccountManagerFuture()>
<android.graphics.PathMeasure: void native_setPath(int,int,boolean)>
<android.preference.PreferenceScreen$SavedState: void <clinit>()>
<android.view.ViewRootImpl$AccessibilityInteractionController: void <init>(android.view.ViewRootImpl)>
<android.widget.RemoteViews: void setRemoteAdapter(int,int,android.content.Intent)>
<android.view.GLES20RecordingCanvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>
<android.media.AudioService: java.util.ArrayList access$1000(android.media.AudioService)>
<android.text.method.MultiTapKeyListener: android.text.method.MultiTapKeyListener getInstance(boolean,android.text.method.TextKeyListener$Capitalize)>
<android.widget.AdapterViewAnimator: android.animation.ObjectAnimator getOutAnimation()>
<com.android.server.wm.WindowState: boolean isWindowAnimating()>
<GenerationGG: android.test.MoreAsserts get_androidtestMoreAsserts()>
<com.android.internal.telephony.cat.IconLoader: int getMask(int)>
<android.view.ViewTreeObserver: void addOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>
<android.media.audiofx.Visualizer: int setDataCaptureListener(android.media.audiofx.Visualizer$OnDataCaptureListener,int,boolean,boolean)>
<android.view.ViewRootImpl: void getLastTouchPoint(android.graphics.Point)>
<android.server.BluetoothService: boolean destroyChannelNative(java.lang.String,java.lang.String,int)>
<android.graphics.drawable.AnimatedRotateDrawable: void stop()>
<android.widget.DatePicker: android.widget.NumberPicker access$500(android.widget.DatePicker)>
<android.view.MotionEvent: int getPointerIdBits()>
<GenerationGG: android.media.audiofx.EnvironmentalReverb$OnParameterChangeListener get_androidmediaaudiofxEnvironmentalReverb__OnParameterChangeListener()>
<android.widget.VideoView$2: void <init>(android.widget.VideoView)>
<com.android.internal.database.SortCursor$1: void onChanged()>
<android.database.sqlite.SQLiteDebug$DbStats: void <init>(java.lang.String,long,long,int,int,int,int)>
<java.lang.Object: boolean isEnabled(int)>
<android.webkit.WebView: int access$3002(android.webkit.WebView,int)>
<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,int[])>
<android.app.IActivityManager$WaitResult: void <init>()>
<com.android.internal.telephony.CommandException: com.android.internal.telephony.CommandException$Error getCommandError()>
<android.graphics.Matrix: boolean native_postSkew(int,float,float)>
<com.android.internal.telephony.cat.Input: void <clinit>()>
<android.os.INetworkManagementService$Stub$Proxy: android.os.IBinder asBinder()>
<android.graphics.Region: boolean op(android.graphics.Region,android.graphics.Region$Op)>
<android.webkit.WebView: int access$8402(android.webkit.WebView,int)>
<android.view.inputmethod.InputMethodManager: void <clinit>()>
<android.net.EthernetDataTracker: boolean isTeardownRequested()>
<android.view.GestureDetector$SimpleOnGestureListener: boolean onSingleTapUp(android.view.MotionEvent)>
<com.android.internal.telephony.cat.CommandParamsFactory: com.android.internal.telephony.cat.ComprehensionTlv searchForNextTag(com.android.internal.telephony.cat.ComprehensionTlvTag,java.util.Iterator)>
<android.accounts.NetworkErrorException: void <init>(java.lang.String,java.lang.Throwable)>
<android.webkit.HTML5VideoViewProxy$VideoPlayer: int getCurrentPosition()>
<android.content.res.StringBlock$Height: void chooseHeight(java.lang.CharSequence,int,int,int,int,android.graphics.Paint$FontMetricsInt,android.text.TextPaint)>
<DumbClass: void DumbMethod40()>
<com.android.server.BackupManagerService$PerformClearTask: void <init>(com.android.server.BackupManagerService,com.android.internal.backup.IBackupTransport,android.content.pm.PackageInfo)>
<android.widget.ExpandableListConnector: int getItemViewType(int)>
<android.preference.TwoStatePreference$SavedState: void <init>(android.os.Parcelable)>
<android.database.IContentObserver$Stub$Proxy: android.os.IBinder asBinder()>
<android.test.mock.MockContext: void enforceUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int,java.lang.String)>
<android.webkit.WebView: int computeMaxScrollY()>
<android.test.suitebuilder.TestGrouping: void setClassLoader(java.lang.ClassLoader)>
<android.util.Slog: int w(java.lang.String,java.lang.Throwable)>
<android.net.wifi.WifiWatchdogStateMachine: java.lang.Long access$3202(android.net.wifi.WifiWatchdogStateMachine,java.lang.Long)>
<android.text.method.TextKeyListener$NullKeyListener: void clearMetaKeyState(android.view.View,android.text.Editable,int)>
<android.widget.TextView$HandleView: void onMeasure(int,int)>
<android.text.style.AbsoluteSizeSpan: void <init>(android.os.Parcel)>
<android.bluetooth.BluetoothOutputStream: void close()>
<android.content.AsyncQueryHandler$WorkerArgs: void <init>()>
<android.app.ActivityGroup: android.app.Activity getCurrentActivity()>
<android.graphics.Paint: int getTextRunCursor(java.lang.String,int,int,int,int,int)>
<android.net.wifi.WifiStateMachine: void checkAndSetConnectivityInstance()>
<android.widget.ProgressBar$SavedState$1: android.widget.ProgressBar$SavedState[] newArray(int)>
<android.net.sip.ISipSession$Stub: android.os.IBinder asBinder()>
<android.webkit.HTML5VideoFullScreen: android.view.SurfaceView getSurfaceView()>
<android.util.LocaleUtil: int getLayoutDirectionFromFirstChar(java.util.Locale)>
<com.android.internal.telephony.SMSDispatcher$SmsTracker: void <init>(java.util.HashMap,android.app.PendingIntent,android.app.PendingIntent)>
<android.webkit.WebViewCore: void nativeClick(int,int,boolean)>
<android.widget.AbsListView$RecycleBin: void setViewTypeCount(int)>
<android.view.DragEvent: void recycle()>
<android.renderscript.RenderScript: int nContextCreate(int,int,int)>
<com.android.server.am.ActivityManagerService: java.util.List getRunningAppProcesses()>
<android.server.BluetoothService: boolean startDiscoveryNative()>
<android.app.Activity: void onActionModeStarted(android.view.ActionMode)>
<android.widget.LinearLayout: boolean isBaselineAligned()>
<android.graphics.Color: int alpha(int)>
<com.android.server.DevicePolicyManagerService$1: void <init>(com.android.server.DevicePolicyManagerService)>
<android.app.Application: void attach(android.content.Context)>
<android.media.ExifInterface: void saveAttributes()>
<GenerationGG: android.os.RemoteCallbackList get_androidosRemoteCallbackList()>
<android.os.MemoryFile: void native_close(java.io.FileDescriptor)>
<android.widget.SearchView$3: void <init>(android.widget.SearchView)>
<android.widget.Spinner: void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener)>
<android.graphics.Canvas: int getMaximumBitmapHeight()>
<com.android.internal.util.StateMachine$SmHandler$HaltingState: boolean processMessage(android.os.Message)>
<GenerationGG: android.content.pm.ActivityInfo get_androidcontentpmActivityInfo()>
<android.util.NtpTrustedTime: boolean forceRefresh()>
<android.webkit.WebSyncManager: void resetSync()>
<android.text.method.ReplacementTransformationMethod$SpannedReplacementCharSequence: java.lang.Object[] getSpans(int,int,java.lang.Class)>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.sip.SipPhone$SipCall access$1200(com.android.internal.telephony.sip.SipPhone)>
<android.widget.AdapterViewAnimator: android.widget.Adapter getAdapter()>
<android.provider.Settings: void <init>()>
<android.content.Context: void <init>()>
<android.net.wifi.WifiWatchdogStateMachine: int access$4200(android.net.wifi.WifiWatchdogStateMachine)>
<android.widget.TextView: boolean onCheckIsTextEditor()>
<android.view.ViewRootImpl: void setDragFocus(android.view.View)>
<com.android.internal.widget.ActionBarView$HomeView: int getLeftOffset()>
<android.server.BluetoothBondState: int getBondState(java.lang.String)>
<com.android.internal.telephony.cat.TextMessage$1: com.android.internal.telephony.cat.TextMessage[] newArray(int)>
<android.util.JsonReader: void push(android.util.JsonScope)>
<android.database.sqlite.SQLiteStatement: long native_executeInsert()>
<android.widget.VideoView: android.view.SurfaceHolder access$1902(android.widget.VideoView,android.view.SurfaceHolder)>
<android.net.LinkProperties: void addDns(java.net.InetAddress)>
<android.renderscript.Allocation: void copy2DRangeFrom(int,int,android.graphics.Bitmap)>
<android.renderscript.Matrix3f: void rotate(float,float,float,float)>
<android.media.MediaRecorder: void setProfile(android.media.CamcorderProfile)>
<android.view.MotionEvent: int nativeGetFlags(int)>
<android.app.Instrumentation: android.app.Instrumentation$ActivityMonitor addMonitor(java.lang.String,android.app.Instrumentation$ActivityResult,boolean)>
<com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaT53ClirInfoRec: java.lang.String toString()>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: boolean isWhitespace(char)>
<Wrapper_android_database_sqlite_SQLiteBindOrColumnIndexOutOfRangeException: void test_android_database_sqlite_SQLiteBindOrColumnIndexOutOfRangeException()>
<android.view.MotionEvent: float nativeGetXPrecision(int)>
<android.graphics.drawable.GradientDrawable: int getIntrinsicWidth()>
<android.animation.ValueAnimator: float getAnimatedFraction()>
<android.content.res.XmlBlock$Parser: java.lang.String getAttributePrefix(int)>
<android.graphics.EmbossMaskFilter: void <init>(float[],float,float,float)>
<android.preference.DialogPreference: void setDialogTitle(java.lang.CharSequence)>
<android.location.IGpsStatusListener$Stub: android.os.IBinder asBinder()>
<android.text.style.RelativeSizeSpan: void updateDrawState(android.text.TextPaint)>
<android.view.ViewRootImpl$AccessibilityInteractionController$1: void onAcquired(android.util.Poolable)>
<android.app.DownloadManager$CursorTranslator: long getErrorCode(int)>
<android.animation.KeyframeSet: android.animation.KeyframeSet ofFloat(float[])>
<android.test.MoreAsserts: java.util.regex.MatchResult assertMatchesRegex(java.lang.String,java.lang.String,java.lang.String)>
<android.server.BluetoothA2dpService: java.util.HashMap access$200(android.server.BluetoothA2dpService)>
<android.graphics.ComposeShader: int nativeCreate2(int,int,int)>
<android.renderscript.RenderScript: void nAllocationData2D(int,int,int,int,int,android.graphics.Bitmap)>
<android.database.AbstractCursor: void unregisterDataSetObserver(android.database.DataSetObserver)>
<com.android.server.BackupManagerService$RestoreState: void <init>(java.lang.String,int)>
<android.media.AudioService$SetModeDeathHandler: int getMode()>
<GenerationGG: android.os.ResultReceiver get_androidosResultReceiver()>
<android.hardware.Camera: void native_setParameters(java.lang.String)>
<android.os.StrictMode$InstanceTracker: int getInstanceCount(java.lang.Class)>
<android.net.wifi.WifiStateMachine: void access$12300(android.net.wifi.WifiStateMachine,android.os.Message)>
<android.bluetooth.BluetoothAdapter: boolean checkBluetoothAddress(java.lang.String)>
<com.android.internal.os.BatteryStatsImpl: int getPhoneDataConnectionCount(int,int)>
<android.preference.TwoStatePreference: android.os.Parcelable onSaveInstanceState()>
<android.widget.TextView: void registerForPreDraw()>
<android.app.Activity: android.app.LoaderManager getLoaderManager()>
<android.widget.ZoomButtonsController: android.view.View findViewForTouch(int,int)>
<android.gesture.GestureLibrary: void addGesture(java.lang.String,android.gesture.Gesture)>
<android.view.VolumePanel$1: boolean onTouch(android.view.View,android.view.MotionEvent)>
<android.net.wifi.WifiWatchdogStateMachine: void access$400(android.net.wifi.WifiWatchdogStateMachine,com.android.internal.util.IState)>
<com.android.internal.telephony.gsm.SmsMessage: int getTPLayerLengthForPDU(java.lang.String)>
<com.android.server.InputMethodManagerService: boolean isSystemIme(android.view.inputmethod.InputMethodInfo)>
<android.net.NetworkInfo: java.lang.String getExtraInfo()>
<android.webkit.WebView: boolean nativeCursorIntersects(android.graphics.Rect)>
<android.os.DropBoxManager$Entry: void close()>
<android.widget.Gallery: int calculateTop(android.view.View,boolean)>
<com.android.server.location.PassiveProvider: void enable()>
<com.android.server.am.ActivityManagerService: void grantUriPermissionUncheckedLocked(int,java.lang.String,android.net.Uri,int,com.android.server.am.UriPermissionOwner)>
<android.app.DownloadManager$CursorTranslator: long getPausedReason(int)>
<android.renderscript.ProgramStore$BlendDstFunc: void <clinit>()>
<com.android.server.pm.Installer: boolean readBytes(byte[],int)>
<android.webkit.WebView: android.content.Context access$10300(android.webkit.WebView)>
<com.android.internal.app.AlertController$AlertParams$4: void <init>(com.android.internal.app.AlertController$AlertParams,com.android.internal.app.AlertController$RecycleListView,com.android.internal.app.AlertController)>
<android.bluetooth.BluetoothDeviceProfileState: void access$3600(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<com.android.internal.os.BatteryStatsImpl$Uid: void reportExcessiveWakeLocked(java.lang.String,long,long)>
<com.android.internal.view.BaseSurfaceHolder: int getRequestedFormat()>
<android.app.backup.IRestoreSession$Stub$Proxy: android.os.IBinder asBinder()>
<android.net.sip.SimpleSessionDescription: android.net.sip.SimpleSessionDescription$Media newMedia(java.lang.String,int,int,java.lang.String)>
<android.gesture.GestureStroke: android.gesture.GestureStroke deserialize(java.io.DataInputStream)>
<android.widget.NumberPicker: int getSolidColor()>
<android.os.Looper: void quit()>
<android.view.ViewRootImpl$TakenSurfaceHolder: void <init>(android.view.ViewRootImpl)>
<android.preference.GenericInflater: boolean onCreateCustomFromTag(org.xmlpull.v1.XmlPullParser,java.lang.Object,android.util.AttributeSet)>
<GenerationGG: android.telephony.ServiceState get_androidtelephonyServiceState()>
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getWakelockStats()>
<android.net.LocalSocket: void setSoTimeout(int)>
<com.android.server.usb.UsbDeviceManager$UsbHandler$1: void <init>(com.android.server.usb.UsbDeviceManager$UsbHandler)>
<android.view.ViewGroup: android.view.ViewParent invalidateChildInParent(int[],android.graphics.Rect)>
<android.util.SynchronizedPool: void <init>(android.util.Pool)>
<android.net.wifi.WifiStateTracker: boolean isAvailable()>
<android.widget.TextView: int computeVerticalScrollExtent()>
<android.content.ISyncAdapter$Stub: android.os.IBinder asBinder()>
<android.net.wifi.SupplicantStateTracker: int access$000(android.net.wifi.SupplicantStateTracker)>
<GenerationGG: android.widget.ExpandableListView$OnGroupExpandListener get_androidwidgetExpandableListView__OnGroupExpandListener()>
<android.renderscript.Element: android.renderscript.Element PROGRAM_FRAGMENT(android.renderscript.RenderScript)>
<GenerationGG: java.io.Serializable get_javaioSerializable()>
<android.widget.SearchView$1: void <init>(android.widget.SearchView)>
<android.net.LocalSocketImpl: void access$700(android.net.LocalSocketImpl,int,java.io.FileDescriptor)>
<com.android.internal.os.BatteryStatsImpl$SamplingCounter: void <init>(java.util.ArrayList,android.os.Parcel)>
<android.graphics.Canvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>
<GenerationGG: android.widget.AdapterView$OnItemSelectedListener get_androidwidgetAdapterView__OnItemSelectedListener()>
<android.view.ViewConfiguration: int getScaledMaximumDrawingCacheSize()>
<android.view.WindowManagerImpl: void dumpGfxInfo(java.io.FileDescriptor)>
<DumbClass: void DumbMethod14()>
<android.inputmethodservice.AbstractInputMethodService: android.view.KeyEvent$DispatcherState getKeyDispatcherState()>
<android.net.NetworkInfo$State: android.net.NetworkInfo$State valueOf(java.lang.String)>
<android.net.NetworkStats: long getTotalBytes()>
<android.preference.ListPreference: java.lang.String getValue()>
<android.database.sqlite.SQLiteDatabase: void lock(java.lang.String)>
<android.view.animation.Animation: boolean getFillBefore()>
<android.graphics.Paint$Style: void <clinit>()>
<android.os.Debug: void resetGlobalClassInitCount()>
<android.bluetooth.BluetoothOutputStream: void <init>(android.bluetooth.BluetoothSocket)>
<android.app.ContextImpl: java.io.File getDataDirFile()>
<android.renderscript.FieldPacker: void reset()>
<android.ddm.DdmHandleNativeHeap: void register()>
<android.view.MotionEvent: float getTouchMinor(int)>
<android.content.ContentValues: void <init>(int)>
<android.view.SurfaceView$4: void setType(int)>
<android.database.CursorToBulkCursorAdaptor$ContentObserverProxy: boolean deliverSelfNotifications()>
<android.net.sip.SipProfile: java.lang.String access$1102(android.net.sip.SipProfile,java.lang.String)>
<android.telephony.gsm.SmsMessage$SubmitPdu: void <init>(com.android.internal.telephony.SmsMessageBase$SubmitPduBase)>
<android.view.KeyEvent: boolean isShiftPressed()>
<android.test.AndroidTestRunner: void setContext(android.content.Context)>
<android.widget.CalendarView$WeeksAdapter: long getItemId(int)>
<com.android.server.MountService$UmsEnableCallBack: void <init>(com.android.server.MountService,java.lang.String,java.lang.String,boolean)>
<com.android.server.PowerManagerService: int applyButtonState(int)>
<com.android.server.wm.AppWindowToken: com.android.server.wm.WindowState findMainWindow()>
<Wrapper_android_graphics_Region: void test_android_graphics_Region()>
<android.media.RemoteControlClient: android.graphics.Bitmap scaleBitmapIfTooBig(android.graphics.Bitmap,int,int)>
<android.app.ResultInfo$1: android.app.ResultInfo[] newArray(int)>
<GenerationGG: android.database.CrossProcessCursor get_androiddatabaseCrossProcessCursor()>
<android.text.style.SuggestionRangeSpan: int describeContents()>
<android.widget.ActivityChooserModel$DefaultSorter: void <init>(android.widget.ActivityChooserModel)>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Proc getProcessStatsLocked(java.lang.String,int)>
<com.android.internal.app.AlertController$AlertParams$1: void <init>(com.android.internal.app.AlertController$AlertParams,android.content.Context,int,int,java.lang.CharSequence[],com.android.internal.app.AlertController$RecycleListView)>
<android.webkit.GeolocationPermissions: void nativeClear(java.lang.String)>
<android.util.XmlPullAttributes: int getAttributeResourceValue(int,int)>
<android.bluetooth.BluetoothHealthAppConfiguration: boolean equals(java.lang.Object)>
<android.view.ViewGroup: void setMotionEventSplittingEnabled(boolean)>
<android.app.SearchDialog$4: boolean onQueryTextChange(java.lang.String)>
<android.media.audiofx.PresetReverb: void setProperties(android.media.audiofx.PresetReverb$Settings)>
<com.android.internal.os.BatteryStatsImpl$Uid$Wakelock: void writeToParcelLocked(android.os.Parcel,long)>
<android.content.SyncStorageEngine: void readStatisticsLocked()>
<java.lang.Object: void writeToParcel(android.os.Parcel,int)>
<android.hardware.usb.UsbDeviceConnection: boolean claimInterface(android.hardware.usb.UsbInterface,boolean)>
<android.graphics.Paint: void setUnderlineText(boolean)>
<com.android.server.sip.SipSessionGroup$SipSessionImpl$SessionTimer: void start(int)>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: java.lang.Throwable getRootCause(java.lang.Throwable)>
<android.webkit.HTML5VideoViewProxy$PosterDownloader: void certificate(android.net.http.SslCertificate)>
<android.widget.VideoView: int getBufferPercentage()>
<android.view.VelocityTracker: void recycle()>
<android.net.UrlQuerySanitizer: void setAllowUnregisteredParamaters(boolean)>
<android.widget.TextView$2: void <init>(android.widget.TextView)>
<android.app.Dialog: void addContentView(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getMsisdnNumber()>
<android.net.LinkAddress: int describeContents()>
<android.webkit.WebViewCore: void access$3900(android.webkit.WebViewCore,int,int,int,int,int)>
<com.android.internal.os.BatteryStatsImpl$Timer: void unplug(long,long)>
<com.android.internal.telephony.MccTable: java.lang.String countryCodeForMcc(int)>
<android.renderscript.Double4: void <init>()>
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: android.animation.PropertyValuesHolder clone()>
<android.database.CursorWrapper: boolean getWantsAllOnMoveCalls()>
<android.telephony.PhoneStateListener$2: void <init>(android.telephony.PhoneStateListener)>
<android.test.mock.MockContext: void sendStickyBroadcast(android.content.Intent)>
<android.gesture.Gesture$1: void <init>()>
<android.widget.LinearLayout: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<android.app.ContextImpl: java.lang.String getPackageCodePath()>
<android.graphics.Point: void readFromParcel(android.os.Parcel)>
<android.text.method.SingleLineTransformationMethod: android.text.method.SingleLineTransformationMethod getInstance()>
<android.app.ActionBar: void setSplitBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.app.admin.DeviceAdminReceiver: java.lang.CharSequence onDisableRequested(android.content.Context,android.content.Intent)>
<android.app.Notification$Builder: android.app.Notification$Builder setContentIntent(android.app.PendingIntent)>
<android.net.http.RequestQueue: android.net.http.Request getRequest(org.apache.http.HttpHost)>
<android.app.SearchableInfo: boolean queryAfterZeroResults()>
<android.bluetooth.BluetoothHealthAppConfiguration: void <clinit>()>
<android.content.Intent$ShortcutIconResource$1: java.lang.Object[] newArray(int)>
<android.widget.GridLayout$LayoutParams: void <init>(android.widget.GridLayout$Spec,android.widget.GridLayout$Spec)>
<android.widget.TextView: void setInputTypeSingleLine(boolean)>
<android.view.animation.AnimationSet: void addAnimation(android.view.animation.Animation)>
<android.widget.RemoteViews$SetEmptyView: void writeToParcel(android.os.Parcel,int)>
<android.os.TokenWatcher: boolean isAcquired()>
<android.view.ViewDebug: void profile(android.view.View,java.io.OutputStream,java.lang.String)>
<android.graphics.Paint: int native_getStrokeJoin(int)>
<android.os.Parcel: void readBooleanArray(boolean[])>
<GenerationGG: android.webkit.WebSettings$LayoutAlgorithm get_androidwebkitWebSettings__LayoutAlgorithm()>
<android.text.method.WordIterator: boolean isOnLetterOrDigit(int)>
<com.android.internal.view.menu.MenuItemImpl: boolean isExclusiveCheckable()>
<android.net.Uri$Part: void <init>(java.lang.String,java.lang.String,android.net.Uri$1)>
<android.media.AudioTrack: int native_set_playback_rate(int)>
<android.os.storage.StorageVolume$1: android.os.storage.StorageVolume[] newArray(int)>
<android.test.IsolatedContext: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>
<com.android.server.usb.UsbSettingsManager$AccessoryFilter: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<android.util.JsonScope: void <init>(java.lang.String,int)>
<android.widget.RemoteViews$SetOnClickPendingIntent: void <init>(android.widget.RemoteViews,int,android.app.PendingIntent)>
<android.drm.DrmUtils$ExtendedMetadataParser: int readByte(byte[],int)>
<android.database.CursorToBulkCursorAdaptor: void unregisterObserverProxyLocked()>
<android.webkit.WebIconDatabase: void nativeRetainIconForPageUrl(java.lang.String)>
<android.net.Uri$StringUri: java.lang.String getPath()>
<GenerationGG: android.app.KeyguardManager$OnKeyguardExitResult get_androidappKeyguardManager__OnKeyguardExitResult()>
<android.app.SearchableInfo$1: java.lang.Object[] newArray(int)>
<android.renderscript.RenderScript: void rsnContextBindProgramRaster(int,int)>
<android.database.MatrixCursor: int getCount()>
<com.android.server.pm.PackageManagerService: void readPermissionsFromXml(java.io.File)>
<android.test.TestCaseUtil: java.util.List getTests(junit.framework.Test,boolean)>
<android.renderscript.RenderScript: int safeID(android.renderscript.BaseObj)>
<android.net.sip.SipSession$Listener: void onRegistrationTimeout(android.net.sip.SipSession)>
<android.test.AndroidTestRunner: void setPerformanceWriterIfPerformanceCollectorTestCase(junit.framework.Test,android.os.PerformanceCollector$PerformanceResultsWriter)>
<com.android.internal.telephony.RetryManager: int getRetryTimer()>
<android.net.wifi.WifiInfo: int getIpAddress()>
<android.webkit.ZoomManager: boolean access$102(android.webkit.ZoomManager,boolean)>
<android.inputmethodservice.InputMethodService: void onUnbindInput()>
<com.android.server.net.NetworkPolicyManagerService$2: void <init>(com.android.server.net.NetworkPolicyManagerService)>
<android.media.audiofx.Equalizer: android.media.audiofx.Equalizer$Settings getProperties()>
<android.webkit.GeolocationPermissions: void nativeClearAll()>
<android.location.GeocoderParams: java.lang.String access$202(android.location.GeocoderParams,java.lang.String)>
<GenerationGG: android.renderscript.Program get_androidrenderscriptProgram()>
<android.renderscript.Allocation: void <clinit>()>
<java.lang.Object: double getDouble(int)>
<com.android.server.wm.InputManager: int getKeyCodeState(int,int,int)>
<android.database.CursorWindow: long nativeGetLong(int,int,int)>
<android.graphics.drawable.DrawableContainer: android.graphics.drawable.Drawable getCurrent()>
<android.view.View: android.view.View$OnFocusChangeListener getOnFocusChangeListener()>
<com.android.internal.os.BatteryStatsImpl: boolean isOnBattery()>
<android.text.MeasuredText: android.text.MeasuredText obtain()>
<android.graphics.Path: void native_cubicTo(int,float,float,float,float,float,float)>
<android.app.SharedPreferencesImpl: java.util.Set getStringSet(java.lang.String,java.util.Set)>
<android.widget.GridLayout: void setRowCount(int)>
<android.renderscript.RenderScript: void nContextPause()>
<android.server.BluetoothAdapterStateMachine: void access$5000(android.server.BluetoothAdapterStateMachine,com.android.internal.util.IState)>
<android.app.ActivityThread: void access$400(android.app.ActivityThread,int,java.lang.Object,int)>
<android.renderscript.Type: int getCount()>
<com.android.server.InputMethodManagerService: java.util.ArrayList getSubtypes(android.view.inputmethod.InputMethodInfo)>
<android.net.wifi.WifiStateMachine: android.net.wifi.p2p.WifiP2pManager access$1202(android.net.wifi.WifiStateMachine,android.net.wifi.p2p.WifiP2pManager)>
<android.media.audiofx.BassBoost: java.lang.Object access$000(android.media.audiofx.BassBoost)>
<com.android.server.usb.UsbDeviceManager: void <clinit>()>
<android.app.backup.BackupManager: void <init>(android.content.Context)>
<android.view.Surface: java.lang.String toString()>
<android.bluetooth.BluetoothDeviceProfileState: void access$4700(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.IState)>
<android.telephony.gsm.SmsMessage: boolean isMwiDontStore()>
<android.view.inputmethod.CompletionInfo$1: android.view.inputmethod.CompletionInfo[] newArray(int)>
<GenerationGG: android.opengl.GLSurfaceView$GLWrapper get_androidopenglGLSurfaceView__GLWrapper()>
<android.hardware.Sensor: int getLegacyType()>
<android.nfc.TechListParcel$1: android.nfc.TechListParcel createFromParcel(android.os.Parcel)>
<android.view.MotionEvent: void setLocation(float,float)>
<android.text.format.Time: void set(android.text.format.Time)>
<android.view.View: void onSizeChanged(int,int,int,int)>
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getLine1AlphaTag()>
<android.webkit.WebViewCore: boolean nativeHandleTouchEvent(int,int[],int[],int[],int,int,int)>
<android.view.inputmethod.CorrectionInfo: java.lang.CharSequence getOldText()>
<android.test.RenamingDelegatingContext: java.lang.String renamedFileName(java.lang.String)>
<android.gesture.GestureOverlayView: void setPaintAlpha(int)>
<android.view.KeyEvent: int getModifierMetaStateMask()>
<java.lang.Object: java.lang.String getAttributeName(int)>
<android.gesture.GestureLibraries$ResourceGestureLibrary: void <init>(android.content.Context,int)>
<android.renderscript.RenderScript: int rsnContextCreate(int,int,int)>
<android.media.RemoteControlClient: android.media.IRemoteControlClient getIRemoteControlClient()>
<android.bluetooth.BluetoothDevice: boolean equals(java.lang.Object)>
<android.renderscript.Matrix3f: void loadIdentity()>
<android.test.suitebuilder.TestGrouping$TestMethodPredicate: void <init>(android.test.suitebuilder.TestGrouping$1)>
<Wrapper_android_webkit_ConsoleMessage: void test_android_webkit_ConsoleMessage()>
<android.animation.ValueAnimator: void <init>()>
<android.net.Uri$OpaqueUri: java.lang.String getPath()>
<android.content.res.CompatibilityInfo$2: java.lang.Object createFromParcel(android.os.Parcel)>
<android.view.InputDevice$1: java.lang.Object[] newArray(int)>
<android.bluetooth.IBluetoothCallback$Stub: android.os.IBinder asBinder()>
<com.android.server.location.ComprehensiveCountryDetector: void runAfterDetectionAsync(android.location.Country,android.location.Country,boolean,boolean)>
<android.location.Address: java.lang.String getAddressLine(int)>
<android.view.GLES20RecordingCanvas: void drawRect(float,float,float,float,android.graphics.Paint)>
<android.widget.ExpandableListView: int getPackedPositionType(long)>
<android.view.TextureView: android.graphics.Canvas lockCanvas()>
<GenerationGG: android.view.animation.AccelerateDecelerateInterpolator get_androidviewanimationAccelerateDecelerateInterpolator()>
<com.android.internal.telephony.SmsStorageMonitor$1: void <init>(com.android.internal.telephony.SmsStorageMonitor)>
<android.location.Location: void setExtras(android.os.Bundle)>
<android.opengl.ETC1Util: android.opengl.ETC1Util$ETC1Texture createTexture(java.io.InputStream)>
<android.net.wifi.WifiStateMachine: java.lang.String access$9800(android.net.wifi.WifiStateMachine)>
<android.app.ActivityThread$ApplicationThread: void clearDnsCache()>
<android.hardware.usb.UsbDeviceConnection: int getFileDescriptor()>
<android.content.pm.ParceledListSlice: void setLastSlice(boolean)>
<android.net.wifi.WifiStateMachine: boolean access$6702(android.net.wifi.WifiStateMachine,boolean)>
<android.webkit.ByteArrayBuilder: android.webkit.ByteArrayBuilder$Chunk getFirstChunk()>
<android.app.DialogFragment: void dismissInternal(boolean)>
<com.android.server.DropBoxManagerService$1: void onReceive(android.content.Context,android.content.Intent)>
<com.android.server.ThrottleService$SettingsObserver: void onChange(boolean)>
<android.test.suitebuilder.TestMethod: boolean equals(java.lang.Object)>
<android.app.ActivityThread: void performUserLeavingActivity(android.app.ActivityThread$ActivityClientRecord)>
<android.widget.VideoView: android.content.Context access$1600(android.widget.VideoView)>
<android.database.CursorWindow: boolean nativePutBlob(int,byte[],int,int)>
<android.widget.TextView: void setMaxHeight(int)>
<com.android.internal.telephony.cat.ImageDescriptor: void <init>()>
<android.net.DhcpStateMachine$1: void <init>(android.net.DhcpStateMachine)>
<android.database.sqlite.SQLiteQueryBuilder: void setCursorFactory(android.database.sqlite.SQLiteDatabase$CursorFactory)>
<android.net.LinkCapabilities: void <init>()>
<com.android.internal.telephony.cdma.sms.BearerData$TimeStamp: java.lang.String toString()>
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setTitle(java.lang.CharSequence)>
<android.graphics.AvoidXfermode: void <init>(int,int,android.graphics.AvoidXfermode$Mode)>
<android.os.Process: int[] getPids(java.lang.String,int[])>
<android.database.sqlite.SQLiteQueryBuilder: void appendColumns(java.lang.StringBuilder,java.lang.String[])>
<android.app.Fragment: boolean equals(java.lang.Object)>
<android.util.JsonWriter: android.util.JsonWriter open(android.util.JsonScope,java.lang.String)>
<android.widget.RelativeLayout$LayoutParams: int access$400(android.widget.RelativeLayout$LayoutParams)>
<android.graphics.Path: void reset()>
<com.android.server.wm.WindowManagerService$1: void released()>
<android.telephony.PhoneStateListener: void <init>()>
<com.android.server.ConnectivityService$SettingsObserver: void <init>(android.os.Handler,int)>
<android.speech.SpeechRecognizer$InternalListener: void onReadyForSpeech(android.os.Bundle)>
<android.drm.DrmManagerClient: int removeAllRights()>
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: android.content.pm.ResolveInfo newResult(android.content.pm.PackageParser$ActivityIntentInfo,int)>
<android.content.res.XmlBlock$Parser: void defineEntityReplacementText(java.lang.String,java.lang.String)>
<android.graphics.Paint: boolean isLinearText()>
<android.media.ThumbnailUtils: android.graphics.Bitmap transform(android.graphics.Matrix,android.graphics.Bitmap,int,int,int)>
<android.os.ParcelFileDescriptor: java.io.FileDescriptor getFileDescriptorFromFdNoDup(int)>
<android.view.animation.LayoutAnimationController: float getDelay()>
<android.gesture.GestureStore: void setSequenceType(int)>
<GenerationGG: android.widget.AdapterView$OnItemLongClickListener get_androidwidgetAdapterView__OnItemLongClickListener()>
<android.renderscript.Mesh: android.renderscript.Mesh$Primitive getPrimitive(int)>
<android.os.Handler: void <init>()>
<android.renderscript.Matrix2f: float get(int,int)>
<android.view.ViewGroup: void clearTouchTargets()>
<android.os.DropBoxManager$Entry: void writeToParcel(android.os.Parcel,int)>
<android.bluetooth.IBluetoothA2dp$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.internal.telephony.DataConnection$FailCause: com.android.internal.telephony.DataConnection$FailCause fromInt(int)>
<android.test.ClassPathPackageInfoSource: java.lang.String[] getClassPath()>
<android.accounts.AccountManager$AmsTask$Response: void onError(int,java.lang.String)>
<android.view.animation.AnimationSet: void reset()>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.gsm.GsmCall getBackgroundCall()>
<android.view.GLES20Canvas: int nGetSaveCount(int)>
<android.view.MenuInflater$MenuState: android.view.ActionProvider access$000(android.view.MenuInflater$MenuState)>
<android.app.SharedPreferencesImpl$EditorImpl: android.content.SharedPreferences$Editor putString(java.lang.String,java.lang.String)>
<android.speech.tts.TextToSpeech$1: void <init>(android.speech.tts.TextToSpeech)>
<android.widget.VideoView: java.lang.String access$1400(android.widget.VideoView)>
<android.content.pm.PackageParser$Instrumentation: void setPackageName(java.lang.String)>
<android.speech.tts.TextToSpeech$EngineInfo: java.lang.String toString()>
<com.android.internal.telephony.BaseCommands: void registerForSIMReady(android.os.Handler,int,java.lang.Object)>
<android.hardware.Camera$Parameters: void unflatten(java.lang.String)>
<android.view.View$12: java.lang.Object get(java.lang.Object)>
<android.webkit.CookieSyncManager: void <init>(android.content.Context)>
<android.accessibilityservice.IEventListener$Stub: android.accessibilityservice.IEventListener asInterface(android.os.IBinder)>
<com.android.server.accessibility.TouchExplorer: void clear()>
<GenerationGG: android.content.Context get_androidcontentContext()>
<android.content.res.CompatibilityInfo$1: void <init>()>
<android.net.DummyDataStateTracker: void log(java.lang.String)>
<com.android.server.am.IntentBindRecord: void <init>(com.android.server.am.ServiceRecord,android.content.Intent$FilterComparison)>
<android.content.res.AssetManager: void <init>(boolean)>
<android.media.AudioSystem: int muteMicrophone(boolean)>
<android.net.LinkProperties: void addRoute(android.net.RouteInfo)>
<android.webkit.WebSettings: void setDatabasePath(java.lang.String)>
<android.graphics.drawable.ShapeDrawable: int getOpacity()>
<android.hardware.SensorManager: boolean enableSensorLocked(android.hardware.Sensor,int)>
<android.content.res.AssetManager: android.os.ParcelFileDescriptor openAssetFd(java.lang.String,long[])>
<android.view.View: boolean gatherTransparentRegion(android.graphics.Region)>
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void log(java.lang.String)>
<android.hardware.Camera: void access$600(android.hardware.Camera,boolean,boolean)>
<android.app.backup.IRestoreSession$Stub: void <init>()>
<android.media.audiofx.AudioEffect: short byteArrayToShort(byte[])>
<android.graphics.Color: int parseColor(java.lang.String)>
<android.widget.NumberPicker$5: void onAnimationCancel(android.animation.Animator)>
<android.net.wifi.WifiInfo$1: android.net.wifi.WifiInfo[] newArray(int)>
<android.content.pm.Signature: java.lang.String toCharsString()>
<android.widget.SimpleExpandableListAdapter: android.view.View newGroupView(boolean,android.view.ViewGroup)>
<com.android.internal.telephony.BaseCommands: void setOnIccSmsFull(android.os.Handler,int,java.lang.Object)>
<com.android.internal.view.menu.MenuItemImpl: android.view.MenuItem setIntent(android.content.Intent)>
<GenerationGG: android.graphics.drawable.Animatable get_androidgraphicsdrawableAnimatable()>
<com.android.server.wm.InputManager$InputFilterHost: void disconnectLocked()>
<com.android.server.location.GpsLocationProvider: boolean isEnabled()>
<android.content.ContentValues: void put(java.lang.String,byte[])>
<android.content.SyncStorageEngine: java.util.List getPeriodicSyncs(android.accounts.Account,java.lang.String)>
<android.graphics.Interpolator: void <init>(int,int)>
<com.android.server.NotificationManagerService: void access$1000(com.android.server.NotificationManagerService)>
<android.view.MotionEvent: void nativeAddBatch(int,long,android.view.MotionEvent$PointerCoords[],int)>
<android.graphics.Matrix: int ni()>
<android.os.Messenger$1: java.lang.Object[] newArray(int)>
<GenerationGG: android.text.method.ArrowKeyMovementMethod get_androidtextmethodArrowKeyMovementMethod()>
<android.widget.CompoundButton: boolean verifyDrawable(android.graphics.drawable.Drawable)>
<android.media.audiofx.EnvironmentalReverb: int getDecayTime()>
<android.content.AsyncQueryHandler: void onUpdateComplete(int,java.lang.Object,int)>
<android.renderscript.Element: android.renderscript.Element MATRIX4X4(android.renderscript.RenderScript)>
<com.android.server.sip.SipService: int access$1300(com.android.server.sip.SipService)>
<Wrapper_android_renderscript_Type: void test_android_renderscript_Type()>
<android.gesture.Prediction: java.lang.String toString()>
<Wrapper_android_text_style_StyleSpan: void test_android_text_style_StyleSpan()>
<android.content.pm.FeatureInfo: int describeContents()>
<android.widget.RemoteViews: void setIntent(int,java.lang.String,android.content.Intent)>
<android.util.JsonReader: android.util.JsonToken nextValue()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setNationalPrefix(java.lang.String)>
<com.android.internal.backup.LocalTransport: java.lang.String transportDirName()>
<com.android.server.IntentResolver: java.util.Set filterSet()>
<android.widget.PopupWindow: void setOutsideTouchable(boolean)>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker$3: void <clinit>()>
<com.android.internal.os.BatteryStatsImpl: void readLocked()>
<android.app.SharedPreferencesImpl: void registerOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)>
<com.android.internal.app.ResolverActivity$ResolveListAdapter: int getCount()>
<android.view.View: void setTag(java.lang.Object)>
<android.text.Layout: void ellipsize(int,int,int,char[],int)>
<GenerationGG: android.renderscript.Short3 get_androidrenderscriptShort3()>
<android.app.SearchableInfo: int getHintId()>
<com.android.internal.statusbar.StatusBarIconList: void setIcon(int,com.android.internal.statusbar.StatusBarIcon)>
<android.widget.RemoteViewsService: java.util.HashMap access$100()>
<com.android.server.BackupManagerService: void waitForCompletion(com.android.server.BackupManagerService$FullParams)>
<android.speech.SpeechRecognizer: boolean checkOpenConnection()>
<android.renderscript.Allocation: android.renderscript.Type getType()>
<java.lang.Object: int getInputType()>
<android.content.pm.VerifierDeviceIdentity: android.content.pm.VerifierDeviceIdentity parse(java.lang.String)>
<GenerationGG: android.database.DataSetObservable get_androiddatabaseDataSetObservable()>
<android.os.MemoryFile: int native_mmap(java.io.FileDescriptor,int,int)>
<android.inputmethodservice.IInputMethodSessionWrapper: void <init>(android.content.Context,android.view.inputmethod.InputMethodSession)>
<android.webkit.WebViewCore: void pauseTimers()>
<android.view.MotionEvent$PointerCoords: void <init>()>
<com.android.server.PowerManagerService$BatteryReceiver: void <init>(com.android.server.PowerManagerService,com.android.server.PowerManagerService$1)>
<com.android.internal.telephony.PhoneBase: void notifyDisconnectP(com.android.internal.telephony.Connection)>
<android.location.Criteria: int getVerticalAccuracy()>
<GenerationGG: android.renderscript.ProgramVertex get_androidrenderscriptProgramVertex()>
<com.android.internal.view.menu.MenuBuilder: boolean isShortcutsVisible()>
<android.content.CursorLoader: java.lang.String[] getProjection()>
<com.android.internal.util.AsyncChannel: void replyHalfConnected(int)>
<android.gesture.Gesture: java.util.ArrayList getStrokes()>
<android.inputmethodservice.ExtractEditText: boolean hasFocus()>
<android.media.AudioService$VolumeStreamState: int getValidIndex(int)>
<android.widget.CalendarView: void onConfigurationChanged(android.content.res.Configuration)>
<android.net.sip.SipProfile$1: android.net.sip.SipProfile createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: int getOtasp()>
<com.android.server.am.AppErrorDialog$1: void handleMessage(android.os.Message)>
<GenerationGG: android.drm.DrmManagerClient$OnErrorListener get_androiddrmDrmManagerClient__OnErrorListener()>
<android.telephony.ServiceState: void <init>(android.telephony.ServiceState)>
<android.hardware.usb.UsbDevice: int getProductId()>
<android.widget.TextView: android.text.Layout getLayout()>
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: boolean access$102(com.android.internal.telephony.gsm.SimSmsInterfaceManager,boolean)>
<com.android.internal.telephony.IPhoneSubInfo$Stub: android.os.IBinder asBinder()>
<android.widget.ActivityChooserView: void setProvider(android.view.ActionProvider)>
<android.renderscript.Matrix3f: void scale(float,float)>
<com.android.internal.view.BaseIWindow: void dispatchAppVisibility(boolean)>
<android.preference.Preference: android.preference.Preference$OnPreferenceChangeListener getOnPreferenceChangeListener()>
<GenerationGG: android.inputmethodservice.InputMethodService$Insets get_androidinputmethodserviceInputMethodService__Insets()>
<android.net.http.LoggingEventHandler: void data(byte[],int)>
<android.net.ParseException: void <init>(java.lang.String)>
<GenerationGG: android.view.inputmethod.InputConnectionWrapper get_androidviewinputmethodInputConnectionWrapper()>
<com.android.internal.telephony.cat.CatCmdMessage: void <clinit>()>
<android.app.Fragment: void onCreate(android.os.Bundle)>
<android.bluetooth.BluetoothDeviceProfileState: boolean access$1402(android.bluetooth.BluetoothDeviceProfileState,boolean)>
<com.android.internal.location.DummyLocationProvider: boolean requiresSatellite()>
<android.webkit.WebView: int access$3400(android.webkit.WebView)>
<android.webkit.WebViewCore: void nativeSplitContent(int)>
<android.content.Intent: android.content.Intent cloneFilter()>
<android.media.audiofx.EnvironmentalReverb: void setDecayTime(int)>
<android.widget.GridLayout$Axis$1: void walk(int)>
<android.media.MediaRecorder: void setAuxiliaryOutputFile(java.lang.String)>
<android.telephony.ServiceState: void setSystemAndNetworkId(int,int)>
<android.net.Uri: android.net.Uri parse(java.lang.String)>
<android.net.http.SslCertificate: java.lang.String getValidNotAfter()>
<GenerationGG: android.graphics.DiscretePathEffect get_androidgraphicsDiscretePathEffect()>
<com.android.server.AlarmManagerService$Alarm: void dump(java.io.PrintWriter,java.lang.String,long)>
<android.net.wifi.WifiStateMachine: int access$9102(android.net.wifi.WifiStateMachine,int)>
<android.net.wifi.WifiStateMachine: void access$9500(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.webkit.WebViewClient: void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String)>
<android.webkit.WebChromeClient: void onShowCustomView(android.view.View,android.webkit.WebChromeClient$CustomViewCallback)>
<android.location.Address: boolean access$1502(android.location.Address,boolean)>
<android.view.Surface$1: void <init>()>
<android.widget.GridLayout: void invalidateStructure()>
<android.media.AudioService: void access$2800(android.media.AudioService,int,int)>
<android.content.IntentSender$1: android.content.IntentSender[] newArray(int)>
<com.android.internal.backup.LocalTransport: int startRestore(long,android.content.pm.PackageInfo[])>
<android.webkit.OverScrollGlow: void releaseAll()>
<android.view.ViewRootImpl$W: void closeSystemDialogs(java.lang.String)>
<com.android.internal.telephony.SmsAddress: void <init>()>
<android.speech.tts.EventLogger: int getUtteranceLength()>
<android.content.SyncStats: void <init>()>
<android.content.pm.IPackageDeleteObserver$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.sip.SipPhone$SipCall getCall()>
<com.android.server.BackupManagerService$PerformFullRestoreTask$RestoreDeleteObserver: void packageDeleted(java.lang.String,int)>
<GenerationGG: android.app.SearchableInfo get_androidappSearchableInfo()>
<com.android.server.usb.UsbDeviceManager: java.lang.String[] nativeGetAccessoryStrings()>
<Wrapper_android_widget_HeterogeneousExpandableList: void test_android_widget_HeterogeneousExpandableList()>
<android.content.res.Resources$Theme: android.content.res.TypedArray obtainStyledAttributes(int,int[])>
<android.widget.ExpandableListView: android.view.ContextMenu$ContextMenuInfo createContextMenuInfo(android.view.View,int,long)>
<android.widget.AbsSpinner$SavedState$1: java.lang.Object[] newArray(int)>
<android.net.wifi.p2p.WifiP2pConfig$1: java.lang.Object[] newArray(int)>
<android.database.AbstractCursor: int getType(int)>
<android.server.BluetoothService: boolean connectPanDeviceNative(java.lang.String,java.lang.String)>
<android.renderscript.ProgramRaster: void <init>(int,android.renderscript.RenderScript)>
<android.widget.NumberPicker: void postSetSelectionCommand(int,int)>
<android.net.http.HttpResponseCache: java.net.CacheRequest put(java.net.URI,java.net.URLConnection)>
<GenerationGG: android.renderscript.Sampler get_androidrenderscriptSampler()>
<android.app.Activity$ManagedCursor: void <init>(android.database.Cursor)>
<android.graphics.drawable.ShapeDrawable: void <init>(android.graphics.drawable.ShapeDrawable$ShapeState,android.graphics.drawable.ShapeDrawable$1)>
<GenerationGG: android.opengl.GLU get_androidopenglGLU()>
<com.android.server.PowerManagerService$14: void onAccuracyChanged(android.hardware.Sensor,int)>
<GenerationGG: android.content.ContentProvider get_androidcontentContentProvider()>
<android.app.Dialog: void onWindowFocusChanged(boolean)>
<android.app.ApplicationThreadNative: android.app.IApplicationThread asInterface(android.os.IBinder)>
<com.android.internal.telephony.IccRecords: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>
<android.webkit.WebViewCore: void webkitDraw(android.webkit.WebViewCore$DrawData)>
<android.widget.AbsSpinner: android.widget.Adapter getAdapter()>
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.Call getCall()>
<com.android.server.pm.PackageManagerService: int getUidTargetSdkVersionLockedLPr(int)>
<android.widget.RemoteViews$ActionException: void <init>(java.lang.String)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setNationalPrefixTransformRule(java.lang.String)>
<android.nfc.NdefRecord: int parseNdefRecord(byte[])>
<android.hardware.Camera: android.hardware.Camera$PreviewCallback access$302(android.hardware.Camera,android.hardware.Camera$PreviewCallback)>
<android.graphics.Paint: void <init>()>
<GenerationGG: android.test.RenamingDelegatingContext get_androidtestRenamingDelegatingContext()>
<android.os.RemoteCallback$RemoteCallbackProxy: void <init>(android.os.IRemoteCallback)>
<com.android.internal.telephony.DataConnection$DcActiveState: void enter()>
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: java.lang.Object clone()>
<android.content.res.StringBlock$StyleIDs: int access$202(android.content.res.StringBlock$StyleIDs,int)>
<android.content.res.Configuration: java.lang.String toString()>
<android.os.RemoteCallbackList: int beginBroadcast()>
<android.media.MediaRecorder: void finalize()>
<android.animation.AnimatorListenerAdapter: void onAnimationRepeat(android.animation.Animator)>
<android.hardware.usb.UsbRequest: boolean native_cancel()>
<android.net.wifi.p2p.WifiP2pGroup: boolean removeClient(android.net.wifi.p2p.WifiP2pDevice)>
<android.test.mock.MockCursor: java.lang.String[] getColumnNames()>
<com.android.internal.util.StateMachine: void unhandledMessage(android.os.Message)>
<android.telephony.PhoneNumberUtils: java.lang.String extractNetworkPortion(java.lang.String)>
<android.renderscript.Allocation: int getIDSafe()>
<android.location.Criteria: int getHorizontalAccuracy()>
<java.lang.Object: float getFloat(int)>
<android.preference.DialogPreference: void onActivityDestroy()>
<android.media.AudioService$VolumeStreamState: void setLastAudibleIndex(int)>
<android.widget.HeaderViewListAdapter: int getViewTypeCount()>
<GenerationGG: android.renderscript.Long4 get_androidrenderscriptLong4()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: void plug(long,long)>
<android.animation.ValueAnimator: java.lang.Object getAnimatedValue(java.lang.String)>
<android.os.Debug: long threadCpuTimeNanos()>
<com.android.server.am.PendingIntentRecord$Key: void <init>(int,java.lang.String,com.android.server.am.ActivityRecord,java.lang.String,int,android.content.Intent[],java.lang.String[],int)>
<android.server.BluetoothBondState: void clearPinAttempts(java.lang.String)>
<android.media.AudioManager: java.lang.String getIdForAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)>
<com.android.server.PowerManagerService$4: void <init>(com.android.server.PowerManagerService)>
<android.app.ActivityThread$ApplicationThread: void updateTimeZone()>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>
<android.view.textservice.SuggestionsInfo: int getCookie()>
<android.accounts.AccountManager$2: void <init>(android.accounts.AccountManager,android.os.Handler,android.accounts.AccountManagerCallback,java.lang.String,java.lang.String[])>
<android.app.TabActivity: void setDefaultTab(int)>
<android.net.sip.SipSessionAdapter: void onRegistrationDone(android.net.sip.ISipSession,int)>
<android.graphics.drawable.LayerDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<android.app.AlertDialog: void setButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<com.android.internal.telephony.BaseCommands: void setOnCatEvent(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.gsm.GSMPhone$NetworkSelectMessage: void <init>(com.android.internal.telephony.gsm.GSMPhone$1)>
<com.android.internal.telephony.SmsMessageBase: java.lang.String getDisplayOriginatingAddress()>
<android.content.SyncInfo$1: android.content.SyncInfo createFromParcel(android.os.Parcel)>
<android.content.res.Resources$1: void <init>(int)>
<android.telephony.NeighboringCellInfo: int getLac()>
<android.util.JsonReader: char readEscapeCharacter()>
<com.android.internal.telephony.cat.RilMessageDecoder: void access$400(com.android.internal.telephony.cat.RilMessageDecoder,com.android.internal.util.IState)>
<android.graphics.Canvas: void setViewport(int,int)>
<android.widget.AbsoluteLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.graphics.PointF: void <clinit>()>
<android.view.accessibility.AccessibilityRecord: void setMaxScrollX(int)>
<Wrapper_android_media_FaceDetector: void test_android_media_FaceDetector()>
<android.text.method.BaseKeyListener: void <clinit>()>
<android.opengl.GLSurfaceView$LogWriter: void flushBuilder()>
<android.widget.AutoCompleteTextView$PopupDataSetObserver$1: void <init>(android.widget.AutoCompleteTextView$PopupDataSetObserver)>
<android.widget.ActivityChooserView: boolean access$600(android.widget.ActivityChooserView)>
<android.view.ViewTreeObserver: void addOnScrollChangedListener(android.view.ViewTreeObserver$OnScrollChangedListener)>
<com.android.internal.telephony.PhoneBase: void notifyCallForwardingIndicator()>
<android.graphics.Interpolator: void setRepeatMirror(float,boolean)>
<android.widget.Gallery: int computeHorizontalScrollOffset()>
<com.android.server.am.ActivityManagerService: void removeDyingProviderLocked(com.android.server.am.ProcessRecord,com.android.server.am.ContentProviderRecord)>
<android.content.SyncManager$SyncHandler$SyncNotificationInfo: void <init>(android.content.SyncManager$SyncHandler)>
<GenerationGG: android.graphics.RectF get_androidgraphicsRectF()>
<android.text.format.DateFormat: java.lang.String getTimeZoneString(java.util.Calendar,int)>
<com.android.internal.telephony.IccCardApplication$AppState: boolean isSubscriptionPersoEnabled()>
<android.content.res.Resources: java.lang.String stringForQuantityCode(int)>
<android.view.MotionEvent: float getHistoricalTouchMinor(int)>
<android.location.Criteria: int access$402(android.location.Criteria,int)>
<android.nfc.TagLostException: void <init>()>
<android.accounts.AccountManagerService: boolean scanArgs(java.lang.String[],java.lang.String)>
<android.database.sqlite.SQLiteDatabase: void addToCompiledQueries(java.lang.String,android.database.sqlite.SQLiteCompiledSql)>
<android.net.wifi.WifiStateMachine: boolean access$9302(android.net.wifi.WifiStateMachine,boolean)>
<android.text.AndroidCharacter: boolean mirror(char[],int,int)>
<android.view.GLES20Canvas: boolean nDrawDisplayList(int,int,int,int,android.graphics.Rect)>
<com.android.internal.telephony.ServiceStateTracker: void unregisterForPsRestrictedEnabled(android.os.Handler)>
<android.widget.RemoteViews$ReflectionActionWithoutParams: void writeToParcel(android.os.Parcel,int)>
<android.content.res.CompatibilityInfo: float computeCompatibleScaling(android.util.DisplayMetrics,android.util.DisplayMetrics)>
<android.app.BackStackRecord: android.app.FragmentTransaction add(int,android.app.Fragment,java.lang.String)>
<java.lang.Object: void deactivate()>
<android.content.pm.ActivityInfo$1: java.lang.Object[] newArray(int)>
<android.app.ActivityManager$RunningAppProcessInfo: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Region: void finalize()>
<com.android.server.MountService$3: void <init>(com.android.server.MountService,java.lang.String)>
<com.android.internal.telephony.IccCardApplication$AppType: void <init>(java.lang.String,int)>
<android.sax.Element: java.lang.String toString()>
<com.android.server.am.IntentBindRecord: void dumpInService(java.io.PrintWriter,java.lang.String)>
<android.view.MotionEvent: int nativeGetPointerId(int,int)>
<android.app.FragmentManagerState$1: android.app.FragmentManagerState[] newArray(int)>
<android.view.KeyEvent$DispatcherState: void performedLongPress(android.view.KeyEvent)>
<android.webkit.WebSettings: int access$500()>
<android.drm.DrmManagerClient: int processDrmInfo(android.drm.DrmInfo)>
<android.net.rtp.AudioGroup: void setMode(int)>
<android.location.Address: void <init>(java.util.Locale)>
<android.test.MoreAsserts: void assertEmpty(java.lang.String,java.util.Map)>
<android.graphics.Matrix: void native_setSinCos(int,float,float,float,float)>
<android.view.View: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
<android.net.wifi.SupplicantStateTracker: void transitionOnSupplicantStateChange(android.net.wifi.StateChangeResult)>
<junit.framework.TestCase: void assertEquals(java.lang.String,char,char)>
<com.android.server.usb.UsbDeviceManager: java.lang.String access$700(java.lang.String,java.lang.String)>
<com.android.server.usb.UsbSettingsManager$AccessoryFilter: void <init>(android.hardware.usb.UsbAccessory)>
<android.app.ActivityManager$TaskThumbnails$1: java.lang.Object[] newArray(int)>
<GenerationGG: android.content.ContentValues get_androidcontentContentValues()>
<android.widget.ListView: void setOverscrollHeader(android.graphics.drawable.Drawable)>
<android.util.LruCache: void <init>(int)>
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedAuthority()>
<android.animation.ValueAnimator: int getRepeatCount()>
<android.view.Display: int getDisplayId()>
<android.net.rtp.RtpStream: int getLocalPort()>
<android.graphics.Canvas: void throwIfRecycled(android.graphics.Bitmap)>
<com.android.internal.telephony.cat.ComprehensionTlv: byte[] getRawValue()>
<com.android.internal.os.BatteryStatsImpl$Timer: void <init>(int,java.util.ArrayList,android.os.Parcel)>
<android.view.accessibility.AccessibilityEvent: void setSealed(boolean)>
<android.renderscript.ProgramRaster$CullMode: void <clinit>()>
<com.android.internal.telephony.cat.LanguageResponseData: void format(java.io.ByteArrayOutputStream)>
<com.android.internal.telephony.cdma.sms.CdmaSmsAddress: com.android.internal.telephony.cdma.sms.CdmaSmsAddress parse(java.lang.String)>
<android.webkit.WebView: int nativeGetDrawGLFunction(int,android.graphics.Rect,android.graphics.Rect,float,int)>
<android.server.BluetoothService: void checkAndRemoveRecord(int,int)>
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setupSetter(java.lang.Class)>
<android.app.IInstrumentationWatcher$Stub$Proxy: void <init>(android.os.IBinder)>
<android.content.Intent: android.content.Intent addCategory(java.lang.String)>
<android.bluetooth.BluetoothHealthAppConfiguration: int getChannelType()>
<android.net.wifi.WifiStateMachine: void access$8600(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.net.LocalSocket: java.io.InputStream getInputStream()>
<android.view.inputmethod.InputMethodManager: void doDump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<GenerationGG: android.renderscript.BaseObj[] get_androidrenderscriptBaseObj_ARRAY_()>
<com.android.server.am.ActivityManagerService$11: void <init>(com.android.server.am.ActivityManagerService,java.lang.String,java.lang.String,java.lang.StringBuilder,java.io.File,android.app.ApplicationErrorReport$CrashInfo,java.lang.String,android.os.DropBoxManager)>
<android.filterfw.core.VertexFrame: void releaseNativeAllocation()>
<android.net.LocalSocket: java.io.FileDescriptor getFileDescriptor()>
<android.view.ViewRootImpl: java.lang.String getMessageName(android.os.Message)>
<com.android.server.Watchdog$HeartbeatHandler: void <init>(com.android.server.Watchdog)>
<com.android.internal.statusbar.StatusBarIcon$1: com.android.internal.statusbar.StatusBarIcon[] newArray(int)>
<android.webkit.WebView$4: void onClick(android.content.DialogInterface,int)>
<android.test.mock.MockPackageManager: int checkPermission(java.lang.String,java.lang.String)>
<com.android.server.wm.WindowManagerService: boolean isKeyguardLocked()>
<android.renderscript.Matrix3f: float get(int,int)>
<android.content.res.Resources: android.content.res.TypedArray obtainTypedArray(int)>
<com.android.internal.util.FastXmlSerializer: void append(java.lang.String)>
<GenerationGG: android.widget.ShareActionProvider$OnShareTargetSelectedListener get_androidwidgetShareActionProvider__OnShareTargetSelectedListener()>
<com.android.internal.util.ArrayUtils: void <clinit>()>
<android.net.wifi.WifiNative: boolean killSupplicant()>
<android.content.IntentFilter: boolean hasDataPath(java.lang.String)>
<com.android.server.pm.PackageManagerService$FileInstallArgs: int doPostInstall(int)>
<android.graphics.Path: void toggleInverseFillType()>
<com.android.server.InputMethodManagerService$2: void <init>(com.android.server.InputMethodManagerService,android.content.pm.PackageManager)>
<android.renderscript.Element: android.renderscript.Element createVector(android.renderscript.RenderScript,android.renderscript.Element$DataType,int)>
<android.webkit.WebViewCore: void nativeSendListBoxChoice(int)>
<android.net.LinkAddress: void writeToParcel(android.os.Parcel,int)>
<GenerationGG: android.webkit.GeolocationPermissions get_androidwebkitGeolocationPermissions()>
<com.android.internal.os.ProcessStats: void printRatio(java.io.PrintWriter,long,long)>
<android.webkit.WebViewCore$EventHub: int access$2602(android.webkit.WebViewCore$EventHub,int)>
<com.android.internal.os.IDropBoxManagerService$Stub: com.android.internal.os.IDropBoxManagerService asInterface(android.os.IBinder)>
<android.text.Layout: android.text.TextPaint getPaint()>
<DumbClass: void DumbMethod62()>
<com.android.internal.os.BatteryStatsImpl: void noteStopGpsLocked(int)>
<android.widget.TextView$BufferType: void <init>(java.lang.String,int)>
<android.net.wifi.WifiWatchdogStateMachine: void access$1000(android.net.wifi.WifiWatchdogStateMachine,com.android.internal.util.IState)>
<com.android.server.wm.WindowState: boolean isFullscreen(int,int)>
<android.net.wifi.WifiInfo: void setBSSID(java.lang.String)>
<android.test.mock.MockDialogInterface: void <init>()>
<android.os.BatteryStats$HistoryItem: int describeContents()>
<android.content.res.Resources: android.content.res.TypedArray access$000(android.content.res.Resources,int)>
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: void <init>(int,int,int,int,boolean)>
<android.content.ContentProvider: int access$000(android.content.ContentProvider)>
<android.view.InputDevice: void <init>()>
<android.app.Dialog: void setFeatureDrawableAlpha(int,int)>
<GenerationGG: android.graphics.drawable.shapes.Shape get_androidgraphicsdrawableshapesShape()>
<android.os.Parcel: android.os.ParcelFileDescriptor readFileDescriptor()>
<com.android.server.wm.StrictModeFlash: void setVisibility(boolean)>
<com.android.internal.telephony.gsm.GSMPhone: void finalize()>
<android.media.AudioRecord: void native_stop()>
<com.android.server.IntentResolver: boolean dumpMap(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,java.util.Map,java.lang.String,boolean)>
<com.android.server.WifiService: boolean access$2002(com.android.server.WifiService,boolean)>
<Wrapper_android_opengl_GLES10: void test_android_opengl_GLES10()>
<android.app.SearchDialog$2: void onClick(android.view.View)>
<android.os.Parcel: android.os.IBinder[] createBinderArray()>
<android.webkit.WebViewCore: void nativeSetIsPaused(boolean)>
<android.location.Country$1: android.location.Country createFromParcel(android.os.Parcel)>
<android.test.SimpleCache: java.lang.Object get(java.lang.Object)>
<android.net.NetworkPolicyManager: long computeLastCycleBoundary(long,android.net.NetworkPolicy)>
<com.android.internal.util.StateMachine: android.os.HandlerThread access$300(com.android.internal.util.StateMachine)>
<com.android.internal.telephony.cdma.sms.BearerData: void encodeEmsUserDataPayload(com.android.internal.telephony.cdma.sms.UserData)>
<android.net.wifi.WifiStateMachine: void setHighPerfModeEnabled(boolean)>
<android.content.IIntentReceiver$Stub$Proxy: void <init>(android.os.IBinder)>
<android.widget.TableRow: android.util.SparseIntArray access$302(android.widget.TableRow,android.util.SparseIntArray)>
<android.widget.CompoundButton: void setOnCheckedChangeListener(android.widget.CompoundButton$OnCheckedChangeListener)>
<android.widget.FastScroller: int getWidth()>
<android.os.StrictMode$InstanceCountViolation: void <clinit>()>
<android.animation.AnimatorListenerAdapter: void <init>()>
<android.hardware.SensorManager: void <clinit>()>
<android.server.BluetoothAdapterStateMachine: void access$5200(android.server.BluetoothAdapterStateMachine,android.os.Message)>
<android.graphics.Paint: android.graphics.ColorFilter setColorFilter(android.graphics.ColorFilter)>
<android.hardware.SensorManager$ListenerDelegate: java.lang.Object getListener()>
<com.android.server.ThrottleService$MyHandler: java.util.Calendar calculatePeriodStart(java.util.Calendar)>
<com.android.internal.statusbar.IStatusBar$Stub$Proxy: android.os.IBinder asBinder()>
<android.content.IntentFilter$AuthorityEntry: void writeToParcel(android.os.Parcel)>
<android.app.PendingIntent: boolean equals(java.lang.Object)>
<android.widget.TextView: int getTopPaddingOffset()>
<android.telephony.PhoneNumberFormattingTextWatcher: boolean hasSeparator(java.lang.CharSequence,int,int)>
<android.net.http.RequestQueue$SyncFeeder: void requeueRequest(android.net.http.Request)>
<android.view.accessibility.AccessibilityNodeInfo: int getWindowId()>
<com.android.internal.os.ProcessStats: int getLastUserTime()>
<android.media.CameraProfile: int getJpegEncodingQualityParameter(int)>
<com.android.internal.util.StateMachine$ProcessedMessageInfo: java.lang.String toString()>
<com.android.server.PowerManagerService: boolean access$602(com.android.server.PowerManagerService,boolean)>
<android.widget.MediaController$5: void <init>(android.widget.MediaController)>
<android.media.AudioService: void createAudioSystemThread()>
<GenerationGG: android.text.Layout$Alignment get_androidtextLayout__Alignment()>
<android.app.FragmentManagerImpl$6: void <init>(android.app.FragmentManagerImpl,android.app.Fragment)>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.String toString()>
<android.widget.LinearLayout: android.widget.LinearLayout$LayoutParams generateDefaultLayoutParams()>
<android.gesture.GestureUtils: float[] spatialSampling(android.gesture.Gesture,int)>
<android.content.ComponentName: void writeToParcel(android.os.Parcel,int)>
<com.android.internal.widget.ScrollingTabContainerView: void animateToTab(int)>
<android.app.Instrumentation: void start()>
<com.android.internal.telephony.sip.SipPhone: java.lang.String getDeviceSvn()>
<com.android.internal.widget.ActionBarView: android.view.View access$1100(com.android.internal.widget.ActionBarView)>
<android.view.HardwareRenderer$GlRenderer: void checkEglErrors()>
<android.widget.RemoteViews$1: void <init>()>
<android.widget.RemoteViews: void addView(int,android.widget.RemoteViews)>
<android.renderscript.FieldPacker: void addU32(long)>
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder nativeNewInstance(java.io.InputStream,byte[],boolean)>
<android.graphics.drawable.AnimationDrawable: boolean isOneShot()>
<android.service.textservice.SpellCheckerService$InternalISpellCheckerSession: void <init>(java.lang.String,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle,android.service.textservice.SpellCheckerService$Session)>
<com.android.internal.telephony.BaseCommands: void registerForNotAvailable(android.os.Handler,int,java.lang.Object)>
<android.widget.TimePicker: boolean access$100(android.widget.TimePicker)>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: void <init>(com.android.internal.os.BatteryStatsImpl$Uid)>
<android.app.SearchableInfo: boolean shouldIncludeInGlobalSearch()>
<com.android.server.wm.Session: void dump(java.io.PrintWriter,java.lang.String)>
<android.database.sqlite.SQLiteClosable: void onAllReferencesReleasedFromContainer()>
<android.webkit.LoadListener: void handleError(int,java.lang.String)>
<android.webkit.ZoomControlExternal: long access$300()>
<com.android.server.NotificationManagerService: boolean access$1202(com.android.server.NotificationManagerService,boolean)>
<com.android.internal.widget.LockPatternView$SavedState$1: com.android.internal.widget.LockPatternView$SavedState[] newArray(int)>
<android.webkit.DeviceMotionAndOrientationManager: void useMock()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getAllIllegal()>
<Wrapper_android_nfc_NdefRecord: void test_android_nfc_NdefRecord()>
<android.filterfw.core.SimpleFrameManager: void <init>()>
<android.content.pm.FeatureInfo: void <clinit>()>
<android.app.DownloadManager$Request: android.app.DownloadManager$Request setTitle(java.lang.CharSequence)>
<android.os.Parcel: void setDataCapacity(int)>
<android.os.ResultReceiver$MyResultReceiver: void <init>(android.os.ResultReceiver)>
<GenerationGG: android.database.sqlite.SQLiteQuery get_androiddatabasesqliteSQLiteQuery()>
<android.app.DialogFragment: void onDetach()>
<com.android.internal.telephony.BaseCommands: void unSetOnNewGsmSms(android.os.Handler)>
<android.util.XmlPullAttributes: int getAttributeListValue(java.lang.String,java.lang.String,java.lang.String[],int)>
<android.widget.ScrollView: void endDrag()>
<android.graphics.Typeface: boolean isItalic()>
<android.view.KeyCharacterMap: void finalize()>
<android.renderscript.Long4: void <init>(long,long,long,long)>
<com.android.server.location.GpsLocationProvider: java.lang.String native_get_internal_state()>
<android.widget.AbsListView: void setScrollIndicators(android.view.View,android.view.View)>
<android.widget.ListPopupWindow: void setListItemExpandMax(int)>
<GenerationGG: android.webkit.URLUtil get_androidwebkitURLUtil()>
<android.view.View: boolean onCheckIsTextEditor()>
<android.test.LoaderTestCase: void <clinit>()>
<android.webkit.WebSettings: void setGeolocationDatabasePath(java.lang.String)>
<android.accounts.AccountAuthenticatorResponse: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.p2p.WifiP2pDeviceList: boolean remove(android.net.wifi.p2p.WifiP2pDevice)>
<android.preference.Preference: boolean onKey(android.view.View,int,android.view.KeyEvent)>
<android.widget.TextView: int getTotalPaddingLeft()>
<com.android.internal.util.ArrayUtils: int idealCharArraySize(int)>
<android.graphics.Paint: int getFontMetricsInt(android.graphics.Paint$FontMetricsInt)>
<android.media.ExifInterface: void setAttribute(java.lang.String,java.lang.String)>
<android.graphics.PathMeasure: void <init>(android.graphics.Path,boolean)>
<android.graphics.Rect: int describeContents()>
<Wrapper_android_renderscript_ProgramRaster: void test_android_renderscript_ProgramRaster()>
<android.preference.DialogPreference: void onDialogClosed(boolean)>
<com.android.internal.telephony.ApnContext: com.android.internal.telephony.ApnSetting getNextWaitingApn()>
<android.renderscript.RenderScript: void rsnContextSetPriority(int,int)>
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getSubscriberId()>
<com.android.internal.util.StateMachine: void sendMessage(int,java.lang.Object)>
<com.android.internal.os.ProcessStats: java.lang.String printCurrentLoad()>
<android.animation.IntKeyframeSet: android.animation.KeyframeSet clone()>
<android.os.RegistrantList: void notifyResult(java.lang.Object)>
<android.media.AudioSystem: int setDeviceConnectionState(int,int,java.lang.String)>
<android.graphics.Paint: void setStrokeJoin(android.graphics.Paint$Join)>
<android.media.audiofx.Virtualizer$BaseParameterListener: void <init>(android.media.audiofx.Virtualizer,android.media.audiofx.Virtualizer$1)>
<android.view.HardwareRenderer$Gl20Renderer: android.view.GLES20Canvas createCanvas()>
<android.text.Layout: float getSpacingAdd()>
<com.android.server.net.NetworkPolicyManagerService$6: void <init>(com.android.server.net.NetworkPolicyManagerService)>
<android.widget.ExpandableListView$SavedState: void <init>(android.os.Parcelable,java.util.ArrayList)>
<com.android.server.PackageManagerBackupAgent: android.content.pm.Signature[] readSignatureArray(java.io.DataInputStream)>
<com.android.internal.telephony.sip.SipPhoneBase: void setNetworkSelectionModeAutomatic(android.os.Message)>
<android.app.WallpaperInfo: android.content.ComponentName getComponent()>
<android.net.NetworkQuotaInfo: void <init>(long,long,long)>
<android.test.InstrumentationTestRunner: com.android.internal.util.Predicate getAnnotationPredicate(java.lang.String)>
<android.net.DhcpInfoInternal: android.net.DhcpInfo makeDhcpInfo()>
<android.view.animation.Animation: long getStartOffset()>
<android.net.wifi.SupplicantState: android.net.wifi.SupplicantState valueOf(java.lang.String)>
<android.widget.GridLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.widget.TimePicker: android.widget.NumberPicker access$400(android.widget.TimePicker)>
<android.os.WorkSource: void writeToParcel(android.os.Parcel,int)>
<android.net.NetworkUtils: boolean stopDhcp(java.lang.String)>
<com.android.server.NotificationManagerService$WorkerHandler: void <init>(com.android.server.NotificationManagerService)>
<android.net.Uri$AbstractHierarchicalUri: int getPort()>
<com.android.internal.telephony.cat.ResultCode: int value()>
<android.net.sip.ISipSession$Stub$Proxy: android.os.IBinder asBinder()>
<android.net.LocalSocketImpl: java.io.FileDescriptor accept(java.io.FileDescriptor,android.net.LocalSocketImpl)>
<android.view.ViewRootImpl$3: void unlockCanvasAndPost(android.graphics.Canvas)>
<android.text.style.SubscriptSpan: int describeContents()>
<android.app.ApplicationErrorReport$1: android.app.ApplicationErrorReport createFromParcel(android.os.Parcel)>
<android.location.LocationManager$ListenerTransport: void onLocationChanged(android.location.Location)>
<GenerationGG: android.graphics.Rasterizer get_androidgraphicsRasterizer()>
<android.view.textservice.SpellCheckerSession: boolean isSessionDisconnected()>
<android.app.Application: void dispatchActivityResumed(android.app.Activity)>
<android.preference.PreferenceGroupAdapter: int getViewTypeCount()>
<com.android.internal.util.MemInfoReader: void readMemInfo()>
<android.content.SyncManager: boolean isSyncStillActive(android.content.SyncManager$ActiveSyncContext)>
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder newInstance(java.io.FileDescriptor,boolean)>
<android.location.GpsSatellite: int getPrn()>
<android.graphics.Matrix: boolean native_preRotate(int,float)>
<com.android.server.connectivity.Vpn: void jniProtect(int,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: int native_getDbLookaside()>
<android.view.inputmethod.CompletionInfo: void <init>(long,int,java.lang.CharSequence)>
<android.os.CountDownTimer: long access$000(android.os.CountDownTimer)>
<android.view.animation.LayoutAnimationController: int getTransformedIndex(android.view.animation.LayoutAnimationController$AnimationParameters)>
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: android.os.IBinder asBinder()>
<android.renderscript.Sampler$Builder: void setWrapS(android.renderscript.Sampler$Value)>
<android.app.IActivityManager$WaitResult$1: android.app.IActivityManager$WaitResult[] newArray(int)>
<android.view.KeyCharacterMap: android.view.KeyCharacterMap load(int)>
<android.app.LoadedApk: boolean isSecurityViolation()>
<GenerationGG: java.lang.Float get_javalangFloat()>
<android.app.SearchManager: void onCancel(android.content.DialogInterface)>
<android.view.HardwareCanvas: boolean callDrawGLFunction(int)>
<Wrapper_android_util_Xml: void test_android_util_Xml()>
<android.content.res.XmlBlock$Parser: java.lang.String getAttributeType(int)>
<android.content.res.XmlBlock: void access$1900(android.content.res.XmlBlock)>
<com.android.server.sip.SipHelper: javax.sip.header.CSeqHeader createCSeqHeader(java.lang.String)>
<Wrapper_android_util_Printer: void test_android_util_Printer()>
<android.renderscript.Sampler: android.renderscript.Sampler WRAP_LINEAR_MIP_LINEAR(android.renderscript.RenderScript)>
<android.view.View$TransformationInfo: boolean access$402(android.view.View$TransformationInfo,boolean)>
<android.widget.SpellChecker: void removeSpellCheckSpan(android.text.style.SpellCheckSpan)>
<android.speech.tts.SynthesisRequest: void <init>(java.lang.String,android.os.Bundle)>
<com.android.server.accessibility.TouchExplorer$PointerTracker: void detectActivePointers(android.view.MotionEvent)>
<android.view.ViewGroup: boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation)>
<android.content.SyncManager$AuthoritySyncStats: void <init>(java.lang.String,android.content.SyncManager$1)>
<android.view.View: boolean isFocused()>
<android.server.BluetoothService: byte[] readAdapterOutOfBandDataNative()>
<android.widget.ActivityChooserView: android.content.Context access$1500(android.widget.ActivityChooserView)>
<android.content.res.Configuration: void setTo(android.content.res.Configuration)>
<android.webkit.WebView: void nativeCreate(int,java.lang.String)>
<android.server.BluetoothHealthProfileHandler: java.util.List lookupHealthDevicesMatchingStates(int[])>
<android.graphics.drawable.NinePatchDrawable: int getIntrinsicHeight()>
<android.app.INotificationManager$Stub: android.os.IBinder asBinder()>
<android.net.wifi.WifiStateMachine: com.android.internal.util.State access$10500(android.net.wifi.WifiStateMachine)>
<android.database.sqlite.SQLiteDatabase$1: void entryRemoved(boolean,java.lang.Object,java.lang.Object,java.lang.Object)>
<android.net.wifi.WifiStateMachine$WaitForP2pDisableState: boolean processMessage(android.os.Message)>
<android.accessibilityservice.AccessibilityServiceInfo: int describeContents()>
<android.opengl.GLES10: void glNormalPointerBounds(int,int,java.nio.Buffer,int)>
<android.graphics.Picture: void nativeDestructor(int)>
<android.net.sip.SipProfile: java.lang.String getProtocol()>
<android.net.Uri$OpaqueUri: java.lang.String getFragment()>
<android.renderscript.RenderScript: void nScriptSetVarD(int,int,double)>
<android.view.ViewDebug$3: void <init>(android.view.View)>
<android.net.LinkAddress$1: java.lang.Object[] newArray(int)>
<android.media.MediaRecorder: void setCaptureRate(double)>
<android.app.Activity: boolean onTrackballEvent(android.view.MotionEvent)>
<android.net.sip.SipProfile: void <clinit>()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimSpnLoaded: void <init>(com.android.internal.telephony.cdma.CdmaLteUiccRecords)>
<android.renderscript.Script: void setTimeZone(java.lang.String)>
<android.os.WorkSource: void <init>(android.os.WorkSource)>
<android.app.Activity: void setFeatureDrawableAlpha(int,int)>
<android.util.JsonReader: boolean hasNext()>
<android.view.KeyCharacterMap: void <init>(int,int)>
<android.widget.AbsListView: android.view.View getSelectedView()>
<android.renderscript.RenderScript: int rsnAllocationCreateTyped(int,int,int,int)>
<com.android.server.am.ActivityStack: com.android.server.am.ActivityRecord topRunningActivityLocked(android.os.IBinder,int)>
<com.android.internal.telephony.cdma.sms.BearerData: boolean decodeMsgCenterTimeStamp(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)>
<android.view.InputDevice: int describeContents()>
<android.content.res.AssetManager: android.content.res.AssetManager getSystem()>
<android.graphics.LayerRasterizer: void addLayer(android.graphics.Paint,float,float)>
<com.android.i18n.phonenumbers.PhoneNumberUtil: java.lang.String getRegionCodeForCountryCode(int)>
<android.net.wifi.WifiStateMachine: void startFilteringMulticastV4Packets()>
<com.android.server.pm.Settings: void readGrantedPermissionsLPw(org.xmlpull.v1.XmlPullParser,java.util.HashSet)>
<com.android.server.am.ServiceRecord: void dump(java.io.PrintWriter,java.lang.String)>
<android.app.Notification: java.lang.String toString()>
<GenerationGG: android.graphics.Interpolator get_androidgraphicsInterpolator()>
<com.android.internal.telephony.sip.SipCommandInterface: void iccIO(int,int,java.lang.String,int,int,int,java.lang.String,java.lang.String,android.os.Message)>
<android.widget.PopupWindow: void setHeight(int)>
<android.preference.PreferenceManager: android.app.Activity getActivity()>
<android.util.JsonWriter: android.util.JsonWriter beginObject()>
<android.animation.PropertyValuesHolder: void setEvaluator(android.animation.TypeEvaluator)>
<com.android.server.am.BackupRecord: java.lang.String toString()>
<android.media.AudioService$VolumeStreamState$VolumeDeathHandler: int access$1802(android.media.AudioService$VolumeStreamState$VolumeDeathHandler,int)>
<android.net.wifi.WifiStateMachine: void access$1100(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.media.AudioTrack$NativeEventHandlerDelegate: android.media.AudioTrack access$100(android.media.AudioTrack$NativeEventHandlerDelegate)>
<android.view.GLES20Canvas: boolean nIsBackBufferPreserved()>
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: void updateCurrentReportedCount(int)>
<com.android.internal.telephony.gsm.SmsMessage: int getStatus()>
<com.android.server.wm.InputManager: int nativeGetScanCodeState(int,int,int)>
<com.android.server.PowerManagerService: boolean isScreenTurningOffLocked()>
<android.app.backup.FileBackupHelperBase: int performBackup_native(java.io.FileDescriptor,int,java.io.FileDescriptor,java.lang.String[],java.lang.String[])>
<android.webkit.WebSettings: void setAppCacheMaxSize(long)>
<android.database.MatrixCursor: void addRow(java.lang.Iterable)>
<android.view.MenuInflater$MenuState: void resetGroup()>
<android.view.View: java.lang.Object getTag(int)>
<com.android.internal.view.menu.ActionMenuItem: android.graphics.drawable.Drawable getIcon()>
<android.app.LauncherActivity$ActivityAdapter$ArrayFilter: android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence)>
<DumbClass: void DumbMethod56()>
<android.telephony.TelephonyManager: java.lang.String getNetworkOperatorName()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: android.os.Handler access$000(com.android.internal.telephony.gsm.GsmDataConnectionTracker)>
<android.net.http.AndroidHttpClient: void enableCurlLogging(java.lang.String,int)>
<com.android.internal.database.SortCursor: int access$002(com.android.internal.database.SortCursor,int)>
<android.net.sip.SipException: void <init>()>
<android.graphics.drawable.Drawable: int getResolvedLayoutDirectionSelf()>
<android.media.effect.EffectContext: void <init>()>
<android.net.NetworkTemplate: void <init>(android.os.Parcel,android.net.NetworkTemplate$1)>
<com.android.internal.telephony.IccFileHandler: void sendResult(android.os.Message,java.lang.Object,java.lang.Throwable)>
<android.app.Notification$1: android.app.Notification[] newArray(int)>
<android.location.Address: double access$1402(android.location.Address,double)>
<android.view.KeyEvent: void <init>(android.view.KeyEvent)>
<android.renderscript.Element: android.renderscript.Element U16_2(android.renderscript.RenderScript)>
<android.util.Base64InputStream: int read()>
<android.media.AudioManager$1: void dispatchAudioFocusChange(int,java.lang.String)>
<android.webkit.BrowserFrame: void setUsernamePassword(java.lang.String,java.lang.String)>
<com.android.internal.telephony.gsm.VoiceMailConstants: void <init>()>
<Wrapper_android_content_pm_FeatureInfo: void test_android_content_pm_FeatureInfo()>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Phone$DataActivityState getDataActivityState()>
<android.net.wifi.WifiConfigStore: android.net.wifi.WpsResult startWpsPbc(android.net.wifi.WpsInfo)>
<android.graphics.Paint: void setFakeBoldText(boolean)>
<com.android.server.wm.WindowManagerService: void dumpTokensLocked(java.io.FileDescriptor,java.io.PrintWriter,boolean)>
<android.media.effect.EffectFactory: java.lang.Class getEffectClassByName(java.lang.String)>
<com.android.server.location.GpsLocationProvider: java.util.ArrayList access$000(com.android.server.location.GpsLocationProvider)>
<android.database.sqlite.SQLiteClosable: java.lang.String getObjInfo()>
<android.webkit.WebView$9: void <init>(android.webkit.WebView)>
<android.widget.TextView: android.content.res.ColorStateList getLinkTextColors()>
<android.net.DummyDataStateTracker: void setPolicyDataEnable(boolean)>
<android.webkit.LoadListener: android.net.http.HttpAuthHeader parseAuthHeader(java.lang.String)>
<android.view.inputmethod.InputMethodSubtype: int getIconResId()>
<android.test.mock.MockPackageManager: android.content.res.Resources getResourcesForActivity(android.content.ComponentName)>
<android.appwidget.AppWidgetHostView$ParcelableSparseArray: void <clinit>()>
<android.graphics.Rect: void offset(int,int)>
<android.webkit.WebSettings: boolean getJavaScriptCanOpenWindowsAutomatically()>
<com.android.server.wm.InputFilter: void onUninstalled()>
<android.app.backup.FileBackupHelperBase: int writeSnapshot_native(int,java.io.FileDescriptor)>
<com.android.i18n.phonenumbers.PhoneNumberUtil: void <init>()>
<android.renderscript.FieldPacker: void addF64(android.renderscript.Double3)>
<android.os.HandlerThread: void <init>(java.lang.String)>
<GenerationGG: android.media.FaceDetector get_androidmediaFaceDetector()>
<android.content.SyncManager$AccountSyncStats: void <init>(java.lang.String,android.content.SyncManager$1)>
<com.android.org.bouncycastle.asn1.x509.X509Name: java.util.Vector getOIDs()>
<GenerationGG: android.util.Xml$Encoding get_androidutilXml__Encoding()>
<android.content.ContentProviderProxy: void <init>(android.os.IBinder)>
<com.android.internal.view.BaseIWindow: void <init>()>
<android.webkit.LoadListener: java.lang.String realm()>
<com.android.internal.widget.LockPatternView: int getSuggestedMinimumWidth()>
<android.net.http.ErrorStrings: int getResource(int)>
<android.widget.TextView: android.content.Context access$1100(android.widget.TextView)>
<android.view.GLES20RecordingCanvas: android.view.GLES20RecordingCanvas getNextPoolable()>
<com.android.internal.widget.ActionBarView: android.view.View getCustomNavigationView()>
<android.webkit.HTML5VideoView: int getVideoLayerId()>
<android.app.Activity: android.view.View getCurrentFocus()>
<com.android.server.ThrottleService$DataRecorder: java.io.File useMRUFile(java.io.File)>
<android.net.wifi.p2p.WifiP2pInfo$1: android.net.wifi.p2p.WifiP2pInfo createFromParcel(android.os.Parcel)>
<android.util.LongSparseArray: java.lang.Object get(long,java.lang.Object)>
<android.webkit.CallbackProxy: void onIndexChanged(android.webkit.WebHistoryItem,int)>
<Wrapper_android_test_mock_MockDialogInterface: void test_android_test_mock_MockDialogInterface()>
<com.android.server.sip.SipSessionListenerProxy: void setListener(android.net.sip.ISipSessionListener)>
<android.app.NativeActivity: void onResumeNative(int)>
<android.net.wifi.p2p.WifiP2pInfo: int describeContents()>
<android.app.ActivityManager$RunningAppProcessInfo$1: java.lang.Object[] newArray(int)>
<com.android.server.BackupManagerService$RestoreParams: void <init>(com.android.server.BackupManagerService,com.android.internal.backup.IBackupTransport,android.app.backup.IRestoreObserver,long,android.content.pm.PackageInfo,int,boolean)>
<com.android.server.TelephonyRegistry: void remove(android.os.IBinder)>
<android.net.NetworkStatsHistory: void dump(java.lang.String,java.io.PrintWriter,boolean)>
<android.hardware.Camera: void native_takePicture(int)>
<android.view.GestureDetector$SimpleOnGestureListener: boolean onScroll(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<com.android.server.TextServicesManagerService: android.content.Context access$200(com.android.server.TextServicesManagerService)>
<android.speech.tts.PlaybackSynthesisCallback: int start(int,int,int)>
<android.gesture.GestureStroke: android.gesture.OrientedBoundingBox computeOrientedBoundingBox()>
<com.android.server.am.ActivityRecord: void updateThumbnail(android.graphics.Bitmap,java.lang.CharSequence)>
<android.view.VelocityTracker: void setNextPoolable(java.lang.Object)>
<android.widget.TextView: void setLines(int)>
<GenerationGG: android.util.SparseArray get_androidutilSparseArray()>
<android.content.pm.ConfigurationInfo$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.content.SyncStorageEngine: void <clinit>()>
<com.android.server.DevicePolicyManagerService$2: void <init>(com.android.server.DevicePolicyManagerService,com.android.server.DevicePolicyManagerService$ActiveAdmin,android.content.ComponentName)>
<GenerationGG: android.view.inputmethod.InputMethodSession$EventCallback get_androidviewinputmethodInputMethodSession__EventCallback()>
<android.test.mock.MockApplication: void onConfigurationChanged(android.content.res.Configuration)>
<android.media.AudioService: int getStreamVolume(int)>
<GenerationGG: android.media.MediaPlayer$OnBufferingUpdateListener get_androidmediaMediaPlayer__OnBufferingUpdateListener()>
<android.location.Country: void <clinit>()>
<com.android.server.pm.PackageManagerService: int getUidForSharedUser(java.lang.String)>
<android.graphics.Rect: void union(android.graphics.Rect)>
<android.widget.GridView: int getNumColumns()>
<android.gesture.GestureOverlayView: android.graphics.Rect touchMove(android.view.MotionEvent)>
<android.inputmethodservice.SoftInputWindow: void onWindowFocusChanged(boolean)>
<android.graphics.BitmapRegionDecoder: android.graphics.Bitmap nativeDecodeRegion(int,int,int,int,int,android.graphics.BitmapFactory$Options)>
<android.os.StrictMode$VmPolicy$Builder: void <init>()>
<android.renderscript.FileA3D: android.renderscript.FileA3D$IndexEntry getIndexEntry(int)>
<android.view.ViewTreeObserver: void removeOnPreDrawListener(android.view.ViewTreeObserver$OnPreDrawListener)>
<android.net.wifi.WifiNative: boolean p2pFind(int)>
<android.media.MediaRecorder: void native_finalize()>
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: boolean isSelected()>
<android.media.ExifInterface: byte[] getThumbnailNative(java.lang.String)>
<android.nfc.TagLostException: void <init>(java.lang.String)>
<com.android.internal.telephony.gsm.GsmMmiCode: boolean isRegister()>
<android.net.Uri$StringUri: void <init>(java.lang.String)>
<android.hardware.usb.UsbRequest: java.lang.Object getClientData()>
<android.sax.Children: android.sax.Element getOrCreate(android.sax.Element,java.lang.String,java.lang.String)>
<GenerationGG: android.preference.Preference$OnPreferenceChangeListener get_androidpreferencePreference__OnPreferenceChangeListener()>
<android.content.pm.ResolveInfo: int describeContents()>
<GenerationGG: android.net.NetworkInfo get_androidnetNetworkInfo()>
<android.nfc.TransceiveResult$1: void <init>()>
<android.widget.ResourceCursorAdapter: void setViewResource(int)>
<com.android.server.PowerManagerService$11: void <init>(com.android.server.PowerManagerService,java.lang.String)>
<android.view.GestureDetector: boolean access$400(android.view.GestureDetector)>
<android.speech.SpeechRecognizer$InternalListener: void onRmsChanged(float)>
<java.lang.Object: boolean moveToFirst()>
<android.app.NativeActivity: void onSurfaceChangedNative(int,android.view.Surface,int,int,int)>
<android.net.wifi.WifiInfo: android.net.wifi.SupplicantState access$302(android.net.wifi.WifiInfo,android.net.wifi.SupplicantState)>
<android.net.DhcpInfo$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.cdma.RuimCard: void <init>(com.android.internal.telephony.cdma.CDMAPhone,java.lang.String,boolean)>
<android.content.pm.PackageStats: int describeContents()>
<android.app.Activity: android.content.ComponentName getComponentName()>
<android.media.AudioManager$FocusEventHandlerDelegate: void <init>(android.media.AudioManager)>
<android.view.ViewRootImpl: boolean showContextMenuForChild(android.view.View)>
<android.media.AudioManager: int getDevicesForStream(int)>
<android.app.ActivityManager$RunningTaskInfo: int describeContents()>
<android.media.AsyncPlayer$Command: void <init>()>
<android.content.res.AssetFileDescriptor: long getStartOffset()>
<com.android.server.NetworkManagementService: java.util.ArrayList readRouteList(java.lang.String)>
<android.nfc.TechListParcel$1: java.lang.Object[] newArray(int)>
<com.android.internal.telephony.DataConnectionAc: int rspCid(android.os.Message)>
<com.android.internal.widget.LockPatternView$SavedState: int getDisplayMode()>
<android.widget.GridLayout: void validateLayoutParams()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isFocusable()>
<android.os.FileUtils$FileStatus: void <init>()>
<android.opengl.Matrix: void perspectiveM(float[],int,float,float,float,float)>
<android.view.HardwareRenderer: void <init>()>
<android.view.accessibility.AccessibilityNodeInfo: void setConnection(android.accessibilityservice.IAccessibilityServiceConnection)>
<com.android.internal.os.SamplingProfilerIntegration$2: void <init>(java.lang.String,android.content.pm.PackageInfo)>
<com.android.server.TextServicesManagerService: java.util.HashMap access$1100(com.android.server.TextServicesManagerService)>
<android.net.http.SslCertificate: java.util.Date cloneDate(java.util.Date)>
<android.net.wifi.p2p.WifiP2pGroup: void setOwner(android.net.wifi.p2p.WifiP2pDevice)>
<android.widget.GridLayout$Axis: boolean isOrderPreserved()>
<com.android.server.am.ActivityManagerService: void dumpMemItems(java.io.PrintWriter,java.lang.String,java.util.ArrayList,boolean)>
<android.util.LogWriter: void write(char[],int,int)>
<android.widget.RemoteViews: void setBundle(int,java.lang.String,android.os.Bundle)>
<android.animation.PropertyValuesHolder: void setObjectValues(java.lang.Object[])>
<GenerationGG: java.lang.Integer get_javalangInteger()>
<android.view.animation.Animation: void <clinit>()>
<android.net.wifi.WifiStateMachine$DriverUnloadedState: void <init>(android.net.wifi.WifiStateMachine)>
<android.util.Base64$Encoder: void <clinit>()>
<android.text.method.TextKeyListener$NullKeyListener: android.text.method.TextKeyListener$NullKeyListener getInstance()>
<android.webkit.WebView: void calcOurVisibleRect(android.graphics.Rect)>
<android.util.JsonReader: void replaceTop(android.util.JsonScope)>
<com.android.server.am.ActivityManagerService: void unregisterActivityWatcher(android.app.IActivityWatcher)>
<android.os.Build: void <init>()>
<android.view.accessibility.AccessibilityManager$MyHandler: void <init>(android.view.accessibility.AccessibilityManager,android.os.Looper)>
<com.android.internal.telephony.cdma.SmsMessage: int getNextMessageId()>
<Wrapper_android_text_Annotation: void test_android_text_Annotation()>
<android.preference.PreferenceManager: void unregisterOnActivityDestroyListener(android.preference.PreferenceManager$OnActivityDestroyListener)>
<android.location.Location: java.lang.String convert(double,int)>
<android.animation.AnimatorListenerAdapter: void onAnimationStart(android.animation.Animator)>
<android.widget.AbsListView$RecycleBin: void setCacheColorHint(int)>
<android.net.wifi.WifiWatchdogStateMachine: void access$1600(android.net.wifi.WifiWatchdogStateMachine,com.android.internal.util.IState)>
<android.preference.PreferenceScreen$SavedState: void <init>(android.os.Parcelable)>
<java.lang.Object: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.android.internal.textservice.ITextServicesSessionListener$Stub: void <init>()>
<android.content.pm.PackageParser: java.lang.String buildTaskAffinityName(java.lang.String,java.lang.String,java.lang.CharSequence,java.lang.String[])>
<com.android.internal.view.menu.MenuBuilder: void <clinit>()>
<android.widget.AdapterView: int getFirstVisiblePosition()>
<com.android.internal.util.StateMachine: void sendMessageDelayed(int,long)>
<Wrapper_android_media_AudioRecord: void test_android_media_AudioRecord()>
<android.telephony.gsm.SmsMessage: java.lang.String getMessageBody()>
<android.hardware.SensorManager: android.hardware.Sensor getDefaultSensor(int)>
<Wrapper_android_view_InflateException: void test_android_view_InflateException()>
<android.bluetooth.BluetoothDeviceProfileState: void access$8100(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.IState)>
<android.os.SystemProperties: java.lang.String get(java.lang.String,java.lang.String)>
<GenerationGG: android.graphics.drawable.shapes.OvalShape get_androidgraphicsdrawableshapesOvalShape()>
<android.media.IRemoteControlClient$Stub$Proxy: android.os.IBinder asBinder()>
<android.widget.SearchView: android.widget.ImageView access$500(android.widget.SearchView)>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getUrlLegal()>
<android.content.CursorLoader: void <init>(android.content.Context,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.internal.telephony.RIL: void riljLog(java.lang.String)>
<android.view.animation.AnimationSet: void setFillBefore(boolean)>
<com.android.server.connectivity.Tethering: java.lang.String[] getTetheredIfaces()>
<android.media.JetPlayer: boolean triggerClip(int)>
<com.android.internal.widget.LockPatternView$SavedState: boolean isTactileFeedbackEnabled()>
<android.widget.HeaderViewListAdapter: boolean hasStableIds()>
<com.android.server.WifiService: int access$408(com.android.server.WifiService)>
<android.net.wifi.WifiWatchdogStateMachine: boolean access$4500()>
<android.bluetooth.BluetoothDeviceProfileState: android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp access$2700(android.bluetooth.BluetoothDeviceProfileState)>
<android.content.pm.ResolveInfo$1: android.content.pm.ResolveInfo[] newArray(int)>
<android.inputmethodservice.KeyboardView$2: void <init>(android.inputmethodservice.KeyboardView)>
<android.app.ApplicationErrorReport$RunningServiceInfo: void <init>(android.os.Parcel)>
<android.webkit.WebViewCore: void access$5500(android.webkit.WebViewCore,int)>
<android.content.res.CompatibilityInfo: void <clinit>()>
<android.bluetooth.BluetoothInputStream: void <init>(android.bluetooth.BluetoothSocket)>
<android.bluetooth.BluetoothDeviceProfileState: void access$3400(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.IState)>
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: void plug(long,long)>
<com.android.internal.view.BaseSurfaceHolder: android.view.Surface getSurface()>
<android.inputmethodservice.InputMethodService: void <init>()>
<android.util.AndroidException: void <init>(java.lang.String,java.lang.Throwable)>
<Wrapper_android_widget_Filter: void test_android_widget_Filter()>
<android.hardware.usb.UsbDeviceConnection: boolean native_claim_interface(int,boolean)>
<android.app.Instrumentation: android.app.Instrumentation$ActivityMonitor addMonitor(android.content.IntentFilter,android.app.Instrumentation$ActivityResult,boolean)>
<android.text.StaticLayout: int getLineStart(int)>
<com.android.internal.util.StateMachine$SmHandler: void <clinit>()>
<android.view.ViewGroup: void startLayoutAnimation()>
<android.graphics.ComposeShader: void <init>(android.graphics.Shader,android.graphics.Shader,android.graphics.PorterDuff$Mode)>
<android.accounts.AccountManagerService$MessageHandler: void <init>(android.accounts.AccountManagerService,android.os.Looper)>
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: android.animation.PropertyValuesHolder clone()>
<android.telephony.TelephonyManager: void <clinit>()>
<android.app.Instrumentation: boolean invokeMenuActionSync(android.app.Activity,int,int)>
<android.os.ConditionVariable: boolean block(long)>
<GenerationGG: android.media.audiofx.Virtualizer$OnParameterChangeListener get_androidmediaaudiofxVirtualizer__OnParameterChangeListener()>
<android.widget.TextView$ActionPopupWindow: int getTextOffset()>
<android.bluetooth.BluetoothDeviceProfileState: android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree access$2400(android.bluetooth.BluetoothDeviceProfileState)>
<com.android.server.UiModeManagerService$1: void <init>(com.android.server.UiModeManagerService)>
<com.android.internal.telephony.PhoneSubInfoProxy: void setmPhoneSubInfo(com.android.internal.telephony.PhoneSubInfo)>
<android.app.Activity: android.view.View findViewById(int)>
<android.test.mock.MockCursor: void close()>
<android.content.IIntentSender$Stub$Proxy: android.os.IBinder asBinder()>
<android.speech.tts.TextToSpeech: int addEarcon(java.lang.String,java.lang.String)>
<android.test.mock.MockContext: boolean stopService(android.content.Intent)>
<android.media.JetPlayer: boolean native_queueJetSegment(int,int,int,int,int,byte)>
<android.widget.CalendarView$WeekView: java.util.Calendar getFirstDay()>
<android.app.ApplicationPackageManager: void configurationChanged()>
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String access$100(byte[])>
<android.content.res.StringBlock$Height: void <clinit>()>
<android.os.IPowerManager$Stub: void <init>()>
<GenerationGG: android.view.OrientationListener get_androidviewOrientationListener()>
<android.graphics.drawable.shapes.RoundRectShape: void draw(android.graphics.Canvas,android.graphics.Paint)>
<android.server.BluetoothHealthProfileHandler: java.util.ArrayList access$700(android.server.BluetoothHealthProfileHandler)>
<android.content.pm.UserInfo$1: android.content.pm.UserInfo createFromParcel(android.os.Parcel)>
<com.android.internal.util.AsyncChannel$SyncMessenger: void <clinit>()>
<android.webkit.WebView: android.content.Context access$6700(android.webkit.WebView)>
<android.gesture.GestureOverlayView: void addOnGesturingListener(android.gesture.GestureOverlayView$OnGesturingListener)>
<android.content.pm.ConfigurationInfo$1: android.content.pm.ConfigurationInfo createFromParcel(android.os.Parcel)>
<com.android.internal.os.BatteryStatsImpl$Counter: void writeToParcel(android.os.Parcel)>
<android.view.animation.AlphaAnimation: boolean willChangeTransformationMatrix()>
<com.android.server.wm.WindowManagerService: boolean tmpRemoveAppWindowsLocked(com.android.server.wm.WindowToken)>
<android.webkit.PluginFullScreenHolder$1: void <init>(android.webkit.PluginFullScreenHolder)>
<android.net.http.RequestQueue$ActivePool: void disablePersistence()>
<android.widget.AbsListView$MultiChoiceModeWrapper: boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeByteArray(byte[],int,int,android.graphics.BitmapFactory$Options)>
<GenerationGG: android.webkit.CookieManager get_androidwebkitCookieManager()>
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: void unplug(long,long)>
<android.content.res.AssetManager: boolean applyStyle(int,int,int,int,int[],int[],int[])>
<android.util.Base64$Decoder: int maxOutputSize(int)>
<android.webkit.WebBackForwardList: android.webkit.WebHistoryItem getItemAtIndex(int)>
<android.view.VelocityTracker: void computeCurrentVelocity(int)>
<android.speech.SpeechRecognizer$InternalListener: void onResults(android.os.Bundle)>
<com.android.server.location.PassiveProvider: boolean requestSingleShotFix()>
<android.view.ScaleGestureDetector$SimpleOnScaleGestureListener: boolean onScale(android.view.ScaleGestureDetector)>
<android.widget.CursorAdapter$MyDataSetObserver: void <init>(android.widget.CursorAdapter,android.widget.CursorAdapter$1)>
<android.widget.GridLayout$Axis: void setOrderPreserved(boolean)>
<Wrapper_android_opengl_GLU: void test_android_opengl_GLU()>
<android.provider.ContactsContract$Contacts: android.net.Uri getLookupUri(long,java.lang.String)>
<android.content.ClipDescription: java.lang.String getMimeType(int)>
<android.view.ViewRootImpl: void setLocalDragState(java.lang.Object)>
<com.android.server.am.BroadcastFilter: void dumpBroadcastFilterState(java.io.PrintWriter,java.lang.String)>
<android.net.LocalSocketImpl: java.lang.String toString()>
<com.android.internal.telephony.BaseCommands: void unregisterForDataNetworkStateChanged(android.os.Handler)>
<android.webkit.WebView: float nativeFocusCandidateTextSize()>
<android.view.KeyCharacterMap: android.view.KeyEvent[] nativeGetEvents(int,int,char[])>
<android.location.ICountryListener$Stub$Proxy: android.os.IBinder asBinder()>
<android.database.CursorJoiner$Result: void <clinit>()>
<android.telephony.PhoneNumberUtils: int toaFromString(java.lang.String)>
<java.lang.Object: boolean moveToNext()>
<com.android.internal.telephony.RIL: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>
<com.android.server.am.ActivityManagerService$ItemMatcher: void <init>()>
<GenerationGG: android.view.MotionEvent$PointerCoords[] get_androidviewMotionEvent__PointerCoords_ARRAY_()>
<com.android.internal.telephony.gsm.GsmConnection: int getGSMIndex()>
<android.widget.ListPopupWindow: android.widget.ListPopupWindow$DropDownListView access$600(android.widget.ListPopupWindow)>
<android.widget.RemoteViews$Action: void updateMemoryUsageEstimate(android.widget.RemoteViews$MemoryUsageCounter)>
<android.view.animation.Transformation: void setTransformationType(int)>
<android.os.Debug: int getGlobalClassInitCount()>
<android.net.EthernetDataTracker: boolean access$102(boolean)>
<android.widget.ProgressBar: android.os.Parcelable onSaveInstanceState()>
<GenerationGG: android.app.Application get_androidappApplication()>
<GenerationGG: android.net.http.SslError get_androidnethttpSslError()>
<android.emoji.EmojiFactory: android.graphics.Bitmap nativeGetBitmapFromAndroidPua(int,int)>
<com.android.internal.util.BitwiseInputStream: int read(int)>
<android.os.storage.StorageVolume: int describeContents()>
<android.text.Layout: int getLineBottom(int)>
<android.mtp.MtpDevice: void close()>
<android.view.GLES20Canvas: int nSaveLayerAlpha(int,float,float,float,float,int,int)>
<android.os.Debug: void changeDebugPort(int)>
<android.app.FragmentManagerImpl: android.app.Fragment findFragmentByWho(java.lang.String)>
<com.android.internal.telephony.sip.SipPhoneBase: android.telephony.CellLocation getCellLocation()>
<android.content.ClipDescription: int getMimeTypeCount()>
<com.android.internal.telephony.cdma.RuimFileHandler: void <init>(com.android.internal.telephony.cdma.CDMAPhone)>
<android.renderscript.Allocation: void copyTo(byte[])>
<android.text.style.TypefaceSpan: void updateMeasureState(android.text.TextPaint)>
<com.android.internal.app.AlertController: android.widget.Button access$200(com.android.internal.app.AlertController)>
<android.graphics.drawable.Drawable: void setCallback(android.graphics.drawable.Drawable$Callback)>
<com.android.server.AlarmManagerService: void setInexactRepeating(int,long,long,android.app.PendingIntent)>
<android.graphics.drawable.AnimationDrawable$AnimationState: boolean access$100(android.graphics.drawable.AnimationDrawable$AnimationState)>
<android.renderscript.Matrix2f: void <init>(float[])>
<android.widget.GridLayout$Interval: int hashCode()>
<android.graphics.Picture: android.graphics.Canvas beginRecording(int,int)>
<android.graphics.BitmapRegionDecoder: boolean isRecycled()>
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setVisible(boolean)>
<android.renderscript.RenderScript: void rsnAllocationSyncAll(int,int,int)>
<com.android.internal.telephony.Call: void <init>()>
<com.android.internal.util.FastXmlSerializer: org.xmlpull.v1.XmlSerializer startTag(java.lang.String,java.lang.String)>
<android.renderscript.FieldPacker: void addF32(android.renderscript.Float2)>
<android.content.pm.ParceledListSlice$1: android.content.pm.ParceledListSlice createFromParcel(android.os.Parcel)>
<com.android.server.am.ActivityManagerService$12: void <init>()>
<android.gesture.Gesture: void addStroke(android.gesture.GestureStroke)>
<android.webkit.WebViewCore: void access$1300(android.webkit.WebViewCore)>
<android.view.View: int getNextFocusDownId()>
<android.app.WallpaperManager: android.graphics.Bitmap generateBitmap(android.graphics.Bitmap,int,int)>
<android.bluetooth.BluetoothProfileState$PendingCommandState: void <init>(android.bluetooth.BluetoothProfileState)>
<GenerationGG: android.database.sqlite.SQLiteFullException get_androiddatabasesqliteSQLiteFullException()>
<android.server.BluetoothHealthProfileHandler: java.util.List getConnectedHealthDevices()>
<android.util.SparseIntArray: int get(int)>
<android.bluetooth.BluetoothDeviceProfileState: void access$9500(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.IState)>
<android.view.accessibility.AccessibilityNodeInfo: void enforceSealed()>
<android.text.DynamicLayout: android.text.Layout$Directions getLineDirections(int)>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getUrlAndSpaceLegal()>
<android.content.res.XmlBlock: int access$300(int)>
<android.widget.TableRow$ChildrenTracker: void <init>(android.widget.TableRow,android.widget.TableRow$1)>
<com.android.server.am.ActivityManagerService: void monitor()>
<android.webkit.WebStorage: void createHandler()>
<android.view.GLES20TextureLayer: boolean isValid()>
<android.database.sqlite.SQLiteDatabase: void releaseCustomFunctions()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$5300(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,com.android.internal.util.IState)>
<android.renderscript.FieldPacker: void addI32(int)>
<android.content.pm.LabeledIntent: void <clinit>()>
<android.widget.AbsSpinner$RecycleBin: void <init>(android.widget.AbsSpinner)>
<com.android.internal.os.BatteryStatsImpl$Uid: boolean hasUserActivity()>
<android.widget.LinearLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.webkit.WebView: float access$2902(android.webkit.WebView,float)>
<GenerationGG: android.bluetooth.BluetoothProfile$ServiceListener get_androidbluetoothBluetoothProfile__ServiceListener()>
<android.content.SyncInfo$1: void <init>()>
<android.util.XmlPullAttributes: int getAttributeResourceValue(java.lang.String,java.lang.String,int)>
<android.net.wifi.p2p.IWifiP2pManager$Stub: void <init>()>
<GenerationGG: android.telephony.PhoneNumberUtils get_androidtelephonyPhoneNumberUtils()>
<android.widget.AbsSpinner: void onRestoreInstanceState(android.os.Parcelable)>
<android.app.Instrumentation: void checkStartActivityResult(int,java.lang.Object)>
<com.android.server.pm.PackageManagerService: java.util.List getPersistentApplications(int)>
<com.android.server.ThrottleService: int access$402(com.android.server.ThrottleService,int)>
<android.view.inputmethod.InputMethodManager$1: void onBindMethod(com.android.internal.view.InputBindResult)>
<android.content.ClipData$Item: android.net.Uri getUri()>
<android.hardware.usb.UsbAccessory$1: android.hardware.usb.UsbAccessory[] newArray(int)>
<android.content.IntentFilter: void <init>()>
<android.util.MonthDisplayHelper: void <init>(int,int,int)>
<android.media.effect.EffectFactory: android.media.effect.Effect createEffect(java.lang.String)>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv newServiceStatsLocked()>
<android.webkit.HTML5VideoInline: void setFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener)>
<com.android.internal.telephony.gsm.GsmCall: void attach(com.android.internal.telephony.Connection,com.android.internal.telephony.DriverCall)>
<android.hardware.usb.UsbInterface: int describeContents()>
<Wrapper_android_test_ServiceTestCase: void test_android_test_ServiceTestCase()>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: void <init>(android.os.IBinder)>
<GenerationGG: android.os.StatFs get_androidosStatFs()>
<android.content.res.CompatibilityInfo$2: void <init>()>
<android.webkit.HTML5VideoView: boolean getPlayerBuffering()>
<android.view.MotionEvent: float getToolMinor(int)>
<android.view.InputEventConsistencyVerifier: void ensureMetaStateIsNormalized(int)>
<android.preference.PreferenceGroupAdapter$PreferenceLayout: int access$302(android.preference.PreferenceGroupAdapter$PreferenceLayout,int)>
<android.server.BluetoothAdapterStateMachine: void access$3400(android.server.BluetoothAdapterStateMachine,com.android.internal.util.IState)>
<android.widget.AbsListView: android.view.inputmethod.InputConnection access$3400(android.widget.AbsListView)>
<android.webkit.WebView: java.lang.String nativeFocusCandidateName()>
<android.view.View: boolean isFocusableInTouchMode()>
<android.telephony.ServiceState: int getSystemId()>
<android.widget.PopupWindow: void setContentView(android.view.View)>
<android.app.BackStackRecord: android.app.FragmentTransaction setBreadCrumbShortTitle(java.lang.CharSequence)>
<android.widget.SearchView: void setOnQueryTextListener(android.widget.SearchView$OnQueryTextListener)>
<android.widget.GridLayout$Axis: int[] getTrailingMargins()>
<android.net.LocalSocket: void setReceiveBufferSize(int)>
<android.media.effect.EffectContext: android.media.effect.EffectContext createWithCurrentGlContext()>
<android.app.NativeActivity: void onContentRectChangedNative(int,int,int,int,int)>
<android.widget.SeekBar: void setOnSeekBarChangeListener(android.widget.SeekBar$OnSeekBarChangeListener)>
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getFormat()>
<android.widget.GridLayout$Spec: android.widget.GridLayout$Spec copyWriteSpan(android.widget.GridLayout$Interval)>
<android.view.KeyEvent$DispatcherState: boolean isTracking(android.view.KeyEvent)>
<com.android.internal.telephony.cat.DTTZResponseData: byte byteToBCD(int)>
<android.database.sqlite.SQLiteQueryBuilder: void <init>()>
<android.text.style.StrikethroughSpan: int describeContents()>
<android.text.method.MetaKeyKeyListener: int getMetaState(long,int)>
<android.view.ScaleGestureDetector: float getScaleFactor()>
<android.content.Loader: void registerListener(int,android.content.Loader$OnLoadCompleteListener)>
<com.android.server.PowerManagerService: float access$6200(com.android.server.PowerManagerService)>
<GenerationGG: android.view.inputmethod.CompletionInfo[] get_androidviewinputmethodCompletionInfo_ARRAY_()>
<android.app.IWallpaperManagerCallback$Stub: android.app.IWallpaperManagerCallback asInterface(android.os.IBinder)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.media.audiofx.Visualizer: int native_getCaptureSize()>
<android.view.Window: android.content.Context access$000(android.view.Window)>
<android.widget.Scroller: float getCurrVelocity()>
<android.net.sip.SipProfile$Builder: void <init>(android.net.sip.SipProfile)>
<android.text.TextDirectionHeuristics$1: void <clinit>()>
<android.text.ClipboardManager: void <init>()>
<android.os.Message: void markInUse()>
<android.widget.ViewAnimator: void setAnimateFirstView(boolean)>
<android.server.BluetoothBondState: void readAutoPairingData()>
<com.android.internal.telephony.DataConnection$DcDisconnectingState: void <init>(com.android.internal.telephony.DataConnection)>
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getDeviceSvn()>
<android.graphics.PointF: void negate()>
<com.android.server.PowerManagerService: boolean access$5702(com.android.server.PowerManagerService,boolean)>
<android.view.animation.Animation: long getStartTime()>
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: java.lang.CharSequence getSubtitle()>
<android.bluetooth.BluetoothDeviceProfileState: void access$7700(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<com.android.server.RandomBlock: void toDataOut(java.io.DataOutput)>
<android.graphics.Bitmap: android.graphics.Bitmap nativeCopy(int,int,boolean)>
<com.android.server.net.NetworkPolicyManagerService: void collectKeys(android.util.SparseBooleanArray,android.util.SparseBooleanArray)>
<DumbClass: void DumbMethod69()>
<com.android.server.pm.PackageManagerService$MoveParams: void handleServiceError()>
<android.media.audiofx.PresetReverb: android.media.audiofx.PresetReverb$Settings getProperties()>
<android.graphics.Rect: boolean contains(android.graphics.Rect)>
<com.android.internal.os.BatteryStatsImpl$2: void <init>()>
<android.bluetooth.BluetoothDeviceProfileState: android.bluetooth.BluetoothDeviceProfileState$OutgoingHid access$3100(android.bluetooth.BluetoothDeviceProfileState)>
<android.text.style.DynamicDrawableSpan: void <init>(int)>
<GenerationGG: android.security.KeyChainAliasCallback get_androidsecurityKeyChainAliasCallback()>
<com.android.internal.telephony.sip.SipConnectionBase: java.lang.String getRemainingPostDialString()>
<android.server.BluetoothAdapterStateMachine: void access$1700(android.server.BluetoothAdapterStateMachine,android.os.Message)>
<android.widget.GridLayout$Bounds: void reset()>
<android.bluetooth.IBluetoothCallback$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.internal.widget.ScrollingTabContainerView$TabAdapter: int getCount()>
<android.test.mock.MockContext: java.lang.ClassLoader getClassLoader()>
<com.android.server.pm.Installer: int linkNativeLibraryDirectory(java.lang.String,java.lang.String)>
<com.android.internal.telephony.cat.RilMessage: void <init>(int,java.lang.String)>
<android.widget.PopupWindow: android.view.View access$100(android.widget.PopupWindow)>
<android.graphics.drawable.ColorDrawable: int getOpacity()>
<android.view.accessibility.AccessibilityRecord: int getScrollX()>
<android.view.IWindow$Stub: void <init>()>
<android.view.inputmethod.CorrectionInfo: void <clinit>()>
<android.view.HardwareRenderer$GlRenderer: javax.microedition.khronos.egl.EGLContext createContext(javax.microedition.khronos.egl.EGL10,javax.microedition.khronos.egl.EGLDisplay,javax.microedition.khronos.egl.EGLConfig)>
<android.content.ContextWrapper: android.content.pm.ApplicationInfo getApplicationInfo()>
<android.content.res.CompatibilityInfo$2: android.content.res.CompatibilityInfo createFromParcel(android.os.Parcel)>
<android.view.KeyEvent: int normalizeMetaState(int)>
<android.content.res.XmlBlock: int access$008(android.content.res.XmlBlock)>
<android.preference.PreferenceGroupAdapter: boolean areAllItemsEnabled()>
<com.android.internal.telephony.IntRangeManager$ClientRange: void <init>(com.android.internal.telephony.IntRangeManager,int,int,java.lang.String)>
<android.view.Surface$1: android.view.Surface createFromParcel(android.os.Parcel)>
<com.android.server.am.ActivityManagerService: void moveTaskBackwardsLocked(int)>
<android.text.Layout: int getLineEnd(int)>
<android.webkit.OverScrollGlow: boolean isAnimating()>
<android.media.AudioTrack: int getSampleRate()>
<android.server.BluetoothService: void updateProfileConnectionState(int,int,int)>
<android.webkit.WebView: boolean sendViewSizeZoom(boolean)>
<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.rtp.AudioGroup getAudioGroup()>
<com.android.server.wm.WindowManagerService$H: void <init>(com.android.server.wm.WindowManagerService)>
<android.opengl.GLES11Ext: void <clinit>()>
<android.os.TokenWatcher$Death: void <init>(android.os.TokenWatcher,android.os.IBinder,java.lang.String)>
<android.text.PackedIntVector: void insertAt(int,int[])>
<android.app.Dialog: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>
<android.inputmethodservice.InputMethodService: boolean isInputViewShown()>
<android.webkit.WebSettings: void setTextZoom(int)>
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.Call getCall()>
<Wrapper_android_media_JetPlayer: void test_android_media_JetPlayer()>
<com.android.internal.app.AlertController: void setView(android.view.View)>
<android.media.audiofx.Visualizer$NativeEventHandler: void handleMessage(android.os.Message)>
<com.android.server.am.ActivityManagerService$PermissionController: void <init>(com.android.server.am.ActivityManagerService)>
<android.speech.RecognitionService$Callback: android.speech.IRecognitionListener access$500(android.speech.RecognitionService$Callback)>
<GenerationGG: android.view.View$OnKeyListener get_androidviewView__OnKeyListener()>
<android.webkit.CookieManager: boolean allowFileSchemeCookies()>
<android.gesture.GestureOverlayView: void touchUp(android.view.MotionEvent,boolean)>
<android.util.Slog: int e(java.lang.String,java.lang.String)>
<com.android.internal.os.BatteryStatsImpl: void noteStopWakeLocked(int,int,java.lang.String,int)>
<com.android.internal.database.SortCursor: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.view.animation.AnimationSet: void initialize(int,int,int,int)>
<android.content.ContentResolver$ParcelFileDescriptorInner: void <init>(android.content.ContentResolver,android.os.ParcelFileDescriptor,android.content.IContentProvider)>
<android.widget.ListPopupWindow: int getPromptPosition()>
<GenerationGG: android.app.KeyguardManager get_androidappKeyguardManager()>
<android.webkit.FileLoader: void buildHeaders(android.net.http.Headers)>
<com.android.server.BackupManagerService: boolean signaturesMatch(android.content.pm.Signature[],android.content.pm.PackageInfo)>
<android.os.IMessenger$Stub$Proxy: void <init>(android.os.IBinder)>
<android.webkit.WebResourceResponse: java.lang.String getMimeType()>
<android.widget.SearchView: boolean isLandscapeMode(android.content.Context)>
<android.graphics.AvoidXfermode: int nativeCreate(int,int,int)>
<android.net.wifi.WifiInfo: boolean access$202(android.net.wifi.WifiInfo,boolean)>
<android.telephony.NeighboringCellInfo: void <init>(android.os.Parcel)>
<android.app.DialogFragment: int getTheme()>
<android.os.FileObserver: void stopWatching()>
<android.view.InputEvent: void <clinit>()>
<android.view.InflateException: void <init>(java.lang.Throwable)>
<android.test.ClassPathPackageInfoSource$1: void <init>(android.test.ClassPathPackageInfoSource)>
<android.graphics.Rect: void set(android.graphics.Rect)>
<android.test.AndroidTestRunner: junit.framework.TestCase buildSingleTestMethod(java.lang.Class,java.lang.String)>
<android.net.http.Connection: org.apache.http.protocol.HttpContext getHttpContext()>
<com.android.server.location.GpsLocationProvider: boolean native_supports_xtra()>
<android.graphics.drawable.DrawableContainer: void setExitFadeDuration(int)>
<android.app.Service: void onTaskRemoved(android.content.Intent)>
<com.android.internal.os.BatteryStatsImpl$StopwatchTimer: void refreshTimersLocked(com.android.internal.os.BatteryStatsImpl,java.util.ArrayList)>
<android.net.sip.SimpleSessionDescription$Media: int[] getRtpPayloadTypes()>
<android.text.style.SuggestionRangeSpan: int getSpanTypeId()>
<android.util.TimeUtils: void formatDuration(long,long,java.io.PrintWriter)>
<com.android.server.BackupManagerService$PerformRestoreTask: void executeNextState(com.android.server.BackupManagerService$RestoreState)>
<android.graphics.NinePatch: void draw(android.graphics.Canvas,android.graphics.RectF)>
<java.lang.Object: boolean performShortcut(int,android.view.KeyEvent,int)>
<android.content.SyncManager: android.content.SyncStorageEngine access$600(android.content.SyncManager)>
<android.os.Parcel: void setDataSize(int)>
<android.os.WorkSource$1: android.os.WorkSource[] newArray(int)>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: void readFromParcelLocked(android.os.Parcel)>
<android.widget.ImageView: void initImageView()>
<android.net.wifi.WifiConfiguration$Protocol: void <clinit>()>
<Wrapper_android_webkit_JsResult: void test_android_webkit_JsResult()>
<com.android.internal.app.ActionBarImpl: android.animation.Animator access$402(com.android.internal.app.ActionBarImpl,android.animation.Animator)>
<Wrapper_android_util_SparseBooleanArray: void test_android_util_SparseBooleanArray()>
<android.media.audiofx.Visualizer$NativeEventHandler: void <init>(android.media.audiofx.Visualizer,android.media.audiofx.Visualizer,android.os.Looper)>
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.TextMessage geTextMessage()>
<android.graphics.Region$1: android.graphics.Region createFromParcel(android.os.Parcel)>
<android.provider.ContactsContract$Data: void <clinit>()>
<android.content.pm.UserInfo: void <init>(android.os.Parcel,android.content.pm.UserInfo$1)>
<android.webkit.WebView: void stopTouch()>
<android.text.method.DateTimeKeyListener: android.text.method.DateTimeKeyListener getInstance()>
<android.location.Criteria: void <clinit>()>
<android.hardware.Camera: android.hardware.Camera$ShutterCallback access$000(android.hardware.Camera)>
<android.text.StaticLayout: int getLineTop(int)>
<android.animation.Keyframe: void <init>()>
<android.content.pm.PackageParser: boolean collectCertificates(android.content.pm.PackageParser$Package,int)>
<android.view.animation.Animation: void setFillBefore(boolean)>
<com.android.server.pm.PackageManagerService: android.content.pm.ProviderInfo resolveContentProvider(java.lang.String,int)>
<com.android.server.BackupManagerService: byte[] randomBytes(int)>
<com.android.server.am.TransferPipe: void go(java.io.FileDescriptor,long)>
<com.android.internal.telephony.gsm.SpnOverride: void loadSpnOverrides()>
<android.app.ActivityThread$ApplicationThread: void scheduleServiceArgs(android.os.IBinder,boolean,int,int,android.content.Intent)>
<GenerationGG: android.accounts.AccountManagerCallback get_androidaccountsAccountManagerCallback()>
<android.view.Display: int getRawHeightNative()>
<com.android.server.AlarmManagerService$ClockReceiver: void scheduleTimeTickEvent()>
<com.android.server.StatusBarManagerService$DisableRecord: void <init>(com.android.server.StatusBarManagerService,com.android.server.StatusBarManagerService$1)>
<android.widget.NumberPicker: void incrementSelectorIndices(int[])>
<android.widget.CursorAdapter: android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence)>
<android.widget.ProgressBar: void postInvalidate()>
<android.text.style.TabStopSpan$Standard: int getTabStop()>
<GenerationGG: android.renderscript.Type get_androidrenderscriptType()>
<android.webkit.ViewManager: void postReadyToDrawAll()>
<com.android.internal.telephony.sip.SipPhone$SipCall: boolean getMute()>
<Wrapper_android_database_sqlite_SQLiteDiskIOException: void test_android_database_sqlite_SQLiteDiskIOException()>
<android.text.style.URLSpan: void <init>(android.os.Parcel)>
<com.android.server.accessibility.TouchExplorer$PointerTracker: int findPrimaryActivePointer()>
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getAddress()>
<android.net.Uri$HierarchicalUri: void writeToParcel(android.os.Parcel,int)>
<android.view.animation.CycleInterpolator: float getInterpolation(float)>
<android.hardware.usb.UsbInterface: int getInterfaceProtocol()>
<android.content.pm.PackageInfo$1: java.lang.Object[] newArray(int)>
<android.app.LoadedApk$ServiceDispatcher$RunConnection: void <init>(android.app.LoadedApk$ServiceDispatcher,android.content.ComponentName,android.os.IBinder,int)>
<android.content.SyncManager$ActiveSyncContext: java.lang.String toString()>
<android.webkit.WebViewCore: void nativePluginSurfaceReady()>
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: void readExternal(java.io.ObjectInput)>
<android.view.accessibility.AccessibilityNodeInfo: void setPackageName(java.lang.CharSequence)>
<android.widget.ScrollBarDrawable: void setHorizontalThumbDrawable(android.graphics.drawable.Drawable)>
<android.graphics.CornerPathEffect: int nativeCreate(float)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofFloat(java.lang.Object,java.lang.String,float[])>
<android.content.pm.PackageStats$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.server.pm.PackageManagerService: int[] removeInts(int[],int[])>
<android.graphics.Canvas: void restore()>
<android.net.wifi.WifiStateMachine: long access$5900(android.net.wifi.WifiStateMachine)>
<android.text.style.StrikethroughSpan: void writeToParcel(android.os.Parcel,int)>
<android.filterfw.core.OutputPort: java.lang.String toString()>
<Wrapper_android_os_storage_OnObbStateChangeListener: void test_android_os_storage_OnObbStateChangeListener()>
<android.graphics.Matrix: boolean isIdentity()>
<android.app.backup.BackupDataOutput: int writeEntityHeader_native(int,java.lang.String,int)>
<android.renderscript.FieldPacker: void addI16(short)>
<com.android.internal.telephony.cat.TextMessage: void <init>()>
<android.graphics.drawable.BitmapDrawable$BitmapState: void <init>(android.graphics.Bitmap)>
<android.widget.FrameLayout: boolean verifyDrawable(android.graphics.drawable.Drawable)>
<android.view.animation.GridLayoutAnimationController: boolean willOverlap()>
<android.media.AudioService: void access$6100(android.media.AudioService,java.lang.String)>
<android.location.GeocoderParams: void <init>()>
<android.app.FragmentManagerImpl$1: void <init>(android.app.FragmentManagerImpl)>
<android.widget.FrameLayout: int getPaddingRightWithForeground()>
<com.android.internal.util.AsyncChannel$AsyncChannelConnection: void onServiceDisconnected(android.content.ComponentName)>
<android.text.style.BackgroundColorSpan: int getSpanTypeId()>
<GenerationGG: android.view.View$OnDragListener get_androidviewView__OnDragListener()>
<com.android.internal.os.BatteryStatsImpl: void reportExcessiveWakeLocked(int,java.lang.String,long,long)>
<android.inputmethodservice.InputMethodService: android.view.LayoutInflater getLayoutInflater()>
<android.media.AudioService$AudioHandler: void setSystemVolume(android.media.AudioService$VolumeStreamState)>
<android.media.RemoteControlClient$EventHandler: void <init>(android.media.RemoteControlClient,android.media.RemoteControlClient,android.os.Looper)>
<android.graphics.Matrix: void setSkew(float,float,float,float)>
<com.android.server.LocationManagerService$ProximityListener: void <init>(com.android.server.LocationManagerService)>
<android.os.Process: int getUidForName(java.lang.String)>
<android.mtp.MtpDevice: void finalize()>
<android.graphics.Path: void addPath(android.graphics.Path)>
<android.gesture.GestureOverlayView: void removeAllOnGesturingListeners()>
<android.database.sqlite.SQLiteProgram: void native_bind_double(int,double)>
<android.webkit.WebViewCore: boolean nativeUpdateLayers(int)>
<android.speech.tts.FileSynthesisCallback: int audioAvailable(byte[],int,int)>
<android.webkit.WebViewCore: void resumeTimers()>
<com.android.internal.telephony.sip.SipPhoneBase: void stopRingbackTone()>
<com.android.server.location.PassiveProvider: void setMinTime(long,android.os.WorkSource)>
<com.android.internal.os.BatteryStatsImpl$Uid: void noteStopGps()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: long getStartTimeToNowLocked(long)>
<android.app.ActivityManager$RunningAppProcessInfo: void readFromParcel(android.os.Parcel)>
<android.webkit.WebViewCore: android.webkit.WebView access$600(android.webkit.WebViewCore)>
<android.location.GeocoderParams: void <init>(android.content.Context,java.util.Locale)>
<android.accounts.IAccountAuthenticatorResponse$Stub: android.os.IBinder asBinder()>
<android.util.NtpTrustedTime: long getCacheCertainty()>
<android.view.View: void removeLongPressCallback()>
<com.android.internal.telephony.PhoneProxy: void <clinit>()>
<android.renderscript.Element: android.renderscript.Element F32_4(android.renderscript.RenderScript)>
<android.util.StateSet: java.lang.String dump(int[])>
<android.app.Activity: void recreate()>
<android.app.WallpaperManager$FastBitmapDrawable: void <init>(android.graphics.Bitmap,android.app.WallpaperManager$1)>
<com.android.server.location.MockProvider: int getAccuracy()>
<android.app.FragmentManagerImpl: android.app.FragmentManager$BackStackEntry getBackStackEntryAt(int)>
<android.content.pm.PackageStats: void <init>(android.os.Parcel)>
<android.renderscript.Element: android.renderscript.Element I64_2(android.renderscript.RenderScript)>
<android.database.sqlite.DatabaseConnectionPool$PoolObj: void release()>
<com.android.internal.backup.LocalTransport: android.app.backup.RestoreSet[] getAvailableRestoreSets()>
<android.graphics.Shader: void nativeDestructor(int,int)>
<android.gesture.Instance: float[] temporalSampler(int,android.gesture.Gesture)>
<android.view.inputmethod.InputBinding$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.widget.ExpandableListView: int getFlatPositionForConnector(int)>
<GenerationGG: android.app.UiModeManager get_androidappUiModeManager()>
<android.webkit.WebTextView: java.lang.String urlForAutoCompleteData(java.lang.String)>
<android.net.http.AndroidHttpClient: long parseDate(java.lang.String)>
<GenerationGG: android.graphics.Paint$Join get_androidgraphicsPaint__Join()>
<com.android.server.LocationManagerService$ProximityAlert: long getExpiration()>
<android.bluetooth.BluetoothDeviceProfileState: void access$9800(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.nfc.NdefMessage$1: android.nfc.NdefMessage[] newArray(int)>
<android.test.RenamingDelegatingContext: boolean shouldDiskNameBeVisible(java.lang.String)>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActionIntentReconnectAlarm()>
<GenerationGG: android.os.RecoverySystem get_androidosRecoverySystem()>
<android.webkit.WebSettings$EventHandler: void <init>(android.webkit.WebSettings)>
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void <init>(java.lang.String,android.animation.IntKeyframeSet)>
<android.graphics.Rect: boolean intersects(int,int,int,int)>
<android.widget.TextView: boolean isPaddingOffsetRequired()>
<android.app.backup.BackupHelperDispatcher: void performRestore(android.app.backup.BackupDataInput,int,android.os.ParcelFileDescriptor)>
<android.view.inputmethod.InputMethodManager$1: void <init>(android.view.inputmethod.InputMethodManager)>
<android.server.BluetoothEventLoop: void <clinit>()>
<android.webkit.CookieManager: void nativeSetAcceptFileSchemeCookies(boolean)>
<android.hardware.usb.IUsbManager$Stub$Proxy: android.os.IBinder asBinder()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getAllButWhitespaceLegal()>
<android.widget.TextView: boolean access$4800(android.widget.TextView)>
<android.accessibilityservice.AccessibilityService$IEventListenerWrapper: void executeMessage(android.os.Message)>
<android.media.audiofx.AudioEffect: android.media.audiofx.AudioEffect$OnParameterChangeListener access$200(android.media.audiofx.AudioEffect)>
<java.lang.Object: byte[] getBlob(int)>
<com.android.internal.content.PackageMonitor: void onPackageDisappeared(java.lang.String,int)>
<android.widget.TabHost$TabSpec: void <init>(android.widget.TabHost,java.lang.String,android.widget.TabHost$1)>
<android.net.LocalServerSocket: void <init>(java.io.FileDescriptor)>
<android.graphics.drawable.shapes.RectShape: void draw(android.graphics.Canvas,android.graphics.Paint)>
<android.media.audiofx.Visualizer: int native_getWaveForm(byte[])>
<android.mtp.MtpDevice: void native_close()>
<android.net.sip.SipProfile: java.lang.String getDisplayName()>
<android.view.ViewGroup: void dispatchFinishTemporaryDetach()>
<android.test.mock.MockCursor: boolean isLast()>
<GenerationGG: android.text.Editable get_androidtextEditable()>
<com.android.server.InputMethodManagerService$InputMethodFileManager: void deleteAllInputMethodSubtypes(java.lang.String)>
<android.view.GLES20TextureLayer: void setTransform(android.graphics.Matrix)>
<android.media.TimedText$Karaoke: void <init>(android.media.TimedText)>
<android.graphics.Matrix: void setRotate(float,float,float)>
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: void logd(java.lang.String)>
<android.os.Registrant: android.os.Handler getHandler()>
<android.text.method.MultiTapKeyListener: void <init>(android.text.method.TextKeyListener$Capitalize,boolean)>
<android.widget.GridLayout$6: int getSizeInCell(android.view.View,int,int,int)>
<android.text.TextDirectionHeuristics$FirstStrong: android.text.TextDirectionHeuristics$TriState checkRtl(char[],int,int)>
<android.graphics.Matrix: boolean native_equals(int,int)>
<com.android.server.UiModeManagerService$3: void <init>(com.android.server.UiModeManagerService)>
<GenerationGG: android.database.sqlite.SQLiteCursorDriver get_androiddatabasesqliteSQLiteCursorDriver()>
<com.android.internal.widget.ActionBarView: com.android.internal.widget.ActionBarView$HomeView access$600(com.android.internal.widget.ActionBarView)>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>
<android.view.inputmethod.InputMethodSubtype: boolean equals(java.lang.Object)>
<android.os.ServiceManager: void initServiceCache(java.util.Map)>
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void stopNetStatPoll()>
<android.text.SpannableStringInternal: int length()>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>
<com.android.internal.telephony.cat.RilMessageDecoder: com.android.internal.telephony.cat.RilMessage access$500(com.android.internal.telephony.cat.RilMessageDecoder)>
<com.android.server.AlarmManagerService$AlarmHandler: void <init>(com.android.server.AlarmManagerService)>
<android.webkit.WebResourceResponse: java.lang.String access$200(android.webkit.WebResourceResponse)>
<android.content.pm.ParceledListSlice$1: java.lang.Object[] newArray(int)>
<android.test.ClassPathPackageInfoSource: void findClassesInApk(java.lang.String,java.lang.String,java.util.Set,java.util.Set)>
<android.view.ViewRootImpl: void handleDispatchSystemUiVisibilityChanged(android.view.ViewRootImpl$SystemUiVisibilityInfo)>
<com.android.server.wm.InputMonitor: void addInputWindowHandleLw(com.android.server.wm.InputWindowHandle)>
<android.os.Bundle: java.lang.ClassLoader getClassLoader()>
<android.view.SurfaceView$4: void unlockCanvasAndPost(android.graphics.Canvas)>
<android.view.LayoutInflater$BlinkLayout: void access$200(android.view.LayoutInflater$BlinkLayout)>
<com.android.internal.telephony.IccUtils: java.lang.String cdmaBcdToString(byte[],int,int)>
<android.net.wifi.WifiApConfigStore: void setApConfiguration(android.net.wifi.WifiConfiguration)>
<android.speech.tts.TextToSpeech$4: void <init>(android.speech.tts.TextToSpeech,long,int,java.util.HashMap)>
<android.app.WallpaperManager$FastBitmapDrawable: void <init>(android.graphics.Bitmap)>
<Wrapper_android_graphics_drawable_shapes_RectShape: void test_android_graphics_drawable_shapes_RectShape()>
<android.graphics.Xfermode: void finalize()>
<android.net.sip.SipSession$Listener: void onRegistrationDone(android.net.sip.SipSession,int)>
<android.widget.FrameLayout: void setForegroundGravity(int)>
<android.content.Loader: boolean isReset()>
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.IState getCurrentState()>
<android.webkit.ZoomManager: void setHardwareAccelerated()>
<com.android.internal.telephony.cat.AppInterface$CommandType: int value()>
<android.view.GLES20Canvas: void nDrawText(int,java.lang.String,int,int,float,float,int,int)>
<android.net.Uri$Part: android.net.Uri$Part 'from'(java.lang.String,java.lang.String)>
<android.media.MediaPlayer: void setDataSource(java.lang.String)>
<android.sax.RootElement$Handler: void <init>(android.sax.RootElement)>
<android.media.JetPlayer: boolean play()>
<android.content.res.TypedArray: int getLayoutDimension(int,int)>
<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWindow(android.graphics.Rect)>
<android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiWatchdogStateMachine$DelayWalledGardenState access$2600(android.net.wifi.WifiWatchdogStateMachine)>
<android.widget.DatePicker: boolean isEnabled()>
<android.text.format.DateFormat: void <clinit>()>
<GenerationGG: android.view.textservice.SpellCheckerSession$SpellCheckerSessionListener get_androidviewtextserviceSpellCheckerSession__SpellCheckerSessionListener()>
<com.android.internal.os.BatteryStatsImpl: void noteScreenOnLocked()>
<android.os.Debug: void startAllocCounting()>
<android.preference.TwoStatePreference: boolean shouldDisableDependents()>
<GenerationGG: android.accessibilityservice.AccessibilityServiceInfo get_androidaccessibilityserviceAccessibilityServiceInfo()>
<com.android.internal.os.BatteryStatsImpl$StopwatchTimer: boolean isRunningLocked()>
<Wrapper_android_bluetooth_BluetoothServerSocket: void test_android_bluetooth_BluetoothServerSocket()>
<android.content.ClipDescription: java.lang.CharSequence getLabel()>
<android.content.IntentSender: boolean equals(java.lang.Object)>
<android.graphics.ColorMatrix: void reset()>
<com.android.internal.view.menu.ActionMenuItem: android.view.View getActionView()>
<android.database.sqlite.DatabaseConnectionPool: int getFreePoolSize()>
<android.net.wifi.WifiStateMachine: void access$14800(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.mtp.MtpStorageInfo: int getStorageId()>
<android.view.ViewGroup$TouchTarget: void <clinit>()>
<android.mtp.MtpDevice: int[] native_get_storage_ids()>
<android.app.ContextImpl$13: void <init>()>
<android.renderscript.RenderScript: int nAllocationCreateTyped(int,int,int)>
<android.content.pm.PackageInfo: java.lang.String toString()>
<android.telephony.PhoneStateListener: void onOtaspChanged(int)>
<android.renderscript.Allocation: void validateIsObject()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean isConnected()>
<GenerationGG: android.media.MediaScannerConnection get_androidmediaMediaScannerConnection()>
<android.renderscript.RenderScript: void setMessageHandler(android.renderscript.RenderScript$RSMessageHandler)>
<android.view.MotionEvent$1: android.view.MotionEvent[] newArray(int)>
<android.text.method.NumberKeyListener: int lookup(android.view.KeyEvent,android.text.Spannable)>
<android.app.NativeActivity: void surfaceRedrawNeeded(android.view.SurfaceHolder)>
<android.os.Process: android.os.Process$ProcessStartResult zygoteSendArgsAndGetResult(java.util.ArrayList)>
<android.os.StrictMode$Span: android.os.StrictMode$Span access$2102(android.os.StrictMode$Span,android.os.StrictMode$Span)>
<android.graphics.RectF: void <init>(android.graphics.RectF)>
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String access$302(com.android.internal.telephony.ims.IsimUiccRecords,java.lang.String)>
<android.net.LinkProperties: java.lang.String getInterfaceName()>
<com.android.internal.telephony.Phone$State: com.android.internal.telephony.Phone$State[] values()>
<android.bluetooth.IBluetooth$Stub$Proxy: android.os.IBinder asBinder()>
<android.view.ViewGroup: void startViewTransition(android.view.View)>
<android.server.search.Searchables: java.util.ArrayList getSearchablesInGlobalSearchList()>
<com.android.server.usb.UsbDeviceManager: android.hardware.usb.UsbAccessory getCurrentAccessory()>
<android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug$HierarchyTraceType)>
<android.location.Address: android.os.Bundle access$1902(android.location.Address,android.os.Bundle)>
<android.media.audiofx.EnvironmentalReverb: void setReflectionsLevel(short)>
<android.net.wifi.WifiInfo: java.lang.String toString()>
<GenerationGG: android.webkit.WebSettings get_androidwebkitWebSettings()>
<DumbClass: void DumbMethod60()>
<android.media.IAudioService$Stub: void <init>()>
<com.android.server.wm.WindowManagerService: com.android.server.wm.WindowState windowForClientLocked(com.android.server.wm.Session,android.view.IWindow,boolean)>
<android.app.PendingIntent: void <init>(android.os.IBinder)>
<android.graphics.Region: boolean quickContains(int,int,int,int)>
<android.text.PackedObjectVector: java.lang.Object getValue(int,int)>
<android.opengl.GLSurfaceView: void queueEvent(java.lang.Runnable)>
<com.android.internal.telephony.sip.SipCommandInterface: void getIMEI(android.os.Message)>
<android.webkit.WebView: void nativeOnTrimMemory(int)>
<android.widget.AnalogClock: android.text.format.Time access$002(android.widget.AnalogClock,android.text.format.Time)>
<android.view.ViewRootImpl: void dumpGfxInfo(java.io.PrintWriter,int[])>
<android.net.wifi.p2p.WifiP2pDevice: boolean wpsKeypadSupported()>
<android.app.FragmentManagerImpl: android.app.FragmentTransaction beginTransaction()>
<com.android.server.am.ActivityManagerService: void setBroadcastTimeoutLocked(long)>
<android.webkit.WebSettings: boolean getLightTouchEnabled()>
<com.android.server.connectivity.Tethering$StateReceiver: void <init>(com.android.server.connectivity.Tethering)>
<com.android.internal.telephony.OperatorInfo: void writeToParcel(android.os.Parcel,int)>
<com.android.internal.net.DomainNameValidator: boolean match(java.security.cert.X509Certificate,java.lang.String)>
<com.android.server.wm.WindowManagerService: boolean isKeyguardSecure()>
<android.widget.HorizontalScrollView: void initOrResetVelocityTracker()>
<com.android.i18n.phonenumbers.RegexCache: java.util.regex.Pattern getPatternForRegex(java.lang.String)>
<android.animation.ValueAnimator: void setEvaluator(android.animation.TypeEvaluator)>
<android.view.View$1: void onClick(android.view.View)>
<android.graphics.Canvas: void drawCircle(float,float,float,android.graphics.Paint)>
<android.widget.ProgressBar$RefreshProgressRunnable: void <init>(android.widget.ProgressBar,int,int,boolean)>
<GenerationGG: android.media.audiofx.BassBoost$OnParameterChangeListener get_androidmediaaudiofxBassBoost__OnParameterChangeListener()>
<android.app.ActivityManager$RunningAppProcessInfo$1: android.app.ActivityManager$RunningAppProcessInfo[] newArray(int)>
<android.webkit.WebIconDatabase: void access$300()>
<android.app.ActivityManager$RunningTaskInfo$1: java.lang.Object[] newArray(int)>
<android.view.inputmethod.InputBinding$1: android.view.inputmethod.InputBinding[] newArray(int)>
<android.animation.Animator: void removeAllListeners()>
<android.widget.GridLayout$Axis$1: void <clinit>()>
<android.widget.ListPopupWindow: void setHeight(int)>
<android.media.AudioTrack$NativeEventHandlerDelegate$1: void handleMessage(android.os.Message)>
<com.android.internal.telephony.cat.Menu$1: void <init>()>
<android.location.LocationManager: void <init>(android.location.ILocationManager)>
<android.inputmethodservice.InputMethodService$InputMethodImpl: void changeInputMethodSubtype(android.view.inputmethod.InputMethodSubtype)>
<android.text.format.Time: long setJulianDay(int)>
<com.android.internal.telephony.cat.Input$1: java.lang.Object[] newArray(int)>
<android.telephony.NeighboringCellInfo: void writeToParcel(android.os.Parcel,int)>
<android.webkit.ByteArrayBuilder: void clear()>
<android.app.SharedPreferencesImpl$1: void <init>(android.app.SharedPreferencesImpl,java.lang.String)>
<android.accounts.AccountManagerResponse$1: android.accounts.AccountManagerResponse[] newArray(int)>
<android.media.IAudioFocusDispatcher$Stub: android.os.IBinder asBinder()>
<android.webkit.HTML5VideoView: void switchProgressView(boolean)>
<android.webkit.URLUtil: void <init>()>
<android.view.accessibility.AccessibilityEvent: void setEventTime(long)>
<com.android.server.location.LocationProviderProxy: boolean supportsSpeed()>
<android.net.wifi.WifiNative: boolean enableNetworkCommand(int,boolean)>
<android.os.StrictMode$InstanceTracker: void finalize()>
<android.server.BluetoothService: android.server.BluetoothAdapterProperties getAdapterProperties()>
<com.android.server.usb.UsbDeviceManager$UsbHandler: void dump(java.io.FileDescriptor,java.io.PrintWriter)>
<DumbClass: void DumbMethod52()>
<android.net.wifi.WifiManager$MulticastLock: void setReferenceCounted(boolean)>
<com.android.internal.telephony.Phone$DataState: void <clinit>()>
<android.content.res.XmlBlock$Parser: void <init>(android.content.res.XmlBlock,int,android.content.res.XmlBlock)>
<com.android.server.location.PassiveProvider: void enableLocationTracking(boolean)>
<android.widget.GridLayout$1: int getAlignmentValue(android.view.View,int)>
<android.widget.GridLayout$Spec: void <init>(boolean,android.widget.GridLayout$Interval,android.widget.GridLayout$Alignment)>
<android.view.ViewConfiguration: long getGlobalActionKeyTimeout()>
<android.util.FloatMath: float floor(float)>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: javax.sip.Transaction getTransaction()>
<com.android.internal.view.IInputConnectionWrapper: android.os.Message obtainMessageIOSC(int,int,java.lang.Object,int,com.android.internal.view.IInputContextCallback)>
<com.android.server.am.ActivityManagerService$2: void <init>(com.android.server.am.ActivityManagerService)>
<android.os.Debug: int getBinderReceivedTransactions()>
<com.android.server.pm.PackageManagerService: com.android.internal.app.IMediaContainerService access$300(com.android.server.pm.PackageManagerService)>
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: void <init>(android.os.IBinder)>
<android.util.Base64InputStream: void mark(int)>
<android.widget.TextView$SavedState$1: java.lang.Object[] newArray(int)>
<android.net.ProxyProperties: int getPort()>
<com.android.internal.backup.IBackupTransport$Stub: void <init>()>
<com.android.internal.view.menu.ActionMenuPresenter: void <init>(android.content.Context)>
<android.net.wifi.SupplicantStateTracker$HandshakeState: void <init>(android.net.wifi.SupplicantStateTracker)>
<android.renderscript.AllocationAdapter: android.renderscript.AllocationAdapter create2D(android.renderscript.RenderScript,android.renderscript.Allocation)>
<android.media.IAudioService$Stub: android.media.IAudioService asInterface(android.os.IBinder)>
<android.renderscript.Element: android.renderscript.Element U64_2(android.renderscript.RenderScript)>
<android.bluetooth.BluetoothProfileState: void access$1000(android.bluetooth.BluetoothProfileState,android.os.Message)>
<android.mtp.MtpConstants: void <init>()>
<android.widget.DatePicker: java.util.Calendar access$100(android.widget.DatePicker)>
<android.opengl.GLSurfaceView: void checkRenderThreadState()>
<com.android.server.pm.PackageManagerService: int compareSignatures(android.content.pm.Signature[],android.content.pm.Signature[])>
<android.media.RingtoneManager: void setStopPreviousRingtone(boolean)>
<android.speech.RecognitionService$Callback: void <init>(android.speech.RecognitionService,android.speech.IRecognitionListener,android.speech.RecognitionService$1)>
<android.view.View$2: boolean apply(java.lang.Object)>
<android.app.ActivityThread: android.content.IContentProvider getExistingProvider(android.content.Context,java.lang.String)>
<android.view.ViewRootImpl: void requestLayout()>
<android.service.wallpaper.WallpaperService$Engine$4: void dispatchWallpaperCommand(java.lang.String,int,int,int,android.os.Bundle,boolean)>
<com.android.server.BatteryService: int access$500(com.android.server.BatteryService)>
<android.webkit.WebSettings$RenderPriority: void <clinit>()>
<android.animation.PropertyValuesHolder: java.lang.String toString()>
<android.webkit.HTML5VideoViewProxy: void nativeOnPosterFetched(android.graphics.Bitmap,int)>
<android.media.AudioTrack: int setAuxEffectSendLevel(float)>
<android.content.ContextWrapper: int getThemeResId()>
<com.android.internal.telephony.gsm.GsmServiceStateTracker: int getCurrentGprsState()>
<GenerationGG: android.os.FileObserver get_androidosFileObserver()>
<android.content.pm.PackageParser: android.content.pm.PermissionGroupInfo generatePermissionGroupInfo(android.content.pm.PackageParser$PermissionGroup,int)>
<android.location.ILocationManager$Stub: android.location.ILocationManager asInterface(android.os.IBinder)>
<com.android.internal.util.StateMachine$SmHandler$HaltingState: void <init>(com.android.internal.util.StateMachine$SmHandler)>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getSystemTime(int)>
<android.bluetooth.BluetoothDeviceProfileState: long readTimerValue()>
<Wrapper_android_graphics_LightingColorFilter: void test_android_graphics_LightingColorFilter()>
<android.app.Fragment: void onDetach()>
<android.graphics.drawable.BitmapDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<android.widget.AbsListView: android.widget.AbsListView$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.database.CursorWrapper: boolean isClosed()>
<android.net.Uri: java.util.Set getQueryParameterNames()>
<android.net.NetworkStats: void dump(java.lang.String,java.io.PrintWriter)>
<com.android.internal.telephony.DataConnection: int getRadioTechnology(int)>
<android.speech.tts.AudioPlaybackHandler: void enqueueSynthesisDataAvailable(android.speech.tts.SynthesisMessageParams)>
<android.nfc.NdefMessage$1: void <init>()>
<android.graphics.Canvas: void native_drawOval(int,android.graphics.RectF,int)>
<com.android.server.UiModeManagerService$2: void onReceive(android.content.Context,android.content.Intent)>
<android.view.accessibility.AccessibilityNodeInfo: void setPassword(boolean)>
<android.test.IsolatedContext$MockAccountManager: void addOnAccountsUpdatedListener(android.accounts.OnAccountsUpdateListener,android.os.Handler,boolean)>
<com.android.server.wm.WindowState: void computeShownFrameLocked()>
<GenerationGG: android.view.accessibility.AccessibilityEventSource get_androidviewaccessibilityAccessibilityEventSource()>
<android.graphics.RectF$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.webkit.WebStorage: void access$100(java.lang.String)>
<android.net.NetworkInfo: void <init>(int,int,java.lang.String,java.lang.String)>
<android.media.FaceDetector: int findFaces(android.graphics.Bitmap,android.media.FaceDetector$Face[])>
<com.android.server.pm.Settings: void readDisabledComponentsLPw(com.android.server.pm.PackageSettingBase,org.xmlpull.v1.XmlPullParser)>
<android.speech.tts.TextToSpeech$Connection: void <init>(android.speech.tts.TextToSpeech)>
<android.view.ViewRootImpl$W: void dispatchDragEvent(android.view.DragEvent)>
<android.content.res.XmlBlock$Parser: int nextToken()>
<android.app.ActivityThread: void dumpGraphicsInfo(java.io.FileDescriptor)>
<com.android.internal.telephony.cdma.CdmaCallTracker: void log(java.lang.String)>
<com.android.server.am.AppBindRecord: void <init>(com.android.server.am.ServiceRecord,com.android.server.am.IntentBindRecord,com.android.server.am.ProcessRecord)>
<android.webkit.LoadListener: int createNativeResponse()>
<android.preference.Preference$BaseSavedState$1: android.preference.Preference$BaseSavedState[] newArray(int)>
<android.widget.TextView$3: void <clinit>()>
<android.webkit.WebStorage: java.util.Set nativeGetOrigins()>
<com.android.server.am.ServiceRecord: void resetRestartCounter()>
<android.app.Activity$ManagedCursor: boolean access$202(android.app.Activity$ManagedCursor,boolean)>
<android.drm.DrmManagerClient: android.drm.DrmConvertedStatus _convertData(int,int,byte[])>
<android.content.pm.PackageStats$1: android.content.pm.PackageStats[] newArray(int)>
<android.net.wifi.WpsStateMachine$InactiveState: void enter()>
<com.android.internal.telephony.cat.CatService: boolean removeMenu(com.android.internal.telephony.cat.Menu)>
<android.widget.AbsoluteLayout: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.content.ContentService$ObserverNode: void dumpLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],java.lang.String,java.lang.String,int[],android.util.SparseIntArray)>
<com.android.internal.telephony.sip.SipPhoneBase: android.net.LinkProperties getLinkProperties(java.lang.String)>
<android.content.pm.ParceledListSlice: boolean isLastSlice()>
<android.webkit.WebViewCore$TextSelectionData: void <init>(int,int)>
<com.android.internal.statusbar.StatusBarIcon: void <clinit>()>
<android.renderscript.Element: android.renderscript.Element ALLOCATION(android.renderscript.RenderScript)>
<android.widget.PopupWindow: int getAnimationStyle()>
<com.android.server.usb.UsbDeviceManager: android.os.UEventObserver access$500(com.android.server.usb.UsbDeviceManager)>
<android.test.suitebuilder.annotation.HasMethodAnnotation: boolean apply(android.test.suitebuilder.TestMethod)>
<android.bluetooth.BluetoothDeviceProfileState: void access$10500(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.IState)>
<android.view.ViewRootImpl$RunQueue: void removeCallbacks(java.lang.Runnable)>
<com.android.server.ConnectivityService: java.lang.Object access$400(com.android.server.ConnectivityService)>
<GenerationGG: android.util.StringBuilderPrinter get_androidutilStringBuilderPrinter()>
<android.app.Dialog: android.view.View findViewById(int)>
<android.telephony.gsm.SmsMessage: void <init>(com.android.internal.telephony.SmsMessageBase)>
<android.app.SearchableInfo: java.lang.String getSuggestSelection()>
<com.android.server.pm.PackageManagerService$4: void <init>()>
<android.test.mock.MockContentProvider$InversionIContentProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>
<com.android.server.pm.PackageManagerService$FileInstallArgs: void cleanUpResourcesLI()>
<android.server.BluetoothEventLoop: java.util.HashMap getAuthorizationAgentRequestData()>
<android.preference.PreferenceManager: android.preference.PreferenceManager$OnPreferenceTreeClickListener getOnPreferenceTreeClickListener()>
<android.preference.EditTextPreference: android.widget.EditText getEditText()>
<GenerationGG: android.text.LoginFilter get_androidtextLoginFilter()>
<android.net.wifi.p2p.WifiP2pService: int access$100(android.net.wifi.p2p.WifiP2pService)>
<com.android.internal.os.BatteryStatsImpl$Uid$Wakelock: void readFromParcelLocked(java.util.ArrayList,android.os.Parcel)>
<android.content.ContentProvider: android.content.res.AssetFileDescriptor openAssetFile(android.net.Uri,java.lang.String)>
<android.net.sip.SimpleSessionDescription: android.net.sip.SimpleSessionDescription$Media[] getMedia()>
<android.os.storage.IObbActionListener$Stub$Proxy: void <init>(android.os.IBinder)>
<android.test.suitebuilder.TestGrouping: void <clinit>()>
<android.content.SyncResult: boolean hasSoftError()>
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String getIsimDomain()>
<android.webkit.HTML5VideoViewProxy$VideoPlayer: boolean access$102(boolean)>
<com.android.server.net.NetworkStatsService: int access$900(com.android.server.net.NetworkStatsService)>
<android.util.LongSparseArray: int binarySearch(long[],int,int,long)>
<android.webkit.WebView: java.lang.String getSelection()>
<android.graphics.Matrix$1: boolean setRectToRect(android.graphics.RectF,android.graphics.RectF,android.graphics.Matrix$ScaleToFit)>
<android.test.ClassPathPackageInfoSource: void setClassLoader(java.lang.ClassLoader)>
<com.android.server.wm.ScreenRotationAnimation: boolean isAnimating()>
<android.gesture.GestureStore: java.util.ArrayList getGestures(java.lang.String)>
<android.view.GLES20Canvas: void drawPoints(float[],int,int,android.graphics.Paint)>
<android.os.StrictMode$6: void finish()>
<android.test.mock.MockCursor: float getFloat(int)>
<com.android.internal.telephony.IntRangeManager: void <init>()>
<android.drm.DrmManagerClient: int access$000(android.drm.DrmManagerClient)>
<android.animation.ValueAnimator: android.animation.Animator clone()>
<Wrapper_android_view_textservice_SuggestionsInfo: void test_android_view_textservice_SuggestionsInfo()>
<android.widget.ImageView: void setMaxHeight(int)>
<android.view.ViewDebug: void invalidate(android.view.View,java.lang.String)>
<android.widget.TextView: void onFinishTemporaryDetach()>
<android.net.rtp.AudioGroup: void <init>()>
<android.util.JsonReader: java.io.IOException syntaxError(java.lang.String)>
<com.android.server.location.GpsLocationProvider: int access$1910(com.android.server.location.GpsLocationProvider)>
<android.webkit.WebSettings: boolean getAutoFillEnabled()>
<android.drm.DrmManagerClient: boolean canHandle(java.lang.String,java.lang.String)>
<com.android.server.net.NetworkPolicyManagerService: void collectKeys(android.util.SparseIntArray,android.util.SparseBooleanArray)>
<android.text.StaticLayout: boolean isIdeographic(char,boolean)>
<android.view.View$9: java.lang.Float get(android.view.View)>
<android.os.RemoteCallback$1: android.os.RemoteCallback[] newArray(int)>
<android.webkit.WebView$QueuedTouch: android.webkit.WebView$QueuedTouch add(android.webkit.WebView$QueuedTouch)>
<com.android.server.usb.UsbDeviceManager: boolean access$302(com.android.server.usb.UsbDeviceManager,boolean)>
<android.view.animation.Animation: void setInterpolator(android.view.animation.Interpolator)>
<android.widget.NumberPicker: void removeAllCallbacks()>
<GenerationGG: android.opengl.GLSurfaceView$EGLWindowSurfaceFactory get_androidopenglGLSurfaceView__EGLWindowSurfaceFactory()>
<android.view.GLES20RecordingCanvas: void recordShaderBitmap(android.graphics.Paint)>
<android.graphics.PathMeasure: boolean native_getMatrix(int,float,int,int)>
<android.webkit.ZoomManager$ScaleDetectorListener: void <init>(android.webkit.ZoomManager,android.webkit.ZoomManager$1)>
<android.graphics.Interpolator: void nativeDestructor(int)>
<android.view.ViewPropertyAnimator: android.view.View access$400(android.view.ViewPropertyAnimator)>
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void calculateValue(float)>
<android.webkit.WebView: void setBackgroundColor(int)>
<android.app.Activity: boolean onMenuItemSelected(int,android.view.MenuItem)>
<android.webkit.CookieManager: java.lang.String[] getHostAndPath(android.net.WebAddress)>
<android.accounts.AuthenticatorDescription$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.test.mock.MockResources: java.lang.String getQuantityString(int,int,java.lang.Object[])>
<android.util.NtpTrustedTime: long getCachedNtpTime()>
<Wrapper_android_util_Base64: void test_android_util_Base64()>
<android.net.sip.SipAudioCall: java.lang.String access$1102(android.net.sip.SipAudioCall,java.lang.String)>
<android.view.HardwareRenderer$Gl20Renderer: void onPreDraw(android.graphics.Rect)>
<android.util.SparseBooleanArray: void append(int,boolean)>
<android.renderscript.Element: android.renderscript.Element F64_2(android.renderscript.RenderScript)>
<android.database.sqlite.SQLiteCursor: java.lang.String[] getColumnNames()>
<android.database.MergeCursor$1: void onChanged()>
<android.text.method.ArrowKeyMovementMethod: int getCurrentLineTop(android.text.Spannable,android.text.Layout)>
<android.media.IMediaScannerService$Stub$Proxy: void <init>(android.os.IBinder)>
<android.webkit.WebSettings: android.webkit.WebSettings$LayoutAlgorithm getLayoutAlgorithm()>
<android.view.ViewPropertyAnimator: void setValue(int,float)>
<android.media.RemoteControlClient: void onNewCurrentClientGen(int)>
<com.android.server.BackupManagerService$RestoreParams: void <init>(com.android.server.BackupManagerService,com.android.internal.backup.IBackupTransport,android.app.backup.IRestoreObserver,long,java.lang.String[],boolean)>
<android.content.IIntentReceiver$Stub: android.content.IIntentReceiver asInterface(android.os.IBinder)>
<android.preference.Preference: boolean isEnabled()>
<android.view.View$7: void <init>(java.lang.String)>
<com.android.server.DevicePolicyManagerService$ActiveAdmin: void <init>(android.app.admin.DeviceAdminInfo)>
<android.preference.EditTextPreference$SavedState$1: java.lang.Object[] newArray(int)>
<com.android.internal.telephony.DataConnection: void access$700(com.android.internal.telephony.DataConnection,com.android.internal.telephony.DataConnection$ConnectionParams,com.android.internal.telephony.DataConnection$FailCause)>
<com.android.internal.telephony.PhoneBase: boolean isInEcm()>
<android.view.ViewDebug: void profileViewAndChildren(android.view.View,java.io.BufferedWriter,boolean)>
<android.content.pm.PackageItemInfo: void dumpBack(android.util.Printer,java.lang.String)>
<android.test.mock.MockContext: void clearWallpaper()>
<android.bluetooth.BluetoothClass: int describeContents()>
<android.nfc.Tag: android.os.Bundle getTechExtras(int)>
<android.hardware.SensorManager: void unregisterListener(java.lang.Object)>
<android.inputmethodservice.InputMethodService: boolean onKeyLongPress(int,android.view.KeyEvent)>
<android.nfc.tech.MifareUltralight: void validatePageIndex(int)>
<android.net.MobileDataStateTracker: android.os.Handler access$1200(android.net.MobileDataStateTracker)>
<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void setVisibility(boolean)>
<android.webkit.CookieManager: java.lang.String nativeGetCookie(java.lang.String,boolean)>
<android.net.DummyDataStateTracker: boolean isAvailable()>
<com.android.server.pm.PackageManagerService: android.content.pm.UserInfo createUser(java.lang.String,int)>
<com.android.server.net.NetworkStatsService$6: void <init>(com.android.server.net.NetworkStatsService)>
<com.android.internal.telephony.GsmAlphabet: int[] access$100()>
<com.android.server.wm.AppWindowToken: void dump(java.io.PrintWriter,java.lang.String)>
<android.util.JsonWriter: android.util.JsonWriter close(android.util.JsonScope,android.util.JsonScope,java.lang.String)>
<android.view.inputmethod.InputMethodManager: boolean isFullscreenMode()>
<android.widget.GridView: void pinToTop(int)>
<android.net.http.Headers: java.util.ArrayList getSetCookie()>
<android.content.ContentValues: void <init>(java.util.HashMap,android.content.ContentValues$1)>
<android.preference.PreferenceScreen$SavedState$1: void <init>()>
<android.appwidget.AppWidgetProviderInfo: void <clinit>()>
<android.widget.AdapterView: void addView(android.view.View,int,android.view.ViewGroup$LayoutParams)>
<com.android.internal.telephony.IccCard: com.android.internal.telephony.IccCard$State getAppState(int)>
<android.webkit.WebViewCore: void access$1000(android.webkit.WebViewCore)>
<android.test.suitebuilder.TestGrouping: android.test.suitebuilder.TestGrouping removePackagesRecursive(java.lang.String[])>
<android.graphics.PixelFormat: boolean formatHasAlpha(int)>
<android.view.KeyEvent: java.lang.String keyCodeToString(int)>
<android.widget.ResourceCursorAdapter: void setDropDownViewResource(int)>
<android.view.GLES20RecordingCanvas: void setNextPoolable(android.view.GLES20RecordingCanvas)>
<android.widget.AbsSpinner$SavedState$1: android.widget.AbsSpinner$SavedState[] newArray(int)>
<android.service.wallpaper.WallpaperService$IWallpaperServiceWrapper: void attach(android.service.wallpaper.IWallpaperConnection,android.os.IBinder,int,boolean,int,int)>
<com.android.internal.telephony.gsm.SIMRecords: boolean isCphsMailboxEnabled()>
<android.widget.TextView$SelectionEndHandleView: int getCurrentCursorOffset()>
<android.os.storage.StorageManager$ObbListenerDelegate$1: void handleMessage(android.os.Message)>
<android.webkit.WebViewCore: int nativeGetContentMinPrefWidth()>
<android.view.ScaleGestureDetector$SimpleOnScaleGestureListener: boolean onScaleBegin(android.view.ScaleGestureDetector)>
<android.content.SyncManager$SyncHandler: void <init>(android.content.SyncManager,android.os.Looper)>
<android.net.NetworkTemplate: java.lang.String toString()>
<android.content.pm.ConfigurationInfo: void <clinit>()>
<com.android.internal.app.AlertController: void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener,android.os.Message)>
<android.drm.mobile1.DrmRawContent$DrmInputStream: void close()>
<com.android.internal.view.menu.MenuBuilder: int findGroupIndex(int)>
<android.widget.LinearLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.gesture.GestureOverlayView$FadeOutRunnable: void <init>(android.gesture.GestureOverlayView)>
<android.net.wifi.WpsResult: void <init>()>
<android.database.sqlite.SQLiteQueryBuilder: void appendWhereEscapeString(java.lang.String)>
<GenerationGG: android.text.GetChars get_androidtextGetChars()>
<GenerationGG: android.text.method.TimeKeyListener get_androidtextmethodTimeKeyListener()>
<android.widget.AbsListView$RecycleBin: void <init>(android.widget.AbsListView)>
<com.android.internal.telephony.sip.SipPhone: void access$500(com.android.internal.telephony.sip.SipPhone,com.android.internal.telephony.Connection)>
<android.webkit.BrowserFrame: android.webkit.CallbackProxy getCallbackProxy()>
<com.android.internal.telephony.cdma.sms.BearerData: void decodeSmsAddress(com.android.internal.telephony.cdma.sms.CdmaSmsAddress)>
<android.content.ContentValues: byte[] getAsByteArray(java.lang.String)>
<android.bluetooth.BluetoothSocket: void connectNative()>
<android.app.ContextImpl: void <clinit>()>
<android.widget.ListView: android.widget.ListAdapter getAdapter()>
<GenerationGG: android.drm.DrmInfoStatus get_androiddrmDrmInfoStatus()>
<android.telephony.PhoneNumberUtils: boolean isStartsPostDial(char)>
<android.net.wifi.WifiStateTracker$WifiStateReceiver: void <init>(android.net.wifi.WifiStateTracker)>
<android.os.Debug$MemoryInfo: int getTotalPrivateDirty()>
<android.test.mock.MockPackageManager: java.util.List queryIntentServices(android.content.Intent,int)>
<android.app.SearchableInfo: boolean shouldRewriteQueryFromData()>
<android.hardware.usb.UsbDevice: int getVendorId()>
<android.view.ViewDebug$LooperProfiler: void println(java.lang.String)>
<android.widget.ActivityChooserModel: int getActivityIndex(android.content.pm.ResolveInfo)>
<android.os.SystemClock: void sleep(long)>
<com.android.server.wm.WindowManagerService: void dumpPolicyLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],boolean)>
<com.android.internal.telephony.cdma.sms.UserData: byte[] stringToAscii(java.lang.String)>
<Wrapper_android_provider_ContactsContract: void test_android_provider_ContactsContract()>
<android.net.NetworkStatsHistory$1: android.net.NetworkStatsHistory createFromParcel(android.os.Parcel)>
<android.view.ViewConfiguration: long getSendRecurringAccessibilityEventsInterval()>
<android.hardware.usb.UsbDevice: java.lang.String getDeviceName(int)>
<android.webkit.MimeTypeMap: android.webkit.MimeTypeMap getSingleton()>
<android.media.audiofx.AudioEffect: int getParameter(int,short[])>
<com.android.internal.telephony.ApnContext: int getWaitingApnsPermFailCount()>
<com.android.internal.telephony.SmsMessageBase: boolean isEmail()>
<com.android.server.accessibility.TouchExplorer$PointerTracker: float getReceivedPointerDownX(int)>
<android.widget.ListView: void adjustViewsUpOrDown()>
<android.view.TextureView: boolean access$102(android.view.TextureView,boolean)>
<android.webkit.CacheManager$1: void <init>()>
<android.os.Process: void killProcessQuiet(int)>
<android.view.animation.AnimationSet: void setStartOffset(long)>
<android.webkit.WebView: void resetTrackballTime()>
<android.test.suitebuilder.TestSuiteBuilder: void addTest(junit.framework.Test)>
<android.widget.FastScroller: void startPendingDrag()>
<android.media.CamcorderProfile: void <clinit>()>
<com.android.server.BackupManagerService: void agentConnected(java.lang.String,android.os.IBinder)>
<android.app.SearchableInfo$ActionKeyInfo: void <init>(android.os.Parcel,android.app.SearchableInfo$1)>
<android.media.AudioService: void setStreamSolo(int,boolean,android.os.IBinder)>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder penaltyLog()>
<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getDisabledSystemPkgLPr(java.lang.String)>
<android.app.DialogFragment: void setStyle(int,int)>
<GenerationGG: android.database.sqlite.SQLiteAbortException get_androiddatabasesqliteSQLiteAbortException()>
<android.widget.TextView: boolean textCanBeSelected()>
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: int getOtasp()>
<android.widget.ScrollView: int computeVerticalScrollOffset()>
<android.view.ViewGroup: boolean onInterceptHoverEvent(android.view.MotionEvent)>
<com.android.server.WifiService: android.app.PendingIntent access$1700(com.android.server.WifiService)>
<android.view.InputDevice$MotionRange: int access$100(android.view.InputDevice$MotionRange)>
<android.bluetooth.BluetoothDeviceProfileState$OutgoingA2dp: void <init>(android.bluetooth.BluetoothDeviceProfileState)>
<android.content.pm.FeatureInfo$1: java.lang.Object[] newArray(int)>
<com.android.server.PowerManagerService: void setTimeoutLocked(long,int)>
<android.media.MediaRecorder: void prepare()>
<android.webkit.WebViewCore: void access$2000(android.webkit.WebViewCore,android.view.KeyEvent,boolean)>
<android.accounts.OperationCanceledException: void <init>(java.lang.String,java.lang.Throwable)>
<android.widget.TextView: java.lang.String getPrivateImeOptions()>
<android.text.Annotation: void <init>(android.os.Parcel)>
<android.net.wifi.WifiStateMachine: void reassociateCommand()>
<com.android.internal.view.menu.ActionMenuItem: java.lang.CharSequence getTitleCondensed()>
<android.widget.PopupWindow: void registerForScrollChanged(android.view.View,int,int)>
<android.webkit.WebView$InvokeListBox$3: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.lang.Object access$000(com.android.internal.telephony.gsm.SimSmsInterfaceManager)>
<android.os.Looper: void <init>()>
<android.database.sqlite.SQLiteStatement: void saveSqlAsLastSqlStatement()>
<com.android.server.location.GpsLocationProvider: boolean requestSingleShotFix()>
<android.renderscript.RenderScript: void rsnAllocationData2D(int,int,int,int,int,int,int,int,byte[],int)>
<android.net.LinkProperties$CompareResult: void <init>()>
<GenerationGG: android.renderscript.ProgramFragmentFixedFunction get_androidrenderscriptProgramFragmentFixedFunction()>
<android.webkit.Network$RoamingMonitor: void <init>(android.webkit.Network)>
<android.webkit.WebView: boolean nativeFocusIsPlugin()>
<android.text.util.Rfc822Tokenizer: void crunch(java.lang.StringBuilder)>
<android.util.AndroidException: void <init>(java.lang.String)>
<com.android.internal.telephony.IccRecords: void setVoiceCallForwardingFlag(int,boolean)>
<android.renderscript.ProgramStore: android.renderscript.ProgramStore BLEND_NONE_DEPTH_NONE(android.renderscript.RenderScript)>
<android.net.wifi.IWifiManager$Stub: android.os.IBinder asBinder()>
<android.view.IOnKeyguardExitResult$Stub$Proxy: void <init>(android.os.IBinder)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$WaitForUserActionState: void <init>(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<android.speech.IRecognitionListener$Stub: android.os.IBinder asBinder()>
<android.view.accessibility.AccessibilityNodeInfo$1: void <init>()>
<android.view.ViewDebug: java.lang.reflect.Field[] getExportedPropertyFields(java.lang.Class)>
<com.android.internal.telephony.DataConnection: int getRetryTimer()>
<android.nfc.tech.NfcA: byte[] getAtqa()>
<com.android.i18n.phonenumbers.PhoneNumberUtil: void <clinit>()>
<android.net.MobileDataStateTracker$1: void <clinit>()>
<GenerationGG: android.widget.AdapterView$OnItemClickListener get_androidwidgetAdapterView__OnItemClickListener()>
<android.net.NetworkState$1: java.lang.Object[] newArray(int)>
<android.view.GLES20RecordingCanvas: void drawOval(android.graphics.RectF,android.graphics.Paint)>
<android.graphics.ColorMatrix: void setConcat(android.graphics.ColorMatrix,android.graphics.ColorMatrix)>
<android.media.AudioService: int getVibrateSetting(int)>
<Wrapper_android_mtp_MtpStorageInfo: void test_android_mtp_MtpStorageInfo()>
<android.graphics.NinePatch: int getDensity()>
<android.text.TextLine$SpanSet: int getNextTransition(int,int)>
<android.graphics.Matrix: void setTranslate(float,float)>
<android.widget.ActivityChooserView$Callbacks: void <init>(android.widget.ActivityChooserView,android.widget.ActivityChooserView$1)>
<android.widget.ListView: void setHeaderDividersEnabled(boolean)>
<android.text.DynamicLayout$ChangeWatcher: void beforeTextChanged(java.lang.CharSequence,int,int,int)>
<android.os.BatteryStats: void formatTimeRaw(java.lang.StringBuilder,long)>
<android.speech.tts.TextToSpeechService$1: boolean isSpeaking()>
<android.telephony.PhoneNumberUtils: android.telephony.PhoneNumberUtils$CountryCallingCodeAndNewIndex tryGetCountryCallingCodeAndNewIndex(java.lang.String,boolean)>
<android.content.SyncManager: void access$1100(android.content.SyncManager,android.content.SyncManager$ActiveSyncContext,android.content.SyncResult)>
<android.util.PrintWriterPrinter: void println(java.lang.String)>
<android.net.NetworkInfo: int describeContents()>
<com.android.internal.http.HttpDateTime: com.android.internal.http.HttpDateTime$TimeOfDay getTime(java.lang.String)>
<android.net.http.RequestQueue: org.apache.http.HttpHost getProxyHost()>
<android.os.DropBoxManager$Entry$1: android.os.DropBoxManager$Entry createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.IccRecords: boolean getVoiceCallForwardingFlag()>
<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,float[])>
<com.android.server.pm.Settings: void readPackageLPw(org.xmlpull.v1.XmlPullParser)>
<android.widget.TabWidget: void setTabSelectionListener(android.widget.TabWidget$OnTabSelectionChanged)>
<android.webkit.ZoomControlExternal$1: void <init>(android.webkit.ZoomControlExternal)>
<android.test.RenamingDelegatingContext: void <init>(android.content.Context,java.lang.String)>
<android.widget.CursorTreeAdapter: boolean access$200(android.widget.CursorTreeAdapter)>
<android.net.Uri$HierarchicalUri: java.lang.String getScheme()>
<android.net.INetworkStatsService$Stub$Proxy: android.os.IBinder asBinder()>
<android.widget.AbsListView: boolean hasTextFilter()>
<com.android.server.usb.UsbSettingsManager: void checkPermission(android.hardware.usb.UsbDevice)>
<com.android.internal.app.ActionBarImpl: void setStackedBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.app.ActivityThread$ApplicationThread: void processInBackground()>
<android.renderscript.RenderScript: void nScriptSetVarF(int,int,float)>
<android.widget.GridLayout$Axis: void include(java.util.List,android.widget.GridLayout$Interval,android.widget.GridLayout$MutableInt,boolean)>
<android.net.LinkAddress: boolean equals(java.lang.Object)>
<com.android.internal.os.BatteryStatsImpl: long getCurrentRadioDataUptime()>
<android.bluetooth.BluetoothDeviceProfileState: void access$5100(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void <init>(android.service.wallpaper.WallpaperService,android.service.wallpaper.WallpaperService,android.service.wallpaper.IWallpaperConnection,android.os.IBinder,int,boolean,int,int)>
<android.content.ClipboardManager: void <clinit>()>
<com.android.internal.os.BatteryStatsImpl: void writeHistory(android.os.Parcel,boolean)>
<android.renderscript.Allocation: android.renderscript.Allocation createFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)>
<android.view.KeyEvent: boolean hasNoModifiers()>
<android.widget.GridLayout$Axis: android.widget.GridLayout$PackedMap createGroupBounds()>
<android.util.FinitePool: void release(android.util.Poolable)>
<android.net.SSLCertificateSocketFactory: void <clinit>()>
<android.speech.tts.TextToSpeech$5: void <init>(android.speech.tts.TextToSpeech)>
<com.android.internal.telephony.cat.IconLoader: com.android.internal.telephony.cat.IconLoader getInstance(android.os.Handler,com.android.internal.telephony.IccFileHandler)>
<com.android.server.pm.PackageManagerService$DumpState: boolean isOptionEnabled(int)>
<android.webkit.WebViewCore: void passToJs(int,java.lang.String,int,int,boolean,boolean,boolean,boolean)>
<android.net.NetworkInfo: int getSubtype()>
<android.widget.GridLayout$PackedMap: int[] createIndex(java.lang.Object[])>
<android.speech.tts.TextToSpeechService$SynthThread: void onLooperPrepared()>
<android.telephony.PhoneStateListener$1: void onCallStateChanged(int,java.lang.String)>
<android.text.style.UnderlineSpan: void writeToParcel(android.os.Parcel,int)>
<com.android.server.connectivity.Vpn$Connection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<android.view.MotionEvent: void <init>()>
<android.mtp.MtpDevice: java.lang.String toString()>
<android.widget.ActivityChooserModel$HistoryLoader: void <init>(android.widget.ActivityChooserModel,android.widget.ActivityChooserModel$1)>
<android.widget.AutoCompleteTextView: android.graphics.drawable.Drawable getDropDownBackground()>
<android.text.PackedIntVector: void growBuffer()>
<android.net.wifi.WifiStateMachine: void access$11100(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.content.ClipData: void addItem(android.content.ClipData$Item)>
<com.android.internal.view.BaseIWindow: void windowFocusChanged(boolean,boolean)>
<android.view.InputEventConsistencyVerifier: void problem(java.lang.String)>
<android.server.BluetoothAdapterStateMachine: void access$3900(android.server.BluetoothAdapterStateMachine,int,java.lang.Object)>
<android.widget.AbsListView: void setTextFilterEnabled(boolean)>
<android.webkit.WebSettings: java.lang.String getAcceptLanguage()>
<android.widget.SearchView$SearchAutoComplete: void setSearchView(android.widget.SearchView)>
<Wrapper_android_text_util_Rfc822Token: void test_android_text_util_Rfc822Token()>
<com.android.internal.telephony.cat.CatCmdMessage: int describeContents()>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: java.lang.Throwable access$1600(com.android.server.sip.SipSessionGroup$SipSessionImpl,java.lang.Throwable)>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: void unregister()>
<Wrapper_android_media_AudioFormat: void test_android_media_AudioFormat()>
<android.widget.TextView$ErrorPopup: int getResourceId(int,int)>
<android.app.DownloadManager$Query: android.app.DownloadManager$Query setFilterById(long[])>
<com.android.internal.view.IInputMethodCallback$Stub: void <init>()>
<com.android.server.TextServicesManagerService$SpellCheckerBindGroup: java.util.ArrayList access$800(com.android.server.TextServicesManagerService$SpellCheckerBindGroup)>
<android.graphics.drawable.shapes.Shape: boolean hasAlpha()>
<android.animation.KeyframeSet: java.lang.Object clone()>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFileDescriptor(java.io.FileDescriptor)>
<android.view.GLES20Canvas: int save()>
<android.content.SyncStatusInfo: void <init>(android.os.Parcel)>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getSpaceLegal()>
<com.android.server.CountryDetectorService: void addListener(android.location.ICountryListener)>
<android.net.Uri$Part: java.lang.String getEncoded()>
<com.android.internal.net.VpnConfig$1: void <init>()>
<android.view.inputmethod.ExtractedTextRequest$1: android.view.inputmethod.ExtractedTextRequest createFromParcel(android.os.Parcel)>
<android.webkit.OverScrollGlow: void pullGlow(int,int,int,int,int,int)>
<com.android.internal.util.State: void exit()>
<android.webkit.ZoomControlExternal: java.lang.Runnable access$100(android.webkit.ZoomControlExternal)>
<android.content.SearchRecentSuggestionsProvider: boolean onCreate()>
<com.android.server.ConnectivityService: android.net.NetworkInfo getFilteredNetworkInfo(android.net.NetworkStateTracker,int)>
<android.widget.TextView: void setHighlightColor(int)>
<DumbClass: void DumbMethod63()>
<android.util.TimingLogger: void <init>(java.lang.String,java.lang.String)>
<android.hardware.usb.UsbEndpoint: int getMaxPacketSize()>
<com.android.server.pm.PackageManagerService: boolean isSafeMode()>
<android.accounts.AccountManager$12: void <init>(android.accounts.AccountManager)>
<java.lang.Object: void close()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: void startLaunchedLocked()>
<android.widget.RadioGroup$CheckedStateTracker: void <init>(android.widget.RadioGroup,android.widget.RadioGroup$1)>
<android.widget.StackView: android.widget.StackView$LayoutParams createOrReuseLayoutParams(android.view.View)>
<android.text.style.StyleSpan: int describeContents()>
<android.preference.PreferenceGroupAdapter$PreferenceLayout: void <init>(android.preference.PreferenceGroupAdapter$1)>
<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,android.graphics.Rect,int)>
<android.os.Handler: boolean postDelayed(java.lang.Runnable,long)>
<android.bluetooth.IBluetoothPbap$Stub: android.bluetooth.IBluetoothPbap asInterface(android.os.IBinder)>
<android.media.audiofx.AudioEffect: int native_getParameter(int,byte[],int,byte[])>
<android.os.AsyncTask: void init()>
<android.os.Parcel: void writeBinderArray(android.os.IBinder[])>
<android.net.wifi.SupplicantStateTracker$DefaultState: void enter()>
<android.net.DhcpStateMachine$RunningState: void <init>(android.net.DhcpStateMachine)>
<android.media.TimedText: boolean parseParcel()>
<android.content.IntentFilter: boolean hasDataType(java.lang.String)>
<com.android.internal.telephony.Connection: int getCnapNamePresentation()>
<android.view.Surface: void writeToParcel(android.os.Parcel,int)>
<android.gesture.Gesture: float getLength()>
<com.android.internal.widget.LockPatternUtils: android.app.admin.DevicePolicyManager getDevicePolicyManager()>
<com.android.server.net.NetworkPolicyManagerService$7: void <init>(com.android.server.net.NetworkPolicyManagerService)>
<android.graphics.ColorMatrixColorFilter: int nColorMatrixFilter(int,float[])>
<android.database.sqlite.SQLiteDatabase: void verifyLockOwner()>
<GenerationGG: android.content.ComponentName get_androidcontentComponentName()>
<android.os.ParcelFileDescriptor$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.IccRecords: void unregisterForRecordsLoaded(android.os.Handler)>
<android.graphics.drawable.AnimationDrawable: void setOneShot(boolean)>
<android.content.pm.PermissionInfo: void <init>()>
<com.android.internal.telephony.gsm.GsmDataConnection: void setActiveApnType(java.lang.String)>
<android.graphics.RegionIterator: int nativeConstructor(int)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setTollFree(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<DumbClass: void DumbMethod1()>
<android.gesture.Instance: void <init>(long,float[],java.lang.String)>
<com.android.internal.telephony.cat.CommandParams: com.android.internal.telephony.cat.AppInterface$CommandType getCommandType()>
<android.net.Uri$StringUri: java.lang.String parsePath(java.lang.String,int)>
<android.view.ViewGroup: void removeFromArray(int)>
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void loge(java.lang.String)>
<android.graphics.RectF: java.lang.String toShortString(java.lang.StringBuilder)>
<android.net.rtp.RtpStream: void finalize()>
<com.android.internal.view.menu.MenuBuilder: boolean getOptionalIconsVisible()>
<android.os.BatteryStats: void <init>()>
<android.provider.Settings$NameValueCache: void <init>(java.lang.String,android.net.Uri,java.lang.String)>
<android.drm.DrmUtils: byte[] readBytes(java.lang.String)>
<android.server.BluetoothA2dpService: boolean connectSinkNative(java.lang.String)>
<android.opengl.GLES10: void glTexImage2D(int,int,int,int,int,int,int,int,java.nio.Buffer)>
<android.view.ViewRootImpl: void requestUpdateConfiguration(android.content.res.Configuration)>
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void startNetStatPoll()>
<android.view.accessibility.AccessibilityNodeInfo: void setSealed(boolean)>
<android.webkit.JWebCoreJavaBridge: void nativeUpdatePluginDirectories(java.lang.String[],boolean)>
<android.graphics.Bitmap: void nativeErase(int,int)>
<android.webkit.WebViewCore: void nativeUpdateFrameCacheIfLoading()>
<android.os.Message: android.os.Message obtain(android.os.Handler)>
<android.view.animation.Animation: void setRepeatCount(int)>
<android.accounts.IAccountManager$Stub: android.os.IBinder asBinder()>
<GenerationGG: java.io.Writer get_javaioWriter()>
<android.app.ActivityThread$ApplicationThread: void scheduleActivityConfigurationChanged(android.os.IBinder)>
<android.server.BluetoothAdapterStateMachine: void access$5100(android.server.BluetoothAdapterStateMachine,android.os.Message)>
<GenerationGG: android.telephony.SmsManager get_androidtelephonySmsManager()>
<android.webkit.WebView: android.webkit.HTML5VideoViewProxy access$8700(android.webkit.WebView)>
<android.app.backup.RestoreSession$RestoreObserverWrapper: void restoreFinished(int)>
<android.telephony.ServiceState: void setStateOff()>
<android.view.inputmethod.BaseInputConnection: boolean performPrivateCommand(java.lang.String,android.os.Bundle)>
<android.nfc.NdefRecord: int describeContents()>
<android.drm.DrmInfoEvent: void <init>(int,int,java.lang.String)>
<android.app.LoadedApk$ServiceDispatcher$ConnectionInfo: void <init>(android.app.LoadedApk$1)>
<android.content.res.AssetManager: void decRefsLocked(int)>
<Wrapper_android_renderscript_Mesh: void test_android_renderscript_Mesh()>
<android.widget.ScrollBarDrawable: void setHorizontalTrackDrawable(android.graphics.drawable.Drawable)>
<Wrapper_android_database_sqlite_SQLiteBlobTooBigException: void test_android_database_sqlite_SQLiteBlobTooBigException()>
<android.graphics.drawable.GradientDrawable$GradientState: boolean access$002(android.graphics.drawable.GradientDrawable$GradientState,boolean)>
<android.view.ViewTreeObserver$InternalInsetsInfo: void reset()>
<android.graphics.Region: boolean nativeSetRect(int,int,int,int,int)>
<android.webkit.WebSyncManager: void <clinit>()>
<android.media.AudioService$VolumeStreamState: int muteCount()>
<com.android.server.wm.DragState: void <init>(com.android.server.wm.WindowManagerService,android.os.IBinder,android.view.Surface,int,android.os.IBinder)>
<com.android.internal.telephony.cdma.CDMAPhone: android.telephony.CellLocation getCellLocation()>
<android.app.ActivityThread$GcIdler: boolean queueIdle()>
<android.graphics.Bitmap: int getScaledWidth(android.graphics.Canvas)>
<android.content.res.TypedArray: float getDimension(int,float)>
<android.content.res.Resources: java.lang.String getResourcePackageName(int)>
<android.graphics.Bitmap: int getGenerationId()>
<android.opengl.GLSurfaceView$GLThreadManager: void <init>()>
<android.widget.CursorAdapter$ChangeObserver: boolean deliverSelfNotifications()>
<android.net.http.HttpLog: void v(java.lang.String)>
<android.os.PatternMatcher: void <init>(android.os.Parcel)>
<com.android.server.ConnectivityService: android.net.NetworkInfo getNetworkInfo(int,int)>
<com.android.internal.telephony.gsm.GsmConnection$1: void <clinit>()>
<android.view.inputmethod.InputMethodManager: void clearConnectionLocked()>
<com.android.internal.telephony.ApnContext: void <init>(java.lang.String,java.lang.String)>
<android.gesture.GestureUtils: void <clinit>()>
<android.view.GLES20Canvas: void drawRoundRect(android.graphics.RectF,float,float,android.graphics.Paint)>
<android.net.wifi.WpsResult$1: android.net.wifi.WpsResult createFromParcel(android.os.Parcel)>
<android.app.Dialog: boolean onKeyShortcut(int,android.view.KeyEvent)>
<GenerationGG: android.media.MediaScannerConnection$OnScanCompletedListener get_androidmediaMediaScannerConnection__OnScanCompletedListener()>
<android.text.method.BaseKeyListener: int makeTextContentType(android.text.method.TextKeyListener$Capitalize,boolean)>
<android.net.Uri$HierarchicalUri: java.lang.String toString()>
<android.net.Uri$Builder: android.net.Uri build()>
<android.media.AudioService$VolumeStreamState: int getMaxIndex()>
<android.net.http.Connection: byte[] getBuf()>
<android.nfc.NfcActivityManager: void onDestroy(android.app.Activity)>
<android.database.sqlite.SQLiteCompiledSql: boolean acquire()>
<com.android.internal.textservice.ITextServicesManager$Stub: com.android.internal.textservice.ITextServicesManager asInterface(android.os.IBinder)>
<android.content.ClipDescription: boolean hasMimeType(java.lang.String)>
<android.widget.AdapterViewFlipper: boolean access$002(android.widget.AdapterViewFlipper,boolean)>
<com.android.server.MountService$DefaultContainerConnection: void onServiceDisconnected(android.content.ComponentName)>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: boolean isHomeSid(int)>
<android.widget.GridLayout: int getMeasurementIncludingMargin(android.view.View,boolean)>
<android.content.pm.PackageStats: void <init>(android.content.pm.PackageStats)>
<com.android.internal.telephony.cat.Menu: int describeContents()>
<android.app.Activity: void onPostCreate(android.os.Bundle)>
<android.gesture.GestureUtils: float[] spatialSampling(android.gesture.Gesture,int,boolean)>
<android.location.IGpsStatusProvider$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.server.location.GpsLocationProvider: void native_inject_xtra_data(byte[],int)>
<android.text.method.ReplacementTransformationMethod: void onFocusChanged(android.view.View,java.lang.CharSequence,boolean,int,android.graphics.Rect)>
<com.android.internal.view.IInputMethodManager$Stub: android.os.IBinder asBinder()>
<android.media.audiofx.AudioEffect: java.lang.Object[] native_query_effects()>
<GenerationGG: android.database.sqlite.SQLiteDatabaseLockedException get_androiddatabasesqliteSQLiteDatabaseLockedException()>
<android.widget.AdapterView: android.widget.AdapterView$OnItemSelectedListener getOnItemSelectedListener()>
<android.graphics.Rect$1: android.graphics.Rect createFromParcel(android.os.Parcel)>
<android.net.sip.SipSessionAdapter: void onCallChangeFailed(android.net.sip.ISipSession,int,java.lang.String)>
<android.hardware.Camera: void cancelAutoFocus()>
<android.server.BluetoothInputProfileHandler: int getInputDeviceConnectionState(android.bluetooth.BluetoothDevice)>
<android.animation.LayoutTransition: android.animation.TimeInterpolator getInterpolator(int)>
<com.android.server.am.AppNotRespondingDialog$1: void <init>(com.android.server.am.AppNotRespondingDialog)>
<android.webkit.OverScrollGlow: void absorbGlow(int,int,int,int,int,int)>
<com.android.internal.telephony.cat.Menu$1: java.lang.Object[] newArray(int)>
<android.server.BluetoothService$Reaper: void <init>(android.server.BluetoothService,int,int)>
<android.test.mock.MockResources: java.lang.CharSequence[] getTextArray(int)>
<android.util.SparseBooleanArray: int keyAt(int)>
<android.net.UrlQuerySanitizer: void clear()>
<android.webkit.CookieManager: void setAcceptCookie(boolean)>
<android.location.Address: void setSubLocality(java.lang.String)>
<com.android.internal.telephony.cat.ItemsIconId: void <init>()>
<android.media.audiofx.Equalizer: short getNumberOfBands()>
<android.webkit.LoadListener: void commitHeadersCheckRedirect()>
<com.android.server.sip.SipService: boolean isBehindNAT(java.lang.String)>
<android.app.ActivityThread$CreateServiceData: java.lang.String toString()>
<android.webkit.WebViewClient: void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap)>
<com.android.server.wm.InputManager: void registerInputChannel(android.view.InputChannel,com.android.server.wm.InputWindowHandle)>
<android.accessibilityservice.AccessibilityService$IEventListenerWrapper: void onAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.widget.RemoteViewsAdapter: android.view.LayoutInflater access$1200(android.widget.RemoteViewsAdapter)>
<com.android.internal.telephony.ApnSetting: java.lang.String toString()>
<android.webkit.LoadListener: void endData()>
<android.app.backup.IBackupManager$Stub: void <init>()>
<android.webkit.JniUtil: android.content.Context getContext()>
<android.util.JsonReader: int getColumnNumber()>
<com.android.server.wm.WindowManagerService: float getWindowCompatibilityScale(android.os.IBinder)>
<android.text.util.Linkify$4: void <init>()>
<android.app.FragmentManagerState: void <init>()>
<android.webkit.WebIconDatabase: android.graphics.Bitmap access$800(java.lang.String)>
<GenerationGG: android.widget.BaseAdapter get_androidwidgetBaseAdapter()>
<android.view.ViewGroup: void recomputeViewAttributes(android.view.View)>
<android.content.Intent: android.content.Intent replaceExtras(android.os.Bundle)>
<android.widget.RelativeLayout$LayoutParams: int access$112(android.widget.RelativeLayout$LayoutParams,int)>
<android.view.VolumePanel: void onFreeResources()>
<android.graphics.MaskFilter: void finalize()>
<android.webkit.WebSettings: void setLightTouchEnabled(boolean)>
<GenerationGG: android.graphics.NinePatch get_androidgraphicsNinePatch()>
<android.view.MotionEvent: void addBatch(long,android.view.MotionEvent$PointerCoords[],int)>
<android.os.StrictMode$InstanceCountViolation: void <init>(java.lang.Class,long,int)>
<android.view.InputDevice: void access$400(android.view.InputDevice,android.os.Parcel)>
<com.android.internal.telephony.cat.ComprehensionTlvTag: int value()>
<android.hardware.Camera: android.hardware.Camera$PreviewCallback access$300(android.hardware.Camera)>
<android.view.WindowManagerImpl: android.view.WindowManager getDefault(android.content.res.CompatibilityInfo)>
<com.android.server.PreferredComponent: void dump(java.io.PrintWriter,java.lang.String,java.lang.Object)>
<android.text.MeasuredText: float measure(int,int)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setSharedCost(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<android.bluetooth.IBluetoothStateChangeCallback$Stub: android.os.IBinder asBinder()>
<android.widget.TableLayout: void initTableLayout()>
<android.location.CountryDetector: void <init>(android.location.ICountryDetector)>
<android.view.InputChannel$1: java.lang.Object[] newArray(int)>
<com.android.server.pm.PackageManagerService: java.lang.String access$2900(com.android.server.pm.PackageManagerService)>
<android.net.LocalSocketImpl: int read_native(java.io.FileDescriptor)>
<com.android.server.NativeDaemonConnector: void sendCommandLocked(java.lang.String,java.lang.String)>
<android.content.SyncManager: android.app.AlarmManager access$3400(android.content.SyncManager)>
<android.net.Uri$HierarchicalUri: java.lang.String getEncodedQuery()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: java.lang.String getMin()>
<Wrapper_android_app_backup_RestoreObserver: void test_android_app_backup_RestoreObserver()>
<android.inputmethodservice.KeyboardView: void removeMessages()>
<android.os.MessageQueue: void addIdleHandler(android.os.MessageQueue$IdleHandler)>
<com.android.internal.telephony.gsm.SimCard: void <init>(com.android.internal.telephony.gsm.GSMPhone)>
<android.net.wifi.WifiNative: java.lang.String getMacAddressCommand()>
<com.android.server.pm.PackageManagerService: int getContinuationPoint(java.lang.String[],java.lang.String)>
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: void <init>(com.android.internal.telephony.gsm.GSMPhone)>
<com.android.server.wm.WindowState: boolean finishDrawingLocked()>
<android.graphics.Path: void native_lineTo(int,float,float)>
<android.app.backup.BackupDataInput: void finalize()>
<android.net.NetworkStatsHistory$DataStreamUtils: long[] readVarLongArray(java.io.DataInputStream)>
<android.net.wifi.WpsStateMachine$InactiveState: void <init>(android.net.wifi.WpsStateMachine)>
<android.view.GLES20Canvas: void nPrepareDirty(int,int,int,int,int,boolean)>
<android.view.View: boolean hasFocus()>
<android.server.BluetoothPanProfileHandler$BluetoothPanDevice: int access$300(android.server.BluetoothPanProfileHandler$BluetoothPanDevice)>
<android.test.MoreAsserts: void failNotEmpty(java.lang.String,java.lang.String)>
<com.android.server.am.ActivityManagerService: boolean isSleeping()>
<android.location.Location: void reset()>
<android.animation.Animator: java.util.ArrayList getListeners()>
<Wrapper_android_util_JsonToken: void test_android_util_JsonToken()>
<android.graphics.Matrix: float mapRadius(float)>
<com.android.internal.widget.LockPatternView: int resolveMeasured(int,int)>
<android.view.accessibility.AccessibilityRecord: boolean isFullScreen()>
<android.telephony.SmsMessage: long getTimestampMillis()>
<Wrapper_android_renderscript_Byte4: void test_android_renderscript_Byte4()>
<com.android.internal.telephony.WspTypeDecoder: boolean decodeNoValue(int)>
<android.database.sqlite.SQLiteOutOfMemoryException: void <init>()>
<android.media.IRemoteControlDisplay$Stub$Proxy: android.os.IBinder asBinder()>
<android.view.ViewConfiguration: int getScaledPagingTouchSlop()>
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openFd(java.lang.String)>
<android.text.method.DateKeyListener: int getInputType()>
<android.net.LinkProperties: java.util.Collection getRoutes()>
<android.drm.mobile1.DrmRawContent$DrmInputStream: int read()>
<android.widget.Scroller: void startScroll(int,int,int,int)>
<android.net.wifi.WifiMonitor: void <init>(com.android.internal.util.StateMachine)>
<android.preference.PreferenceGroupAdapter$1: void <init>(android.preference.PreferenceGroupAdapter)>
<android.test.AndroidTestRunner: java.util.List getTestCases()>
<android.content.res.AssetManager: java.io.InputStream open(java.lang.String)>
<com.android.server.location.GpsLocationProvider: void native_cleanup()>
<GenerationGG: android.net.Uri$Builder get_androidnetUri__Builder()>
<com.android.server.LightsService: android.os.Handler access$000(com.android.server.LightsService)>
<com.android.server.usb.UsbSettingsManager: void readSettingsLocked()>
<android.view.inputmethod.CompletionInfo: void <clinit>()>
<android.net.NetworkStatsHistory: void insertBucket(int,long)>
<android.view.InputDevice: android.view.InputDevice$MotionRange getMotionRange(int)>
<android.widget.AdapterViewAnimator$SavedState: java.lang.String toString()>
<android.appwidget.AppWidgetProviderInfo$1: void <init>()>
<android.content.ClipData: void <clinit>()>
<android.view.ViewGroup: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.webkit.WebViewCore$EventHub: boolean access$800(android.webkit.WebViewCore$EventHub)>
<android.view.MotionEvent: int findPointerIndex(int)>
<com.android.server.PowerManagerService: int getAutoBrightnessValue(int,int[])>
<android.database.CursorWindow: void nativeCopyStringToBuffer(int,int,int,android.database.CharArrayBuffer)>
<android.os.storage.IObbActionListener$Stub: android.os.storage.IObbActionListener asInterface(android.os.IBinder)>
<com.android.server.usb.UsbSettingsManager$AccessoryFilter: boolean matches(android.hardware.usb.UsbAccessory)>
<android.webkit.ZoomManager: float access$1100()>
<android.view.accessibility.AccessibilityInteractionClient: void applyCompatibilityScaleIfNeeded(android.view.accessibility.AccessibilityNodeInfo,float)>
<android.text.BoringLayout: int getEllipsizedWidth()>
<android.app.ActivityThread$ApplicationThread: void dumpService(java.io.FileDescriptor,android.os.IBinder,java.lang.String[])>
<GenerationGG: android.app.admin.DeviceAdminReceiver get_androidappadminDeviceAdminReceiver()>
<com.android.server.am.UriPermissionOwner: void removeReadPermission(com.android.server.am.UriPermission)>
<com.android.internal.app.AlertController: int access$1000(com.android.internal.app.AlertController)>
<android.media.AudioTrack: void finalize()>
<com.android.internal.util.CharSequences$2: java.lang.String toString()>
<android.renderscript.Element: android.renderscript.Element PROGRAM_STORE(android.renderscript.RenderScript)>
<com.android.internal.telephony.ITelephony$Stub$Proxy: android.os.IBinder asBinder()>
<GenerationGG: android.util.AttributeSet get_androidutilAttributeSet()>
<android.widget.TextView$HandleView: boolean offsetHasBeenChanged()>
<android.os.Debug: int getBinderSentTransactions()>
<android.text.util.Rfc822Token: void setName(java.lang.String)>
<android.os.IPowerManager$Stub$Proxy: android.os.IBinder asBinder()>
<android.app.WallpaperInfo: java.lang.String getSettingsActivity()>
<android.net.sip.SipProfile: javax.sip.address.Address access$302(android.net.sip.SipProfile,javax.sip.address.Address)>
<android.renderscript.RSDriverException: void <init>(java.lang.String)>
<android.animation.AnimatorSet: void setInterpolator(android.animation.TimeInterpolator)>
<com.android.internal.telephony.gsm.SIMRecords: void parseEfSpdi(byte[])>
<android.text.NoCopySpan$Concrete: void <init>()>
<android.widget.NumberPicker: java.lang.String[] access$1000(android.widget.NumberPicker)>
<android.graphics.Canvas: void native_drawColor(int,int)>
<android.text.format.Time: java.lang.String toString()>
<android.net.LocalSocket: void <init>()>
<android.view.inputmethod.CorrectionInfo: java.lang.String toString()>
<com.android.internal.app.ActionBarImpl: int getDisplayOptions()>
<android.util.XmlPullAttributes: java.lang.String getIdAttribute()>
<android.sax.Element: android.sax.Element getChild(java.lang.String)>
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.cdma.CdmaCall getCall()>
<com.android.server.accessibility.AccessibilityManagerService$6: void <init>(com.android.server.accessibility.AccessibilityManagerService,android.view.accessibility.IAccessibilityManagerClient)>
<android.net.wifi.SupplicantStateTracker$DormantState: void enter()>
<android.util.TimingLogger: void reset()>
<android.view.animation.Animation: void initialize(int,int,int,int)>
<android.widget.TextView$PositionListener: void updatePosition()>
<android.animation.ValueAnimator$5: void <init>()>
<GenerationGG: android.animation.AnimatorSet get_androidanimationAnimatorSet()>
<com.android.server.LightsService$Light: void setLightLocked(int,int,int,int,int)>
<com.android.internal.widget.AbsActionBarView$VisibilityAnimListener: void onAnimationRepeat(android.animation.Animator)>
<android.view.InputChannel: void <init>()>
<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region,android.graphics.Region$Op)>
<android.view.GLES20Canvas: void nRestore(int)>
<android.webkit.PluginFullScreenHolder: android.webkit.WebView access$000(android.webkit.PluginFullScreenHolder)>
<android.content.res.XmlBlock$Parser: int getEventType()>
<android.view.MotionEvent: int nativeGetSource(int)>
<android.widget.DatePicker: java.util.Calendar access$200(android.widget.DatePicker)>
<android.net.http.SslCertificate: android.net.http.SslCertificate$DName getIssuedTo()>
<android.bluetooth.BluetoothTetheringDataTracker$1: void onServiceDisconnected(int)>
<android.app.Activity: java.util.HashMap getLastNonConfigurationChildInstances()>
<android.accounts.AuthenticatorDescription: void <init>(android.os.Parcel,android.accounts.AuthenticatorDescription$1)>
<com.android.internal.os.AndroidPrintStream: void log(java.lang.String)>
<android.graphics.SweepGradient: void <init>(float,float,int,int)>
<android.os.ParcelUuid$1: void <init>()>
<android.net.NetworkInfo: java.lang.String getSubtypeName()>
<android.widget.GridView: void attachLayoutAnimationParameters(android.view.View,android.view.ViewGroup$LayoutParams,int,int)>
<android.view.View$11: void <init>(java.lang.String)>
<android.widget.MultiAutoCompleteTextView$CommaTokenizer: int findTokenStart(java.lang.CharSequence,int)>
<GenerationGG: android.location.LocationListener get_androidlocationLocationListener()>
<android.preference.Preference$BaseSavedState$1: void <init>()>
<android.webkit.LoadListener: void error(int,java.lang.String)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$6200(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,com.android.internal.util.IState)>
<GenerationGG: android.text.style.RelativeSizeSpan get_androidtextstyleRelativeSizeSpan()>
<com.android.server.wm.InputManager: void nativeRegisterInputChannel(android.view.InputChannel,com.android.server.wm.InputWindowHandle,boolean)>
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$Uid$Pkg getPackageStatsLocked(java.lang.String)>
<android.webkit.BrowserFrame: void clearCache()>
<android.net.sip.SipProfile: boolean getSendKeepAlive()>
<android.gesture.Gesture$1: android.gesture.Gesture createFromParcel(android.os.Parcel)>
<com.android.server.wm.InputFilter: void onInstalled()>
<android.widget.Toast$TN$1: void <init>(android.widget.Toast$TN)>
<android.view.ViewPropertyAnimator: long getStartDelay()>
<android.app.KeyguardManager: android.app.KeyguardManager$KeyguardLock newKeyguardLock(java.lang.String)>
<android.location.GeocoderParams: void <init>(android.location.GeocoderParams$1)>
<android.telephony.NeighboringCellInfo: int getCid()>
<android.nfc.tech.NfcB: android.nfc.Tag getTag()>
<com.android.server.connectivity.Vpn$LegacyVpnRunner: void check(java.lang.String)>
<android.server.BluetoothA2dpService: android.server.BluetoothService access$500(android.server.BluetoothA2dpService)>
<android.bluetooth.BluetoothDeviceProfileState: android.bluetooth.BluetoothDeviceProfileState$BondedDevice access$5700(android.bluetooth.BluetoothDeviceProfileState)>
<android.app.IActivityManager$ContentProviderHolder: void <init>(android.content.pm.ProviderInfo)>
<android.renderscript.Element: android.renderscript.Element I16_4(android.renderscript.RenderScript)>
<android.inputmethodservice.ExtractEditText: boolean hasWindowFocus()>
<GenerationGG: android.content.res.Resources get_androidcontentresResources()>
<android.widget.RemoteViewsAdapter: boolean hasStableIds()>
<android.net.rtp.RtpStream: int create(java.lang.String)>
<GenerationGG: android.text.style.TypefaceSpan get_androidtextstyleTypefaceSpan()>
<android.view.ViewGroup$LayoutParams: void resolveWithDirection(int)>
<android.speech.tts.MessageParams: java.lang.String getCallingApp()>
<android.webkit.WebViewCore: java.lang.String access$5300(android.webkit.WebViewCore,int,int)>
<android.app.ApplicationErrorReport: void <init>()>
<android.net.EthernetDataTracker: void setTeardownRequested(boolean)>
<android.content.Loader: void onStopLoading()>
<android.content.pm.ManifestDigest: void <init>(android.os.Parcel)>
<android.bluetooth.BluetoothHealthAppConfiguration$1: java.lang.Object[] newArray(int)>
<com.android.internal.telephony.DefaultPhoneNotifier$1: void <clinit>()>
<android.opengl.GLSurfaceView: int access$200(android.opengl.GLSurfaceView)>
<com.android.server.am.ProcessRecord: void dump(java.io.PrintWriter,java.lang.String)>
<android.app.ApplicationLoaders: void <init>()>
<android.media.audiofx.BassBoost: android.media.audiofx.BassBoost$OnParameterChangeListener access$100(android.media.audiofx.BassBoost)>
<android.net.DummyDataStateTracker: void <init>(int,java.lang.String)>
<android.gesture.GestureUtils: float[] temporalSampling(android.gesture.GestureStroke,int)>
<android.content.res.Resources: void updateConfiguration(android.content.res.Configuration,android.util.DisplayMetrics,android.content.res.CompatibilityInfo)>
<android.webkit.BrowserFrame: void nativePostUrl(java.lang.String,byte[])>
<android.util.MonthDisplayHelper: void previousMonth()>
<android.webkit.WebView$OnTrimMemoryListener: void onLowMemory()>
<android.speech.SpeechRecognizer$InternalListener: void onBeginningOfSpeech()>
<android.test.mock.MockContext: java.lang.String getPackageResourcePath()>
<android.view.accessibility.AccessibilityRecord: java.util.List getText()>
<android.widget.SuggestionsAdapter: boolean hasStableIds()>
<com.android.server.DevicePolicyManagerService: android.content.ComponentName getGlobalProxyAdmin()>
<android.drm.DrmInfo: byte[] getData()>
<android.net.RouteInfo: int hashCode()>
<android.location.Address: void setLongitude(double)>
<com.android.internal.os.BatteryStatsImpl: boolean startIteratingOldHistoryLocked()>
<android.graphics.drawable.Drawable: int getIntrinsicHeight()>
<android.database.DatabaseUtils: java.lang.String sqlEscapeString(java.lang.String)>
<com.android.internal.telephony.gsm.GsmSmsAddress: boolean isAlphanumeric()>
<GenerationGG: android.view.MotionEvent$PointerProperties get_androidviewMotionEvent__PointerProperties()>
<com.android.server.am.AppErrorResult: void <init>()>
<DumbClass: void DumbMethod67()>
<android.test.InstrumentationTestRunner: android.test.AndroidTestRunner getAndroidTestRunner()>
<com.android.internal.telephony.Phone$State: void <init>(java.lang.String,int)>
<android.app.DialogFragment: android.app.Dialog getDialog()>
<com.android.internal.telephony.sip.SipPhone$SipCall: void takeOver(com.android.internal.telephony.sip.SipPhone$SipCall)>
<android.widget.AutoCompleteTextView$MyWatcher: void onTextChanged(java.lang.CharSequence,int,int,int)>
<com.android.internal.widget.LockPatternUtils: java.util.List stringToPattern(java.lang.String)>
<android.content.res.AssetManager: void copyTheme(int,int)>
<com.android.server.wm.BlackFrame: void hide()>
<android.telephony.gsm.SmsMessage: boolean isStatusReportMessage()>
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void <init>(android.util.Property,float[])>
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getEsn()>
<com.android.server.wm.InputManager: android.view.InputDevice getInputDevice(int)>
<android.graphics.drawable.StateListDrawable: android.graphics.drawable.Drawable mutate()>
<android.app.IBackupAgent$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.internal.telephony.OperatorInfo$State: void <clinit>()>
<android.renderscript.Allocation: void copy1DRangeFrom(int,int,float[])>
<android.widget.GridLayout: android.widget.GridLayout$LayoutParams getLayoutParams(android.view.View)>
<android.view.InputDevice: void <clinit>()>
<android.speech.IRecognitionListener$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setNationalPrefixForParsing(java.lang.String)>
<com.android.internal.util.MemInfoReader: void <init>()>
<android.widget.FrameLayout: android.graphics.drawable.Drawable getForeground()>
<android.webkit.WebView: int nativeFindAll(java.lang.String,java.lang.String,boolean)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setPersonalNumber(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<android.hardware.usb.UsbAccessory: java.lang.String getDescription()>
<android.content.res.ColorStateList: void <init>(int[][],int[])>
<GenerationGG: android.os.Message get_androidosMessage()>
<android.renderscript.RSSurfaceView: void resume()>
<android.content.pm.ApplicationInfo: void disableCompatibilityMode()>
<android.app.FragmentState$1: android.app.FragmentState[] newArray(int)>
<android.graphics.Paint: void setTextAlign(android.graphics.Paint$Align)>
<android.text.style.SuggestionSpan$1: void <init>()>
<android.graphics.Canvas: void freeCaches()>
<android.content.pm.PackageParser: void setCompatibilityModeEnabled(boolean)>
<android.app.FragmentBreadCrumbs: android.app.FragmentBreadCrumbs$OnBreadCrumbClickListener access$100(android.app.FragmentBreadCrumbs)>
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: java.lang.CharSequence getTitle()>
<android.graphics.Paint: float native_measureText(java.lang.String,int,int)>
<com.android.internal.app.AlertController: android.content.DialogInterface access$600(com.android.internal.app.AlertController)>
<android.util.JsonReader: boolean skipTo(java.lang.String)>
<android.text.style.ImageSpan: void <init>(android.content.Context,int,int)>
<android.os.Process: int getGidForName(java.lang.String)>
<com.android.server.sip.SipWakeupTimer: boolean stopped()>
<android.net.Uri$HierarchicalUri: android.net.Uri$Part getSsp()>
<android.media.AudioService: void setStreamVolumeInt(int,int,boolean,boolean)>
<android.widget.GridLayout$Spec: int hashCode()>
<android.webkit.ZoomManager: boolean isInZoomOverview()>
<android.test.mock.MockContentProvider$InversionIContentProvider: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)>
<GenerationGG: android.content.DialogInterface$OnClickListener get_androidcontentDialogInterface__OnClickListener()>
<android.speech.tts.ITextToSpeechCallback$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.server.NotificationManagerService: java.util.ArrayList access$800(com.android.server.NotificationManagerService)>
<android.renderscript.Matrix4f: boolean inverseTranspose()>
<com.android.internal.telephony.DataCallState$SetupResult: com.android.internal.telephony.DataCallState$SetupResult[] values()>
<android.accounts.AccountAuthenticatorResponse$1: java.lang.Object[] newArray(int)>
<com.android.internal.telephony.GsmAlphabet: void <clinit>()>
<android.telephony.SmsMessage: java.lang.String getEmailBody()>
<GenerationGG: android.text.AndroidCharacter get_androidtextAndroidCharacter()>
<com.android.internal.telephony.cdma.sms.BearerData: void encode7bitEms(com.android.internal.telephony.cdma.sms.UserData,byte[],boolean)>
<android.widget.ListPopupWindow: void setWidth(int)>
<android.view.inputmethod.InputMethodManager: void clearBindingLocked()>
<android.widget.RelativeLayout$LayoutParams: int access$312(android.widget.RelativeLayout$LayoutParams,int)>
<android.view.ViewRootImpl$AccessibilityInteractionController$1: void onReleased(android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs)>
<android.app.backup.BackupDataOutput: void dtor(int)>
<android.graphics.drawable.AnimationDrawable: int getNumberOfFrames()>
<android.net.RouteInfo: boolean isHost()>
<android.graphics.Matrix: void set(android.graphics.Matrix)>
<android.renderscript.Float2: void <init>(float,float)>
<com.android.server.UiModeManagerService: android.content.res.Configuration access$100(com.android.server.UiModeManagerService)>
<android.widget.GridLayout$Assoc: void <init>(java.lang.Class,java.lang.Class)>
<android.database.CursorWrapper: void registerContentObserver(android.database.ContentObserver)>
<android.webkit.WebView: int viewToContentDimension(int)>
<android.renderscript.Byte3: void <init>(byte,byte,byte)>
<android.text.Selection$END: void <init>()>
<com.android.server.DiskStatsService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.widget.VideoView: int access$1200(android.widget.VideoView)>
<android.webkit.CallbackProxy$7: void onClick(android.content.DialogInterface,int)>
<android.database.sqlite.DatabaseConnectionPool$PoolObj: boolean access$100(android.database.sqlite.DatabaseConnectionPool$PoolObj)>
<android.content.pm.PackageStats: java.lang.String toString()>
<android.bluetooth.BluetoothDeviceProfileState: void access$7900(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.database.sqlite.SQLiteDatabase: boolean isOpen()>
<android.media.TimedText: void <init>(byte[])>
<android.animation.ObjectAnimator: java.lang.String toString()>
<GenerationGG: android.net.LocalSocket get_androidnetLocalSocket()>
<DumbClass: void DumbMethod70()>
<android.location.Criteria: int access$202(android.location.Criteria,int)>
<com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>
<android.os.BatteryStats$Uid$Proc$ExcessivePower: void <init>()>
<android.widget.GridLayout$Axis: void <clinit>()>
<android.webkit.ZoomManager: float access$500(android.webkit.ZoomManager)>
<GenerationGG: android.view.inputmethod.ExtractedTextRequest get_androidviewinputmethodExtractedTextRequest()>
<android.app.ActivityManager$ProcessErrorStateInfo$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.database.CursorWindow: boolean nativePutNull(int,int,int)>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Phone$State getState()>
<com.android.internal.telephony.ServiceStateTracker: void registerForDataConnectionAttached(android.os.Handler,int,java.lang.Object)>
<android.content.pm.PackageParser$Permission: void <init>(android.content.pm.PackageParser$Package)>
<android.webkit.ZoomManager: boolean isPreventingWebkitUpdates()>
<android.media.ExifInterface: boolean getLatLong(float[])>
<android.graphics.Matrix: void printShortString(java.io.PrintWriter)>
<android.app.backup.BackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,int,java.lang.String,java.lang.String,long,long)>
<android.net.wifi.WifiStateTracker: void setTeardownRequested(boolean)>
<android.app.Fragment: void onAttach(android.app.Activity)>
<android.graphics.SurfaceTexture: void nativeClassInit()>
<android.renderscript.RenderScript: int rsnFontCreateFromFile(int,java.lang.String,float,int)>
<GenerationGG: android.view.animation.Animation$AnimationListener get_androidviewanimationAnimation__AnimationListener()>
<android.net.wifi.WifiConfiguration$IpAssignment: void <clinit>()>
<android.net.wifi.WifiNative: java.lang.String statusCommand()>
<android.text.style.SuggestionSpan: boolean equals(java.lang.Object)>
<com.android.server.am.FactoryErrorDialog$1: void <init>(com.android.server.am.FactoryErrorDialog)>
<com.android.server.pm.PackageManagerService: boolean hasSystemFeature(java.lang.String)>
<android.view.GLES20Canvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)>
<com.android.internal.view.menu.ActionMenuView: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.net.Uri: android.net.Uri withAppendedPath(android.net.Uri,java.lang.String)>
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void <clinit>()>
<android.webkit.WebView: boolean access$6300(android.webkit.WebView)>
<android.app.backup.FileBackupHelperBase: int ctor()>
<android.net.sip.SipSessionAdapter: void onCalling(android.net.sip.ISipSession)>
<android.view.View: boolean initialAwakenScrollBars()>
<android.content.SyncStorageEngine: boolean getSyncAutomatically(android.accounts.Account,java.lang.String)>
<android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs: void setNextPoolable(java.lang.Object)>
<android.server.BluetoothAdapterStateMachine: int getBluetoothAdapterState()>
<com.android.internal.telephony.WspTypeDecoder: void expandWellKnownMimeType()>
<android.test.MoreAsserts: void assertEquals(int[],int[])>
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getOperatorNumeric()>
<android.graphics.RectF: void set(float,float,float,float)>
<android.database.sqlite.SQLiteOpenHelper: void <clinit>()>
<android.app.NativeActivity: void finishPreDispatchKeyEventNative(int,int,boolean)>
<com.android.internal.telephony.gsm.UsimPhoneBookManager$PbrFile: void <init>(com.android.internal.telephony.gsm.UsimPhoneBookManager,java.util.ArrayList)>
<android.test.mock.MockContentProvider: void <init>(android.content.Context,java.lang.String,java.lang.String,android.content.pm.PathPermission[])>
<android.webkit.WebViewCore: void destroy()>
<android.view.View$BaseSavedState$1: java.lang.Object[] newArray(int)>
<android.view.ViewGroup: void detachAllViewsFromParent()>
<android.webkit.WebView: int computeVerticalScrollOffset()>
<com.android.server.WifiService: android.net.wifi.WifiStateMachine access$600(com.android.server.WifiService)>
<android.widget.Scroller: int getFinalY()>
<android.appwidget.AppWidgetManager: void <init>(android.content.Context)>
<android.graphics.Interpolator: void setKeyFrame(int,int,float[])>
<android.content.ClipDescription: int describeContents()>
<android.media.AudioService: void rcDisplay_startDeathMonitor_syncRcStack()>
<android.view.SurfaceView$4: void addCallback(android.view.SurfaceHolder$Callback)>
<android.app.admin.DeviceAdminReceiver: void onEnabled(android.content.Context,android.content.Intent)>
<android.net.wifi.WifiApConfigStore: android.net.wifi.WifiConfiguration getApConfiguration()>
<com.android.server.AlarmManagerService$Alarm: void <init>()>
<com.android.server.PowerManagerService: boolean shouldLog(long)>
<android.graphics.drawable.GradientDrawable$GradientState: void <init>(android.graphics.drawable.GradientDrawable$GradientState)>
<android.media.AudioManager: void registerAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)>
<android.webkit.ZoomManager: int access$1402(android.webkit.ZoomManager,int)>
<com.android.server.wm.WindowToken: void dump(java.io.PrintWriter,java.lang.String)>
<com.android.server.pm.PackageManagerService: void removePackageFromPreferred(java.lang.String)>
<com.android.server.sip.SipHelper: javax.sip.ListeningPoint getListeningPoint()>
<GenerationGG: android.view.animation.AnimationUtils get_androidviewanimationAnimationUtils()>
<android.nfc.NdefRecord: byte[] toByteArray()>
<com.android.server.location.MockProvider: void updateNetworkState(int,android.net.NetworkInfo)>
<android.widget.NumberPicker: void postAdjustScrollerCommand(int)>
<com.android.internal.telephony.gsm.SIMRecords: void finalize()>
<android.text.style.ScaleXSpan: void <init>(float)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: android.net.wifi.p2p.WifiP2pService$P2pStateMachine$WaitForUserActionState access$1900(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<android.app.Dialog: android.view.View getCurrentFocus()>
<com.android.internal.appwidget.IAppWidgetService$Stub: android.os.IBinder asBinder()>
<com.android.internal.app.ResolverActivity: android.content.Intent makeMyIntent()>
<android.net.LinkProperties: java.util.Collection getDnses()>
<android.view.animation.AccelerateDecelerateInterpolator: float getInterpolation(float)>
<android.app.Instrumentation$ActivityWaiter: void <init>(android.content.Intent)>
<android.app.WallpaperManager: void forgetLoadedWallpaper()>
<android.text.method.TextKeyListener: boolean access$102(android.text.method.TextKeyListener,boolean)>
<android.app.Fragment: int getTargetRequestCode()>
<Wrapper_android_database_StaleDataException: void test_android_database_StaleDataException()>
<android.widget.GridLayout$Axis: void solve(android.widget.GridLayout$Arc[],int[])>
<android.graphics.drawable.BitmapDrawable: int getIntrinsicHeight()>
<android.content.res.CompatibilityInfo: void <init>(int,int,float,float)>
<android.renderscript.Type$Builder: android.renderscript.Type$Builder setX(int)>
<Wrapper_android_media_ExifInterface: void test_android_media_ExifInterface()>
<android.media.AudioSystem: int setForceUse(int,int)>
<android.accounts.AccountManager$5: void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.Account,java.lang.String,boolean,android.os.Bundle)>
<com.android.internal.util.StateMachine: void quit()>
<com.android.internal.telephony.BaseCommands: void unregisterForOn(android.os.Handler)>
<android.graphics.Matrix$1: void setRotate(float,float,float)>
<DumbClass: void DumbMethod32()>
<android.graphics.Canvas: void native_drawPosText(int,java.lang.String,float[],int)>
<android.view.View: void postInvalidateDelayed(long)>
<com.android.internal.telephony.ims.IsimUiccRecords: java.lang.String[] getIsimImpu()>
<com.android.internal.telephony.cat.CatException: void <init>()>
<android.app.WallpaperManager$FastBitmapDrawable: int getIntrinsicWidth()>
<com.android.server.MountService: boolean doGetVolumeShared(java.lang.String,java.lang.String)>
<android.renderscript.Allocation: android.renderscript.Allocation createSized(android.renderscript.RenderScript,android.renderscript.Element,int,int)>
<android.telephony.gsm.GsmCellLocation: java.lang.String toString()>
<com.android.internal.util.StateMachine$SmHandler: com.android.internal.util.StateMachine$SmHandler$StateInfo access$600(com.android.internal.util.StateMachine$SmHandler,com.android.internal.util.State,com.android.internal.util.State)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.List access$200(com.android.internal.telephony.gsm.SimSmsInterfaceManager)>
<android.view.View: boolean onSetAlpha(int)>
<android.opengl.GLUtils: void texSubImage2D(int,int,int,int,android.graphics.Bitmap,int,int)>
<android.text.AlteredCharSequence: android.text.AlteredCharSequence make(java.lang.CharSequence,char[],int,int)>
<android.media.MediaPlayer: void setAudioStreamType(int)>
<android.view.KeyEvent: void <init>(int,int)>
<android.webkit.HttpAuthHandlerImpl: boolean handleResponseForSynchronousRequest(java.lang.String,java.lang.String)>
<android.animation.Keyframe: android.animation.TimeInterpolator getInterpolator()>
<android.app.ActivityThread: void <clinit>()>
<android.widget.NumberPicker$InputTextFilter: int getInputType()>
<com.android.server.pm.PackageManagerService$InstallParams$1: void <init>(com.android.server.pm.PackageManagerService$InstallParams,int)>
<android.preference.MultiSelectListPreference$1: void <init>(android.preference.MultiSelectListPreference)>
<android.net.wifi.WifiStateMachine: int access$11708(android.net.wifi.WifiStateMachine)>
<com.android.internal.telephony.gsm.SimSmsInterfaceManager$CellBroadcastRangeManager: void <init>(com.android.internal.telephony.gsm.SimSmsInterfaceManager)>
<android.net.wifi.p2p.WifiP2pService$WifiStateReceiver: void <init>(android.net.wifi.p2p.WifiP2pService)>
<android.media.ToneGenerator: void native_setup(int,int)>
<android.graphics.drawable.shapes.Shape: float getHeight()>
<com.android.server.location.MockProvider: java.lang.String getInternalState()>
<Wrapper_android_text_style_BulletSpan: void test_android_text_style_BulletSpan()>
<android.opengl.Matrix: void multiplyMM(float[],int,float[],int,float[],int)>
<android.widget.AbsListView: void clearChoices()>
<android.net.wifi.WifiStateMachine$DriverLoadingState: void enter()>
<android.app.ISearchManager$Stub: android.app.ISearchManager asInterface(android.os.IBinder)>
<android.location.GpsStatus: int getMaxSatellites()>
<com.android.server.usb.UsbSettingsManager$DeviceFilter: boolean matches(int,int,int)>
<android.os.IPermissionController$Stub: void <init>()>
<android.media.MediaPlayer: void _stop()>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: java.lang.String sanitize(java.lang.String)>
<android.view.GestureDetector$SimpleOnGestureListener: void onShowPress(android.view.MotionEvent)>
<android.widget.RemoteViewsAdapter: android.content.Context access$1100(android.widget.RemoteViewsAdapter)>
<android.view.accessibility.AccessibilityManager: void <clinit>()>
<GenerationGG: android.content.res.ObbScanner get_androidcontentresObbScanner()>
<android.net.wifi.WifiStateMachine$DriverStartingState: void enter()>
<com.android.internal.view.menu.ActionMenuItem: android.content.Intent getIntent()>
<android.test.mock.MockPackageManager: android.content.pm.PackageInfo getPackageArchiveInfo(java.lang.String,int)>
<GenerationGG: android.content.PeriodicSync get_androidcontentPeriodicSync()>
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: void setTitle(java.lang.CharSequence)>
<android.accounts.GrantCredentialsPermissionActivity$1: void <init>(android.accounts.GrantCredentialsPermissionActivity,android.widget.TextView)>
<android.app.admin.DeviceAdminInfo: boolean usesPolicy(int)>
<android.view.Surface: int getIdentity()>
<com.android.internal.telephony.gsm.GSMPhone: void notifyPreciseCallStateChanged()>
<android.content.pm.Signature: void <init>(byte[])>
<android.location.CountryDetector$ListenerTransport: void onCountryDetected(android.location.Country)>
<com.android.server.accessibility.TouchExplorer$PointerTracker: long getReceivedPointerDownTime(int)>
<android.widget.StackView: int access$200(android.widget.StackView)>
<android.text.method.MultiTapKeyListener: int getInputType()>
<android.webkit.WebStorage: android.webkit.WebStorage getInstance()>
<android.view.ViewGroup: void resetResolvedTextDirection()>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain(android.view.accessibility.AccessibilityNodeInfo)>
<android.view.inputmethod.InputMethodSubtype: java.lang.String getExtraValueOf(java.lang.String)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setView(android.view.View)>
<android.text.method.BaseMovementMethod: boolean lineStart(android.widget.TextView,android.text.Spannable)>
<android.location.GeocoderParams$1: java.lang.Object[] newArray(int)>
<android.text.TextUtils: java.lang.CharSequence getReverse(java.lang.CharSequence,int,int)>
<android.view.VolumePanel: void onStopTrackingTouch(android.widget.SeekBar)>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void loge(java.lang.String)>
<com.android.server.accessibility.AccessibilityManagerService: void notifyAccessibilityServicesDelayedLocked(android.view.accessibility.AccessibilityEvent,boolean)>
<com.android.internal.telephony.PhoneBase: void logUnexpectedGsmMethodCall(java.lang.String)>
<android.app.IActivityManager$WaitResult: void <init>(android.os.Parcel,android.app.IActivityManager$1)>
<android.content.res.CompatibilityInfo: int describeContents()>
<android.net.http.RequestQueue: void <init>(android.content.Context,int)>
<android.app.backup.SharedPreferencesBackupHelper: void restoreEntity(android.app.backup.BackupDataInputStream)>
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.SmsMessageBase$TextEncodingDetails calculateLength(java.lang.CharSequence,boolean)>
<android.webkit.WebView: android.webkit.WebViewCore$AutoFillData access$1102(android.webkit.WebView,android.webkit.WebViewCore$AutoFillData)>
<GenerationGG: android.graphics.Typeface get_androidgraphicsTypeface()>
<android.widget.PopupMenu: android.view.Menu getMenu()>
<android.os.RemoteCallbackList: android.os.IInterface getBroadcastItem(int)>
<android.media.audiofx.Equalizer$BaseParameterListener: void onParameterChange(android.media.audiofx.AudioEffect,int,byte[],byte[])>
<android.net.wifi.WifiStateMachine: void stopFilteringMulticastV4Packets()>
<com.android.internal.telephony.IPhoneStateListener$Stub: void <init>()>
<android.content.res.Resources: int selectSystemTheme(int,int,int,int,int)>
<GenerationGG: android.util.EventLogTags get_androidutilEventLogTags()>
<android.view.View: void postInvalidate(int,int,int,int)>
<android.text.style.MetricAffectingSpan$Passthrough: void <init>(android.text.style.MetricAffectingSpan)>
<com.android.server.pm.PackageManagerService: java.io.File getSettingsProblemFile()>
<android.view.accessibility.AccessibilityManager: boolean removeAccessibilityStateChangeListener(android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener)>
<android.net.http.HttpLog: void e(java.lang.String)>
<android.view.View: int getFadeTop(boolean)>
<Wrapper_android_hardware_Sensor: void test_android_hardware_Sensor()>
<GenerationGG: android.util.JsonToken get_androidutilJsonToken()>
<android.graphics.PathMeasure: boolean getSegment(float,float,android.graphics.Path,boolean)>
<com.android.server.NativeDaemonConnectorException: void <init>(int,java.lang.String,java.lang.String)>
<android.widget.ShareActionProvider: android.widget.ShareActionProvider$OnShareTargetSelectedListener access$400(android.widget.ShareActionProvider)>
<android.content.res.StringBlock: java.lang.String subtag(java.lang.String,java.lang.String)>
<android.net.wifi.p2p.WifiP2pConfig$Persist: android.net.wifi.p2p.WifiP2pConfig$Persist valueOf(java.lang.String)>
<Wrapper_android_text_style_LineHeightSpan: void test_android_text_style_LineHeightSpan()>
<com.android.internal.telephony.BaseCommands: void setOnCatSessionEnd(android.os.Handler,int,java.lang.Object)>
<com.android.server.PowerManagerService: void setPolicy(android.view.WindowManagerPolicy)>
<android.media.IRemoteControlClient$Stub: android.os.IBinder asBinder()>
<android.location.GpsSatellite: void setStatus(android.location.GpsSatellite)>
<android.widget.CalendarView: boolean isSameDate(java.util.Calendar,java.util.Calendar)>
<android.graphics.drawable.LayerDrawable: void setLayerInset(int,int,int,int,int)>
<android.widget.GridLayout$Bounds: java.lang.String toString()>
<android.webkit.WebView$QueuedTouch: android.webkit.WebView$QueuedTouch set(android.view.MotionEvent,long)>
<android.view.accessibility.AccessibilityManager$1: void setState(int)>
<android.view.GLES20Canvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>
<android.graphics.Path: void incReserve(int)>
<android.widget.RemoteViews: void setOnClickFillInIntent(int,android.content.Intent)>
<android.widget.GridLayout$MutableInt: void reset()>
<android.graphics.Path: void rewind()>
<android.view.animation.GridLayoutAnimationController: int getDirectionPriority()>
<android.widget.LinearLayout: boolean hasDividerBeforeChildAt(int)>
<android.webkit.WebViewCore: void stopLoading()>
<Wrapper_android_mtp_MtpObjectInfo: void test_android_mtp_MtpObjectInfo()>
<android.webkit.WebStorage: void <init>()>
<Wrapper_android_database_sqlite_SQLiteOutOfMemoryException: void test_android_database_sqlite_SQLiteOutOfMemoryException()>
<com.android.internal.os.BatteryStatsImpl: void noteWifiOffLocked()>
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean hasExtension()>
<android.graphics.Region: int nativeConstructor()>
<android.filterfw.core.NativeFrame: boolean nativeDeallocate()>
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata getMetadataForRegion(java.lang.String)>
<android.renderscript.RenderScript: void rsnFileA3DGetIndexEntries(int,int,int,int[],java.lang.String[])>
<com.android.server.MountService$UnmountObbAction: java.lang.String toString()>
<android.view.GLES20Canvas: boolean nQuickReject(int,float,float,float,float,int)>
<android.util.LongSparseArray: int size()>
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setActionView(int)>
<Wrapper_android_net_wifi_p2p_WifiP2pInfo: void test_android_net_wifi_p2p_WifiP2pInfo()>
<java.lang.Object: boolean isBeforeFirst()>
<com.android.server.BackupManagerService$BackupRequest: void <init>(com.android.server.BackupManagerService,java.lang.String)>
<android.webkit.WebBackForwardList: void addHistoryItem(android.webkit.WebHistoryItem)>
<com.android.server.usb.UsbDeviceManager$UsbHandler: void sendMessage(int,java.lang.Object,boolean)>
<android.widget.AdapterViewAnimator$SavedState$1: void <init>()>
<android.renderscript.RenderScriptGL: int getWidth()>
<android.util.LongSparseArray: void delete(long)>
<android.widget.AdapterViewAnimator$1: void <init>(android.widget.AdapterViewAnimator,android.view.View,android.widget.AdapterViewAnimator$ViewAndMetaData)>
<android.media.AudioManager: void <clinit>()>
<android.net.http.HttpAuthHeader: void setProxy()>
<android.test.RenamingDelegatingContext: java.io.File getCacheDir()>
<android.view.accessibility.AccessibilityRecord: boolean isEnabled()>
<com.android.internal.telephony.BaseCommands: void setOnNITZTime(android.os.Handler,int,java.lang.Object)>
<android.webkit.WebView: boolean nativeCursorIsAnchor()>
<android.webkit.WebView: void nativeSetBaseLayer(int,android.graphics.Region,boolean,boolean,boolean)>
<android.widget.Chronometer$1: void <init>(android.widget.Chronometer)>
<android.view.View: void applyDrawableToTransparentRegion(android.graphics.drawable.Drawable,android.graphics.Region)>
<android.location.GpsStatus: void setStatus(int,int[],float[],float[],float[],int,int,int)>
<android.bluetooth.BluetoothServerSocket: void close()>
<android.content.res.XmlBlock: int nativeGetText(int)>
<android.os.StrictMode: java.lang.ThreadLocal access$500()>
<android.widget.TextView: android.content.Context access$4300(android.widget.TextView)>
<android.widget.EditText: android.text.method.MovementMethod getDefaultMovementMethod()>
<android.webkit.ConsoleMessage$MessageLevel: android.webkit.ConsoleMessage$MessageLevel[] values()>
<android.os.TokenWatcher: void cleanup(android.os.IBinder,boolean)>
<android.content.SyncManager$InitializerServiceConnection$1: void <init>(android.content.SyncManager$InitializerServiceConnection)>
<android.widget.TextView: android.widget.TextView$CorrectionHighlighter access$802(android.widget.TextView,android.widget.TextView$CorrectionHighlighter)>
<com.android.server.am.ProcessRecord: java.lang.String toShortString()>
<android.view.View: int getRight()>
<android.app.ListActivity$2: void onItemClick(android.widget.AdapterView,android.view.View,int,long)>
<com.android.server.Watchdog: void processStarted(java.lang.String,int)>
<android.accounts.AccountsException: void <init>(java.lang.String)>
<android.database.MergeCursor: void registerContentObserver(android.database.ContentObserver)>
<android.accounts.AccountManagerResponse$1: java.lang.Object[] newArray(int)>
<android.telephony.PhoneStateListener: void onDataConnectionStateChanged(int,int)>
<com.android.server.connectivity.Vpn: void interfaceStatusChanged(java.lang.String,boolean)>
<android.graphics.ImageFormat: void <init>()>
<com.android.server.LocationManagerService$Receiver: void <init>(com.android.server.LocationManagerService,android.location.ILocationListener)>
<android.webkit.WebView: int access$5200(android.webkit.WebView)>
<android.widget.ListPopupWindow$PopupDataSetObserver: void <init>(android.widget.ListPopupWindow)>
<android.widget.CalendarView: void access$500(android.widget.CalendarView,android.widget.AbsListView,int)>
<com.android.server.ConnectivityService$FeatureUser: void <init>(com.android.server.ConnectivityService,int,java.lang.String,android.os.IBinder)>
<android.widget.Filter$ResultsHandler: void <init>(android.widget.Filter)>
<android.view.MotionEvent: int getAction()>
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setChecked(boolean)>
<android.view.ViewRootImpl: void handleAppVisibility(boolean)>
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void <init>(android.util.Property,int[])>
<android.view.ViewRootImpl$RunQueue: void post(java.lang.Runnable)>
<android.webkit.WebSettings: void setUseWebViewBackgroundForOverscrollBackground(boolean)>
<com.android.server.pm.PackageManagerService: com.android.internal.app.IMediaContainerService access$302(com.android.server.pm.PackageManagerService,com.android.internal.app.IMediaContainerService)>
<com.android.server.PowerManagerService$BootCompletedReceiver: void <init>(com.android.server.PowerManagerService,com.android.server.PowerManagerService$1)>
<GenerationGG: java.io.FileDescriptor[] get_javaioFileDescriptor_ARRAY_()>
<android.os.Parcel: void writeString(java.lang.String)>
<android.graphics.Bitmap: void nativeCopyPixelsFromBuffer(int,java.nio.Buffer)>
<com.android.server.pm.PackageManagerService$DumpState: void setOptionEnabled(int)>
<GenerationGG: android.graphics.drawable.PaintDrawable get_androidgraphicsdrawablePaintDrawable()>
<android.renderscript.RenderScript: int nFileA3DCreateFromAsset(android.content.res.AssetManager,java.lang.String)>
<com.android.internal.util.BitwiseInputStream: void <init>(byte[])>
<android.text.TextDirectionHeuristics$TextDirectionHeuristicLocale: void <init>()>
<com.android.internal.view.IInputContext$Stub: void <init>()>
<android.media.AudioRecord: int native_set_pos_update_period(int)>
<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs access$1800(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$InstallParams)>
<android.graphics.Picture: void endRecording()>
<android.test.suitebuilder.TestSuiteBuilder: void <init>(java.lang.Class)>
<GenerationGG: android.hardware.Camera$ErrorCallback get_androidhardwareCamera__ErrorCallback()>
<android.bluetooth.BluetoothProfileState$1: void <init>(android.bluetooth.BluetoothProfileState)>
<android.text.MeasuredText: android.text.MeasuredText recycle(android.text.MeasuredText)>
<android.webkit.WebView$1: void <init>(android.webkit.WebView)>
<android.telephony.TelephonyManager: java.lang.String getNetworkOperator()>
<GenerationGG: android.media.ExifInterface get_androidmediaExifInterface()>
<com.android.server.am.TaskRecord: void setIntent(android.content.Intent,android.content.pm.ActivityInfo)>
<android.media.FaceDetector: void <init>(int,int,int)>
<com.android.server.pm.PackageManagerService: android.content.pm.InstrumentationInfo getInstrumentationInfo(android.content.ComponentName,int)>
<android.media.IRemoteControlClient$Stub$Proxy: void <init>(android.os.IBinder)>
<android.webkit.WebViewCore$EventHub: void <init>(android.webkit.WebViewCore)>
<android.widget.ExpandableListConnector: void setExpandableListAdapter(android.widget.ExpandableListAdapter)>
<com.android.internal.os.BatteryStatsImpl$Uid: android.os.BatteryStats$Uid$Pid getPidStatsLocked(int)>
<com.android.internal.util.StateMachine$SmHandler$StateInfo: void <init>(com.android.internal.util.StateMachine$SmHandler)>
<android.renderscript.RenderScript: void setPriority(android.renderscript.RenderScript$Priority)>
<android.net.Uri$Builder: android.net.Uri$Builder query(android.net.Uri$Part)>
<android.os.BatteryStats$HistoryItem: void writeToParcel(android.os.Parcel,int)>
<android.media.AudioService: void playSoundEffectVolume(int,float)>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String toString()>
<android.app.LauncherActivity$ActivityAdapter$ArrayFilter: void <init>(android.app.LauncherActivity$ActivityAdapter)>
<android.net.wifi.WifiNative: boolean p2pCancelConnect()>
<android.media.SoundPool: android.media.SoundPool$OnLoadCompleteListener access$100(android.media.SoundPool)>
<android.widget.HeaderViewListAdapter: void registerDataSetObserver(android.database.DataSetObserver)>
<com.android.internal.view.menu.ActionMenuPresenter$SavedState$1: void <init>()>
<android.app.DownloadManager$CursorTranslator: int translateStatus(int)>
<android.media.AudioRecord: void audioBuffSizeCheck(int)>
<android.net.NetworkInfo: boolean access$202(android.net.NetworkInfo,boolean)>
<android.os.Bundle: boolean hasFileDescriptors()>
<android.accounts.AccountManager$BaseFutureTask: void access$800(android.accounts.AccountManager$BaseFutureTask,java.lang.Throwable)>
<android.speech.SpeechRecognizer: void handleChangeListener(android.speech.RecognitionListener)>
<com.android.server.sip.SipSessionListenerProxy: void onRinging(android.net.sip.ISipSession,android.net.sip.SipProfile,java.lang.String)>
<android.media.AudioManager: android.media.AudioManager$OnAudioFocusChangeListener access$100(android.media.AudioManager,java.lang.String)>
<android.view.ViewGroup$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.widget.TableLayout: android.util.SparseBooleanArray parseColumns(java.lang.String)>
<android.graphics.Bitmap: android.graphics.Bitmap nativeExtractAlpha(int,int,int[])>
<com.android.org.bouncycastle.util.encoders.Base64: byte[] decode(java.lang.String)>
<android.text.format.Time: void setToNow()>
<com.android.internal.view.menu.MenuItemImpl: char getNumericShortcut()>
<android.view.ViewTreeObserver$InternalInsetsInfo: void setTouchableInsets(int)>
<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs createInstallArgs(com.android.server.pm.PackageManagerService$InstallParams)>
<android.widget.Switch: void setTextOn(java.lang.CharSequence)>
<android.content.res.Configuration$1: android.content.res.Configuration[] newArray(int)>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: void register(int)>
<android.provider.ContactsContract: void <clinit>()>
<com.android.server.am.ProcessRecord: boolean addPackage(java.lang.String)>
<android.net.wifi.WifiInfo: int getLinkSpeed()>
<android.widget.ListPopupWindow: boolean isModal()>
<com.android.server.net.NetworkStatsService$UidStatsKey: int hashCode()>
<android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter)>
<android.net.wifi.WifiStateMachine: void access$10100(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.os.TokenWatcher: void sendNotificationLocked(boolean)>
<GenerationGG: android.net.LocalServerSocket get_androidnetLocalServerSocket()>
<android.renderscript.RenderScript: void rsnScriptSetVarV(int,int,int,byte[])>
<android.net.http.RequestHandle: java.lang.String computeDigest(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.WebSettings: void setDatabaseEnabled(boolean)>
<android.content.pm.VerifierInfo$1: void <init>()>
<android.webkit.WebSettings: void setCursiveFontFamily(java.lang.String)>
<android.os.Debug$MemoryInfo$1: android.os.Debug$MemoryInfo[] newArray(int)>
<GenerationGG: android.media.ToneGenerator get_androidmediaToneGenerator()>
<android.security.KeyChain$AliasResponse: void <init>(android.security.KeyChainAliasCallback)>
<android.app.SearchableInfo: int getLabelId()>
<android.view.accessibility.AccessibilityRecord: int getScrollY()>
<android.test.IsolatedContext$MockAccountManager$MockAccountManagerFuture: boolean isDone()>
<android.content.ContentService$ObserverNode: void collectObserversLocked(android.net.Uri,int,android.database.IContentObserver,boolean,java.util.ArrayList)>
<GenerationGG: android.net.SSLSessionCache get_androidnetSSLSessionCache()>
<android.app.backup.IBackupManager$Stub: android.os.IBinder asBinder()>
<android.view.ViewRootImpl: void destroyHardwareRenderer()>
<android.animation.ValueAnimator: void setIntValues(int[])>
<android.text.method.TextKeyListener$SettingsObserver: void <init>(android.text.method.TextKeyListener)>
<com.android.server.InputMethodManagerService$ImeSubtypeListItem: void <init>(java.lang.CharSequence,java.lang.CharSequence,android.view.inputmethod.InputMethodInfo,int)>
<Wrapper_android_renderscript_Double3: void test_android_renderscript_Double3()>
<android.server.BluetoothService$RemoteService: void <init>(java.lang.String,android.os.ParcelUuid)>
<android.graphics.Bitmap: boolean nativeSameAs(int,int)>
<android.media.JetPlayer: boolean native_queueJetSegmentMuteArray(int,int,int,int,boolean[],byte)>
<android.content.res.CompatibilityInfo: void applyToDisplayMetrics(android.util.DisplayMetrics)>
<android.app.backup.BackupDataInput: int readNextHeader_native(int,android.app.backup.BackupDataInput$EntityHeader)>
<android.view.View: android.view.View findViewByAccessibilityId(int)>
<com.android.internal.telephony.SmsResponse: java.lang.String toString()>
<android.bluetooth.BluetoothA2dp: boolean isValidDevice(android.bluetooth.BluetoothDevice)>
<com.android.internal.widget.LockPatternView: int getColumnHit(float)>
<android.widget.OverScroller$SplineOverScroller: void <clinit>()>
<android.widget.FrameLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.animation.Keyframe: android.animation.Keyframe ofObject(float,java.lang.Object)>
<com.android.server.am.ActivityManagerService: int getTaskForActivity(android.os.IBinder,boolean)>
<com.android.server.ConnectivityService$VpnCallback: void <init>(com.android.server.ConnectivityService)>
<android.graphics.PixelFormat: void nativeClassInit()>
<android.widget.AdapterView: void setOnClickListener(android.view.View$OnClickListener)>
<android.nfc.NdefMessage: void <clinit>()>
<android.gesture.Gesture$1: android.gesture.Gesture[] newArray(int)>
<GenerationGG: android.app.ListFragment get_androidappListFragment()>
<android.net.wifi.WifiMonitor$MonitorThread: void <init>(android.net.wifi.WifiMonitor)>
<com.android.server.usb.UsbSettingsManager$DeviceFilter: void <init>(int,int,int,int,int)>
<android.graphics.Canvas: void nativeDrawBitmapMatrix(int,int,int,int)>
<com.android.internal.backup.LocalTransport: int finishBackup()>
<android.net.wifi.WifiConfigStore: android.net.ProxyProperties getProxyProperties(int)>
<com.android.internal.telephony.AdnRecordCache: java.util.ArrayList getRecordsIfLoaded(int)>
<android.bluetooth.BluetoothTetheringDataTracker: boolean isAvailable()>
<com.android.internal.telephony.IntRangeManager$ClientRange: int hashCode()>
<com.android.internal.telephony.PhoneBase: void handleMessage(android.os.Message)>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void access$1800(com.android.server.connectivity.Tethering$TetherInterfaceSM,com.android.internal.util.IState)>
<android.app.Activity: void closeOptionsMenu()>
<android.text.AlteredCharSequence: java.lang.CharSequence subSequence(int,int)>
<android.os.Binder: void destroy()>
<android.animation.PropertyValuesHolder: void access$200(java.lang.Object,int,int)>
<android.graphics.YuvImage: int getHeight()>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: void answerCall(java.lang.String,int)>
<android.net.RouteInfo$1: android.net.RouteInfo createFromParcel(android.os.Parcel)>
<GenerationGG: android.media.CameraProfile get_androidmediaCameraProfile()>
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getLine1Number()>
<android.media.RemoteControlClient: android.media.RemoteControlClient$MetadataEditor editMetadata(boolean)>
<android.view.GLES20Canvas: int nCreateLayerRenderer(int)>
<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean isRetrievalAllowingWindow(int)>
<android.graphics.Matrix: boolean preScale(float,float)>
<android.view.MotionEvent: int getActionMasked()>
<android.text.style.QuoteSpan: void writeToParcel(android.os.Parcel,int)>
<com.android.internal.telephony.cdma.SmsMessage: boolean isMWISetMessage()>
<android.hardware.SensorManager$SensorEventPool: void <init>(android.hardware.SensorManager,int)>
<android.content.ClipData: android.content.ClipData$Item getItemAt(int)>
<android.view.accessibility.IAccessibilityInteractionConnection$Stub$Proxy: void <init>(android.os.IBinder)>
<android.net.sip.SipProfile: void <init>(android.net.sip.SipProfile$1)>
<android.media.audiofx.Equalizer$BaseParameterListener: void <init>(android.media.audiofx.Equalizer,android.media.audiofx.Equalizer$1)>
<android.view.KeyEvent: boolean isCanceled()>
<android.os.ConditionVariable: void open()>
<android.app.SearchableInfo$ActionKeyInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.inputmethod.InputMethodInfo: void <clinit>()>
<android.net.wifi.WifiNative: boolean setPowerModeCommand(int)>
<android.view.View: int getTopPaddingOffset()>
<android.widget.TextView: android.widget.TextView$PositionListener access$2600(android.widget.TextView)>
<android.content.Intent: java.lang.String getType()>
<Wrapper_android_util_TimeFormatException: void test_android_util_TimeFormatException()>
<android.net.wifi.WifiStateMachine: void access$3500(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.app.Service: android.app.Application getApplication()>
<android.bluetooth.BluetoothProfileState$StableState: boolean processMessage(android.os.Message)>
<android.hardware.usb.UsbAccessory: java.lang.String getSerial()>
<android.net.wifi.WpsInfo: java.lang.String toString()>
<com.android.server.AppWidgetService: void dumpAppWidgetId(com.android.server.AppWidgetService$AppWidgetId,int,java.io.PrintWriter)>
<android.bluetooth.BluetoothOutputStream: void write(int)>
<android.view.HardwareLayer: int getWidth()>
<android.text.style.SuggestionSpan: java.lang.String getLocale()>
<com.android.server.sip.SipSessionGroup: android.net.sip.ISipSession createSession(android.net.sip.ISipSessionListener)>
<android.net.LocalSocketImpl: java.lang.Object access$500(android.net.LocalSocketImpl)>
<android.widget.RemoteViews$SetOnClickPendingIntent: void writeToParcel(android.os.Parcel,int)>
<android.content.SearchRecentSuggestionsProvider: java.lang.String getType(android.net.Uri)>
<android.webkit.CallbackProxy$10: void <init>(android.webkit.CallbackProxy,android.webkit.JsResult)>
<com.android.server.wm.Session: void setInTouchMode(boolean)>
<android.content.ContextWrapper: java.io.File getExternalFilesDir(java.lang.String)>
<android.util.XmlPullAttributes: int getAttributeListValue(int,java.lang.String[],int)>
<android.accounts.OperationCanceledException: void <init>(java.lang.String)>
<android.view.InputEventConsistencyVerifier: void onGenericMotionEvent(android.view.MotionEvent,int)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: android.net.wifi.p2p.WifiP2pConfig access$6002(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,android.net.wifi.p2p.WifiP2pConfig)>
<com.android.server.am.ActivityStack: com.android.server.am.ActivityRecord findActivityLocked(android.content.Intent,android.content.pm.ActivityInfo)>
<android.webkit.DeviceOrientationService: void <clinit>()>
<android.content.AbstractThreadedSyncAdapter: java.lang.Object access$200(android.content.AbstractThreadedSyncAdapter)>
<android.os.Parcel: boolean pushAllowFds(boolean)>
<android.content.SyncManager: android.os.PowerManager$WakeLock access$1900(android.content.SyncManager)>
<android.accounts.IAccountManagerResponse$Stub: void <init>()>
<DumbClass: void DumbMethod47()>
<android.webkit.JWebCoreJavaBridge: void nativeServiceFuncPtrQueue()>
<android.view.GLES20Canvas: void nDrawRect(int,float,float,float,float,int)>
<android.webkit.WebTextView: int access$100(android.webkit.WebTextView)>
<android.animation.ValueAnimator: void setStartDelay(long)>
<com.android.server.wm.DimSurface: void hide()>
<android.animation.ValueAnimator: void setFloatValues(float[])>
<android.webkit.WebView: int access$3300(android.webkit.WebView)>
<android.net.wifi.WifiStateMachine: void <clinit>()>
<android.view.accessibility.AccessibilityRecord: void setPassword(boolean)>
<com.android.internal.widget.LockPatternView$DisplayMode: void <init>(java.lang.String,int)>
<android.text.method.WordIterator: void checkOffsetIsValid(int)>
<com.android.internal.net.VpnConfig: void <init>()>
<android.view.View$CheckForLongPress: void <init>(android.view.View)>
<android.telephony.PhoneNumberUtils: boolean isDialable(char)>
<com.android.server.accessibility.TouchExplorer$PerformLongPressDelayed: void <init>(com.android.server.accessibility.TouchExplorer,com.android.server.accessibility.TouchExplorer$1)>
<com.android.internal.view.IInputConnectionWrapper$SomeArgs: void <init>()>
<android.net.Uri$1: android.net.Uri[] newArray(int)>
<com.android.server.pm.PackageManagerService: boolean ignoreCodePath(java.lang.String)>
<com.android.server.sip.SipSessionListenerProxy$11: void <init>(com.android.server.sip.SipSessionListenerProxy,android.net.sip.ISipSession,int)>
<android.test.ViewAsserts: void assertRightAligned(android.view.View,android.view.View)>
<android.view.MotionEvent: int nativeInitialize(int,int,int,int,int,int,int,int,float,float,float,float,long,long,int,android.view.MotionEvent$PointerProperties[],android.view.MotionEvent$PointerCoords[])>
<com.android.server.am.ServiceRecord: void postNotification()>
<android.content.Intent: android.content.Intent replaceExtras(android.content.Intent)>
<android.graphics.Rect: boolean setIntersect(android.graphics.Rect,android.graphics.Rect)>
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: android.os.BatteryStats$Timer getSensorTime()>
<com.android.internal.telephony.RIL: int translateStatus(int)>
<com.android.server.DropBoxManagerService$EntryFile: void <init>(java.io.File,java.io.File,java.lang.String,long,int,int)>
<android.view.MotionEvent: float getHistoricalY(int,int)>
<android.net.Uri$PathPart: void <init>(java.lang.String,java.lang.String)>
<android.widget.TextView$SelectionStartHandleView: int getCurrentCursorOffset()>
<java.lang.Object: android.view.MenuItem add(int,int,int,int)>
<android.content.res.Resources: android.content.res.TypedArray getCachedStyledAttributes(int)>
<com.android.internal.app.ActionBarImpl: void dispatchMenuVisibilityChanged(boolean)>
<android.net.Uri$Builder: android.net.Uri$Builder appendEncodedPath(java.lang.String)>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.CallTracker getCallTracker()>
<android.app.Activity: int getChangingConfigurations()>
<android.opengl.GLSurfaceView$LogWriter: void close()>
<com.android.internal.util.FastXmlSerializer: void flushBytes()>
<android.database.sqlite.SQLiteDatabase: android.database.sqlite.SQLiteDatabase getParentDbConnObj()>
<com.android.server.pm.PackageManagerService: int checkUidPermission(java.lang.String,int)>
<android.net.wifi.WifiNative: void closeSupplicantConnection()>
<com.android.server.pm.UserManager: android.content.pm.UserInfo createUser(java.lang.String,int,java.util.List)>
<com.android.server.DevicePolicyManagerService: void setEncryptionRequested(boolean)>
<android.app.Activity: java.lang.String savedDialogArgsKeyFor(int)>
<android.renderscript.Font: android.renderscript.Font createFromAsset(android.renderscript.RenderScript,android.content.res.Resources,java.lang.String,float)>
<android.view.accessibility.AccessibilityEvent: int getRecordCount()>
<android.app.SearchableInfo$ActionKeyInfo: int getKeyCode()>
<android.widget.ScrollBarDrawable: void setVerticalTrackDrawable(android.graphics.drawable.Drawable)>
<android.net.LocalSocket: void bind(android.net.LocalSocketAddress)>
<android.content.res.AssetManager: java.lang.String getAssetAllocations()>
<android.view.ViewRootImpl$AccessibilityInteractionController: void findAccessibilityNodeInfosByViewTextClientThread(java.lang.String,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,long)>
<com.android.server.PackageManagerBackupAgent: boolean hasMetadata()>
<android.os.WorkSource: boolean remove(android.os.WorkSource)>
<com.android.internal.telephony.DataConnection: void access$2100(com.android.internal.telephony.DataConnection,com.android.internal.util.IState)>
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: void addService(android.content.pm.PackageParser$Service)>
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingDisabledErrorState: void <init>(com.android.server.connectivity.Tethering$TetherMasterSM)>
<android.location.Location$1: void <init>()>
<android.app.ActivityManager$MemoryInfo: void <init>()>
<android.content.ContentValues: void <clinit>()>
<android.util.JsonWriter: boolean isLenient()>
<android.app.ActivityManager: int getLauncherLargeIconDensity()>
<android.gesture.GestureOverlayView: int getGestureStrokeType()>
<com.android.internal.widget.ActionBarContainer: void setTransitioning(boolean)>
<com.android.internal.os.BatteryStatsImpl: byte[] readFully(java.io.FileInputStream)>
<com.android.server.EntropyService: void scheduleEntropyWriter()>
<android.graphics.drawable.RotateDrawable: int getChangingConfigurations()>
<android.widget.AbsListView: android.graphics.drawable.Drawable getSelector()>
<android.app.ProgressDialog: void initFormats()>
<com.android.server.sip.SipSessionGroup: boolean containsSession(java.lang.String)>
<android.location.Location: float distanceTo(android.location.Location)>
<android.graphics.Canvas: void scale(float,float,float,float)>
<android.app.ISearchManager$Stub$Proxy: android.os.IBinder asBinder()>
<android.app.NativeActivity: void onStartNative(int)>
<android.app.IActivityManager$ContentProviderHolder: void <clinit>()>
<android.net.Uri$StringUri: android.net.Uri$Builder buildUpon()>
<com.android.server.pm.PackageManagerService: int getPreferredActivities(java.util.List,java.util.List,java.lang.String)>
<com.android.internal.telephony.cat.CommandDetails$1: com.android.internal.telephony.cat.CommandDetails[] newArray(int)>
<android.media.AudioRecord: int native_start()>
<android.widget.AutoCompleteTextView: void setValidator(android.widget.AutoCompleteTextView$Validator)>
<android.content.ContextWrapper: java.io.File getFileStreamPath(java.lang.String)>
<android.net.wifi.WifiStateMachine: void forgetNetwork(int)>
<android.content.pm.PackageInfoLite$1: android.content.pm.PackageInfoLite[] newArray(int)>
<com.android.server.pm.PackageManagerService$AppDirObserver: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,int,boolean)>
<android.test.mock.MockPackageManager: java.util.List getPreferredPackages(int)>
<android.webkit.LoadListener$1: void <init>(android.webkit.LoadListener,int)>
<com.android.server.wm.DimAnimator: void show(int,int)>
<GenerationGG: android.os.Environment get_androidosEnvironment()>
<android.content.res.XmlBlock$Parser: java.lang.String getInputEncoding()>
<android.renderscript.RenderScript: void rsnAssignName(int,int,byte[])>
<android.net.sip.SipProfile: int getCallingUid()>
<android.graphics.Matrix: boolean native_rectStaysRect(int)>
<android.view.textservice.SpellCheckerInfo: java.lang.String getSettingsActivity()>
<android.widget.SearchView: boolean isSubmitButtonEnabled()>
<android.widget.CursorTreeAdapter$MyCursorHelper: android.database.Cursor access$300(android.widget.CursorTreeAdapter$MyCursorHelper)>
<android.app.backup.BackupAgent: void onRestoreFile(android.os.ParcelFileDescriptor,long,java.io.File,int,long,long)>
<com.android.internal.telephony.cdma.sms.BearerData: void encodeMsgDeliveryAlert(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)>
<android.content.res.StringBlock: int[] nativeGetStyle(int,int)>
<com.android.server.pm.GrantedPermissions: void setFlags(int)>
<android.test.ClassPathPackageInfoSource: boolean isToplevelClass(java.lang.String)>
<android.speech.tts.EventLogger: void onEngineComplete()>
<android.content.res.XmlBlock$Parser: int getAttributeUnsignedIntValue(int,int)>
<com.android.internal.os.BatteryStatsImpl: void readFromParcel(android.os.Parcel)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisablingState: void <init>(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<android.renderscript.RenderScript: void rsnAllocationData1D(int,int,int,int,int,int[],int)>
<android.net.INetworkPolicyManager$Stub: android.net.INetworkPolicyManager asInterface(android.os.IBinder)>
<android.app.SearchableInfo: java.lang.String getSuggestPath()>
<android.bluetooth.BluetoothTetheringDataTracker$1: void <init>(android.bluetooth.BluetoothTetheringDataTracker)>
<android.net.wifi.WifiNative: boolean p2pGroupAdd()>
<android.net.SSLCertificateSocketFactory$1: void <init>()>
<android.renderscript.Allocation: void copyFrom(android.graphics.Bitmap)>
<android.text.TextDirectionHeuristics: void <clinit>()>
<android.view.View: void destroyDrawingCache()>
<android.content.SyncResult: void clear()>
<android.os.StrictMode: java.lang.ThreadLocal access$900()>
<android.app.ApplicationErrorReport$BatteryInfo: void writeToParcel(android.os.Parcel,int)>
<android.app.IUiModeManager$Stub: void <init>()>
<android.app.Activity: void onDetachedFromWindow()>
<com.android.internal.telephony.IccCard: void <init>(com.android.internal.telephony.PhoneBase,java.lang.String,java.lang.Boolean)>
<android.animation.ValueAnimator$AnimationHandler: void <init>(android.animation.ValueAnimator$1)>
<android.inputmethodservice.Keyboard: void computeNearestNeighbors()>
<android.view.ScaleGestureDetector: long getTimeDelta()>
<GenerationGG: android.bluetooth.BluetoothSocket get_androidbluetoothBluetoothSocket()>
<java.lang.Object: void unregisterContentObserver(android.database.ContentObserver)>
<com.android.server.am.ActivityManagerService: boolean dumpBroadcastsLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean)>
<android.view.MotionEvent: float getOrientation()>
<android.accounts.AuthenticatorDescription: void <clinit>()>
<android.view.IWindowSession$Stub: android.view.IWindowSession asInterface(android.os.IBinder)>
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: boolean allowFilterResult(android.content.pm.PackageParser$ServiceIntentInfo,java.util.List)>
<android.view.GLES20Canvas: boolean isBackBufferPreserved()>
<android.widget.RadioGroup: void setOnCheckedChangeListener(android.widget.RadioGroup$OnCheckedChangeListener)>
<android.app.Activity: java.lang.CharSequence getTitle()>
<com.android.i18n.phonenumbers.AsYouTypeFormatter: int getRememberedPosition()>
<GenerationGG: android.webkit.WebView$PictureListener get_androidwebkitWebView__PictureListener()>
<android.view.animation.Animation: void startNow()>
<android.webkit.HTML5VideoViewProxy: void doSetPoster(android.graphics.Bitmap)>
<android.util.Base64InputStream: long skip(long)>
<com.android.server.connectivity.Tethering: int tether(java.lang.String)>
<android.text.method.QwertyKeyListener: void <init>(android.text.method.TextKeyListener$Capitalize,boolean,boolean)>
<android.telephony.SignalStrength: boolean isGsm()>
<android.app.ApplicationErrorReport$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.graphics.Paint: void native_set(int,int)>
<android.view.accessibility.AccessibilityNodeInfo: void setBoundsInScreen(android.graphics.Rect)>
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getToCodeScheme()>
<android.net.Uri: boolean getBooleanQueryParameter(java.lang.String,boolean)>
<android.widget.AlphabetIndexer: void <init>(android.database.Cursor,int,java.lang.CharSequence)>
<android.renderscript.Element: android.renderscript.Element PROGRAM_VERTEX(android.renderscript.RenderScript)>
<android.view.accessibility.IAccessibilityManagerClient$Stub: android.view.accessibility.IAccessibilityManagerClient asInterface(android.os.IBinder)>
<android.server.BluetoothAdapterStateMachine: android.server.BluetoothEventLoop access$2500(android.server.BluetoothAdapterStateMachine)>
<android.view.GLES20RecordingCanvas: void drawBitmap(int[],int,int,float,float,int,int,boolean,android.graphics.Paint)>
<android.animation.ValueAnimator: android.animation.ValueAnimator ofFloat(float[])>
<java.lang.Object: boolean hasVisibleItems()>
<android.os.StrictMode$ViolationInfo: int hashCode()>
<android.test.suitebuilder.TestMethod: void <init>(junit.framework.TestCase)>
<android.media.AudioRecord: int setPositionNotificationPeriod(int)>
<android.widget.Scroller: void forceFinished(boolean)>
<android.mtp.MtpDeviceInfo: java.lang.String getVersion()>
<android.app.IServiceConnection$Stub$Proxy: android.os.IBinder asBinder()>
<android.webkit.WebView: android.graphics.Rect nativeCursorNodeBounds()>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.IccFileHandler getIccFileHandler()>
<android.renderscript.Matrix4f: void scale(float,float,float)>
<android.graphics.PointF$1: java.lang.Object[] newArray(int)>
<android.speech.tts.ITextToSpeechService$Stub$Proxy: void <init>(android.os.IBinder)>
<android.app.BackStackRecord: int commitAllowingStateLoss()>
<com.android.internal.telephony.gsm.GsmDataConnection: java.lang.String toString()>
<android.util.Log: int d(java.lang.String,java.lang.String)>
<android.os.storage.StorageManager: java.util.List access$000(android.os.storage.StorageManager)>
<com.android.internal.view.InputBindResult: void <init>(android.os.Parcel)>
<android.media.AudioService$VolumeStreamState: java.lang.String access$3600(android.media.AudioService$VolumeStreamState)>
<android.view.TextureView: boolean isOpaque()>
<android.net.LocalSocketImpl: java.io.FileDescriptor access$000(android.net.LocalSocketImpl)>
<com.android.internal.view.BaseInputHandler: void <init>()>
<android.text.style.AbsoluteSizeSpan: void <init>(int)>
<android.view.MotionEvent: float getHistoricalX(int)>
<com.android.internal.view.InputConnectionWrapper$InputContextCallback: void setTextBeforeCursor(java.lang.CharSequence,int)>
<android.content.SyncManager: int access$2400()>
<android.webkit.WebView$1: void onPostExecute(java.lang.Object)>
<android.webkit.WebViewCore: java.lang.String nativeModifySelection(int,int)>
<com.android.internal.widget.LockPatternView$SavedState: boolean isInputEnabled()>
<android.net.SSLCertificateSocketFactory: void <init>(int)>
<android.gesture.GestureUtils: void closeStream(java.io.Closeable)>
<com.android.server.PreferredComponent: void <init>(com.android.server.PreferredComponent$Callbacks,int,android.content.ComponentName[],android.content.ComponentName)>
<android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl: boolean isEnabled()>
<android.webkit.GeolocationPermissions: void nativeAllow(java.lang.String)>
<android.text.style.SpellCheckSpan: void writeToParcel(android.os.Parcel,int)>
<android.content.pm.InstrumentationInfo$1: java.lang.Object[] newArray(int)>
<android.widget.RelativeLayout: void applyHorizontalSizeRules(android.widget.RelativeLayout$LayoutParams,int)>
<android.opengl.GLException: java.lang.String getErrorString(int)>
<android.widget.TextView: int getCompoundPaddingBottom()>
<android.util.SparseBooleanArray: android.util.SparseBooleanArray clone()>
<com.android.server.PowerManagerService$LockList: int gatherState()>
<android.renderscript.FieldPacker: void addMatrix(android.renderscript.Matrix4f)>
<android.graphics.PathMeasure: void native_destroy(int)>
<android.content.res.AssetFileDescriptor: java.io.FileInputStream createInputStream()>
<android.media.audiofx.Visualizer: int getSamplingRate()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$RecoveryAction: void <init>(java.lang.String,int)>
<android.webkit.WebIconDatabase: void createHandler()>
<android.server.BluetoothAdapterStateMachine$WarmUp: void enter()>
<android.content.pm.ComponentInfo: boolean isEnabled()>
<GenerationGG: android.widget.AbsSpinner get_androidwidgetAbsSpinner()>
<com.android.internal.telephony.cat.CatResponseMessage: com.android.internal.telephony.cat.CommandDetails getCmdDetails()>
<android.view.View: boolean onTrackballEvent(android.view.MotionEvent)>
<Wrapper_android_renderscript_Sampler: void test_android_renderscript_Sampler()>
<android.webkit.JWebCoreJavaBridge: void sharedTimerFired()>
<android.webkit.WebSettings: java.lang.String getDefaultTextEncodingName()>
<android.location.LocationManager$GpsStatusListenerTransport: java.util.ArrayList access$300(android.location.LocationManager$GpsStatusListenerTransport)>
<android.graphics.BitmapFactory$Options: void <init>()>
<android.os.Debug: long getNativeHeapFreeSize()>
<android.server.BluetoothAdapterStateMachine$BluetoothOn: void enter()>
<android.media.AudioService: void unregisterMediaButtonIntent(android.app.PendingIntent,android.content.ComponentName)>
<com.android.server.location.GpsXtraDownloader: void <init>(android.content.Context,java.util.Properties)>
<android.content.ISyncContext$Stub: android.content.ISyncContext asInterface(android.os.IBinder)>
<android.speech.tts.ITextToSpeechService$Stub$Proxy: android.os.IBinder asBinder()>
<android.text.method.MetaKeyKeyListener: boolean isMetaTracker(java.lang.CharSequence,java.lang.Object)>
<android.graphics.Matrix$1: boolean postSkew(float,float)>
<android.view.accessibility.AccessibilityEvent: android.view.accessibility.AccessibilityEvent obtain()>
<android.webkit.WebViewCore: void access$5900(android.webkit.WebViewCore)>
<com.android.internal.util.HexDump: int toByte(char)>
<android.test.mock.MockContext: java.io.File getSharedPrefsFile(java.lang.String)>
<android.test.suitebuilder.TestGrouping: void <init>(java.util.Comparator)>
<Wrapper_android_test_MoreAsserts: void test_android_test_MoreAsserts()>
<android.net.wifi.p2p.WifiP2pDevice: void <init>(android.net.wifi.p2p.WifiP2pDevice)>
<android.net.http.Headers: void getHeaders(android.net.http.Headers$HeaderCallback)>
<com.android.internal.telephony.gsm.SmsMessage: byte[] encodeUCS2(java.lang.String,byte[])>
<com.android.server.usb.UsbSettingsManager: void setDevicePackage(android.hardware.usb.UsbDevice,java.lang.String)>
<android.opengl.GLES10: void glNormalPointer(int,int,java.nio.Buffer)>
<com.android.server.EntropyService: void <init>(java.lang.String,java.lang.String)>
<android.widget.PopupWindow: void <init>(android.view.View,int,int,boolean)>
<android.content.SyncManager$SyncHandler$SyncNotificationInfo: java.lang.String toString()>
<com.android.server.location.GpsLocationProvider: void native_set_agps_server(int,java.lang.String,int)>
<android.net.NetworkStatsHistory: void recordData(long,long,long,long)>
<com.android.server.location.GpsLocationProvider: void class_init_native()>
<com.android.internal.telephony.IccCardStatus$PinState: boolean isPermBlocked()>
<com.android.internal.telephony.SmsRawData: void <init>(byte[])>
<android.text.TextUtils$1: java.lang.Object[] newArray(int)>
<android.app.ContextImpl$4: java.lang.Object createService(android.app.ContextImpl)>
<android.app.Fragment: void onViewCreated(android.view.View,android.os.Bundle)>
<com.android.server.PowerManagerService: float access$5402(com.android.server.PowerManagerService,float)>
<GenerationGG: android.test.ActivityInstrumentationTestCase2 get_androidtestActivityInstrumentationTestCase2()>
<android.animation.KeyframeSet: android.animation.KeyframeSet ofKeyframe(android.animation.Keyframe[])>
<android.drm.DrmInfo: java.lang.Object get(java.lang.String)>
<android.webkit.ConsoleMessage: int lineNumber()>
<android.gesture.GestureUtils: void plot(float,float,float[],int)>
<android.media.audiofx.EnvironmentalReverb: int getReverbDelay()>
<android.view.MotionEvent: void getHistoricalPointerCoords(int,int,android.view.MotionEvent$PointerCoords)>
<android.net.UrlQuerySanitizer: void registerParameter(java.lang.String,android.net.UrlQuerySanitizer$ValueSanitizer)>
<android.animation.Keyframe$ObjectKeyframe: java.lang.Object getValue()>
<android.view.accessibility.AccessibilityRecord: void recycle()>
<android.app.ApplicationErrorReport: void <init>(android.os.Parcel)>
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener)>
<android.webkit.GeolocationPermissions: void allow(java.lang.String)>
<android.widget.AbsListView$SavedState$1: android.widget.AbsListView$SavedState[] newArray(int)>
<android.util.Slog: int e(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.accounts.AccountManagerResponse: void <clinit>()>
<com.android.server.pm.PackageManagerService: java.util.Comparator access$1000()>
<android.view.animation.AnimationSet: boolean willChangeTransformationMatrix()>
<android.net.rtp.AudioStream: void setDtmfType(int)>
<android.webkit.HTML5VideoViewProxy: android.webkit.WebView getWebView()>
<android.webkit.WebView: boolean access$4100(android.webkit.WebView)>
<com.android.internal.util.State: java.lang.String getName()>
<com.android.server.location.GpsLocationProvider: void handleEnable()>
<GenerationGG: android.app.backup.BackupHelper get_androidappbackupBackupHelper()>
<com.android.i18n.phonenumbers.PhoneNumberMatch: int hashCode()>
<android.preference.RingtonePreference: void setShowSilent(boolean)>
<android.drm.DrmRights: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<android.util.Slog: int d(java.lang.String,java.lang.String)>
<GenerationGG: android.renderscript.ProgramStore get_androidrenderscriptProgramStore()>
<com.android.internal.app.AlertController: android.os.Handler access$700(com.android.internal.app.AlertController)>
<android.widget.LinearLayout$LayoutParams: void <init>(android.view.ViewGroup$MarginLayoutParams)>
<com.android.server.wm.Session: void windowRemovedLocked()>
<android.renderscript.RenderScript: android.content.Context getApplicationContext()>
<android.webkit.WebSettings: void setDefaultTextEncodingName(java.lang.String)>
<android.content.SyncStats: void clear()>
<android.location.Location: boolean access$702(android.location.Location,boolean)>
<android.webkit.CallbackProxy$3: void <init>(android.webkit.CallbackProxy,android.webkit.JsResult)>
<android.os.Messenger: void <init>(android.os.Handler)>
<android.app.ActivityThread$NewIntentData: java.lang.String toString()>
<android.os.Parcel: void writeLong(long)>
<android.graphics.ImageFormat: int getBitsPerPixel(int)>
<android.view.View$TransformationInfo: android.graphics.Matrix access$1002(android.view.View$TransformationInfo,android.graphics.Matrix)>
<android.webkit.WebViewCore: boolean access$7402(android.webkit.WebViewCore,boolean)>
<android.webkit.HTML5VideoInline: int getTextureName()>
<android.view.ViewTreeObserver: void checkIsAlive()>
<android.net.Uri: java.lang.String toSafeString()>
<android.test.suitebuilder.annotation.HasClassAnnotation: boolean apply(android.test.suitebuilder.TestMethod)>
<android.app.BackStackRecord$Op: void <init>()>
<android.graphics.Path: int ni()>
<android.app.SearchableInfo: java.lang.String getSuggestIntentAction()>
<android.view.animation.Transformation: void <clinit>()>
<Wrapper_android_media_effect_Effect: void test_android_media_effect_Effect()>
<GenerationGG: android.app.TabActivity get_androidappTabActivity()>
<android.hardware.usb.UsbAccessory: java.lang.String getModel()>
<android.text.format.DateFormat: java.text.DateFormat getLongDateFormat(android.content.Context)>
<com.android.server.WifiService$LockList: void addLock(com.android.server.WifiService$WifiLock)>
<android.os.ParcelFormatException: void <init>(java.lang.String)>
<android.app.ProgressDialog: int getMax()>
<com.android.internal.telephony.sip.SipCommandInterface: void acknowledgeLastIncomingCdmaSms(boolean,int,android.os.Message)>
<android.graphics.RectF: void <init>()>
<android.widget.AbsSeekBar: void onKeyChange()>
<com.android.internal.util.Predicates: com.android.internal.util.Predicate not(com.android.internal.util.Predicate)>
<android.net.NetworkStats: long getElapsedRealtime()>
<android.net.sip.SipProfile: javax.sip.address.Address getSipAddress()>
<android.bluetooth.BluetoothDeviceProfileState: int access$900(android.bluetooth.BluetoothDeviceProfileState)>
<android.widget.GridLayout: boolean isColumnOrderPreserved()>
<android.webkit.URLUtil: java.lang.String stripAnchor(java.lang.String)>
<android.net.wifi.WifiInfo: void setExplicitConnect(boolean)>
<android.net.http.Headers: java.lang.String getContentDisposition()>
<android.net.NetworkUtils: boolean runDhcpRenew(java.lang.String,android.net.DhcpInfoInternal)>
<android.app.Activity: void onChildTitleChanged(android.app.Activity,java.lang.CharSequence)>
<com.android.server.PowerManagerService: void lightSensorChangedLocked(int)>
<com.android.internal.view.menu.MenuItemImpl: boolean requiresActionButton()>
<android.net.LinkProperties: android.net.LinkProperties$CompareResult compareDnses(android.net.LinkProperties)>
<android.webkit.Network: java.lang.String getProxyHostname()>
<android.widget.CursorAdapter: boolean hasStableIds()>
<android.view.ViewGroup$MarginLayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<android.graphics.NinePatch: void validateNinePatchChunk(int,byte[])>
<com.android.internal.telephony.Call$State: com.android.internal.telephony.Call$State[] values()>
<android.widget.TextView$DragLocalState: void <init>(android.widget.TextView,int,int)>
<com.android.server.am.BroadcastFilter: void dumpInReceiverList(java.io.PrintWriter,android.util.Printer,java.lang.String)>
<android.widget.ZoomButtonsController: boolean isVisible()>
<android.text.style.RelativeSizeSpan: void updateMeasureState(android.text.TextPaint)>
<GenerationGG: android.sax.Element get_androidsaxElement()>
<android.os.Parcel: byte readByte()>
<Wrapper_android_test_ApplicationTestCase: void test_android_test_ApplicationTestCase()>
<android.content.pm.ResolveInfo: void <clinit>()>
<android.content.pm.PackageParser$Component: java.lang.String getComponentShortName()>
<android.app.Activity: void setProgressBarIndeterminateVisibility(boolean)>
<android.nfc.tech.MifareClassic: void validateSector(int)>
<android.service.wallpaper.IWallpaperConnection$Stub$Proxy: android.os.IBinder asBinder()>
<android.media.effect.EffectFactory: void <clinit>()>
<android.app.ActivityManager$RunningServiceInfo: void <init>(android.os.Parcel)>
<android.media.RemoteControlClient: void <init>(android.app.PendingIntent,android.os.Looper)>
<com.android.internal.telephony.IccCardStatus$PinState: void <clinit>()>
<com.android.internal.util.StateMachine$ProcessedMessageInfo: void update(android.os.Message,com.android.internal.util.State,com.android.internal.util.State)>
<com.android.internal.backup.IBackupTransport$Stub$Proxy: void <init>(android.os.IBinder)>
<android.app.PendingIntent$1: java.lang.Object[] newArray(int)>
<android.renderscript.BaseObj: int getID()>
<com.android.internal.view.InputConnectionWrapper$InputContextCallback: com.android.internal.view.InputConnectionWrapper$InputContextCallback access$000()>
<com.android.server.am.IntentBindRecord: java.lang.String toString()>
<com.android.internal.telephony.sip.SipCommandInterface: void setGsmBroadcastConfig(com.android.internal.telephony.gsm.SmsBroadcastConfigInfo[],android.os.Message)>
<android.content.res.XmlBlock$Parser: float getAttributeFloatValue(int,float)>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator ofInt(java.lang.Object,android.util.Property,int[])>
<android.util.JsonReader: boolean isLenient()>
<android.webkit.GeolocationPermissions$2: void <init>(android.webkit.GeolocationPermissions)>
<android.hardware.usb.UsbRequest: void <init>()>
<android.net.LocalSocketImpl: void close()>
<android.media.audiofx.Visualizer: int getCaptureSize()>
<com.android.internal.telephony.sip.SipPhone$SipConnection: boolean getMute()>
<android.app.Dialog: android.view.View onCreatePanelView(int)>
<android.server.BluetoothAdapterStateMachine: void access$1300(android.server.BluetoothAdapterStateMachine,com.android.internal.util.IState)>
<android.content.IntentSender$1: android.content.IntentSender createFromParcel(android.os.Parcel)>
<android.renderscript.ProgramStore: void <init>(int,android.renderscript.RenderScript)>
<android.webkit.WebView: void setFindIsUp(boolean)>
<com.android.server.RandomBlock: void toFile(java.lang.String,boolean)>
<android.os.AsyncTask$4: void <clinit>()>
<android.view.animation.Transformation: void toShortString(java.lang.StringBuilder)>
<android.location.Country$1: void <init>()>
<android.net.wifi.WifiWatchdogStateMachine$2: void onChange(boolean)>
<android.graphics.Matrix: void native_mapPoints(int,float[],int,float[],int,int,boolean)>
<android.graphics.Picture: void <init>(android.graphics.Picture)>
<android.database.sqlite.SQLiteBindOrColumnIndexOutOfRangeException: void <init>()>
<android.graphics.ColorMatrix: float[] getArray()>
<android.util.SparseBooleanArray: void <init>()>
<com.android.internal.view.menu.MenuBuilder: boolean isQwertyMode()>
<android.util.Log: int e(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.widget.SearchView: void setMaxWidth(int)>
<android.graphics.Path: void <init>()>
<android.app.ContextImpl: java.io.File getDatabasePath(java.lang.String)>
<android.location.Address: void clearLatitude()>
<com.android.server.location.GpsLocationProvider: boolean requiresSatellite()>
<android.widget.TextView$SelectionModifierCursorController: int getMinTouchOffset()>
<GenerationGG: android.app.Instrumentation$ActivityResult get_androidappInstrumentation__ActivityResult()>
<android.media.AudioRecord: int native_set_marker_pos(int)>
<android.preference.Preference: boolean shouldDisableDependents()>
<android.location.Location: boolean access$902(android.location.Location,boolean)>
<com.android.internal.telephony.cdma.sms.BearerData$TimeStamp: void <init>()>
<com.android.internal.util.StateMachine$SmHandler: void access$900(com.android.internal.util.StateMachine$SmHandler,com.android.internal.util.State)>
<android.os.UEventObserver: void <clinit>()>
<android.webkit.WebView: void dumpRenderTree(boolean)>
<android.graphics.PathMeasure: boolean getMatrix(float,android.graphics.Matrix,int)>
<android.hardware.usb.UsbDeviceConnection: void <init>(android.hardware.usb.UsbDevice)>
<android.test.suitebuilder.TestGrouping: int hashCode()>
<android.graphics.drawable.ColorDrawable$ColorState: android.graphics.drawable.Drawable newDrawable(android.content.res.Resources)>
<android.graphics.Matrix$1: boolean preRotate(float,float,float)>
<com.android.server.pm.Settings: void readPreferredActivitiesLPw(org.xmlpull.v1.XmlPullParser)>
<com.android.server.pm.PackageManagerService$DumpState: void <init>()>
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void <init>(android.util.Property,android.animation.IntKeyframeSet)>
<com.android.internal.view.menu.MenuItemImpl: void setIsActionButton(boolean)>
<android.graphics.Bitmap: int getDensity()>
<android.text.AlteredCharSequence: void <init>(java.lang.CharSequence,char[],int,int,android.text.AlteredCharSequence$1)>
<android.util.Base64$Decoder: boolean process(byte[],int,int,boolean)>
<android.content.AsyncQueryHandler: void cancelOperation(int)>
<android.net.wifi.WifiStateMachine: void setNetworkDetailedState(android.net.NetworkInfo$DetailedState)>
<com.android.server.pm.PackageVerificationState: boolean setVerifierResponse(int,int)>
<com.android.server.ThrottleService: android.os.Handler access$300(com.android.server.ThrottleService)>
<GenerationGG: android.content.pm.ComponentInfo get_androidcontentpmComponentInfo()>
<android.graphics.Region: void nativeDestructor(int)>
<android.net.sip.ISipService$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.server.usb.UsbDeviceManager: void setMassStorageBackingFile(java.lang.String)>
<android.widget.NumberPicker: void dispatchDraw(android.graphics.Canvas)>
<com.android.internal.location.DummyLocationProvider: void setAccuracy(int)>
<android.content.res.Resources: int[] getIntArray(int)>
<android.graphics.BlurMaskFilter: int nativeConstructor(float,int)>
<android.graphics.BitmapRegionDecoder: void checkRecycled(java.lang.String)>
<com.android.server.am.ActivityManagerService: long[] getProcessPss(int[])>
<android.view.ViewRootImpl: android.view.Surface access$500(android.view.ViewRootImpl)>
<android.test.mock.MockContext: java.io.File getObbDir()>
<com.android.server.VibratorService: android.os.PowerManager$WakeLock access$900(com.android.server.VibratorService)>
<android.text.Annotation: int getSpanTypeId()>
<android.widget.Space: void onMeasure(int,int)>
<com.android.server.am.ActivityManagerService: void overridePendingTransition(android.os.IBinder,java.lang.String,int,int)>
<android.widget.Gallery: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.media.AudioRecord$NativeEventHandler: void <init>(android.media.AudioRecord,android.media.AudioRecord,android.os.Looper)>
<com.android.internal.widget.ScrollingTabContainerView: void <clinit>()>
<android.view.PointerIcon$1: android.view.PointerIcon[] newArray(int)>
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getLastKnownLocationBasedCountry()>
<android.net.http.RequestQueue: android.content.Context access$000(android.net.http.RequestQueue)>
<android.database.sqlite.SQLiteDatabase: void checkLockHoldTime()>
<android.widget.TextView: int getLineHeight()>
<android.filterfw.core.FrameFormat: int calcSize(int[])>
<junit.framework.TestCase: void assertEquals(char,char)>
<android.app.Activity: boolean onCreateThumbnail(android.graphics.Bitmap,android.graphics.Canvas)>
<com.android.server.location.PassiveProvider: boolean isEnabled()>
<android.content.pm.PackageParser: android.content.pm.InstrumentationInfo generateInstrumentationInfo(android.content.pm.PackageParser$Instrumentation,int)>
<com.android.server.PowerManagerService$7: void <init>(com.android.server.PowerManagerService)>
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: long getItemId(int)>
<android.webkit.WebTextView: boolean onTrackballEvent(android.view.MotionEvent)>
<android.graphics.PathDashPathEffect: int nativeCreate(int,float,float,int)>
<android.view.ViewRootImpl$TakenSurfaceHolder: void onRelayoutContainer()>
<android.gesture.GesturePoint: android.gesture.GesturePoint deserialize(java.io.DataInputStream)>
<com.android.server.pm.PackageManagerService: void <clinit>()>
<android.view.animation.AnimationSet: void initializeInvalidateRegion(int,int,int,int)>
<com.android.server.location.GpsLocationProvider: boolean requiresCell()>
<android.speech.tts.SynthesisMessageParams: int getType()>
<android.view.MotionEvent: void nativeScale(int,float)>
<android.graphics.drawable.GradientDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<android.graphics.PaintFlagsDrawFilter: int nativeConstructor(int,int)>
<com.android.internal.util.AsyncChannel: int connectSync(android.content.Context,android.os.Handler,android.os.Messenger)>
<android.database.MatrixCursor: java.lang.Object get(int)>
<com.android.server.Watchdog: void addMonitor(com.android.server.Watchdog$Monitor)>
<android.bluetooth.BluetoothInputStream: void close()>
<android.net.wifi.p2p.WifiP2pDevice: boolean equals(java.lang.Object)>
<android.util.LocaleUtil: void <clinit>()>
<android.webkit.WebIconDatabase$EventHandler$IconResult: void dispatch()>
<android.database.ContentObservable: void registerObserver(android.database.ContentObserver)>
<android.renderscript.RenderScript: void nContextResume()>
<android.test.ClassPathPackageInfo: void addTopLevelClassesTo(java.util.Set)>
<android.app.ActivityManager$RunningAppProcessInfo: void <init>(android.os.Parcel)>
<com.android.internal.telephony.DriverCall$State: void <init>(java.lang.String,int)>
<android.view.LayoutInflater$BlinkLayout: boolean access$102(android.view.LayoutInflater$BlinkLayout,boolean)>
<android.nfc.Tag: int getServiceHandle()>
<android.inputmethodservice.Keyboard: int access$400(android.inputmethodservice.Keyboard)>
<android.speech.tts.FileSynthesisCallback: void closeFile()>
<android.location.GeocoderParams$1: void <init>()>
<android.text.TextDirectionHeuristics$AnyStrong: android.text.TextDirectionHeuristics$TriState checkRtl(char[],int,int)>
<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs access$2500(com.android.server.pm.PackageManagerService,android.net.Uri,int,java.lang.String,java.lang.String)>
<com.android.server.am.ActivityManagerService: android.content.ComponentName getCallingActivity(android.os.IBinder)>
<com.android.server.sip.SipSessionListenerProxy$12: void <init>(com.android.server.sip.SipSessionListenerProxy,android.net.sip.ISipSession,int,java.lang.String)>
<android.renderscript.RenderScript: void rsnProgramBindConstants(int,int,int,int)>
<android.net.wifi.IWifiManager$Stub$Proxy: android.os.IBinder asBinder()>
<android.net.sip.SipSession$Listener: void onCalling(android.net.sip.SipSession)>
<android.view.View: void <init>()>
<android.inputmethodservice.KeyboardView$3: void swipeUp()>
<android.webkit.WebView$ProxyReceiver: void <init>()>
<android.widget.HorizontalScrollView: int computeHorizontalScrollRange()>
<android.preference.PreferenceManager: void setSharedPreferencesName(java.lang.String)>
<android.app.SearchableInfo: boolean useBadgeIcon()>
<android.app.ContextImpl: java.io.File getObbDir()>
<android.view.ViewTreeObserver: boolean hasComputeInternalInsetsListeners()>
<android.text.DynamicLayout: int getEllipsizedWidth()>
<android.speech.tts.MessageParams: void <init>(android.speech.tts.TextToSpeechService$UtteranceCompletedDispatcher,java.lang.String)>
<com.android.internal.telephony.ServiceStateTracker: void unregisterForRoamingOn(android.os.Handler)>
<android.content.ContentProviderResult: void <init>(int)>
<android.content.ClipData: android.content.ClipData newIntent(java.lang.CharSequence,android.content.Intent)>
<android.widget.ActivityChooserModel$ActivityResolveInfo: int hashCode()>
<android.net.sip.SimpleSessionDescription$Fields: int find(java.lang.String,char)>
<android.hardware.usb.UsbInterface$1: android.hardware.usb.UsbInterface[] newArray(int)>
<android.graphics.Paint: android.graphics.Typeface setTypeface(android.graphics.Typeface)>
<com.android.server.NetworkManagementService$NetdCallbackReceiver: void <init>(com.android.server.NetworkManagementService)>
<android.content.pm.ConfigurationInfo$1: android.content.pm.ConfigurationInfo[] newArray(int)>
<android.os.MemoryFile: int length()>
<android.webkit.WebView$InnerScrollChangedListener: void onScrollChanged()>
<com.android.internal.util.StateMachine$SmHandler: void transitionTo(com.android.internal.util.IState)>
<android.graphics.Path$FillType: void <init>(java.lang.String,int,int)>
<android.app.WallpaperManager: java.lang.String access$200()>
<android.view.animation.Transformation: float getAlpha()>
<android.view.SurfaceSession: void init()>
<Wrapper_android_graphics_PaintFlagsDrawFilter: void test_android_graphics_PaintFlagsDrawFilter()>
<DumbClass: void DumbMethod53()>
<android.view.GLES20RecordingCanvas: void drawText(java.lang.String,int,int,float,float,android.graphics.Paint)>
<android.text.Layout: int getLineVisibleEnd(int,int,int)>
<android.graphics.drawable.Drawable: int getChangingConfigurations()>
<com.android.server.sip.SipSessionListenerProxy$10: void <init>(com.android.server.sip.SipSessionListenerProxy,android.net.sip.ISipSession)>
<android.test.mock.MockContext: java.io.File getExternalFilesDir(java.lang.String)>
<com.android.server.StatusBarManagerService: void updateUiVisibilityLocked(int)>
<android.location.LocationManager$ListenerTransport$1: void <init>(android.location.LocationManager$ListenerTransport,android.location.LocationManager)>
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: com.android.internal.telephony.SmsMessageBase$TextEncodingDetails calculateLength(java.lang.CharSequence,boolean)>
<com.android.server.connectivity.Tethering: java.lang.String[] access$3200(com.android.server.connectivity.Tethering)>
<android.widget.ScrollView: int getMaxScrollAmount()>
<com.android.internal.widget.ScrollingTabContainerView$TabAdapter: void <init>(com.android.internal.widget.ScrollingTabContainerView,com.android.internal.widget.ScrollingTabContainerView$1)>
<com.android.server.sip.SipHelper: java.lang.String getCallId(javax.sip.Transaction)>
<android.app.ActivityThread: void scheduleContextCleanup(android.app.ContextImpl,java.lang.String,java.lang.String)>
<android.view.View: void onCreateContextMenu(android.view.ContextMenu)>
<android.os.RemoteCallback: int describeContents()>
<android.graphics.Rect: void <clinit>()>
<android.opengl.ETC1Util: void loadTexture(int,int,int,int,int,java.io.InputStream)>
<android.util.PrintStreamPrinter: void println(java.lang.String)>
<android.media.ThumbnailUtils: android.graphics.Bitmap extractThumbnail(android.graphics.Bitmap,int,int,int)>
<android.view.ViewRootImpl: void invalidateChild(android.view.View,android.graphics.Rect)>
<com.android.internal.view.menu.MenuItemImpl: android.view.ContextMenu$ContextMenuInfo getMenuInfo()>
<android.util.SparseIntArray: void delete(int)>
<android.view.Surface: void <init>(android.os.Parcel)>
<com.android.internal.telephony.Call$State: boolean isRinging()>
<android.view.TextureView: void nUnlockCanvasAndPost(int,android.graphics.Canvas)>
<android.view.ViewGroup: android.view.ViewGroup$TouchTarget getTouchTarget(android.view.View)>
<com.android.server.VibratorService: void unlinkVibration(com.android.server.VibratorService$Vibration)>
<android.util.DisplayMetrics: void setToDefaults()>
<android.server.BluetoothHealthProfileHandler$HealthChannel: java.lang.String access$1500(android.server.BluetoothHealthProfileHandler$HealthChannel)>
<android.test.ViewAsserts: void assertHorizontalCenterAligned(android.view.View,android.view.View)>
<android.renderscript.Matrix4f: void loadProjectionNormalized(int,int)>
<android.widget.TextView: int access$2500(android.widget.TextView)>
<GenerationGG: android.webkit.SslErrorHandler get_androidwebkitSslErrorHandler()>
<android.net.UrlQuerySanitizer: java.lang.String getValue(java.lang.String)>
<android.view.MotionEvent: int getToolType(int)>
<com.android.internal.telephony.cdma.CdmaCallWaitingNotification: java.lang.String toString()>
<android.content.SyncStatusInfo: int getLastFailureMesgAsInt(int)>
<android.widget.AdapterViewAnimator: void onRemoteAdapterDisconnected()>
<android.animation.FloatKeyframeSet: android.animation.KeyframeSet clone()>
<android.telephony.SmsManager: void <init>()>
<android.net.wifi.WpsResult: java.lang.String toString()>
<GenerationGG: android.net.wifi.p2p.WifiP2pGroup get_androidnetwifip2pWifiP2pGroup()>
<com.android.internal.util.StateMachine$SmHandler$StateInfo: void <init>(com.android.internal.util.StateMachine$SmHandler,com.android.internal.util.StateMachine$1)>
<GenerationGG: java.lang.CharSequence get_javalangCharSequence()>
<Wrapper_android_util_SparseIntArray: void test_android_util_SparseIntArray()>
<android.text.style.AlignmentSpan$Standard: int describeContents()>
<com.android.server.IntentResolver: java.util.Iterator filterIterator()>
<com.android.server.am.AppErrorResult: int get()>
<com.android.internal.view.menu.ListMenuItemView: void setForceShowIcon(boolean)>
<android.opengl.GLES10: void glTexCoordPointer(int,int,int,java.nio.Buffer)>
<android.net.Uri$StringUri: java.lang.String getFragment()>
<android.view.inputmethod.InputConnectionWrapper: void <init>(android.view.inputmethod.InputConnection,boolean)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: void readExternal(java.io.ObjectInput)>
<android.graphics.drawable.DrawableContainer: void setEnterFadeDuration(int)>
<com.android.server.am.UsageStatsService: void checkFileLimitFLOCK()>
<android.server.search.SearchManagerService$BootCompletedReceiver: void onReceive(android.content.Context,android.content.Intent)>
<junit.runner.BaseTestRunner: junit.runner.TestSuiteLoader getLoader()>
<android.os.TokenWatcher: java.lang.String access$200(android.os.TokenWatcher)>
<com.android.server.ThrottleService: boolean access$1900(com.android.server.ThrottleService)>
<com.android.server.ConnectivityService$MyHandler: void <init>(com.android.server.ConnectivityService,android.os.Looper)>
<android.media.MediaMetadataRetriever: void setDataSource(java.lang.String,java.util.Map)>
<android.gesture.GestureStore: java.util.ArrayList recognize(android.gesture.Gesture)>
<android.webkit.WebView: void replaceTextfieldText(int,int,java.lang.String,int,int)>
<android.app.IServiceConnection$Stub: void <init>()>
<android.telephony.PhoneStateListener: void onCallForwardingIndicatorChanged(boolean)>
<com.android.server.connectivity.Tethering$TetherMasterSM: int access$2904(com.android.server.connectivity.Tethering$TetherMasterSM)>
<android.content.pm.VerifierDeviceIdentity: void <init>(long)>
<com.android.server.usb.UsbDeviceManager: java.lang.String removeFunction(java.lang.String,java.lang.String)>
<android.app.Instrumentation: void stopProfiling()>
<android.bluetooth.IBluetoothStateChangeCallback$Stub$Proxy: void <init>(android.os.IBinder)>
<android.renderscript.FieldPacker: void addI32(android.renderscript.Int3)>
<android.app.DialogFragment: void onAttach(android.app.Activity)>
<android.widget.PopupWindow: void setSplitTouchEnabled(boolean)>
<android.net.http.CertificateChainValidator: void <clinit>()>
<android.renderscript.Type: int getZ()>
<android.widget.TextView: android.view.ActionMode access$5302(android.widget.TextView,android.view.ActionMode)>
<android.view.GLES20Canvas: int save(int)>
<android.net.Uri$StringUri: int findFragmentSeparator()>
<GenerationGG: android.media.audiofx.Virtualizer get_androidmediaaudiofxVirtualizer()>
<android.server.BluetoothBondState: boolean isAutoPairingAttemptsInProgress(java.lang.String)>
<android.test.SyncBaseInstrumentation: void <init>()>
<android.net.ProxyProperties: void setExclusionList(java.lang.String)>
<android.widget.SearchView: void setOnCloseListener(android.widget.SearchView$OnCloseListener)>
<android.view.ContextThemeWrapper: void onApplyThemeResource(android.content.res.Resources$Theme,int,boolean)>
<android.location.Address: java.lang.String access$902(android.location.Address,java.lang.String)>
<android.widget.SearchView: android.widget.CursorAdapter getSuggestionsAdapter()>
<android.view.accessibility.AccessibilityRecord: void setBooleanProperty(int,boolean)>
<android.mtp.MtpDevice: android.mtp.MtpDeviceInfo getDeviceInfo()>
<com.android.internal.telephony.cat.Duration$TimeUnit: void <init>(java.lang.String,int,int)>
<android.widget.OverScroller$SplineOverScroller: void onEdgeReached()>
<android.graphics.Rect: int centerX()>
<android.telephony.PhoneNumberUtils: java.lang.String stripSeparators(java.lang.String)>
<com.android.server.wm.WindowState: boolean isOnScreen()>
<com.android.server.location.PassiveProvider: void addListener(int)>
<android.webkit.CallbackProxy$10: void onClick(android.content.DialogInterface,int)>
<android.location.Address: boolean hasLongitude()>
<com.android.internal.telephony.cat.TextMessage$1: void <init>()>
<android.widget.GridLayout$LayoutParams: void reInitSuper(android.content.Context,android.util.AttributeSet)>
<android.test.suitebuilder.TestSuiteBuilder: void <init>(java.lang.String,java.lang.ClassLoader)>
<GenerationGG: android.accounts.AbstractAccountAuthenticator get_androidaccountsAbstractAccountAuthenticator()>
<android.webkit.ZoomManager: void <clinit>()>
<com.android.internal.widget.LockPatternView: com.android.internal.widget.LockPatternView$Cell checkForNewHit(float,float)>
<android.renderscript.Element: android.renderscript.Element MATRIX_2X2(android.renderscript.RenderScript)>
<android.net.wifi.WifiWatchdogStateMachine$DnsCheckingState: boolean shouldCheckWalledGarden()>
<android.net.http.RequestHandle: void cancel()>
<android.test.mock.MockContentProvider: void attachInfo(android.content.Context,android.content.pm.ProviderInfo)>
<android.renderscript.FileA3D$EntryType: void <clinit>()>
<com.android.internal.telephony.cdma.sms.BearerData: void decodeIs91ShortMessage(com.android.internal.telephony.cdma.sms.BearerData)>
<android.content.AsyncTaskLoader: void onForceLoad()>
<Wrapper_android_media_audiofx_AudioEffect: void test_android_media_audiofx_AudioEffect()>
<android.view.ViewRootImpl$RunQueue$HandlerAction: boolean equals(java.lang.Object)>
<com.android.server.am.PendingIntentRecord$Key: java.lang.String toString()>
<android.app.ActivityThread: java.lang.String getProfileFilePath()>
<android.widget.Filter: java.lang.Object access$300(android.widget.Filter)>
<android.media.MediaPlayer: void setScreenOnWhilePlaying(boolean)>
<com.android.internal.telephony.SmsUsageMonitor: void dispose()>
<android.net.wifi.p2p.WifiP2pDevice$1: java.lang.Object[] newArray(int)>
<android.gesture.GestureLibrary: int getSequenceType()>
<android.graphics.Rect: boolean intersect(android.graphics.Rect)>
<com.android.internal.telephony.MccTable: java.lang.String defaultTimeZoneForMcc(int)>
<android.database.sqlite.SQLiteProgram: void native_bind_blob(int,byte[])>
<android.view.inputmethod.ExtractedTextRequest: void <clinit>()>
<android.server.BluetoothEventLoop: java.util.HashMap getPasskeyAgentRequestData()>
<com.android.internal.os.BatteryStatsImpl$Uid: void readFromParcelLocked(java.util.ArrayList,android.os.Parcel)>
<com.android.internal.view.BaseIWindow: void closeSystemDialogs(java.lang.String)>
<com.android.server.IntentResolver: void removeFilterInternal(android.content.IntentFilter)>
<android.widget.StackView$StackSlider: void <init>(android.widget.StackView,android.widget.StackView$StackSlider)>
<android.content.pm.PermissionInfo: int describeContents()>
<android.server.BluetoothAdapterStateMachine: void access$2800(android.server.BluetoothAdapterStateMachine,com.android.internal.util.IState)>
<android.webkit.LoadListener: boolean authCredentialsInvalid()>
<android.database.sqlite.SQLiteProgram: void release()>
<android.graphics.Paint: int native_setPathEffect(int,int)>
<android.net.wifi.WifiStateMachine: void access$8700(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.drm.DrmManagerClient: android.drm.DrmInfoStatus access$100(android.drm.DrmManagerClient,int,android.drm.DrmInfo)>
<android.webkit.WebView: void access$9600(android.webkit.WebView,java.util.ArrayList)>
<java.lang.Object: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.net.RouteInfo: int describeContents()>
<android.speech.IRecognitionService$Stub: android.speech.IRecognitionService asInterface(android.os.IBinder)>
<android.filterfw.core.StreamPort: java.lang.String toString()>
<com.android.internal.telephony.cat.CommandParamsFactory: com.android.internal.telephony.cat.ComprehensionTlv searchForTag(com.android.internal.telephony.cat.ComprehensionTlvTag,java.util.List)>
<android.accounts.AccountManager: java.lang.Exception access$400(android.accounts.AccountManager,int,java.lang.String)>
<android.view.ViewConfiguration: int getFadingEdgeLength()>
<android.widget.RemoteViews: void setDouble(int,java.lang.String,double)>
<android.util.StateSet: boolean stateSetMatches(int[],int)>
<GenerationGG: android.hardware.usb.UsbAccessory get_androidhardwareusbUsbAccessory()>
<GenerationGG: java.util.Date get_javautilDate()>
<android.renderscript.RenderScript: int rsnFileA3DGetNumIndexEntries(int,int)>
<android.net.wifi.WifiWatchdogStateMachine: boolean access$3000(android.net.wifi.WifiWatchdogStateMachine)>
<com.android.internal.telephony.IccCardStatus: com.android.internal.telephony.IccCardApplication getApplication(int)>
<android.view.WindowManagerImpl: int findViewLocked(android.view.View,boolean)>
<android.net.NetworkStats: void writeToParcel(android.os.Parcel,int)>
<android.inputmethodservice.KeyboardView: void swipeLeft()>
<android.content.Loader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.widget.ActivityChooserView: android.widget.FrameLayout access$1000(android.widget.ActivityChooserView)>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getText()>
<android.view.ViewGroup: void setLayoutTransition(android.animation.LayoutTransition)>
<android.net.sip.SipAudioCall: android.net.sip.SipSession access$602(android.net.sip.SipAudioCall,android.net.sip.SipSession)>
<com.android.internal.telephony.cdma.sms.BearerData: boolean decodeUserData(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)>
<android.view.inputmethod.ExtractedText$1: void <init>()>
<com.android.internal.app.AlertController: boolean canTextInput(android.view.View)>
<android.text.method.PasswordTransformationMethod$PasswordCharSequence: void <init>(java.lang.CharSequence)>
<android.widget.NumberPicker: void sendAccessibilityEvent(int)>
<com.android.server.pm.PackageManagerService: java.lang.String getInstallerPackageName(java.lang.String)>
<android.app.ContextImpl$31: void <init>()>
<android.net.LinkAddress: java.net.InetAddress getAddress()>
<android.text.style.AlignmentSpan$Standard: void writeToParcel(android.os.Parcel,int)>
<android.view.View: int getRightPaddingOffset()>
<android.widget.Gallery: boolean getChildStaticTransformation(android.view.View,android.view.animation.Transformation)>
<android.media.AudioService: boolean isCurrentRcController(android.app.PendingIntent)>
<com.android.server.sip.SipService: boolean access$500(com.android.server.sip.SipService)>
<android.webkit.ConsoleMessage: java.lang.String message()>
<android.view.KeyCharacterMap: char getMatch(int,char[])>
<com.android.server.location.LocationBasedCountryDetector$1: void onStatusChanged(java.lang.String,int,android.os.Bundle)>
<android.net.MobileDataStateTracker: android.net.NetworkInfo access$300(android.net.MobileDataStateTracker)>
<GenerationGG: android.util.DebugUtils get_androidutilDebugUtils()>
<com.android.server.NetworkManagementService: java.lang.String getSecurityType(android.net.wifi.WifiConfiguration)>
<android.preference.MultiSelectListPreference$SavedState$1: java.lang.Object[] newArray(int)>
<android.net.wifi.WifiWatchdogStateMachine: long access$3300(long,java.lang.Long)>
<android.filterfw.core.FrameFormat: java.lang.String dimensionsToString(int[])>
<GenerationGG: android.widget.CalendarView$OnDateChangeListener get_androidwidgetCalendarView__OnDateChangeListener()>
<com.android.internal.view.BaseSurfaceHolder: void removeCallback(android.view.SurfaceHolder$Callback)>
<android.sax.Children$Child: void <init>(android.sax.Element,java.lang.String,java.lang.String,int,int)>
<com.android.server.sip.SipSessionListenerProxy: android.net.sip.ISipSessionListener getListener()>
<com.android.internal.telephony.MccTable: java.lang.String defaultLanguageForMcc(int)>
<android.test.AndroidTestRunner: void setTest(junit.framework.Test)>
<com.android.internal.os.BatteryStatsImpl: void noteStartSensorLocked(int,int)>
<android.media.MediaRecorder$EventHandler: void <init>(android.media.MediaRecorder,android.media.MediaRecorder,android.os.Looper)>
<android.net.wifi.WifiStateMachine: android.app.AlarmManager access$13400(android.net.wifi.WifiStateMachine)>
<GenerationGG: android.app.FragmentManager get_androidappFragmentManager()>
<android.drm.DrmManagerClient: android.drm.DrmManagerClient$OnErrorListener access$600(android.drm.DrmManagerClient)>
<android.content.ComponentName: android.content.ComponentName clone()>
<android.renderscript.RenderScript: void rsnProgramBindSampler(int,int,int,int)>
<android.widget.TextView$InputMethodState: void <init>(android.widget.TextView)>
<android.inputmethodservice.InputMethodService: boolean getCurrentInputStarted()>
<com.android.internal.telephony.IccCard: void updateStateProperty()>
<android.database.sqlite.SQLiteDatabase: void unlockForced()>
<android.view.GestureDetector: android.view.GestureDetector$OnDoubleTapListener access$300(android.view.GestureDetector)>
<GenerationGG: android.webkit.WebChromeClient get_androidwebkitWebChromeClient()>
<com.android.internal.os.BatteryStatsImpl$StopwatchTimer: void <init>(com.android.internal.os.BatteryStatsImpl$Uid,int,java.util.ArrayList,java.util.ArrayList)>
<android.server.BluetoothHealthProfileHandler: void <init>(android.content.Context,android.server.BluetoothService)>
<android.media.CameraProfile: int getJpegEncodingQualityParameter(int,int)>
<android.widget.ExpandableListConnector: long getItemId(int)>
<android.hardware.Camera: void native_autoFocus()>
<android.view.AbsSavedState: void <clinit>()>
<com.android.internal.telephony.IccCardStatus: java.lang.String toString()>
<com.android.internal.telephony.SmsMessageBase: java.lang.String getServiceCenterAddress()>
<com.android.server.ConnectivityService: boolean access$2600(com.android.server.ConnectivityService)>
<android.os.StrictMode: android.os.StrictMode$VmPolicy getVmPolicy()>
<com.android.internal.telephony.BaseCommands: void unregisterForCallWaitingInfo(android.os.Handler)>
<android.app.backup.RestoreSet$1: android.app.backup.RestoreSet[] newArray(int)>
<com.android.server.wm.WindowManagerService: void makeWindowFreezingScreenIfNeededLocked(com.android.server.wm.WindowState)>
<android.content.pm.PackageParser$Permission: void <init>(android.content.pm.PackageParser$Package,android.content.pm.PermissionInfo)>
<com.android.server.EntropyService: java.lang.String getSystemDir()>
<GenerationGG: android.widget.SimpleAdapter$ViewBinder get_androidwidgetSimpleAdapter__ViewBinder()>
<android.content.res.XmlBlock$Parser: int nextTag()>
<android.view.KeyEvent: boolean isAltPressed()>
<android.graphics.BitmapFactory: android.graphics.Bitmap nativeDecodeFileDescriptor(java.io.FileDescriptor,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<com.android.internal.os.ProcessStats: int getLastIrqTime()>
<android.telephony.NeighboringCellInfo: java.lang.String toString()>
<android.webkit.WebView: boolean nativePageShouldHandleShiftAndArrows()>
<android.webkit.WebBackForwardList: void setCurrentIndex(int)>
<android.accounts.AccountManager$Future2Task: void <init>(android.accounts.AccountManager,android.os.Handler,android.accounts.AccountManagerCallback)>
<android.widget.ListPopupWindow: int getHeight()>
<com.android.internal.view.menu.MenuPopupHelper: android.view.LayoutInflater access$300(com.android.internal.view.menu.MenuPopupHelper)>
<android.telephony.SmsMessage$SubmitPdu: void <init>(com.android.internal.telephony.SmsMessageBase$SubmitPduBase)>
<android.test.ClassPathPackageInfoSource: void setApkPaths(java.lang.String[])>
<android.view.animation.CycleInterpolator: void <init>(float)>
<com.android.server.NotificationManagerService: boolean access$1102(com.android.server.NotificationManagerService,boolean)>
<android.graphics.SurfaceTexture: void nativeGetTransformMatrix(float[])>
<com.android.server.usb.UsbDeviceManager: boolean access$300(com.android.server.usb.UsbDeviceManager)>
<android.view.accessibility.AccessibilityNodeInfo: void setClassName(java.lang.CharSequence)>
<android.net.wifi.SupplicantState: boolean isDriverActive(android.net.wifi.SupplicantState)>
<GenerationGG: android.view.OrientationEventListener get_androidviewOrientationEventListener()>
<android.test.MoreAsserts: void assertEquals(java.lang.String,double[],double[])>
<android.view.MotionEvent: float getTouchMajor()>
<android.test.mock.MockPackageManager: java.util.List queryIntentActivities(android.content.Intent,int)>
<android.graphics.Canvas: int native_saveLayer(int,float,float,float,float,int,int)>
<android.text.style.StyleSpan: int getSpanTypeId()>
<android.service.wallpaper.WallpaperService$Engine$2: void setFixedSize(int,int)>
<android.renderscript.RenderScript: void rsnElementGetNativeData(int,int,int[])>
<GenerationGG: android.net.wifi.p2p.WifiP2pManager get_androidnetwifip2pWifiP2pManager()>
<android.accounts.AccountManager$6: void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback,java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle)>
<android.content.SyncInfo$1: android.content.SyncInfo[] newArray(int)>
<android.view.animation.AnticipateInterpolator: void <init>(float)>
<android.widget.RelativeLayout: int getChildMeasureSpec(int,int,int,int,int,int,int,int)>
<android.widget.AdapterView: void setOnItemSelectedListener(android.widget.AdapterView$OnItemSelectedListener)>
<android.view.accessibility.AccessibilityNodeInfo: void setFocusable(boolean)>
<android.app.ActivityThread$ApplicationThread: void scheduleBindService(android.os.IBinder,android.content.Intent,boolean)>
<android.view.ViewRootImpl$AccessibilityInteractionController$1: android.util.Poolable newInstance()>
<android.test.mock.MockPackageManager: java.lang.String getNameForUid(int)>
<android.media.AudioService$SetModeDeathHandler: int getPid()>
<android.net.Uri$StringUri: java.lang.String getEncodedPath()>
<com.android.internal.view.InputBindResult$1: void <init>()>
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void setFloatValues(float[])>
<com.android.server.am.ActivityRecord: void clearThumbnail()>
<android.view.View: boolean destroyLayer()>
<android.graphics.DiscretePathEffect: void <init>(float,float)>
<android.media.AudioTrack: int native_set_marker_pos(int)>
<GenerationGG: android.util.MalformedJsonException get_androidutilMalformedJsonException()>
<android.graphics.Path: void native_addCircle(int,float,float,float,int)>
<android.net.LinkAddress: void <init>(java.net.InetAddress,int)>
<android.webkit.WebSettings: boolean getShowVisualIndicator()>
<android.os.StrictMode: long access$1502(long)>
<android.os.MemoryFile: java.io.OutputStream getOutputStream()>
<android.text.style.ForegroundColorSpan: int describeContents()>
<android.webkit.WebTextView$WebTextViewLayout: int getLineTop(int)>
<DumbClass: void DumbMethod9()>
<android.content.ContextWrapper: java.lang.String getPackageCodePath()>
<android.webkit.WebViewCore: void access$1800(android.webkit.WebViewCore,java.lang.String)>
<android.view.inputmethod.InputMethodManager$1: void onUnbindMethod(int)>
<com.android.server.am.AppBindRecord: void dumpInIntentBind(java.io.PrintWriter,java.lang.String)>
<android.widget.DialerFilter: void onModeChange(int,int)>
<android.webkit.PluginManager: android.webkit.PluginManager getInstance(android.content.Context)>
<com.android.internal.telephony.cdma.CDMAPhone: boolean isEriFileLoaded()>
<android.widget.ExpandableListView: long getExpandableListPosition(int)>
<android.app.Fragment: boolean getRetainInstance()>
<android.renderscript.BaseObj: void destroy()>
<android.net.NetworkConfig: boolean isDefault()>
<android.os.Debug$MemoryInfo: java.lang.String getOtherLabel(int)>
<com.android.internal.telephony.DataConnectionTracker: void cleanUpAllConnections(java.lang.String)>
<android.util.JsonReader: void beginObject()>
<android.test.ViewAsserts: void assertRightAligned(android.view.View,android.view.View,int)>
<com.android.server.BackupManagerService$BackupState: void <init>(java.lang.String,int)>
<com.android.internal.os.BatteryStatsImpl$Uid: void noteStopSensor(int)>
<android.net.wifi.WifiWatchdogStateMachine: void access$2000(android.net.wifi.WifiWatchdogStateMachine,com.android.internal.util.IState)>
<android.preference.Preference: android.os.Bundle peekExtras()>
<android.widget.RemoteViews: void showNext(int)>
<com.android.internal.os.BatteryStatsImpl: void reportExcessiveCpuLocked(int,java.lang.String,long,long)>
<android.widget.ListPopupWindow$ListSelectorHider: void <init>(android.widget.ListPopupWindow)>
<android.webkit.CookieManager: void <init>()>
<android.graphics.Picture: int nativeConstructor(int)>
<android.provider.ContactsContract$CommonDataKinds$Email: void <clinit>()>
<android.net.wifi.SupplicantStateTracker$InactiveState: void <init>(android.net.wifi.SupplicantStateTracker)>
<android.graphics.Canvas: void drawARGB(int,int,int,int)>
<android.graphics.drawable.LayerDrawable: boolean isStateful()>
<android.content.res.AssetFileDescriptor$AutoCloseOutputStream: void write(byte[])>
<android.view.View: void dispatchSetPressed(boolean)>
<com.android.internal.view.IInputMethod$Stub: com.android.internal.view.IInputMethod asInterface(android.os.IBinder)>
<com.android.server.InputMethodManagerService$InputMethodFileManager: java.util.HashMap getAllAdditionalInputMethodSubtypes()>
<android.webkit.StreamLoader: void <init>(android.webkit.LoadListener)>
<GenerationGG: android.security.KeyChain get_androidsecurityKeyChain()>
<com.android.internal.util.AsyncChannel: void access$600(com.android.internal.util.AsyncChannel,int)>
<com.android.server.connectivity.Tethering$TetherMasterSM$TetherMasterUtilState: void notifyTetheredOfNewUpstreamIface(java.lang.String)>
<android.view.GLES20RecordingCanvas: void drawVertices(android.graphics.Canvas$VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)>
<com.android.internal.widget.ActionBarView$SavedState$1: java.lang.Object[] newArray(int)>
<android.webkit.ZoomControlExternal: void update()>
<com.android.internal.telephony.sip.SipPhone$SipConnection: void setState(com.android.internal.telephony.Call$State)>
<android.widget.ListPopupWindow$PopupScrollListener: void <init>(android.widget.ListPopupWindow)>
<android.net.Uri$StringUri: java.lang.String getSchemeSpecificPart()>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void access$1500(com.android.server.connectivity.Tethering$TetherInterfaceSM,com.android.internal.util.IState)>
<GenerationGG: android.view.KeyCharacterMap$KeyData get_androidviewKeyCharacterMap__KeyData()>
<android.content.res.AssetManager: int getGlobalAssetManagerCount()>
<android.widget.ScrollView: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<android.view.animation.OvershootInterpolator: float getInterpolation(float)>
<android.test.MoreAsserts: void failEmpty(java.lang.String)>
<android.app.SearchableInfo: int getInputType()>
<com.android.internal.telephony.cat.AppInterface$CommandType: void <clinit>()>
<android.net.wifi.WifiConfiguration$EnterpriseField: java.lang.String value()>
<DumbClass: void DumbMethod26()>
<android.widget.ExpandableListView: boolean isHeaderOrFooterPosition(int)>
<android.animation.ObjectAnimator: android.animation.ValueAnimator setDuration(long)>
<com.android.internal.telephony.SmsMessageBase$SubmitPduBase: void <init>()>
<com.android.internal.view.menu.ActionMenuItem: void setShowAsAction(int)>
<android.view.Gravity: void apply(int,int,int,android.graphics.Rect,android.graphics.Rect)>
<android.app.Dialog: boolean onMenuItemSelected(int,android.view.MenuItem)>
<com.android.server.BatteryService$2: void <init>(com.android.server.BatteryService)>
<android.view.accessibility.AccessibilityRecord: void enforceSealed()>
<android.graphics.Paint: void clearShadowLayer()>
<com.android.server.InputMethodManagerService$InputMethodFileManager: void writeAdditionalInputMethodSubtypes(java.util.HashMap,com.android.internal.os.AtomicFile,java.util.HashMap)>
<android.os.FileUtils: void stringToFile(java.lang.String,java.lang.String)>
<android.app.ResultInfo$1: void <init>()>
<android.net.wifi.WifiNative: boolean setScanResultHandlingCommand(int)>
<android.os.StrictMode$InstanceTracker: void <init>(java.lang.Object)>
<android.text.BoringLayout: boolean getLineContainsTab(int)>
<GenerationGG: android.media.effect.EffectFactory get_androidmediaeffectEffectFactory()>
<Wrapper_android_content_res_ObbScanner: void test_android_content_res_ObbScanner()>
<Wrapper_android_graphics_Movie: void test_android_graphics_Movie()>
<android.graphics.Path: void native_transform(int,int)>
<android.net.DhcpStateMachine: void access$2300(android.net.DhcpStateMachine,com.android.internal.util.IState)>
<android.os.AsyncTask$Status: void <clinit>()>
<android.app.Notification$Builder: android.app.Notification$Builder setAutoCancel(boolean)>
<android.telephony.PhoneStateListener$1: void onSignalStrengthsChanged(android.telephony.SignalStrength)>
<android.content.SyncManager: long access$2300()>
<android.widget.HeaderViewListAdapter: android.widget.Filter getFilter()>
<android.view.GLES20RecordingCanvas: void drawBitmap(android.graphics.Bitmap,float,float,android.graphics.Paint)>
<android.content.IntentFilter: java.util.Iterator categoriesIterator()>
<android.text.StaticLayout: int getLineCount()>
<android.appwidget.AppWidgetProviderInfo: java.lang.String toString()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: void detach()>
<com.android.server.VibratorService$Vibration: void <init>(com.android.server.VibratorService,android.os.IBinder,long,long[],int,int)>
<android.graphics.Canvas: android.graphics.Matrix getMatrix()>
<com.android.internal.os.BatteryStatsImpl: void noteWifiMulticastEnabledLocked(int)>
<com.android.server.accessibility.AccessibilityManagerService$Service: boolean isConfigured()>
<com.android.server.pm.PackageManagerService$PackageHandler: void <init>(com.android.server.pm.PackageManagerService,android.os.Looper)>
<android.media.audiofx.Visualizer: boolean getEnabled()>
<android.accounts.Account: void writeToParcel(android.os.Parcel,int)>
<com.android.server.ThrottleService$DataRecorder: long getPeriodStart()>
<com.android.internal.os.BatteryStatsImpl: void noteStopSensorLocked(int,int)>
<android.view.HardwareLayer: int getHeight()>
<android.os.storage.StorageManager$ObbListenerDelegate: void sendObbStateChanged(java.lang.String,int)>
<com.android.internal.telephony.cat.CatService: void dispose()>
<Wrapper_android_os_AsyncTask: void test_android_os_AsyncTask()>
<android.text.method.HideReturnsTransformationMethod: void <init>()>
<com.android.server.MountService: int doMountVolume(java.lang.String)>
<android.opengl.GLU: int gluUnProject(float,float,float,float[],int,float[],int,int[],int,float[],int)>
<android.net.Uri$StringUri: android.net.Uri$Part getAuthorityPart()>
<android.media.CameraProfile: int native_get_image_encoding_quality_level(int,int)>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: void cancelSessionTimer()>
<android.webkit.WebIconDatabase: void removeAllIcons()>
<android.view.ViewRootImpl: void onHardwarePreDraw(android.view.HardwareCanvas)>
<android.net.Credentials: int getPid()>
<android.view.HardwareRenderer$GlRenderer: void updateSurface(android.view.SurfaceHolder)>
<android.os.INetworkManagementService$Stub: android.os.IBinder asBinder()>
<com.android.internal.os.BatteryStatsImpl$Timer: long getTotalTimeLocked(long,int)>
<android.media.audiofx.BassBoost$Settings: void <init>()>
<android.webkit.WebViewCore$EventHub: void sendMessageAtFrontOfQueue(android.os.Message)>
<com.android.server.AppWidgetService: com.android.server.AppWidgetService$Host lookupHostLocked(int,int)>
<android.net.http.HttpResponseCache: void delete()>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: void unplug(long,long)>
<android.app.backup.BackupDataInputStream: void <init>(android.app.backup.BackupDataInput)>
<Wrapper_android_database_sqlite_SQLiteTransactionListener: void test_android_database_sqlite_SQLiteTransactionListener()>
<android.nfc.tech.Ndef: boolean isWritable()>
<com.android.server.am.ActivityManagerService: boolean scanArgs(java.lang.String[],java.lang.String)>
<android.accessibilityservice.AccessibilityService$IEventListenerWrapper: void onInterrupt()>
<com.android.internal.telephony.cat.Tone$1: com.android.internal.telephony.cat.Tone[] newArray(int)>
<GenerationGG: java.util.Locale get_javautilLocale()>
<android.hardware.usb.UsbDeviceConnection: java.lang.String getSerial()>
<android.location.Address: boolean hasLatitude()>
<android.test.AssertionFailedError: void <init>(java.lang.String)>
<android.gesture.GestureStore: java.util.Set getGestureEntries()>
<android.gesture.GestureLibrary: java.util.Set getGestureEntries()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: com.android.internal.telephony.DataConnectionTracker$State getOverallState()>
<android.renderscript.ProgramStore$Builder: android.renderscript.ProgramStore create()>
<android.drm.DrmEvent: int getUniqueId()>
<android.view.MotionEvent: int axisFromString(java.lang.String)>
<GenerationGG: android.database.CursorIndexOutOfBoundsException get_androiddatabaseCursorIndexOutOfBoundsException()>
<android.hardware.Camera: void setPreviewDisplay(android.view.SurfaceHolder)>
<com.android.server.BackupManagerService$BackupState: com.android.server.BackupManagerService$BackupState[] values()>
<android.bluetooth.BluetoothDevice$1: java.lang.Object[] newArray(int)>
<android.widget.VideoView: int access$1102(android.widget.VideoView,int)>
<android.app.SharedPreferencesImpl: float getFloat(java.lang.String,float)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: android.net.wifi.p2p.WifiP2pConfig access$4602(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,android.net.wifi.p2p.WifiP2pConfig)>
<com.android.server.VibratorService: void access$1100(com.android.server.VibratorService,com.android.server.VibratorService$Vibration)>
<com.android.server.net.NetworkStatsService$3: void <init>(com.android.server.net.NetworkStatsService)>
<android.content.res.ObbInfo$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.net.NetworkStatsHistory$Entry: void <init>()>
<Wrapper_android_view_animation_Interpolator: void test_android_view_animation_Interpolator()>
<android.telephony.ServiceState: void <init>(android.os.Parcel)>
<android.bluetooth.BluetoothClass$1: android.bluetooth.BluetoothClass[] newArray(int)>
<android.widget.Gallery: int getChildHeight(android.view.View)>
<com.android.server.pm.PackageVerificationState: boolean isInstallAllowed()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String getActiveApnString(java.lang.String)>
<android.net.Uri$1: android.net.Uri createFromParcel(android.os.Parcel)>
<com.android.internal.view.menu.MenuPopupHelper$MenuAdapter: long getItemId(int)>
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker$1: void <init>(com.android.internal.telephony.cdma.CdmaDataConnectionTracker)>
<com.android.server.sip.SipSessionGroup$KeepAliveProcessCallbackProxy: void <init>(com.android.server.sip.SipSessionGroup$KeepAliveProcessCallback)>
<android.drm.DrmManagerClient: android.drm.DrmConvertedStatus _closeConvertSession(int,int)>
<GenerationGG: android.test.InstrumentationTestCase get_androidtestInstrumentationTestCase()>
<android.net.wifi.WifiWatchdogStateMachine: void access$1100(android.net.wifi.WifiWatchdogStateMachine,java.lang.String)>
<android.bluetooth.BluetoothTetheringDataTracker: void setUserDataEnable(boolean)>
<com.android.server.wm.ViewServer: boolean start()>
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.Connection$PostDialState getPostDialState()>
<GenerationGG: android.os.StrictMode$ThreadPolicy get_androidosStrictMode__ThreadPolicy()>
<com.android.internal.net.DNParser: int getByte(int)>
<com.android.internal.telephony.BaseCommands: void unSetOnRestrictedStateChanged(android.os.Handler)>
<com.android.server.UiModeManagerService$7: void onProviderDisabled(java.lang.String)>
<android.graphics.Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region$Op)>
<android.location.GeocoderParams: int describeContents()>
<junit.framework.TestCase: junit.framework.TestResult run()>
<android.app.ListFragment: android.widget.ListAdapter getListAdapter()>
<android.graphics.PathMeasure: void <init>()>
<android.preference.PreferenceGroup: int getPreferenceCount()>
<android.os.Handler: void <init>(android.os.Handler$Callback)>
<android.content.BroadcastReceiver: boolean isOrderedBroadcast()>
<android.content.pm.PackageParser$Package: void setPackageName(java.lang.String)>
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub: com.android.internal.textservice.ISpellCheckerSessionListener asInterface(android.os.IBinder)>
<android.graphics.Paint: void reset()>
<com.android.internal.widget.LockPatternView: int getRowHit(float)>
<android.widget.ViewAnimator: android.view.animation.Animation getInAnimation()>
<android.gesture.GestureOverlayView: float getGestureStrokeAngleThreshold()>
<android.webkit.ZoomManager$FocusMovementQueue: float access$800(android.webkit.ZoomManager$FocusMovementQueue)>
<android.content.CursorLoader: void <init>(android.content.Context)>
<android.content.res.AssetManager: void init()>
<android.os.StrictMode: boolean conditionallyEnableDebugLogging()>
<android.sax.Element: java.lang.String toString(java.lang.String,java.lang.String)>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.Call getRingingCall()>
<com.android.server.sip.SipService$IntervalMeasurementProcess: boolean checkTermination()>
<android.webkit.WebView: void startScrollingLayer(float,float)>
<com.android.internal.telephony.gsm.GSMPhone: android.telephony.SignalStrength getSignalStrength()>
<Wrapper_android_net_LocalSocket: void test_android_net_LocalSocket()>
<com.android.server.LocationManagerService$Receiver: android.location.ILocationListener getListener()>
<android.view.animation.Animation: void applyTransformation(float,android.view.animation.Transformation)>
<com.android.internal.util.AsyncChannel$SyncMessenger: void recycle()>
<android.util.Base64: byte[] decode(byte[],int)>
<android.webkit.WebViewCore: android.webkit.WebSettings getSettings()>
<junit.framework.TestCase: void assertEquals(java.lang.String,long,long)>
<android.widget.LinearLayout$LayoutParams: void <init>(int,int,float)>
<android.os.IPermissionController$Stub: android.os.IBinder asBinder()>
<com.android.internal.telephony.IccPhoneBookInterfaceManager: int updateEfForIccType(int)>
<android.widget.RemoteViews: void setChronometer(int,long,java.lang.String,boolean)>
<android.view.GLES20Canvas: void nFlushCaches(int)>
<android.graphics.Path: boolean isEmpty()>
<android.app.ActivityThread$ApplicationThread: void scheduleSleeping(android.os.IBinder,boolean)>
<android.view.ViewDebug$4: void <init>(android.view.View)>
<com.android.server.NotificationPlayer: void <init>(java.lang.String)>
<android.content.res.AssetFileDescriptor: int describeContents()>
<android.filterfw.core.VertexFrame: boolean hasNativeAllocation()>
<android.test.mock.MockContext: android.content.res.AssetManager getAssets()>
<com.android.server.am.ServiceRecord: int makeNextStartId()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setUan(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<android.provider.MediaStore: void <init>()>
<android.gesture.GestureLibrary: java.util.ArrayList getGestures(java.lang.String)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnablingState: void enter()>
<com.android.internal.os.BatteryStatsImpl: void readHistory(android.os.Parcel,boolean)>
<com.android.server.am.ActivityManagerService: boolean canGcNowLocked()>
<android.ddm.DdmHandleHeap: void <init>()>
<android.server.BluetoothAdapterStateMachine: void access$6400(android.server.BluetoothAdapterStateMachine,android.os.Message)>
<com.android.internal.telephony.cdma.sms.CdmaSmsAddress: java.lang.String filterWhitespace(java.lang.String)>
<GenerationGG: android.content.Loader get_androidcontentLoader()>
<com.android.server.am.ActivityManagerService: int computeOomAdjLocked(com.android.server.am.ProcessRecord,int,com.android.server.am.ProcessRecord,boolean)>
<android.inputmethodservice.ExtractEditText: void finishInternalChanges()>
<GenerationGG: javax.net.ssl.KeyManager[] get_javaxnetsslKeyManager_ARRAY_()>
<android.content.pm.RegisteredServicesCache: java.util.Collection getAllServices()>
<android.graphics.Matrix: boolean preTranslate(float,float)>
<android.widget.HorizontalScrollView: void onInitializeAccessibilityNodeInfo(android.view.accessibility.AccessibilityNodeInfo)>
<com.android.server.SamplingProfilerService$1: void <init>(com.android.server.SamplingProfilerService,java.lang.String,int,android.os.DropBoxManager)>
<com.android.internal.telephony.Call: boolean isDialingOrAlerting()>
<android.content.SyncManager$6: void <init>(android.content.SyncManager)>
<com.android.server.pm.PackageManagerService$2: void <init>(com.android.server.pm.PackageManagerService,long,android.content.IntentSender)>
<android.webkit.WebView: boolean accessibilityScriptInjected()>
<android.app.ActivityThread$AppBindData: void <init>()>
<GenerationGG: android.speech.tts.TextToSpeechService get_androidspeechttsTextToSpeechService()>
<android.media.FaceDetector: void fft_destroy()>
<android.widget.AbsListView: boolean contentFits()>
<Wrapper_android_content_OperationApplicationException: void test_android_content_OperationApplicationException()>
<com.android.server.pm.PackageManagerService: void updateExternalMediaStatus(boolean,boolean)>
<android.os.PatternMatcher: void <clinit>()>
<android.test.suitebuilder.annotation.HasClassAnnotation: boolean apply(java.lang.Object)>
<android.view.GLES20Layer: void <init>(int,int,boolean)>
<android.media.MediaMetadataRetriever: void <init>()>
<android.widget.Switch: java.lang.CharSequence getTextOn()>
<android.os.Debug$MemoryInfo: int getOtherPrivateDirty(int)>
<android.animation.ObjectAnimator: void setupStartValues()>
<android.view.HardwareRenderer$Gl20Renderer: android.view.DisplayList createDisplayList()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean dataConnectionNotInUse(com.android.internal.telephony.DataConnectionAc)>
<com.android.internal.telephony.cdma.sms.BearerData: void encodeValidityPeriodRel(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)>
<android.os.Message: long getWhen()>
<android.app.ActivityThread$CreateServiceData: void <init>()>
<android.net.wifi.WifiConfiguration$ProxySettings: void <clinit>()>
<android.graphics.ColorMatrixColorFilter: void <init>(float[])>
<com.android.server.WifiService$Multicaster: java.lang.String toString()>
<android.content.res.TypedArray: int getResourceId(int,int)>
<android.content.SyncAdapterType: boolean equals(java.lang.Object)>
<android.net.DhcpStateMachine: void access$2100(android.net.DhcpStateMachine,com.android.internal.util.IState)>
<android.widget.TextView: boolean didTouchFocusSelect()>
<android.renderscript.Matrix4f: void loadScale(float,float,float)>
<com.android.internal.telephony.cdma.EriManager$EriFile: void <init>(com.android.internal.telephony.cdma.EriManager)>
<android.filterfw.core.GLEnvironment: boolean nativeIsAnyContextActive()>
<com.android.server.sip.SipSessionListenerProxy$7: void <init>(com.android.server.sip.SipSessionListenerProxy,android.net.sip.ISipSession)>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$RecoveryAction: com.android.internal.telephony.gsm.GsmDataConnectionTracker$RecoveryAction[] values()>
<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getApplicationIcon(java.lang.String)>
<android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodImpl: void <init>(android.inputmethodservice.AbstractInputMethodService)>
<com.android.internal.telephony.sip.SipCommandInterface: void getBasebandVersion(android.os.Message)>
<com.android.internal.os.BatteryStatsImpl: long getWifiOnTime(long,int)>
<android.widget.ListView: void setCacheColorHint(int)>
<android.content.pm.VerifierDeviceIdentity$1: void <init>()>
<Wrapper_android_renderscript_Matrix4f: void test_android_renderscript_Matrix4f()>
<android.server.BluetoothAdapterStateMachine: android.content.Context access$2000(android.server.BluetoothAdapterStateMachine)>
<android.app.admin.DeviceAdminReceiver: void onPasswordChanged(android.content.Context,android.content.Intent)>
<android.view.PointerIcon: void <init>(int)>
<java.lang.Object: void setQwertyMode(boolean)>
<android.util.Log: int i(java.lang.String,java.lang.String)>
<android.location.Location: double getLongitude()>
<android.graphics.Bitmap: void recycle()>
<android.test.RenamingDelegatingContext: java.lang.String publicNameFromDiskName(java.lang.String)>
<android.bluetooth.BluetoothServerSocket: android.bluetooth.BluetoothSocket accept()>
<android.widget.ImageView: void invalidateDrawable(android.graphics.drawable.Drawable)>
<com.android.server.am.ActivityManagerService: boolean isNextTransitionForward()>
<com.android.internal.view.menu.ActionMenuPresenter$SavedState: void writeToParcel(android.os.Parcel,int)>
<android.location.Address: java.lang.String access$1802(android.location.Address,java.lang.String)>
<android.telephony.PhoneNumberUtils: boolean isReallyDialable(char)>
<com.android.server.pm.PackageManagerService: boolean isExternal(android.content.pm.PackageParser$Package)>
<android.bluetooth.BluetoothProfileState: void log(java.lang.String)>
<com.android.server.pm.PackageSettingBase: void copyFrom(com.android.server.pm.PackageSettingBase)>
<android.appwidget.AppWidgetHostView$ParcelableSparseArray: int describeContents()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isChecked()>
<android.nfc.Tag$1: java.lang.Object[] newArray(int)>
<android.graphics.Region: void translate(int,int,android.graphics.Region)>
<com.android.internal.app.AlertController: int access$900(com.android.internal.app.AlertController)>
<com.android.internal.telephony.cat.Item$1: void <init>()>
<android.os.AsyncTask: void onCancelled()>
<android.net.http.Request: void complete()>
<android.net.LocalSocketImpl: void listen(int)>
<com.android.internal.view.menu.MenuPopupHelper: boolean access$200(com.android.internal.view.menu.MenuPopupHelper)>
<android.os.StrictMode: void access$1200(int)>
<android.text.Layout: java.lang.Object[] getParagraphSpans(android.text.Spanned,int,int,java.lang.Class)>
<android.view.textservice.SpellCheckerSubtype$1: java.lang.Object[] newArray(int)>
<android.net.wifi.p2p.WifiP2pDeviceList: void <init>()>
<com.android.internal.telephony.gsm.SmsMessage: boolean isMwiDontStore()>
<android.app.ActivityThread: void access$2700(android.app.ActivityThread,android.os.Bundle)>
<com.android.server.wm.InputManager: void dump(java.io.PrintWriter)>
<android.graphics.Canvas: void native_setBitmap(int,int)>
<android.widget.PopupWindow: int getHeight()>
<android.widget.ExpandableListView: void setOnChildClickListener(android.widget.ExpandableListView$OnChildClickListener)>
<android.media.ToneGenerator: void stopTone()>
<android.app.admin.DeviceAdminReceiver: void onPasswordExpiring(android.content.Context,android.content.Intent)>
<com.android.server.BackupManagerService$RestorePolicy: void <init>(java.lang.String,int)>
<android.widget.AbsSeekBar: void attemptClaimDrag()>
<android.content.res.XmlBlock: int access$800(int)>
<android.os.storage.IMountService$Stub: android.os.storage.IMountService asInterface(android.os.IBinder)>
<java.lang.Object: java.lang.Object getProperty(java.lang.String)>
<android.webkit.WebView: int access$2502(android.webkit.WebView,int)>
<com.android.server.InputMethodManagerService$1: void <init>(com.android.server.InputMethodManagerService)>
<android.sax.Element: android.sax.Element requireChild(java.lang.String,java.lang.String)>
<android.util.AndroidRuntimeException: void <init>(java.lang.Exception)>
<android.preference.DialogPreference: java.lang.CharSequence getDialogTitle()>
<com.android.server.location.MockProvider: void addListener(int)>
<android.server.BluetoothA2dpService: boolean disconnectSinkNative(java.lang.String)>
<GenerationGG: android.app.Fragment$SavedState get_androidappFragment__SavedState()>
<com.android.server.usb.UsbDeviceManager$AdbSettingsObserver: void <init>(com.android.server.usb.UsbDeviceManager)>
<android.test.mock.MockResources: int getDimensionPixelSize(int)>
<android.database.sqlite.DatabaseConnectionPool: void release(android.database.sqlite.SQLiteDatabase)>
<com.android.server.PreferredComponent: void writeToXml(org.xmlpull.v1.XmlSerializer)>
<android.accessibilityservice.IEventListener$Stub$Proxy: android.os.IBinder asBinder()>
<android.media.AudioTrack: void native_release()>
<android.net.wifi.WifiStateMachine: boolean access$4902(android.net.wifi.WifiStateMachine,boolean)>
<android.webkit.WebView: boolean nativeMotionUp(int,int,int)>
<android.content.IntentFilter$1: android.content.IntentFilter createFromParcel(android.os.Parcel)>
<android.media.audiofx.Visualizer: int native_setPeriodicCapture(int,boolean,boolean)>
<Wrapper_android_media_audiofx_Virtualizer: void test_android_media_audiofx_Virtualizer()>
<android.database.sqlite.SQLiteOpenHelper: void <init>(android.content.Context,java.lang.String,android.database.sqlite.SQLiteDatabase$CursorFactory,int)>
<android.content.pm.ProviderInfo: void <init>()>
<android.widget.ExpandableListConnector$GroupMetadata$1: android.widget.ExpandableListConnector$GroupMetadata[] newArray(int)>
<com.android.internal.telephony.sip.SipPhone$SipConnection: int getNumberPresentation()>
<com.android.internal.os.BatteryStatsImpl$2: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.internal.util.HexDump: java.lang.String toHexString(byte[])>
<android.app.TabActivity: void onContentChanged()>
<com.android.server.AlarmManagerService$IncreasingTimeOrder: void <init>()>
<android.graphics.PointF: void writeToParcel(android.os.Parcel,int)>
<GenerationGG: android.widget.AbsListView$MultiChoiceModeListener get_androidwidgetAbsListView__MultiChoiceModeListener()>
<android.app.ContextImpl: android.app.ContextImpl createSystemContext(android.app.ActivityThread)>
<android.view.View: void setTouchDelegate(android.view.TouchDelegate)>
<android.webkit.WebViewCore: java.lang.String nativeRetrieveImageSource(int,int)>
<com.android.internal.view.menu.ActionMenuPresenter: android.view.View access$200(com.android.internal.view.menu.ActionMenuPresenter)>
<android.widget.SearchView: boolean isQueryRefinementEnabled()>
<android.webkit.CallbackProxy$5: void onClick(android.content.DialogInterface,int)>
<android.animation.LayoutTransition: long getStartDelay(int)>
<android.inputmethodservice.KeyboardView$3: void swipeDown()>
<com.android.server.LocationManagerService: com.android.server.location.GeocoderProxy access$2200(com.android.server.LocationManagerService)>
<com.android.server.PowerManagerService: long access$5800(com.android.server.PowerManagerService)>
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: java.lang.Object getAnimatedValue()>
<com.android.server.Watchdog: long computeCalendarTime(java.util.Calendar,long,long)>
<android.view.ViewGroup: void addDisappearingView(android.view.View)>
<android.webkit.LoadListener: android.webkit.BrowserFrame getFrame()>
<android.location.ILocationProvider$Stub: android.location.ILocationProvider asInterface(android.os.IBinder)>
<android.widget.ImageView: android.graphics.Matrix$ScaleToFit scaleTypeToScaleToFit(android.widget.ImageView$ScaleType)>
<com.android.server.NetworkManagementService: void monitor()>
<android.net.wifi.WifiStateMachine: int syncGetWifiState()>
<android.app.ActivityManager: int staticGetMemoryClass()>
<android.renderscript.FieldPacker: void addU8(android.renderscript.Short3)>
<android.test.suitebuilder.TestGrouping: android.test.suitebuilder.TestGrouping addPackagesRecursive(java.lang.String[])>
<android.filterfw.core.GLEnvironment: boolean nativeDeallocate()>
<android.widget.GridView: void pinToBottom(int)>
<android.graphics.Paint: void setStrikeThruText(boolean)>
<android.webkit.WebView: void doFling()>
<android.webkit.WebTextView: boolean requestRectangleOnScreen(android.graphics.Rect,boolean)>
<android.net.wifi.WifiStateMachine: int access$6000(android.net.wifi.WifiStateMachine)>
<com.android.internal.util.StateMachine: void <init>(java.lang.String)>
<android.drm.DrmManagerClient: int acquireRights(android.drm.DrmInfoRequest)>
<com.android.internal.view.menu.MenuItemImpl: char getAlphabeticShortcut()>
<android.os.FileUtils: void <clinit>()>
<com.android.internal.telephony.CommandsInterface$RadioState: boolean isOn()>
<android.database.sqlite.SQLiteProgram: void setNativeHandle(int)>
<android.view.accessibility.AccessibilityNodeInfo: void setChecked(boolean)>
<com.android.server.wm.WindowState: boolean isIdentityMatrix(float,float,float,float)>
<com.android.internal.telephony.cdma.sms.BearerData: java.lang.String decodeLatin(byte[],int,int)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor adoptFd(int)>
<android.view.View: int getDrawingCacheQuality()>
<java.lang.Object: int getIdAttributeResourceValue(int)>
<android.graphics.drawable.StateListDrawable$StateListState: void growArray(int,int)>
<android.widget.Gallery: void setCallbackDuringFling(boolean)>
<android.net.wifi.p2p.WifiP2pDevice: void <init>()>
<GenerationGG: java.util.UUID get_javautilUUID()>
<com.android.server.wm.WindowState: void prelayout()>
<GenerationGG: junit.framework.AssertionFailedError get_junitframeworkAssertionFailedError()>
<android.test.mock.MockContext: void enforceUriPermission(android.net.Uri,int,int,int,java.lang.String)>
<com.android.server.am.ContentProviderRecord: java.lang.String toString()>
<android.webkit.ZoomControlExternal: boolean isVisible()>
<android.graphics.drawable.PictureDrawable: void setPicture(android.graphics.Picture)>
<android.net.ProxyProperties: void <init>(java.lang.String,int,java.lang.String,java.lang.String[],android.net.ProxyProperties$1)>
<Wrapper_android_app_SearchableInfo: void test_android_app_SearchableInfo()>
<com.android.server.wm.BlackFrame: void kill()>
<android.net.RouteInfo: java.lang.String toString()>
<com.android.internal.telephony.DataConnectionTracker$State: void <clinit>()>
<com.android.internal.telephony.Connection$DisconnectCause: void <clinit>()>
<android.media.audiofx.Virtualizer$Settings: void <init>()>
<android.gesture.GestureStore: void load(java.io.InputStream)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$7300(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,android.os.Message)>
<android.animation.ValueAnimator: int getRepeatMode()>
<com.android.server.wm.StrictModeFlash: void <init>(android.view.Display,android.view.SurfaceSession)>
<android.app.Activity: void setSecondaryProgress(int)>
<com.android.server.pm.PackageManagerService$3: void <init>()>
<android.renderscript.Sampler$Builder: void setMagnification(android.renderscript.Sampler$Value)>
<android.net.wifi.SupplicantState: int describeContents()>
<com.android.server.MountService: boolean isUsbMassStorageConnected()>
<android.os.StrictMode: android.os.StrictMode$ThreadPolicy allowThreadDiskReads()>
<android.net.sip.ISipSession$Stub: void <init>()>
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOn()>
<GenerationGG: android.text.AlteredCharSequence get_androidtextAlteredCharSequence()>
<android.os.Handler: boolean sendEmptyMessage(int)>
<android.net.LinkProperties: android.net.LinkProperties$CompareResult compareAddresses(android.net.LinkProperties)>
<android.app.ContextImpl: java.io.File getDir(java.lang.String,int)>
<GenerationGG: android.test.ViewAsserts get_androidtestViewAsserts()>
<android.animation.ValueAnimator: java.lang.ThreadLocal access$500()>
<GenerationGG: android.accounts.AccountManagerFuture get_androidaccountsAccountManagerFuture()>
<com.android.server.InputMethodManagerService: void finishInput(com.android.internal.view.IInputMethodClient)>
<android.webkit.WebView: void saveWebArchiveImpl(java.lang.String,boolean,android.webkit.ValueCallback)>
<android.location.Location: void <clinit>()>
<android.inputmethodservice.InputMethodService: void onStartInputView(android.view.inputmethod.EditorInfo,boolean)>
<android.net.Uri$PathPart: android.net.Uri$PathPart makeAbsolute(android.net.Uri$PathPart)>
<android.content.res.XmlBlock: int nativeGetName(int)>
<android.webkit.CallbackProxy$UploadFileMessageData: android.webkit.CallbackProxy$UploadFile getUploadFile()>
<android.graphics.RectF: void <clinit>()>
<android.view.TextureView: void updateLayer()>
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: java.lang.String packageForFilter(android.content.IntentFilter)>
<android.webkit.WebResourceResponse: void setMimeType(java.lang.String)>
<com.android.internal.content.PackageMonitor: boolean onHandleForceStop(android.content.Intent,java.lang.String[],int,boolean)>
<android.test.mock.MockContext: android.content.Intent registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter)>
<android.drm.ProcessedData: java.lang.String getAccountId()>
<android.app.BackStackRecord: void doAddOp(int,android.app.Fragment,java.lang.String,int)>
<android.renderscript.Element: android.renderscript.Element U8_3(android.renderscript.RenderScript)>
<android.net.wifi.WifiConfiguration$PairwiseCipher: void <clinit>()>
<com.android.server.NotificationManagerService$1: void <init>(com.android.server.NotificationManagerService)>
<GenerationGG: android.webkit.HttpAuthHandler get_androidwebkitHttpAuthHandler()>
<android.telephony.PhoneNumberUtils: java.lang.String appendPwCharBackToOrigDialStr(int,java.lang.String,java.lang.String)>
<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection$2: void <init>(android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection,android.widget.RemoteViewsAdapter)>
<android.net.INetworkManagementEventObserver$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.internal.telephony.BaseCommands: void unregisterForCdmaOtaProvision(android.os.Handler)>
<android.location.Location: void setProvider(java.lang.String)>
<android.webkit.WebChromeClient: void getVisitedHistory(android.webkit.ValueCallback)>
<android.widget.RemoteViews$MemoryUsageCounter: void bitmapIncrement(int)>
<android.inputmethodservice.KeyboardView$SwipeTracker: float getXVelocity()>
<android.content.SyncStatusInfo$1: android.content.SyncStatusInfo createFromParcel(android.os.Parcel)>
<com.android.internal.util.StateMachine$SmHandler: android.os.Message getCurrentMessage()>
<android.app.Dialog: boolean onGenericMotionEvent(android.view.MotionEvent)>
<android.content.SyncManager: android.accounts.Account[] access$2200()>
<android.view.ViewRootImpl: android.view.ViewParent getParent()>
<com.android.server.am.CompatModePackages: boolean getPackageAskCompatModeLocked(java.lang.String)>
<android.net.sip.SipProfile: int describeContents()>
<android.net.UrlQuerySanitizer: java.util.Set getParameterSet()>
<android.inputmethodservice.KeyboardView: android.widget.TextView access$200(android.inputmethodservice.KeyboardView)>
<android.test.mock.MockContext: android.graphics.drawable.Drawable peekWallpaper()>
<android.widget.RemoteViews$Action: int describeContents()>
<android.widget.TextView: void convertFromViewportToContentCoordinates(android.graphics.Rect)>
<android.bluetooth.BluetoothTetheringDataTracker: android.net.LinkProperties getLinkProperties()>
<android.app.Fragment: android.app.Activity getActivity()>
<android.bluetooth.BluetoothDeviceProfileState$BondedDevice: void enter()>
<android.graphics.PathMeasure: boolean getPosTan(float,float[],float[])>
<android.gesture.Gesture: void writeToParcel(android.os.Parcel,int)>
<GenerationGG: android.text.TextUtils$TruncateAt get_androidtextTextUtils__TruncateAt()>
<com.android.server.WallpaperManagerService$WallpaperConnection: android.os.ParcelFileDescriptor setWallpaper(java.lang.String)>
<android.webkit.BrowserFrame: android.webkit.SearchBox getSearchBox()>
<android.accounts.AccountManager$AmsTask: void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback)>
<android.widget.AbsoluteLayout$LayoutParams: java.lang.String debug(java.lang.String)>
<com.android.internal.net.NetworkStatsFactory: void splitLine(java.lang.String,java.util.ArrayList)>
<java.lang.Object: android.view.View getChildView(int,int,boolean,android.view.View,android.view.ViewGroup)>
<android.webkit.WebSettings: boolean getDomStorageEnabled()>
<android.content.ContextWrapper: java.lang.String[] fileList()>
<android.net.http.Headers: java.lang.String getContentType()>
<android.view.DragEvent: java.lang.String toString()>
<android.webkit.ZoomManager: float getInvScale()>
<android.server.BluetoothAdapterStateMachine: void access$5300(android.server.BluetoothAdapterStateMachine,android.os.Message)>
<android.media.AudioRecord: void release()>
<android.net.wifi.WifiStateMachine: void access$13800(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<com.android.server.am.ActivityManagerService$ServiceRestarter: void <init>(com.android.server.am.ActivityManagerService,com.android.server.am.ActivityManagerService$1)>
<com.android.internal.telephony.cdma.RuimFileHandler: void loge(java.lang.String)>
<android.location.Address: double access$1602(android.location.Address,double)>
<android.net.Uri$PathSegmentsBuilder: void <init>()>
<android.bluetooth.BluetoothDeviceProfileState: void access$4900(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.filterfw.core.Filter: java.lang.String toString()>
<android.telephony.NeighboringCellInfo: int getRssi()>
<com.android.server.connectivity.Tethering: boolean isWifi(java.lang.String)>
<android.media.AudioService: android.media.SoundPool access$1400(android.media.AudioService)>
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOnSinceCharge()>
<android.widget.ArrayAdapter: android.widget.Filter getFilter()>
<android.os.StrictMode$ViolationInfo: void <init>(java.lang.Throwable,int)>
<android.telephony.gsm.GsmCellLocation: int getPsc()>
<com.android.internal.telephony.cdma.CdmaDataConnection: boolean isDnsOk(java.lang.String[])>
<android.webkit.CookieManager: void removeExpiredCookie()>
<com.android.server.pm.Settings: int newUserIdLPw(java.lang.Object)>
<com.android.server.accessibility.TouchExplorer$PerformLongPressDelayed: void remove()>
<com.android.server.WifiService$LockList: int access$2700(com.android.server.WifiService$LockList)>
<android.os.WorkSource: boolean add(android.os.WorkSource)>
<com.android.server.accessibility.TouchExplorer$SendHoverDelayed: void run()>
<android.net.Uri: android.net.Uri fromFile(java.io.File)>
<android.content.SyncStorageEngine: void handleMessage(android.os.Message)>
<android.widget.OverScroller$SplineOverScroller: long access$600(android.widget.OverScroller$SplineOverScroller)>
<android.net.wifi.WifiStateMachine: java.lang.String fetchSSID()>
<android.filterfw.core.GLFrame: void releaseNativeAllocation()>
<GenerationGG: android.view.GestureDetector$OnDoubleTapListener get_androidviewGestureDetector__OnDoubleTapListener()>
<com.android.internal.telephony.DataConnection: void access$400(com.android.internal.telephony.DataConnection,com.android.internal.util.IState)>
<android.webkit.WebView: int access$2500(android.webkit.WebView)>
<android.os.SystemProperties: boolean native_get_boolean(java.lang.String,boolean)>
<android.content.IIntentSender$Stub: void <init>()>
<android.webkit.HTML5VideoViewProxy$PosterDownloader$1: void <init>(android.webkit.HTML5VideoViewProxy$PosterDownloader)>
<com.android.internal.telephony.cdma.CDMALTEPhone$1: void <clinit>()>
<android.text.format.Formatter: void <init>()>
<android.widget.RemoteViews$SetPendingIntentTemplate: void <init>(android.widget.RemoteViews,android.os.Parcel)>
<android.server.BluetoothService: boolean cancelDeviceCreationNative(java.lang.String)>
<com.android.internal.app.IBatteryStats$Stub$Proxy: android.os.IBinder asBinder()>
<android.view.accessibility.AccessibilityRecord: void setMaxScrollY(int)>
<android.net.wifi.WifiStateMachine: com.android.internal.util.State access$9400(android.net.wifi.WifiStateMachine)>
<android.app.BackStackRecord: android.app.FragmentTransaction setTransitionStyle(int)>
<android.net.wifi.WifiWatchdogStateMachine: long access$5600(android.net.wifi.WifiWatchdogStateMachine)>
<GenerationGG: android.database.Cursor get_androiddatabaseCursor()>
<android.view.ViewStub: void onMeasure(int,int)>
<android.content.IntentFilter: void dump(android.util.Printer,java.lang.String)>
<android.widget.TextView$HandleView: void updateDrawable()>
<android.widget.GridLayout$6: int getAlignmentValue(android.view.View,int)>
<com.android.internal.telephony.BaseCommands: void unSetOnCatEvent(android.os.Handler)>
<android.test.InstrumentationTestRunner: void prepareLooper()>
<android.net.rtp.RtpStream: int getRemotePort()>
<android.media.AudioService: void rcDisplay_stopDeathMonitor_syncRcStack()>
<android.app.LoadedApk$ReceiverDispatcher: void validate(android.content.Context,android.os.Handler)>
<android.content.res.Configuration$1: java.lang.Object[] newArray(int)>
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: void <init>(android.content.res.AssetFileDescriptor)>
<android.os.FileObserver: void startWatching()>
<android.app.RemoteServiceException: void <init>(java.lang.String)>
<android.net.wifi.WifiStateTracker: java.lang.String getTcpBufferSizesPropName()>
<android.app.ActivityThread$DumpComponentInfo: void <init>()>
<android.speech.SpeechRecognizer$Connection: void <init>(android.speech.SpeechRecognizer)>
<android.webkit.WebSettings: java.lang.String getPluginsPath()>
<android.view.FocusFinder: boolean isCandidate(android.graphics.Rect,android.graphics.Rect,int)>
<com.android.server.am.BatteryStatsService$1: void <init>(com.android.server.am.BatteryStatsService)>
<android.widget.Gallery: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>
<GenerationGG: android.graphics.BlurMaskFilter get_androidgraphicsBlurMaskFilter()>
<com.android.internal.telephony.IccUtils: int hexCharToInt(char)>
<android.text.PackedIntVector: int size()>
<android.text.style.CharacterStyle$Passthrough: void <init>(android.text.style.CharacterStyle)>
<android.util.LruCache: java.lang.Object get(java.lang.Object)>
<android.widget.CalendarView: android.graphics.drawable.Drawable access$3200(android.widget.CalendarView)>
<android.media.MediaPlayer: void finalize()>
<android.view.TextureView: void setLayerType(int,android.graphics.Paint)>
<android.net.sip.SipSessionAdapter: void onCallEnded(android.net.sip.ISipSession)>
<android.widget.OverScroller: void <init>(android.content.Context)>
<com.android.internal.os.BatteryStatsImpl: long getProcessWakeTime(int,int,long)>
<android.content.SyncResult: boolean madeSomeProgress()>
<android.widget.RadioGroup: boolean access$300(android.widget.RadioGroup)>
<android.app.WallpaperManager$FastBitmapDrawable: void setAlpha(int)>
<android.webkit.CallbackProxy: int getProgress()>
<android.bluetooth.IBluetoothA2dp$Stub: android.bluetooth.IBluetoothA2dp asInterface(android.os.IBinder)>
<com.android.internal.telephony.gsm.GsmMmiCode: com.android.internal.telephony.gsm.GsmMmiCode newNetworkInitiatedUssd(java.lang.String,boolean,com.android.internal.telephony.gsm.GSMPhone)>
<android.widget.RemoteViews: void setTextColor(int,int)>
<android.security.KeyStore: byte[] getBytes(java.lang.String)>
<android.gesture.GestureOverlayView: void removeOnGesturePerformedListener(android.gesture.GestureOverlayView$OnGesturePerformedListener)>
<android.hardware.usb.UsbDeviceConnection: boolean releaseInterface(android.hardware.usb.UsbInterface)>
<android.view.accessibility.AccessibilityRecord: void <clinit>()>
<android.text.SpannableStringBuilder: int length()>
<android.graphics.BitmapFactory: android.graphics.Bitmap finishDecode(android.graphics.Bitmap,android.graphics.Rect,android.graphics.BitmapFactory$Options)>
<android.net.sip.SimpleSessionDescription: void <init>(long,java.lang.String)>
<android.net.wifi.WifiWatchdogStateMachine: void access$1700(android.net.wifi.WifiWatchdogStateMachine,com.android.internal.util.IState)>
<android.animation.LayoutTransition: java.util.LinkedHashMap access$900(android.animation.LayoutTransition)>
<com.android.internal.app.ShutdownThread: void <init>()>
<com.android.server.wm.WindowManagerService: int access$202(com.android.server.wm.WindowManagerService,int)>
<android.graphics.ComposeShader: int nativePostCreate2(int,int,int,int)>
<android.graphics.drawable.ColorDrawable$ColorState: android.graphics.drawable.Drawable newDrawable()>
<android.renderscript.Matrix3f: void loadScale(float,float,float)>
<android.webkit.WebView: boolean access$7902(android.webkit.WebView,boolean)>
<android.webkit.AccessibilityInjector: android.view.accessibility.AccessibilityEvent getPartialyPopulatedAccessibilityEvent()>
<android.view.AbsSavedState$2: void <init>()>
<android.net.Uri$HierarchicalUri: int describeContents()>
<com.android.server.net.NetworkIdentitySet: void writeToStream(java.io.DataOutputStream)>
<android.view.animation.LayoutAnimationController: void setDelay(float)>
<com.android.internal.util.StateMachine: void setInitialState(com.android.internal.util.State)>
<android.media.FaceDetector$Face: void <init>(android.media.FaceDetector)>
<android.view.HardwareLayer: void <init>()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pDisabledState$1: void onClick(android.content.DialogInterface,int)>
<com.android.internal.view.BaseSurfaceHolder: android.graphics.Rect getSurfaceFrame()>
<android.text.style.TextAppearanceSpan: java.lang.String getFamily()>
<android.app.Dialog: void closeOptionsMenu()>
<android.widget.ScrollBarDrawable: java.lang.String toString()>
<android.telephony.TelephonyManager: int getNetworkClass(int)>
<android.webkit.WebView: int nativeFocusCandidateMaxLength()>
<com.android.server.sip.SipHelper: javax.sip.header.CallIdHeader createCallIdHeader()>
<android.webkit.WebView: android.graphics.Rect nativeFocusCandidatePaddingRect()>
<com.android.internal.telephony.sip.SipPhone: java.lang.String getVoiceMailNumber()>
<android.view.inputmethod.InputMethodSubtype: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String,boolean)>
<android.view.InputChannel: void dispose()>
<com.android.internal.telephony.PhoneProxy: java.lang.String getDeviceId()>
<android.graphics.PathDashPathEffect: void <init>(android.graphics.Path,float,float,android.graphics.PathDashPathEffect$Style)>
<android.os.Message: void copyFrom(android.os.Message)>
<android.database.sqlite.SQLiteReadOnlyDatabaseException: void <init>(java.lang.String)>
<android.content.Loader: void onContentChanged()>
<Wrapper_android_database_sqlite_SQLiteFullException: void test_android_database_sqlite_SQLiteFullException()>
<com.android.server.wm.WindowManagerService$4: void <init>(com.android.server.wm.WindowManagerService,android.view.IOnKeyguardExitResult)>
<com.android.internal.widget.ActionBarView: java.lang.CharSequence getSubtitle()>
<android.view.inputmethod.InputBinding: android.view.inputmethod.InputConnection getConnection()>
<android.media.audiofx.AudioEffect: byte[] intToByteArray(int)>
<com.android.internal.os.BatteryStatsImpl: void finishIteratingHistoryLocked()>
<com.android.internal.telephony.RestrictedState: java.lang.String toString()>
<com.android.server.am.UriPermissionOwner$ExternalToken: com.android.server.am.UriPermissionOwner getOwner()>
<com.android.server.location.GpsLocationProvider$1: void removeGpsStatusListener(android.location.IGpsStatusListener)>
<com.android.internal.widget.ActionBarContextView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.webkit.CacheManager: boolean createCacheDirectory()>
<com.android.server.AppWidgetService: com.android.server.AppWidgetService$Provider lookupProviderLocked(android.content.ComponentName)>
<android.app.PendingIntent$FinishedDispatcher: void <init>(android.app.PendingIntent,android.app.PendingIntent$OnFinished,android.os.Handler)>
<com.android.server.wm.AppWindowToken: void updateLayers()>
<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminUncheckedLocked(android.content.ComponentName)>
<GenerationGG: android.content.res.ObbInfo get_androidcontentresObbInfo()>
<android.widget.TextView: android.graphics.drawable.Drawable access$7200(android.widget.TextView)>
<android.view.View: void dispatchDraw(android.graphics.Canvas)>
<android.view.Surface: void release()>
<android.text.StaticLayout: void <init>(java.lang.CharSequence)>
<Wrapper_android_opengl_Visibility: void test_android_opengl_Visibility()>
<android.net.wifi.WifiStateMachine: void access$9700(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.app.LoadedApk$ServiceDispatcher: java.lang.RuntimeException getUnbindLocation()>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int)>
<android.app.ContextImpl$6: java.lang.Object createService(android.app.ContextImpl)>
<android.widget.AbsoluteLayout$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.usb.UsbSettingsManager: boolean hasPermission(android.hardware.usb.UsbDevice)>
<android.content.ContextWrapper: java.io.File getFilesDir()>
<GenerationGG: android.animation.FloatEvaluator get_androidanimationFloatEvaluator()>
<android.media.AudioService$VolumeStreamState: java.util.ArrayList access$1700(android.media.AudioService$VolumeStreamState)>
<android.security.SystemKeyStore: android.security.SystemKeyStore getInstance()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean shouldPostNotification(com.android.internal.telephony.DataConnection$FailCause)>
<android.media.ToneGenerator: boolean startTone(int,int)>
<android.os.MessageQueue: void nativePollOnce(int,int)>
<android.test.mock.MockPackageManager: boolean addPermission(android.content.pm.PermissionInfo)>
<com.android.server.am.CompatModePackages: int getFrontActivityScreenCompatModeLocked()>
<com.android.internal.telephony.cdma.CDMAPhone$1: void <init>(com.android.internal.telephony.cdma.CDMAPhone)>
<android.widget.OverScroller: void setFriction(float)>
<android.os.Parcel: void writeStrongBinder(android.os.IBinder)>
<android.widget.OverScroller: int getDuration()>
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getSubscriberId()>
<android.webkit.PluginManager: boolean containsPluginPermissionAndSignatures(android.content.pm.PackageInfo)>
<GenerationGG: android.widget.SimpleExpandableListAdapter get_androidwidgetSimpleExpandableListAdapter()>
<android.widget.ExpandableListConnector$GroupMetadata: int describeContents()>
<android.webkit.WebViewCore: void sendStaticMessage(int,java.lang.Object)>
<android.webkit.CookieManager: void flushCookieStore()>
<GenerationGG: android.media.audiofx.EnvironmentalReverb get_androidmediaaudiofxEnvironmentalReverb()>
<android.content.res.XmlBlock: int nativeGetAttributeStringValue(int,int)>
<android.net.wifi.WpsResult$Status: void <init>(java.lang.String,int)>
<android.content.pm.ApplicationInfo: void <clinit>()>
<android.webkit.DeviceMotionAndOrientationManager: void nativeUseMock(android.webkit.WebViewCore)>
<Wrapper_android_graphics_drawable_shapes_PathShape: void test_android_graphics_drawable_shapes_PathShape()>
<android.telephony.ServiceState: boolean getIsManualSelection()>
<android.app.Activity: void onUserLeaveHint()>
<android.view.inputmethod.BaseInputConnection: boolean performContextMenuAction(int)>
<com.android.server.am.ActivityManagerService$ServiceLookupResult: void <init>(com.android.server.am.ActivityManagerService,com.android.server.am.ServiceRecord,java.lang.String)>
<android.graphics.Matrix$1: void setSinCos(float,float,float,float)>
<android.animation.LayoutTransition$2: void <init>(android.animation.LayoutTransition,android.view.View)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$1: void <init>(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<android.os.IRemoteCallback$Stub: android.os.IRemoteCallback asInterface(android.os.IBinder)>
<android.preference.Preference: void onRestoreInstanceState(android.os.Parcelable)>
<android.content.SyncStatusInfo$1: java.lang.Object[] newArray(int)>
<com.android.internal.util.Objects: int hashCode(java.lang.Object[])>
<android.os.storage.StorageVolume: java.lang.String getPath()>
<com.android.server.BackupManagerService$BackupState: void <clinit>()>
<android.widget.LinearLayout: int getChildrenSkipCount(android.view.View,int)>
<android.animation.AnimatorSet: java.util.ArrayList access$200(android.animation.AnimatorSet)>
<android.app.Activity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
<android.widget.ActivityChooserView: android.content.Context access$900(android.widget.ActivityChooserView)>
<android.util.Base64InputStream: void <clinit>()>
<android.app.ActivityThread$ApplicationThread: void setHttpProxy(java.lang.String,java.lang.String,java.lang.String)>
<android.graphics.Rect: boolean intersects(android.graphics.Rect,android.graphics.Rect)>
<android.net.wifi.p2p.WifiP2pDevice$1: android.net.wifi.p2p.WifiP2pDevice[] newArray(int)>
<GenerationGG: android.app.DownloadManager get_androidappDownloadManager()>
<android.text.DynamicLayout$ChangeWatcher: void <init>(android.text.DynamicLayout)>
<android.app.Activity: void onWindowAttributesChanged(android.view.WindowManager$LayoutParams)>
<com.android.server.connectivity.Tethering$TetherInterfaceSM$TetheredState: void <init>(com.android.server.connectivity.Tethering$TetherInterfaceSM)>
<com.android.server.TelephonyRegistry$Record: void <init>()>
<com.android.server.pm.PackageManagerService: java.util.List queryInstrumentation(java.lang.String,int)>
<android.util.Base64OutputStream: byte[] embiggen(byte[],int)>
<android.net.DhcpStateMachine: void access$700(android.net.DhcpStateMachine,com.android.internal.util.IState)>
<android.graphics.Matrix: void native_setScale(int,float,float,float,float)>
<android.app.Activity: java.util.HashMap onRetainNonConfigurationChildInstances()>
<android.gesture.GestureStroke: android.graphics.Path getPath()>
<android.server.BluetoothHealthProfileHandler: void errorLog(java.lang.String)>
<android.net.DummyDataStateTracker: void startMonitoring(android.content.Context,android.os.Handler)>
<android.util.JsonWriter: android.util.JsonWriter value(long)>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: com.android.internal.os.BatteryStatsImpl getBatteryStats()>
<android.content.ISyncContext$Stub: android.os.IBinder asBinder()>
<android.os.Binder: android.os.IInterface queryLocalInterface(java.lang.String)>
<android.content.Loader: void <init>(android.content.Context)>
<com.android.internal.telephony.RetryManager: boolean isRetryNeeded()>
<android.webkit.WebSettings$EventHandler: void <init>(android.webkit.WebSettings,android.webkit.WebSettings$1)>
<com.android.server.wm.Session: java.lang.String toString()>
<android.bluetooth.BluetoothHealthAppConfiguration: java.lang.String toString()>
<android.widget.ExpandableListConnector: boolean isEnabled(int)>
<android.view.LayoutInflater$BlinkLayout$1: boolean handleMessage(android.os.Message)>
<android.app.SharedPreferencesImpl: java.lang.String getString(java.lang.String,java.lang.String)>
<android.media.AudioService$SoundPoolCallback: void setLastSample(int)>
<android.net.MobileDataStateTracker: void sloge(java.lang.String)>
<android.os.ZygoteStartFailedEx: void <init>(java.lang.String)>
<android.view.HardwareRenderer$GlRenderer: void initializeEgl()>
<android.speech.tts.TextToSpeech: java.lang.String access$100(android.speech.tts.TextToSpeech)>
<android.widget.PopupWindow: int computeFlags(int)>
<android.renderscript.FieldPacker: void addF64(android.renderscript.Double4)>
<android.os.Parcel$1: java.lang.Object[] newArray(int)>
<android.os.Process: long getFreeMemory()>
<com.android.internal.textservice.ITextServicesSessionListener$Stub$Proxy: android.os.IBinder asBinder()>
<android.view.animation.Animation: void <init>()>
<android.widget.RelativeLayout$DependencyGraph$Node: void setPooled(boolean)>
<GenerationGG: android.view.inputmethod.EditorInfo get_androidviewinputmethodEditorInfo()>
<android.view.Window: java.lang.String access$100(android.view.Window)>
<com.android.server.am.ActivityStack: com.android.server.am.ActivityRecord moveActivityToFrontLocked(int)>
<android.content.pm.Signature$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.app.ActivityThread$ResourcesKey: void <init>(java.lang.String,float)>
<android.util.JsonReader: android.util.JsonToken decodeLiteral()>
<android.os.TokenWatcher$1: void <init>(android.os.TokenWatcher)>
<android.app.SearchDialog$SearchBar: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback)>
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: int getHistorySize()>
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLatitude()>
<android.app.admin.DeviceAdminInfo$PolicyInfo: void <init>(int,java.lang.String,int,int)>
<android.net.UrlQuerySanitizer: boolean getPreferFirstRepeatedParameter()>
<com.android.server.wm.InputManager: int getSwitchState(int,int,int)>
<android.webkit.WebView: boolean nativeFocusCandidateIsAutoComplete()>
<Wrapper_android_hardware_Camera: void test_android_hardware_Camera()>
<android.graphics.Point: java.lang.String toString()>
<android.widget.DatePicker$SavedState: int access$1200(android.widget.DatePicker$SavedState)>
<com.android.internal.telephony.gsm.UsimPhoneBookManager$PbrFile: void parseTag(com.android.internal.telephony.gsm.SimTlv,int)>
<android.security.KeyChain: android.content.Intent createInstallIntent()>
<android.widget.ListView: android.graphics.drawable.Drawable getDivider()>
<android.telephony.SignalStrength: void <init>()>
<android.webkit.WebSettings: boolean getDisplayZoomControls()>
<android.media.MediaPlayer: android.media.Metadata getMetadata(boolean,boolean)>
<Wrapper_android_mtp_MtpDeviceInfo: void test_android_mtp_MtpDeviceInfo()>
<android.view.WindowManager$BadTokenException: void <init>(java.lang.String)>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>
<GenerationGG: android.graphics.Xfermode get_androidgraphicsXfermode()>
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getRtpmap(int)>
<android.server.BluetoothService: android.content.Context access$700(android.server.BluetoothService)>
<android.graphics.Paint: int native_breakText(char[],int,int,float,float[])>
<com.android.internal.telephony.BaseCommands: void setOnNewCdmaSms(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.DataConnectionAc: com.android.internal.telephony.DataConnection$UpdateLinkPropertyResult rspUpdateLinkPropertiesDataCallState(android.os.Message)>
<java.lang.Object: boolean move(int)>
<android.net.LocalSocket: int getReceiveBufferSize()>
<android.widget.AbsListView$RecycleBin: boolean shouldRecycleViewType(int)>
<android.app.SharedPreferencesImpl: int access$300(android.app.SharedPreferencesImpl)>
<android.media.AudioService$AudioSystemThread: void <init>(android.media.AudioService)>
<android.widget.AutoCompleteTextView: int getThreshold()>
<android.net.Uri$HierarchicalUri: void appendSspTo(java.lang.StringBuilder)>
<android.widget.LinearLayout: int getDividerPadding()>
<android.app.SearchableInfo: int getImeOptions()>
<android.widget.AbsListView: int getTranscriptMode()>
<android.telephony.PhoneStateListener: void onMessageWaitingIndicatorChanged(boolean)>
<android.widget.TextView$Marquee: void resetScroll()>
<android.net.wifi.WifiStateMachine: void access$2200(android.net.wifi.WifiStateMachine,android.os.Message)>
<android.drm.DrmRights: java.lang.String getMimeType()>
<com.android.internal.os.RuntimeInit: android.os.IBinder getApplicationObject()>
<com.android.server.PowerManagerService$BrightnessState: void setTargetLocked(int,int,int,int)>
<android.bluetooth.BluetoothDeviceProfileState: void access$2600(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.IState)>
<com.android.internal.telephony.BaseCommands: void registerForOffOrNotAvailable(android.os.Handler,int,java.lang.Object)>
<android.widget.ZoomButtonsController: void refreshPositioningVariables()>
<android.server.BluetoothHealthProfileHandler$HealthChannel: int access$902(android.server.BluetoothHealthProfileHandler$HealthChannel,int)>
<GenerationGG: android.content.ComponentCallbacks get_androidcontentComponentCallbacks()>
<android.webkit.WebViewCore: void sendMessage(android.os.Message)>
<android.widget.Gallery$LayoutParams: void <init>(android.content.Context,android.util.AttributeSet)>
<com.android.server.PowerManagerService: boolean access$5300(com.android.server.PowerManagerService)>
<android.text.TextLine: float ascent(int)>
<android.view.View: android.view.View getRootView()>
<android.app.admin.DeviceAdminInfo: java.util.ArrayList getUsedPolicies()>
<android.test.mock.MockCursor: java.lang.String getColumnName(int)>
<android.webkit.JWebCoreJavaBridge: void nativeConstructor()>
<android.app.ContextImpl$27: void <init>()>
<com.android.internal.telephony.BaseCommands: void registerForAvailable(android.os.Handler,int,java.lang.Object)>
<java.lang.Object: int getAttributeResourceValue(java.lang.String,java.lang.String,int)>
<android.content.pm.ResolveInfo: void <init>()>
<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: int getRetrievalAllowingWindowLocked()>
<android.webkit.WebResourceResponse: java.io.InputStream getData()>
<android.media.AudioService: int getMsgBase(int)>
<android.bluetooth.BluetoothDeviceProfileState$BondedDevice: void <init>(android.bluetooth.BluetoothDeviceProfileState)>
<android.content.res.XmlBlock$Parser: java.lang.Object getProperty(java.lang.String)>
<android.app.FragmentManagerImpl$3: void <init>(android.app.FragmentManagerImpl,java.lang.String,int)>
<android.media.JetPlayer: java.lang.Object clone()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isEnabled()>
<android.net.LinkAddress: void <clinit>()>
<android.graphics.drawable.NinePatchDrawable$NinePatchState: int getChangingConfigurations()>
<android.view.View$9: void setValue(android.view.View,float)>
<android.content.res.Configuration: int compareTo(android.content.res.Configuration)>
<android.os.Debug: void resetGlobalAllocCount()>
<android.media.JetPlayer: boolean setMuteFlags(int,boolean)>
<android.animation.AnimatorSet$DependencyListener: void onAnimationRepeat(android.animation.Animator)>
<com.android.internal.telephony.DataConnection$CallSetupException: void <init>(int)>
<android.hardware.GeomagneticField: float getDeclination()>
<android.media.IAudioFocusDispatcher$Stub: void <init>()>
<android.net.http.CertificateChainValidator: void <init>()>
<android.net.sip.SipAudioCall$Listener: void onChanged(android.net.sip.SipAudioCall)>
<com.android.server.CountryDetectorService$1: void onCountryDetected(android.location.Country)>
<android.net.NetworkUtils: java.lang.String getDhcpError()>
<com.android.internal.net.NetworkStatsFactory: void parseLine(java.util.ArrayList,java.util.ArrayList,java.util.HashMap)>
<android.widget.ZoomButtonsController: int access$400()>
<com.android.server.usb.UsbDeviceManager: android.content.ContentResolver access$000(com.android.server.usb.UsbDeviceManager)>
<android.view.ViewRootImpl$TakenSurfaceHolder: boolean onAllowLockCanvas()>
<android.nfc.tech.MifareClassic: void validateBlock(int)>
<android.nfc.NdefMessage: void <init>(android.nfc.NdefRecord[])>
<com.android.server.PowerManagerService: boolean access$5302(com.android.server.PowerManagerService,boolean)>
<android.widget.AbsListView: int getCacheColorHint()>
<android.net.wifi.p2p.WifiP2pManager: void <init>(android.net.wifi.p2p.IWifiP2pManager)>
<android.net.NetworkStatsHistory: void <init>(java.io.DataInputStream)>
<android.nfc.tech.NfcF: android.nfc.Tag getTag()>
<com.android.internal.util.XmlUtils: int parseUnsignedIntAttribute(java.lang.CharSequence)>
<com.android.server.LocationManagerService: boolean geocoderIsPresent()>
<android.hardware.usb.UsbInterface: java.lang.String toString()>
<android.webkit.WebSettings: android.webkit.WebSettings$PluginState getPluginState()>
<android.animation.AnimatorListenerAdapter: void onAnimationCancel(android.animation.Animator)>
<android.os.storage.StorageVolume: java.lang.String toString()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: java.lang.String getNid()>
<android.media.audiofx.BassBoost$BaseParameterListener: void <init>(android.media.audiofx.BassBoost,android.media.audiofx.BassBoost$1)>
<com.android.internal.telephony.DataConnection$DcActiveState: void <init>(com.android.internal.telephony.DataConnection,com.android.internal.telephony.DataConnection$1)>
<com.android.server.location.LocationBasedCountryDetector$1: void onProviderDisabled(java.lang.String)>
<android.view.ViewRootImpl: void dispatchResized(int,int,android.graphics.Rect,android.graphics.Rect,boolean,android.content.res.Configuration)>
<android.app.FragmentManagerImpl: boolean dispatchContextItemSelected(android.view.MenuItem)>
<android.view.View: void assignParent(android.view.ViewParent)>
<android.graphics.Path: void addCircle(float,float,float,android.graphics.Path$Direction)>
<android.graphics.Region: boolean getBounds(android.graphics.Rect)>
<android.view.GLES20Canvas: boolean callDrawGLFunction(int)>
<android.graphics.Bitmap: void copyPixelsFromBuffer(java.nio.Buffer)>
<android.net.rtp.AudioCodec: android.net.rtp.AudioCodec getCodec(int,java.lang.String,java.lang.String)>
<android.content.ContentValues: java.util.Set keySet()>
<com.android.server.accessibility.TouchExplorer: void sendMotionEventStripInactivePointers(android.view.MotionEvent,int)>
<com.android.internal.view.menu.ActionMenuView$LayoutParams: void <init>(int,int)>
<android.webkit.WebViewCore: void nativeGeolocationPermissionsProvide(java.lang.String,boolean,boolean)>
<android.media.MediaPlayer: void setOnPreparedListener(android.media.MediaPlayer$OnPreparedListener)>
<android.widget.AutoCompleteTextView: android.widget.Filter getFilter()>
<android.test.mock.MockContentProvider: boolean onCreate()>
<com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection: void <init>(com.android.internal.telephony.DataConnection)>
<android.net.wifi.WpsStateMachine: void access$400(android.net.wifi.WpsStateMachine,com.android.internal.util.IState)>
<android.os.RecoverySystem$1: void onReceive(android.content.Context,android.content.Intent)>
<android.gesture.GestureStroke: void serialize(java.io.DataOutputStream)>
<com.android.internal.telephony.gsm.GsmMmiCode: boolean isServiceCodeCallForwarding(java.lang.String)>
<android.hardware.usb.UsbRequest: boolean queue(java.nio.ByteBuffer,int)>
<GenerationGG: android.os.Process get_androidosProcess()>
<android.widget.ExpandableListView: int getPackedPositionGroup(long)>
<android.inputmethodservice.InputMethodService$InputMethodSessionImpl: void displayCompletions(android.view.inputmethod.CompletionInfo[])>
<android.widget.OverScroller$SplineOverScroller: int access$500(android.widget.OverScroller$SplineOverScroller)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$1800(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,android.os.Message)>
<android.opengl.GLUtils: int getInternalFormat(android.graphics.Bitmap)>
<android.graphics.TemporaryBuffer: void <clinit>()>
<android.media.AudioService$VolumeStreamState: int access$802(android.media.AudioService$VolumeStreamState,int)>
<Wrapper_android_util_TypedValue: void test_android_util_TypedValue()>
<android.view.KeyCharacterMap: int getKeyboardType()>
<android.text.Layout: boolean isLevelBoundary(int)>
<android.text.method.CharacterPickerDialog$OptionsAdapter: void <init>(android.text.method.CharacterPickerDialog,android.content.Context)>
<android.net.http.AndroidHttpClientConnection: void assertNotOpen()>
<com.android.internal.widget.LockPatternUtils$PasswordFileObserver: void onEvent(int,java.lang.String)>
<android.text.Layout: int getLineBounds(int,android.graphics.Rect)>
<android.view.Display: void nativeClassInit()>
<android.content.ContentProvider$Transport: java.lang.String getProviderName()>
<android.net.wifi.WifiStateMachine$DriverStoppingState: void enter()>
<com.android.internal.os.HandlerCaller: void <init>(android.content.Context,android.os.Looper,com.android.internal.os.HandlerCaller$Callback)>
<android.opengl.GLSurfaceView$ComponentSizeChooser: void <init>(android.opengl.GLSurfaceView,int,int,int,int,int,int)>
<android.widget.ScrollBarDrawable: void setParameters(int,int,int,boolean)>
<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void destroy()>
<android.renderscript.Allocation: void copyTo(short[])>
<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall access$700(com.android.internal.telephony.sip.SipPhone$SipConnection)>
<android.renderscript.Element: android.renderscript.Element F64_4(android.renderscript.RenderScript)>
<android.media.AudioTrack: void <init>(int,int,int,int,int,int)>
<android.net.Uri$HierarchicalUri: java.lang.String makeUriString()>
<com.android.internal.view.menu.ActionMenuItem: boolean expandActionView()>
<android.graphics.Paint: void nSetShadowLayer(float,float,float,int)>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder penaltyLog()>
<com.android.server.pm.PackageManagerService$DefaultContainerConnection: void onServiceDisconnected(android.content.ComponentName)>
<android.app.IThumbnailRetriever$Stub: android.os.IBinder asBinder()>
<android.util.Xml: android.util.AttributeSet asAttributeSet(org.xmlpull.v1.XmlPullParser)>
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setIcon(android.graphics.drawable.Drawable)>
<android.content.res.Resources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>
<android.animation.AnimatorSet: boolean isStarted()>
<android.hardware.usb.UsbEndpoint: java.lang.String toString()>
<android.content.SyncManager: long jitterize(long,long)>
<android.view.MenuInflater: java.lang.Object[] access$300(android.view.MenuInflater)>
<GenerationGG: android.drm.DrmEvent get_androiddrmDrmEvent()>
<android.nfc.TransceiveResult: void writeToParcel(android.os.Parcel,int)>
<android.content.SyncAdaptersCache$MySerializer: void writeAsXml(java.lang.Object,org.xmlpull.v1.XmlSerializer)>
<android.widget.VideoView$4$1: void <init>(android.widget.VideoView$4)>
<android.widget.RelativeLayout: boolean positionChildHorizontal(android.view.View,android.widget.RelativeLayout$LayoutParams,int,boolean)>
<android.webkit.GeolocationPermissions: java.util.Set access$000()>
<android.webkit.WebViewCore: void access$6700(android.webkit.WebViewCore,java.lang.String[])>
<android.security.KeyChain$AliasResponse: void <init>(android.security.KeyChainAliasCallback,android.security.KeyChain$1)>
<android.content.res.ObbScanner: void getObbInfo_native(java.lang.String,android.content.res.ObbInfo)>
<android.graphics.ComposePathEffect: void <init>(android.graphics.PathEffect,android.graphics.PathEffect)>
<android.view.inputmethod.InputMethodSubtype$1: void <init>()>
<android.content.Intent: void setAllowFds(boolean)>
<android.webkit.ZoomManager$FocusMovementQueue: void clear()>
<android.util.Xml: void parse(java.io.Reader,org.xml.sax.ContentHandler)>
<android.server.BluetoothPanProfileHandler$BluetoothPanDevice: java.lang.String access$600(android.server.BluetoothPanProfileHandler$BluetoothPanDevice)>
<android.media.audiofx.Virtualizer: void <init>(int,int)>
<android.graphics.Path: void native_addPath(int,int)>
<android.app.backup.FileBackupHelperBase: boolean isKeyInList(java.lang.String,java.lang.String[])>
<android.text.TextLine: android.text.TextLine recycle(android.text.TextLine)>
<android.app.backup.BackupAgent: void onFullBackup(android.app.backup.FullBackupDataOutput)>
<android.widget.RemoteViews: void setRelativeScrollPosition(int,int)>
<android.hardware.Camera: void addCallbackBuffer(byte[])>
<android.app.ProgressDialog: java.lang.String access$100(android.app.ProgressDialog)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromSocket(java.net.Socket)>
<android.webkit.WebSettings: void setAllowFileAccess(boolean)>
<android.text.style.SuggestionSpan$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.view.FocusFinder: boolean isBetterCandidate(int,android.graphics.Rect,android.graphics.Rect,android.graphics.Rect)>
<android.bluetooth.BluetoothDeviceProfileState$PbapServiceListener: void onServiceDisconnected()>
<com.android.server.WallpaperManagerService: void access$100(com.android.server.WallpaperManagerService)>
<android.net.NetworkStatsHistory: void writeToParcel(android.os.Parcel,int)>
<android.view.InputEventConsistencyVerifier$KeyState: android.view.InputEventConsistencyVerifier$KeyState obtain(int,int,int)>
<android.util.JsonReader: android.util.JsonScope pop()>
<com.android.server.am.CompatModePackages$1: void <init>(com.android.server.am.CompatModePackages)>
<GenerationGG: android.renderscript.AllocationAdapter get_androidrenderscriptAllocationAdapter()>
<com.android.internal.telephony.BaseCommands: void unSetOnUSSD(android.os.Handler)>
<android.os.WorkSource: void set(android.os.WorkSource)>
<com.android.server.location.LocationProviderProxy$Connection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<android.webkit.WebStorage: void nativeDeleteOrigin(java.lang.String)>
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: void <init>(android.os.IBinder)>
<android.widget.TabHost: android.view.View getCurrentTabView()>
<android.text.method.TextKeyListener$Capitalize: void <clinit>()>
<android.app.ListFragment: void onDestroyView()>
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.Menu getMenu()>
<android.widget.MultiAutoCompleteTextView: void setTokenizer(android.widget.MultiAutoCompleteTextView$Tokenizer)>
<android.view.Gravity: boolean isHorizontal(int)>
<android.media.AudioService$ScoClient: int totalCount()>
<android.drm.DrmManagerClient: int getEventType(int)>
<java.lang.Object: int getAttributeResourceValue(int,int)>
<android.view.View$2: boolean apply(android.view.View)>
<android.bluetooth.BluetoothTetheringDataTracker$2: void <init>(android.bluetooth.BluetoothTetheringDataTracker)>
<android.widget.TextView: int getErrorY()>
<android.content.SyncManager: android.os.PowerManager access$1800(android.content.SyncManager)>
<android.nfc.Tag: void <init>(byte[],int[],android.os.Bundle[],int,android.nfc.INfcTag)>
<android.location.Address: java.lang.String getSubLocality()>
<android.telephony.SmsMessage: void <init>(com.android.internal.telephony.SmsMessageBase)>
<android.widget.TextView: void setCustomSelectionActionModeCallback(android.view.ActionMode$Callback)>
<android.net.wifi.p2p.WifiP2pService: int access$202(android.net.wifi.p2p.WifiP2pService,int)>
<android.server.BluetoothService: android.bluetooth.BluetoothPan access$1002(android.server.BluetoothService,android.bluetooth.BluetoothPan)>
<android.graphics.Path: void native_close(int)>
<android.widget.RelativeLayout: boolean shouldDelayChildPressedState()>
<android.view.InputChannel: void nativeReadFromParcel(android.os.Parcel)>
<com.android.server.connectivity.Tethering: void <clinit>()>
<android.widget.SimpleAdapter$SimpleFilter: void <init>(android.widget.SimpleAdapter)>
<android.graphics.Typeface: void nativeUnref(int)>
<android.view.ViewConfiguration: int getScaledTouchExplorationTapSlop()>
<android.view.inputmethod.CorrectionInfo: int describeContents()>
<com.android.server.connectivity.Vpn: int jniSetRoutes(java.lang.String,java.lang.String)>
<android.view.ViewTreeObserver: void removeOnGlobalFocusChangeListener(android.view.ViewTreeObserver$OnGlobalFocusChangeListener)>
<com.android.internal.statusbar.StatusBarIcon$1: java.lang.Object[] newArray(int)>
<DumbClass: void DumbMethod54()>
<android.view.WindowManager$LayoutParams$1: void <init>()>
<android.widget.TabWidget: void setLeftStripDrawable(android.graphics.drawable.Drawable)>
<android.speech.tts.SynthesisRequest: int getPitch()>
<android.webkit.LoadListener: java.lang.String originalUrl()>
<android.content.res.StringBlock$StyleIDs: int access$500(android.content.res.StringBlock$StyleIDs)>
<android.media.IRemoteControlClient$Stub: void <init>()>
<com.android.internal.telephony.sip.SipPhone$SipCall: void switchWith(com.android.internal.telephony.sip.SipPhone$SipCall)>
<android.server.BluetoothService: java.lang.String[] listInState(int)>
<android.widget.VideoView$5: void onBufferingUpdate(android.media.MediaPlayer,int)>
<com.android.server.pm.PackageManagerService$5: void <init>(com.android.server.pm.PackageManagerService,int,com.android.server.pm.PackageManagerService$InstallArgs)>
<android.preference.Preference: java.lang.CharSequence getSummary()>
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void calculateValue(float)>
<android.content.IntentFilter: void addDataAuthority(java.lang.String,java.lang.String)>
<android.sax.Element: void setTextElementListener(android.sax.TextElementListener)>
<android.app.PendingIntent: int describeContents()>
<Wrapper_android_drm_DrmRights: void test_android_drm_DrmRights()>
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.protocol.HttpContext)>
<android.net.INetworkStatsService$Stub: android.os.IBinder asBinder()>
<android.widget.GridLayout: int clip(android.widget.GridLayout$Interval,boolean,int)>
<android.widget.ZoomButtonsController: void access$200(android.widget.ZoomButtonsController)>
<com.android.internal.view.menu.SubMenuBuilder: android.view.Menu getParentMenu()>
<android.app.FragmentManagerImpl: void freeBackStackIndex(int)>
<android.renderscript.Element$DataType: android.renderscript.Element$DataType[] values()>
<android.app.backup.IRestoreSession$Stub$Proxy: void <init>(android.os.IBinder)>
<android.nfc.TechListParcel$1: android.nfc.TechListParcel[] newArray(int)>
<android.webkit.WebSettings$TextSize: android.webkit.WebSettings$TextSize[] values()>
<android.content.res.Configuration: void setToDefaults()>
<android.view.accessibility.AccessibilityNodeInfo: java.lang.CharSequence getClassName()>
<android.net.http.Request: void cancel()>
<Wrapper_android_media_audiofx_BassBoost: void test_android_media_audiofx_BassBoost()>
<android.app.Instrumentation: void callActivityOnUserLeaving(android.app.Activity)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfPlLoaded: void onRecordLoaded(android.os.AsyncResult)>
<android.widget.Gallery: boolean onFling(android.view.MotionEvent,android.view.MotionEvent,float,float)>
<android.net.wifi.WifiNative: boolean startFilteringMulticastV4Packets()>
<android.widget.AbsListView: int getDistance(android.graphics.Rect,android.graphics.Rect,int)>
<android.graphics.RectF: void writeToParcel(android.os.Parcel,int)>
<android.accounts.AuthenticatorDescription: void <init>(java.lang.String,java.lang.String,int,int,int,int)>
<android.opengl.GLSurfaceView$LogWriter: void flush()>
<android.server.BluetoothEventLoop: void stop()>
<android.app.LoaderManagerImpl: void doRetain()>
<android.inputmethodservice.InputMethodService: void onDisplayCompletions(android.view.inputmethod.CompletionInfo[])>
<android.content.pm.PathPermission$1: void <init>()>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: int getState()>
<android.util.TimingLogger: void reset(java.lang.String,java.lang.String)>
<android.ddm.DdmHandleAppName: void <clinit>()>
<android.app.admin.DeviceAdminInfo: void writePoliciesToXml(org.xmlpull.v1.XmlSerializer)>
<com.android.server.MountService$MountServiceBinderListener: void <init>(com.android.server.MountService,android.os.storage.IMountServiceListener)>
<android.util.Base64OutputStream: void write(int)>
<android.view.VelocityTracker$1: android.util.Poolable newInstance()>
<android.speech.tts.BlockingMediaPlayer$4: void onCompletion(android.media.MediaPlayer)>
<android.database.sqlite.SQLiteDatabase: void native_releaseCustomFunction(int)>
<android.webkit.BrowserFrame: void access$100(android.webkit.BrowserFrame,int)>
<GenerationGG: android.test.ProviderTestCase get_androidtestProviderTestCase()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: java.lang.String access$700(com.android.internal.telephony.cdma.CdmaLteUiccRecords)>
<com.android.internal.telephony.cat.PlayToneParams: void <init>(com.android.internal.telephony.cat.CommandDetails,com.android.internal.telephony.cat.TextMessage,com.android.internal.telephony.cat.Tone,com.android.internal.telephony.cat.Duration,boolean)>
<android.os.AsyncTask$2: void <init>(android.os.AsyncTask)>
<android.preference.Preference: boolean isPersistent()>
<android.webkit.WebView$TouchEventQueue: void reset()>
<android.widget.TextView: void resolveDrawables()>
<android.widget.Toast: float getVerticalMargin()>
<android.nfc.NdefRecord: byte[] getType()>
<android.graphics.Canvas: int getDensity()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setMainCountryForCode(boolean)>
<com.android.internal.telephony.cat.ResultCode: void <clinit>()>
<android.view.VolumePanel: void <clinit>()>
<GenerationGG: android.location.Address get_androidlocationAddress()>
<Wrapper_android_net_rtp_AudioCodec: void test_android_net_rtp_AudioCodec()>
<android.app.DownloadManager: void <clinit>()>
<android.inputmethodservice.KeyboardView$3: void swipeRight()>
<android.widget.FastScroller: void cancelPendingDrag()>
<com.android.server.LocationManagerService: java.util.List _getAllProvidersLocked()>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorEventListener,android.hardware.Sensor,int,android.os.Handler)>
<android.renderscript.RenderScript: void rsnAllocationData2D(int,int,int,int,int,int,int,int,int[],int)>
<android.webkit.CookieManager: void nativeSetAcceptCookie(boolean)>
<com.android.server.pm.Installer: void <init>()>
<android.gesture.GestureStore: void removeGesture(java.lang.String,android.gesture.Gesture)>
<android.media.MediaMetadataRetriever: void _setDataSource(java.lang.String,java.lang.String[],java.lang.String[])>
<android.graphics.drawable.Drawable: int[] getState()>
<android.widget.BaseExpandableListAdapter: void <init>()>
<android.util.Slog: int i(java.lang.String,java.lang.String)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable mutate()>
<android.animation.ValueAnimator: java.lang.Object getAnimatedValue()>
<GenerationGG: android.text.InputFilter[] get_androidtextInputFilter_ARRAY_()>
<android.app.ActivityThread: java.lang.String removeProviderLocked(android.content.IContentProvider)>
<android.database.sqlite.SQLiteDatabase$DatabaseReentrantLock: java.lang.Thread getOwner()>
<android.app.TimePickerDialog: void onTimeChanged(android.widget.TimePicker,int,int)>
<android.nfc.tech.MifareUltralight: int getType()>
<android.view.View: boolean removeCallbacks(java.lang.Runnable)>
<android.view.Surface: void nativeClassInit()>
<android.widget.AdapterViewAnimator$SavedState: void <init>(android.os.Parcelable,int)>
<android.database.ContentObserver$Transport: void <init>(android.database.ContentObserver)>
<com.android.server.wm.BlackFrame: void <init>(android.view.SurfaceSession,android.graphics.Rect,android.graphics.Rect,int)>
<android.app.ContextImpl$5: void <init>()>
<android.view.GLES20RecordingCanvas: void drawCircle(float,float,float,android.graphics.Paint)>
<android.database.sqlite.SQLiteDatabase: void finalizeStatementLater(int)>
<android.view.IWindowSession$Stub: android.os.IBinder asBinder()>
<android.content.ContentProviderOperation: void <clinit>()>
<android.widget.RemoteViews: void setDisplayedChild(int,int)>
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setIntValues(int[])>
<GenerationGG: android.test.suitebuilder.annotation.Smoke get_androidtestsuitebuilderannotationSmoke()>
<android.widget.ListPopupWindow: void setVerticalOffset(int)>
<com.android.server.ThrottleService$DataRecorder: void setPeriodEnd(java.util.Calendar)>
<android.widget.SlidingDrawer: android.view.View getHandle()>
<android.os.Parcel: void writeSerializable(java.io.Serializable)>
<android.test.mock.MockContext: android.os.Looper getMainLooper()>
<android.widget.TextView: int getVerticalOffset(boolean)>
<com.android.server.wm.Session: void setTransparentRegion(android.view.IWindow,android.graphics.Region)>
<android.text.TextUtils: boolean isEmpty(java.lang.CharSequence)>
<android.view.GLES20RecordingCanvas: void drawPatch(android.graphics.Bitmap,byte[],android.graphics.RectF,android.graphics.Paint)>
<android.webkit.WebView: int access$5800(android.webkit.WebView)>
<android.os.Debug: void <clinit>()>
<android.net.sip.SipAudioCall: boolean access$300(android.net.sip.SipAudioCall)>
<android.widget.DatePicker$SavedState$1: java.lang.Object[] newArray(int)>
<android.graphics.Region: boolean set(int,int,int,int)>
<android.webkit.WebView: android.webkit.WebViewCore$DrawData access$6902(android.webkit.WebView,android.webkit.WebViewCore$DrawData)>
<android.telephony.PhoneNumberUtils: int addPlusChar(java.lang.String)>
<android.widget.AbsListView: int computeVerticalScrollExtent()>
<android.net.wifi.p2p.WifiP2pGroup: void setInterface(java.lang.String)>
<android.accounts.Account: void <clinit>()>
<android.os.Debug: boolean waitingForDebugger()>
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void destroyAllDataConnectionList()>
<com.android.internal.telephony.cdma.CDMALTEPhone: void log(java.lang.String)>
<android.app.SharedPreferencesImpl: boolean getBoolean(java.lang.String,boolean)>
<android.app.ActivityManager$ProcessErrorStateInfo: void <clinit>()>
<android.widget.OverScroller: int getCurrX()>
<android.widget.GridLayout$Spec: void <init>(boolean,int,int,android.widget.GridLayout$Alignment)>
<android.view.inputmethod.BaseInputConnection: boolean reportFullscreenMode(boolean)>
<com.android.internal.telephony.BaseCommands: void unSetOnSmsStatus(android.os.Handler)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$3: void <init>(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<android.app.AlertDialog: void setButton(int,java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<com.android.internal.app.ActionBarImpl$ActionModeImpl: java.lang.CharSequence getSubtitle()>
<android.graphics.PointF: void readFromParcel(android.os.Parcel)>
<android.security.KeyChain: java.security.cert.X509Certificate toCertificate(byte[])>
<android.graphics.Matrix$1: boolean preRotate(float)>
<Wrapper_android_graphics_ImageFormat: void test_android_graphics_ImageFormat()>
<android.view.animation.TranslateAnimation: void initialize(int,int,int,int)>
<android.hardware.usb.IUsbManager$Stub: android.os.IBinder asBinder()>
<android.net.UrlQuerySanitizer: java.util.List getParameterList()>
<com.android.server.wm.ViewServer$ViewServerWorker: void windowsChanged()>
<android.test.mock.MockResources: java.lang.String getResourceTypeName(int)>
<android.view.GLES20Canvas: void <init>(int,boolean)>
<android.content.pm.InstrumentationInfo: void <init>(android.content.pm.InstrumentationInfo)>
<android.app.ContextImpl$24: void <init>()>
<android.os.SystemProperties: long getLong(java.lang.String,long)>
<com.android.server.net.NetworkAlertObserver: void <init>()>
<android.widget.TimePicker: boolean isEnabled()>
<junit.framework.TestSuite: void run(junit.framework.TestResult)>
<android.server.BluetoothAdapterStateMachine$Switching: void enter()>
<com.android.server.pm.PackageSignatures: void readXml(org.xmlpull.v1.XmlPullParser,java.util.ArrayList)>
<com.android.server.InputMethodManagerService: int[] access$500(com.android.server.InputMethodManagerService)>
<com.android.server.MountService: void unregisterListener(android.os.storage.IMountServiceListener)>
<android.view.animation.RotateAnimation: void <init>(float,float,int,float,int,float)>
<android.app.admin.IDevicePolicyManager$Stub: void <init>()>
<android.widget.PopupMenu: android.view.MenuInflater getMenuInflater()>
<android.preference.MultiSelectListPreference: java.lang.CharSequence[] getEntries()>
<android.widget.DatePicker$SavedState$1: void <init>()>
<android.graphics.drawable.NinePatchDrawable: android.graphics.Region getTransparentRegion()>
<android.app.Dialog: void invalidateOptionsMenu()>
<android.webkit.WebTextView: void updateCachedTextfield()>
<android.widget.TableLayout: boolean isShrinkAllColumns()>
<android.widget.TextView: boolean isCursorInsideEasyCorrectionSpan()>
<android.text.style.TextAppearanceSpan: int getSpanTypeId()>
<GenerationGG: android.nfc.NdefRecord get_androidnfcNdefRecord()>
<android.server.BluetoothEventLoop: void classInitNative()>
<android.appwidget.AppWidgetHost: void <clinit>()>
<android.view.ViewGroup: int getChildMeasureSpec(int,int,int)>
<android.webkit.WebViewClient: void onScaleChanged(android.webkit.WebView,float,float)>
<android.text.style.QuoteSpan: void <init>(int)>
<android.graphics.Canvas: void rotate(float,float,float)>
<com.android.internal.view.BaseSurfaceHolder: void unlockCanvasAndPost(android.graphics.Canvas)>
<android.webkit.WebView: int nativeFocusCandidateFramePointer()>
<android.os.StrictMode$VmPolicy: void <init>(int,java.util.HashMap,android.os.StrictMode$1)>
<com.android.server.DropBoxManagerService: android.content.BroadcastReceiver access$400(com.android.server.DropBoxManagerService)>
<java.lang.Object: android.view.MenuItem add(java.lang.CharSequence)>
<android.graphics.Paint: void setStrokeCap(android.graphics.Paint$Cap)>
<android.content.PeriodicSync: void <clinit>()>
<android.renderscript.Double2: void <init>(double,double)>
<android.net.Uri: int hashCode()>
<android.media.AudioService: int access$3800(android.media.AudioService)>
<android.view.inputmethod.InputMethodSubtype$1: android.view.inputmethod.InputMethodSubtype[] newArray(int)>
<android.net.NetworkStatsHistory$DataStreamUtils: long readVarLong(java.io.DataInputStream)>
<android.widget.Gallery: void setAnimationDuration(int)>
<android.renderscript.ProgramStore$DepthFunc: void <clinit>()>
<android.os.Process: void sendSignalQuiet(int,int)>
<com.android.internal.widget.ActionBarView$SavedState$1: void <init>()>
<android.net.http.CharArrayBuffers: int setLowercaseIndexOf(org.apache.http.util.CharArrayBuffer,int)>
<android.location.Address: void setExtras(android.os.Bundle)>
<android.renderscript.Element$DataKind: void <init>(java.lang.String,int,int)>
<android.app.ActivityThread: void ensureJitEnabled()>
<android.widget.BaseAdapter: boolean areAllItemsEnabled()>
<GenerationGG: android.graphics.Paint get_androidgraphicsPaint()>
<android.net.DhcpStateMachine: void access$1700(android.net.DhcpStateMachine,com.android.internal.util.IState)>
<com.android.internal.telephony.PhoneProxy: void logd(java.lang.String)>
<android.app.ActivityManager$RunningTaskInfo$1: void <init>()>
<com.android.internal.telephony.cat.Duration$1: void <init>()>
<GenerationGG: android.opengl.GLES20 get_androidopenglGLES20()>
<android.widget.ListPopupWindow: android.graphics.drawable.Drawable getBackground()>
<android.widget.TextView$PinnedPopupWindow: boolean isShowing()>
<com.android.server.BatteryService: void <clinit>()>
<android.preference.PreferenceActivity$4: void onClick(android.view.View)>
<GenerationGG: android.webkit.GeolocationPermissions$Callback get_androidwebkitGeolocationPermissions__Callback()>
<android.content.res.XmlBlock$Parser: int getNamespaceCount(int)>
<android.renderscript.RenderScript: android.renderscript.RenderScript$RSMessageHandler getMessageHandler()>
<com.android.server.BackupManagerService$RestoreState: com.android.server.BackupManagerService$RestoreState[] values()>
<android.test.mock.MockPackageManager: void setComponentEnabledSetting(android.content.ComponentName,int,int)>
<android.widget.PopupWindow: void unregisterForScrollChanged()>
<android.test.InstrumentationTestRunner: java.lang.Class getAnnotationClass(java.lang.String)>
<android.animation.ValueAnimator: long getFrameDelay()>
<android.widget.MultiAutoCompleteTextView: void performFiltering(java.lang.CharSequence,int,int,int)>
<android.graphics.PointF: void offset(float,float)>
<android.content.pm.VerifierDeviceIdentity: android.content.pm.VerifierDeviceIdentity generate()>
<com.android.server.AlarmManagerService: void remove(android.app.PendingIntent)>
<android.webkit.WebView: int computeVerticalScrollExtent()>
<android.text.style.SuggestionSpan: java.lang.String getNotificationTargetClassName()>
<android.widget.ListView: boolean showingBottomFadingEdge()>
<com.android.internal.telephony.gsm.SIMRecords$1: void <clinit>()>
<GenerationGG: android.app.backup.FullBackupDataOutput get_androidappbackupFullBackupDataOutput()>
<android.speech.tts.TextToSpeech: android.net.Uri makeResourceUri(java.lang.String,int)>
<android.webkit.WebSettings: void nativeSync(int)>
<android.content.ContentProviderOperation: boolean isWriteOperation()>
<android.renderscript.FieldPacker: void addU32(android.renderscript.Long4)>
<android.content.Intent$FilterComparison: boolean equals(java.lang.Object)>
<android.webkit.PerfChecker: void <init>()>
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.Call$State getState()>
<com.android.internal.telephony.SmsHeader$MiscElt: void <init>()>
<Wrapper_android_graphics_DiscretePathEffect: void test_android_graphics_DiscretePathEffect()>
<com.android.server.pm.Settings$1: void dumpFilter(java.io.PrintWriter,java.lang.String,android.content.IntentFilter)>
<android.webkit.WebView: void updateSelection()>
<android.widget.HorizontalScrollView: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<android.webkit.CallbackProxy: void <init>(android.content.Context,android.webkit.WebView)>
<android.view.ViewTreeObserver: void kill()>
<com.android.internal.backup.LocalTransport: void finishRestore()>
<android.view.KeyEvent: char getMatch(char[])>
<android.widget.MultiAutoCompleteTextView: boolean enoughToFilter()>
<android.webkit.HTML5VideoViewProxy: boolean onError(android.media.MediaPlayer,int,int)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimCdmaHomeLoaded: java.lang.String getEfName()>
<android.net.Uri$StringUri: boolean isRelative()>
<android.graphics.drawable.GradientDrawable$GradientState: void <init>(android.graphics.drawable.GradientDrawable$Orientation,int[])>
<android.inputmethodservice.KeyboardView$SwipeTracker: void addPoint(float,float,long)>
<android.widget.CalendarView$2: void onScrollStateChanged(android.widget.AbsListView,int)>
<android.net.INetworkManagementEventObserver$Stub: android.net.INetworkManagementEventObserver asInterface(android.os.IBinder)>
<android.media.AudioService$1: void <init>(android.media.AudioService)>
<android.net.wifi.WifiConfiguration$GroupCipher: void <clinit>()>
<android.view.View$7: java.lang.Object get(java.lang.Object)>
<GenerationGG: android.accounts.AccountAuthenticatorActivity get_androidaccountsAccountAuthenticatorActivity()>
<android.content.pm.PackageParser$ServiceIntentInfo: java.lang.String toString()>
<android.inputmethodservice.KeyboardView$SwipeTracker: float getYVelocity()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setPreferredInternationalPrefix(java.lang.String)>
<android.renderscript.Element: android.renderscript.Element I16(android.renderscript.RenderScript)>
<android.widget.TextView$Marquee: void <init>(android.widget.TextView)>
<com.android.server.WifiService: boolean shouldWifiBeEnabled()>
<android.media.AudioManager: java.lang.String getParameters(java.lang.String)>
<android.widget.AdapterViewAnimator$2: void <init>(android.widget.AdapterViewAnimator)>
<com.android.internal.os.BatteryStatsImpl$Counter: void <init>(java.util.ArrayList,android.os.Parcel)>
<android.renderscript.Element: android.renderscript.Element MESH(android.renderscript.RenderScript)>
<java.lang.Object: android.view.View getView(int,android.view.View,android.view.ViewGroup)>
<android.widget.RelativeLayout: void applyVerticalSizeRules(android.widget.RelativeLayout$LayoutParams,int)>
<android.view.ViewRootImpl$3: void setFixedSize(int,int)>
<com.android.i18n.phonenumbers.PhoneNumberMatch: int end()>
<com.android.server.am.ActivityManagerService: void addRecentTaskLocked(com.android.server.am.TaskRecord)>
<android.view.ViewGroup: boolean isTransformedTouchPointInView(float,float,android.view.View,android.graphics.PointF)>
<android.telephony.ServiceState: void <clinit>()>
<android.hardware.Camera: void native_release()>
<android.telephony.SignalStrength: int getEvdoEcio()>
<GenerationGG: android.view.View$OnSystemUiVisibilityChangeListener get_androidviewView__OnSystemUiVisibilityChangeListener()>
<android.graphics.Canvas: void native_drawText(int,java.lang.String,int,int,float,float,int,int)>
<com.android.server.DevicePolicyManagerService: java.util.List getActiveAdmins()>
<android.inputmethodservice.ExtractEditText: boolean hasVerticalScrollBar()>
<android.inputmethodservice.InputMethodService: void setBackDisposition(int)>
<android.webkit.HTML5VideoViewProxy: void onFrameAvailable(android.graphics.SurfaceTexture)>
<com.android.server.am.ActivityStack: void scheduleIdleLocked()>
<android.util.Base64InputStream: void close()>
<android.preference.DialogPreference: int getDialogLayoutResource()>
<android.view.View: float getTranslationX()>
<android.webkit.LoadListener: void tearDown()>
<android.test.InstrumentationTestCase: void injectInsrumentation(android.app.Instrumentation)>
<android.view.View: int getAccessibilityViewId()>
<android.webkit.BrowserFrame: void nativeStopLoading()>
<android.media.AudioTrack: int getNativeOutputSampleRate(int)>
<android.net.Uri$OpaqueUri: int describeContents()>
<android.bluetooth.BluetoothDeviceProfileState: int access$1000(android.bluetooth.BluetoothDeviceProfileState)>
<android.net.wifi.WifiInfo: void <clinit>()>
<com.android.server.ConnectivityService: int access$2000(com.android.server.ConnectivityService)>
<android.hardware.usb.UsbDevice: int getDeviceId(java.lang.String)>
<android.os.CountDownTimer: long access$100(android.os.CountDownTimer)>
<android.webkit.CookieManager$3: void <init>(android.webkit.CookieManager)>
<android.app.backup.BackupAgent: void onDestroy()>
<GenerationGG: android.text.method.MetaKeyKeyListener get_androidtextmethodMetaKeyKeyListener()>
<android.preference.EditTextPreference$SavedState$1: void <init>()>
<com.android.server.pm.PackageVerificationState: com.android.server.pm.PackageManagerService$InstallArgs getInstallArgs()>
<android.content.res.TypedArray: java.lang.String toString()>
<android.service.wallpaper.IWallpaperService$Stub: android.os.IBinder asBinder()>
<com.android.server.pm.PackageManagerService$11: void <init>(com.android.server.pm.PackageManagerService,boolean,boolean)>
<android.view.accessibility.AccessibilityNodeInfo: boolean getBooleanProperty(int)>
<android.app.SearchableInfo$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.nfc.tech.IsoDep: byte[] getHistoricalBytes()>
<android.widget.ListPopupWindow$2: void <init>(android.widget.ListPopupWindow)>
<android.server.BluetoothService: java.util.Collection getApplicationStateChangeCallbacks()>
<android.widget.SimpleExpandableListAdapter: int getChildrenCount(int)>
<com.android.server.ConnectivityService$1: void <init>(com.android.server.ConnectivityService)>
<com.android.internal.telephony.cat.CommandDetails$1: java.lang.Object[] newArray(int)>
<android.util.AndroidRuntimeException: void <init>(java.lang.String)>
<android.net.LocalSocketAddress: void <init>(java.lang.String,android.net.LocalSocketAddress$Namespace)>
<com.android.internal.app.ActionBarImpl: void addOnMenuVisibilityListener(android.app.ActionBar$OnMenuVisibilityListener)>
<android.graphics.Picture: void nativeEndRecording(int)>
<android.webkit.LoadListener: void data(byte[],int)>
<android.net.INetworkPolicyManager$Stub$Proxy: void <init>(android.os.IBinder)>
<android.hardware.Camera: android.hardware.Camera$PictureCallback access$100(android.hardware.Camera)>
<android.view.ViewConfiguration: int getMaximumFlingVelocity()>
<android.webkit.WebView: int access$2300(android.webkit.WebView)>
<android.graphics.Paint: void setTextSize(float)>
<android.view.GLES20Canvas: int nGetDisplayListSize(int)>
<com.android.internal.telephony.cdma.sms.BearerData: java.lang.String decodeUtf16(byte[],int,int)>
<android.view.Surface: void show()>
<android.util.Slog: int w(java.lang.String,java.lang.String)>
<com.android.internal.telephony.AdnRecordCache: void sendErrorResponse(android.os.Message,java.lang.String)>
<android.sax.RootElement: void <init>(java.lang.String,java.lang.String)>
<android.app.ActivityManager$ProcessErrorStateInfo$1: void <init>()>
<android.net.IConnectivityManager$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.server.LocationManagerService: int access$2400(com.android.server.LocationManagerService)>
<android.content.BroadcastReceiver: void setResultExtras(android.os.Bundle)>
<android.view.KeyEvent: boolean isScrollLockOn()>
<android.service.wallpaper.IWallpaperEngine$Stub: void <init>()>
<android.graphics.YuvImage: int[] calculateOffsets(int,int)>
<android.util.SparseArray: void remove(int)>
<android.animation.AnimatorSet: void setStartDelay(long)>
<android.animation.ObjectAnimator: void initAnimation()>
<GenerationGG: java.util.regex.Pattern get_javautilregexPattern()>
<com.android.internal.telephony.cat.CatCmdMessage: com.android.internal.telephony.cat.AppInterface$CommandType getCmdType()>
<android.net.wifi.SupplicantState$1: void <init>()>
<android.widget.Spinner$DropDownAdapter: boolean hasStableIds()>
<com.android.internal.telephony.cdma.CdmaConnection: void doDisconnect()>
<android.app.ExpandableListActivity: void onGroupCollapse(int)>
<android.media.JetPlayer: android.media.JetPlayer getJetPlayer()>
<android.content.IClipboard$Stub$Proxy: android.os.IBinder asBinder()>
<android.util.Xml$XmlSerializerFactory: void <clinit>()>
<com.android.internal.telephony.cdma.CdmaLteUiccFileHandler: java.lang.String getEFPath(int)>
<com.android.internal.telephony.PhoneSubInfo: void <init>(com.android.internal.telephony.Phone)>
<android.opengl.Matrix: void scaleM(float[],int,float[],int,float,float,float)>
<android.server.BluetoothPanProfileHandler$BluetoothPanDevice: java.lang.String access$502(android.server.BluetoothPanProfileHandler$BluetoothPanDevice,java.lang.String)>
<android.app.ActivityManager$RecentTaskInfo$1: java.lang.Object[] newArray(int)>
<android.bluetooth.BluetoothDeviceProfileState: void access$8500(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.IState)>
<com.android.internal.telephony.OperatorInfo$State: void <init>(java.lang.String,int)>
<android.app.ExpandableListActivity: void onGroupExpand(int)>
<android.test.suitebuilder.TestGrouping: java.util.List selectTestClasses(java.util.Set)>
<android.graphics.Paint: void getTextPath(char[],int,int,float,float,android.graphics.Path)>
<android.text.TextUtils: java.lang.String join(java.lang.CharSequence,java.lang.Object[])>
<android.graphics.Bitmap: android.graphics.Bitmap nativeCreate(int[],int,int,int,int,int,boolean)>
<android.app.ActivityManager$RunningAppProcessInfo: int describeContents()>
<android.webkit.WebSettings: boolean getBlockNetworkLoads()>
<android.widget.FrameLayout: int getPaddingTopWithForeground()>
<android.net.NetworkStatsHistory: void addLong(long[],int,long)>
<com.android.internal.view.menu.MenuItemImpl: boolean hasCollapsibleActionView()>
<com.android.server.NetworkManagementSocketTagger: int kernelToTag(java.lang.String)>
<android.media.IRemoteControlDisplay$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.server.ThrottleService: int access$400(com.android.server.ThrottleService)>
<android.graphics.Paint: android.graphics.PathEffect getPathEffect()>
<android.net.sip.SipSession$1: void onRegistrationTimeout(android.net.sip.ISipSession)>
<android.widget.NumberPicker: int access$1200(android.widget.NumberPicker)>
<android.widget.ListPopupWindow$PopupScrollListener: void onScroll(android.widget.AbsListView,int,int,int)>
<android.location.Address: java.lang.String getSubAdminArea()>
<android.graphics.Canvas: void native_drawArc(int,android.graphics.RectF,float,float,boolean,int)>
<com.android.internal.telephony.PhoneProxy: java.lang.String getIccSerialNumber()>
<android.graphics.Region: boolean isEmpty()>
<android.graphics.drawable.GradientDrawable: void <init>(android.graphics.drawable.GradientDrawable$Orientation,int[])>
<android.view.DisplayList: void <init>()>
<android.view.MotionEvent: float getTouchMinor()>
<com.android.internal.telephony.IccCardStatus: int getGsmUmtsSubscriptionAppIndex()>
<android.hardware.usb.UsbDevice: void <clinit>()>
<android.graphics.PorterDuff: void <init>()>
<android.nfc.INfcTag$Stub$Proxy: android.os.IBinder asBinder()>
<android.view.ViewRootImpl: int getRootMeasureSpec(int,int)>
<android.os.Handler: boolean hasMessages(int)>
<android.accounts.AccountManagerService: android.accounts.Account[] getAccountsFromCacheLocked(java.lang.String)>
<com.android.server.pm.Settings: void removeUserIdLPw(int)>
<android.location.Address: void setCountryCode(java.lang.String)>
<android.webkit.WebSettings: void postSync()>
<android.renderscript.RSIllegalArgumentException: void <init>(java.lang.String)>
<android.location.GeocoderParams$1: android.location.GeocoderParams[] newArray(int)>
<Wrapper_android_content_UriMatcher: void test_android_content_UriMatcher()>
<android.net.wifi.WifiNative: java.lang.String getNetworkVariableCommand(int,java.lang.String)>
<com.android.internal.view.menu.SubMenuBuilder: void setCallback(com.android.internal.view.menu.MenuBuilder$Callback)>
<android.inputmethodservice.Keyboard: int getMinWidth()>
<android.text.style.AbsoluteSizeSpan: void updateMeasureState(android.text.TextPaint)>
<android.mtp.MtpDevice: java.lang.String getDeviceName()>
<android.widget.OverScroller: int getStartX()>
<com.android.internal.telephony.cat.ValueParser: com.android.internal.telephony.cat.IconId retrieveIconId(com.android.internal.telephony.cat.ComprehensionTlv)>
<android.renderscript.RenderScript: void nContextFinish()>
<com.android.server.am.UsageStatsService: void readStatsFromFile()>
<android.view.GLES20Canvas: void <init>(boolean,boolean)>
<android.webkit.WebViewClient: boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String)>
<android.net.NetworkStatsHistory$ParcelUtils: void writeLongArray(android.os.Parcel,long[],int)>
<com.android.server.net.NetworkStatsService: int estimateResizeBuckets(android.net.NetworkStatsHistory,long)>
<android.net.DhcpInfo$1: android.net.DhcpInfo createFromParcel(android.os.Parcel)>
<com.android.server.NotificationPlayer$Command: java.lang.String toString()>
<android.bluetooth.IBluetoothCallback$Stub: void <init>()>
<android.inputmethodservice.KeyboardView: int getKeyIndices(int,int,int[])>
<android.media.SoundPool: void release()>
<android.app.SearchManager: void setOnCancelListener(android.app.SearchManager$OnCancelListener)>
<android.os.StrictMode$VmPolicy$Builder: android.os.StrictMode$VmPolicy$Builder penaltyDropBox()>
<com.android.internal.telephony.gsm.GsmSMSDispatcher$SmsCbConcatInfo: void <init>(com.android.internal.telephony.gsm.SmsCbHeader,java.lang.String,int,int)>
<android.app.Fragment: void setArguments(android.os.Bundle)>
<com.android.server.accessibility.TouchExplorer$PointerTracker: boolean isActiveOrWasLastActiveUpPointer(int)>
<GenerationGG: java.lang.String[] get_javalangString_ARRAY_()>
<android.view.View$7: void setValue(java.lang.Object,float)>
<com.android.server.wm.InputManager$Callbacks: void <init>(com.android.server.wm.InputManager,com.android.server.wm.InputManager$1)>
<android.widget.TableLayout$PassThroughHierarchyChangeListener: void <init>(android.widget.TableLayout,android.widget.TableLayout$1)>
<android.accounts.AccountManagerService: android.accounts.AuthenticatorDescription[] getAuthenticatorTypes()>
<android.os.MemoryFile$MemoryOutputStream: void <init>(android.os.MemoryFile,android.os.MemoryFile$1)>
<android.renderscript.Element: android.renderscript.Element BOOLEAN(android.renderscript.RenderScript)>
<android.widget.GridLayout$Axis: int getCount()>
<android.net.wifi.WifiWatchdogStateMachine: void access$3700(android.net.wifi.WifiWatchdogStateMachine,com.android.internal.util.IState)>
<android.content.UriMatcher: void <clinit>()>
<android.animation.Keyframe: android.animation.Keyframe ofFloat(float)>
<android.graphics.drawable.NinePatchDrawable: void <init>()>
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: android.view.View getCustomView()>
<com.android.internal.telephony.cat.LaunchBrowserParams: boolean setIcon(android.graphics.Bitmap)>
<android.database.sqlite.SQLiteDatabase: void native_finalize(int)>
<android.view.ViewRootImpl$AccessibilityInteractionController: void performAccessibilityActionClientThread(int,int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,long)>
<android.accounts.AuthenticatorDescription: android.accounts.AuthenticatorDescription newKey(java.lang.String)>
<android.net.Uri$OpaqueUri: int getPort()>
<android.view.Surface: void setCompatibilityTranslator(android.content.res.CompatibilityInfo$Translator)>
<GenerationGG: android.bluetooth.BluetoothHeadset get_androidbluetoothBluetoothHeadset()>
<android.os.Parcel: long[] createLongArray()>
<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: void setDesiredSize(int,int)>
<android.net.LocalSocket: void connect(android.net.LocalSocketAddress,int)>
<android.view.InputEventConsistencyVerifier: android.view.InputEventConsistencyVerifier$KeyState findKeyState(int,int,int,boolean)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: java.lang.String access$7000(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,java.lang.String)>
<com.android.server.am.ActivityManagerService: void clearProfilerLocked()>
<com.android.server.am.ActivityManagerService: java.lang.String processClass(com.android.server.am.ProcessRecord)>
<com.android.internal.os.BatteryStatsImpl: void noteWifiMulticastDisabledFromSourceLocked(android.os.WorkSource)>
<android.server.BluetoothService$3: void <init>(android.server.BluetoothService)>
<android.inputmethodservice.KeyboardView: void invalidateAllKeys()>
<android.app.backup.BackupAgent: void fullBackupFileTree(java.lang.String,java.lang.String,java.lang.String,java.util.HashSet,android.app.backup.FullBackupDataOutput)>
<android.webkit.WebChromeClient: boolean onJsConfirm(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)>
<android.content.pm.Signature: void <init>(android.os.Parcel)>
<com.android.server.am.ActivityManagerService: void removeUriPermissionIfNeededLocked(com.android.server.am.UriPermission)>
<android.view.Surface: void setAlpha(float)>
<android.app.QueuedWork: boolean hasPendingWork()>
<android.content.SyncManager: android.app.PendingIntent access$3300(android.content.SyncManager)>
<com.android.internal.telephony.cat.ToneSettings: void <init>(com.android.internal.telephony.cat.Duration,com.android.internal.telephony.cat.Tone,boolean)>
<android.view.accessibility.AccessibilityEvent: void setPackageName(java.lang.CharSequence)>
<android.graphics.Matrix: boolean native_preTranslate(int,float,float)>
<android.appwidget.AppWidgetHostView$ParcelableSparseArray$1: java.lang.Object[] newArray(int)>
<android.widget.SpellChecker$SpellParser: boolean isDone()>
<GenerationGG: android.widget.Adapter get_androidwidgetAdapter()>
<android.webkit.WebView: boolean nativeStartSelection(int,int)>
<android.server.BluetoothPanProfileHandler$BluetoothPanDevice: java.lang.String access$602(android.server.BluetoothPanProfileHandler$BluetoothPanDevice,java.lang.String)>
<GenerationGG: android.os.CountDownTimer get_androidosCountDownTimer()>
<android.app.backup.IRestoreObserver$Stub$Proxy: void <init>(android.os.IBinder)>
<android.speech.tts.TextToSpeech$9: void <init>(android.speech.tts.TextToSpeech,java.util.Locale)>
<GenerationGG: android.speech.tts.SynthesisRequest get_androidspeechttsSynthesisRequest()>
<android.net.NetworkInfo$1: void <init>()>
<android.os.Parcel: void readBinderArray(android.os.IBinder[])>
<android.app.QueuedWork: java.util.concurrent.ExecutorService singleThreadExecutor()>
<android.test.InstrumentationTestRunner$StringResultPrinter: void print(junit.framework.TestResult,long)>
<android.app.backup.BackupDataOutput: void setKeyPrefix_native(int,java.lang.String)>
<junit.runner.BaseTestRunner: java.lang.String getFilteredTrace(java.lang.String)>
<com.android.server.accessibility.TouchExplorer: void access$1200(com.android.server.accessibility.TouchExplorer,android.view.MotionEvent,int,int,int)>
<com.android.internal.location.DummyLocationProvider: void setSupportsAltitude(boolean)>
<com.android.internal.telephony.MccTable$MccEntry: void <init>(int,java.lang.String,int)>
<android.renderscript.RenderScriptGL$SurfaceConfig: void <init>(android.renderscript.RenderScriptGL$SurfaceConfig)>
<Wrapper_android_net_wifi_ScanResult: void test_android_net_wifi_ScanResult()>
<android.media.IMediaScannerService$Stub: android.media.IMediaScannerService asInterface(android.os.IBinder)>
<android.net.wifi.WifiNative: void enableBackgroundScanCommand(boolean)>
<android.view.GLES20Canvas: void destroyDisplayList(int)>
<android.graphics.Region: android.graphics.Rect getBounds()>
<android.accounts.IAccountManagerResponse$Stub$Proxy: android.os.IBinder asBinder()>
<android.app.backup.BackupAgentHelper: void onBackup(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$DefaultState: void <init>(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<android.content.res.XmlBlock: int access$900(int,int)>
<android.graphics.Path: void native_computeBounds(int,android.graphics.RectF)>
<android.accessibilityservice.AccessibilityServiceInfo: void appendFlags(java.lang.StringBuilder,int)>
<android.view.View: void invalidate(boolean)>
<android.widget.AbsListView$RecycleBin: void fillActiveViews(int,int)>
<android.util.TypedValue: float complexToDimensionNoisy(int,android.util.DisplayMetrics)>
<android.net.rtp.RtpStream: java.net.InetAddress getRemoteAddress()>
<android.media.audiofx.Equalizer: short getCurrentPreset()>
<android.server.BluetoothAdapterStateMachine: void access$6700(android.server.BluetoothAdapterStateMachine,android.os.Message)>
<android.graphics.Canvas: void drawPicture(android.graphics.Picture)>
<android.media.AudioService: void cancelA2dpDeviceTimeout()>
<android.content.SyncManager$SyncAlarmIntentReceiver: void <init>(android.content.SyncManager)>
<android.webkit.WebHistoryItem: void <init>(android.webkit.WebHistoryItem)>
<android.graphics.Paint: int native_setMaskFilter(int,int)>
<android.speech.SpeechRecognizer: void <init>(android.content.Context,android.content.ComponentName)>
<android.bluetooth.BluetoothSocket: void finalize()>
<com.android.internal.telephony.DataConnection$FailCause: void <init>(java.lang.String,int,int)>
<com.android.server.sip.SipService: android.content.Context access$800(com.android.server.sip.SipService)>
<android.telephony.gsm.SmsMessage: java.lang.String getDisplayMessageBody()>
<com.android.internal.app.ActionBarImpl$TabImpl: void <init>(com.android.internal.app.ActionBarImpl)>
<GenerationGG: android.nfc.NfcAdapter$OnNdefPushCompleteCallback get_androidnfcNfcAdapter__OnNdefPushCompleteCallback()>
<android.view.TextureView: int getLayerType()>
<android.media.AudioTrack: float getMinVolume()>
<android.widget.CalendarView$WeekView: void setPaintProperties()>
<android.test.mock.MockContext: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory,android.database.DatabaseErrorHandler)>
<android.text.method.DigitsKeyListener: void <init>()>
<com.android.internal.telephony.cat.CommandParams: boolean setIcon(android.graphics.Bitmap)>
<android.os.Messenger: boolean equals(java.lang.Object)>
<android.os.PatternMatcher: boolean matchPattern(java.lang.String,java.lang.String,int)>
<GenerationGG: android.renderscript.RSIllegalArgumentException get_androidrenderscriptRSIllegalArgumentException()>
<com.android.internal.telephony.PhoneBase: void sendIncomingCallRingNotification(int)>
<android.telephony.cdma.CdmaCellLocation: int getBaseStationLongitude()>
<android.speech.tts.SynthesisMessageParams$ListEntry: void <init>(byte[])>
<com.android.internal.widget.LockPatternView$SavedState: void <init>(android.os.Parcelable,java.lang.String,int,boolean,boolean,boolean,com.android.internal.widget.LockPatternView$1)>
<com.android.internal.telephony.cat.CallSetupParams: void <init>(com.android.internal.telephony.cat.CommandDetails,com.android.internal.telephony.cat.TextMessage,com.android.internal.telephony.cat.TextMessage)>
<android.renderscript.Long2: void <init>(long,long)>
<Wrapper_android_text_style_RasterizerSpan: void test_android_text_style_RasterizerSpan()>
<android.os.BatteryStats: java.lang.String formatRatioLocked(long,long)>
<android.widget.RemoteViews: boolean onLoadClass(java.lang.Class)>
<android.graphics.Paint: int native_setXfermode(int,int)>
<android.graphics.Paint: boolean isFilterBitmap()>
<android.webkit.WebView: boolean nativePointInNavCache(int,int,int)>
<Wrapper_android_net_sip_SipRegistrationListener: void test_android_net_sip_SipRegistrationListener()>
<com.android.server.am.ActivityManagerService: boolean isTopActivityImmersive()>
<android.os.StrictMode: boolean access$400()>
<android.widget.DatePicker: int getDayOfMonth()>
<com.android.internal.telephony.DataConnection: com.android.internal.util.IState access$100(com.android.internal.telephony.DataConnection)>
<android.hardware.GeomagneticField$LegendreTable: void <clinit>()>
<android.bluetooth.IBluetoothStateChangeCallback$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.server.accessibility.TouchExplorer: void ensureHoverExitSent(android.view.MotionEvent,int,int)>
<android.widget.AdapterView: void addView(android.view.View)>
<java.lang.Object: java.lang.Object[] getSpans(int,int,java.lang.Class)>
<android.media.JetPlayer$NativeEventHandler: void <init>(android.media.JetPlayer,android.media.JetPlayer,android.os.Looper)>
<android.widget.StackView: android.view.ViewGroup$LayoutParams createOrReuseLayoutParams(android.view.View)>
<Wrapper_android_webkit_PluginStub: void test_android_webkit_PluginStub()>
<android.view.KeyEvent: boolean getKeyData(android.view.KeyCharacterMap$KeyData)>
<Wrapper_android_test_AssertionFailedError: void test_android_test_AssertionFailedError()>
<com.android.server.MountService: java.lang.String getVolumeState(java.lang.String)>
<android.webkit.CacheManager: boolean endCacheTransaction()>
<android.os.Message: void sendToTarget()>
<android.media.audiofx.Visualizer: int native_setEnabled(boolean)>
<android.database.sqlite.SQLiteQueryBuilder: java.lang.String getTables()>
<android.graphics.Matrix: boolean rectStaysRect()>
<android.view.animation.Animation: void setZAdjustment(int)>
<GenerationGG: android.test.mock.MockContext get_androidtestmockMockContext()>
<android.app.SearchableInfo: boolean shouldRewriteQueryFromText()>
<android.webkit.MimeTypeMap: boolean hasMimeType(java.lang.String)>
<android.app.ActivityManager$ProcessErrorStateInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.MotionEvent: boolean nativeIsTouchEvent(int)>
<android.graphics.DrawFilter: void <init>()>
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(int,java.lang.String)>
<android.os.ParcelFileDescriptor: java.lang.String toString()>
<android.graphics.NinePatch: int getWidth()>
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: java.lang.String getPattern()>
<android.graphics.ColorMatrix: void setSaturation(float)>
<android.app.ActivityManager$RunningServiceInfo: void <init>()>
<com.android.internal.telephony.BaseCommands: void unregisterForVoiceNetworkStateChanged(android.os.Handler)>
<com.android.server.pm.PackageManagerService: void readPermission(org.xmlpull.v1.XmlPullParser,java.lang.String)>
<com.android.server.accessibility.AccessibilityManagerService: com.android.server.wm.WindowManagerService access$1800(com.android.server.accessibility.AccessibilityManagerService)>
<android.content.Loader: void onReset()>
<com.android.internal.view.menu.MenuItemImpl: boolean isCheckable()>
<android.widget.RemoteViewsAdapter: int getViewTypeCount()>
<com.android.internal.os.BatteryStatsImpl: void noteWifiMulticastDisabledLocked(int)>
<android.view.KeyEvent: int access$076(android.view.KeyEvent,int)>
<android.view.KeyEvent: boolean isNumLockOn()>
<android.app.ContextImpl: java.lang.String[] databaseList()>
<android.content.ISyncStatusObserver$Stub: void <init>()>
<android.view.GLES20Canvas: boolean nCopyLayer(int,int)>
<android.widget.SuggestionsAdapter: android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup)>
<android.server.BluetoothBondState: android.bluetooth.BluetoothHeadset access$102(android.server.BluetoothBondState,android.bluetooth.BluetoothHeadset)>
<com.android.server.wm.WindowManagerService: int getPendingAppTransition()>
<GenerationGG: android.os.IBinder$DeathRecipient get_androidosIBinder__DeathRecipient()>
<android.view.TextureView: android.graphics.Canvas lockCanvas(android.graphics.Rect)>
<com.android.internal.os.BatteryStatsImpl: void addHistoryBufferLocked(long,byte)>
<android.database.AbstractCursor$SelfContentObserver: boolean deliverSelfNotifications()>
<com.android.server.pm.Settings$1: void dumpFilter(java.io.PrintWriter,java.lang.String,com.android.server.pm.PreferredActivity)>
<android.hardware.Camera: void _stopFaceDetection()>
<android.net.wifi.p2p.WifiP2pConfig$1: android.net.wifi.p2p.WifiP2pConfig[] newArray(int)>
<android.view.ContextThemeWrapper: int getThemeResId()>
<android.bluetooth.BluetoothDeviceProfileState: void access$6500(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<Wrapper_android_app_backup_BackupHelper: void test_android_app_backup_BackupHelper()>
<android.test.mock.MockContext: void unregisterReceiver(android.content.BroadcastReceiver)>
<com.android.internal.telephony.AdnRecordCache: void clearWaiters()>
<GenerationGG: android.view.inputmethod.InputMethodSubtype get_androidviewinputmethodInputMethodSubtype()>
<android.view.GLES20Canvas: int nGetDisplayList(int,int)>
<android.app.ContextImpl$8: void <init>()>
<com.android.server.wm.WindowState: void attach()>
<com.android.internal.telephony.cat.Menu: void <init>()>
<android.util.XmlPullAttributes: java.lang.String getClassAttribute()>
<android.os.Debug: int getThreadExternalAllocCount()>
<android.location.Address: void setLatitude(double)>
<android.media.audiofx.AudioEffect: int setParameter(int,short)>
<android.test.suitebuilder.annotation.HasMethodAnnotation: boolean apply(java.lang.Object)>
<android.media.MediaMetadataRetriever: void setDataSource(java.lang.String)>
<com.android.internal.view.BaseSurfaceHolder: android.graphics.Canvas internalLockCanvas(android.graphics.Rect)>
<android.opengl.ETC1Util: boolean isETC1Supported()>
<android.content.BroadcastReceiver: void <init>()>
<android.os.Parcel: void readIntArray(int[])>
<android.app.DownloadManager$Request: void encodeHttpHeaders(android.content.ContentValues)>
<android.graphics.BitmapShader: int nativeCreate(int,int,int)>
<android.net.http.RequestHandle: java.lang.String bufferToHex(byte[])>
<android.content.ContentProvider$Transport: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>
<android.inputmethodservice.AbstractInputMethodService: android.os.IBinder onBind(android.content.Intent)>
<android.graphics.Paint: int native_setTypeface(int,int)>
<android.inputmethodservice.KeyboardView$3: void swipeLeft()>
<android.mtp.MtpDevice: long getParent(int)>
<com.android.server.am.CoreSettingsObserver: android.os.Bundle getCoreSettingsLocked()>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: void plug(long,long)>
<android.app.ContextImpl: android.content.res.AssetManager getAssets()>
<android.view.HardwareRenderer$GlRenderer: void fallback(boolean)>
<com.android.server.pm.Settings: void writeDisabledSysPackageLPr(org.xmlpull.v1.XmlSerializer,com.android.server.pm.PackageSetting)>
<GenerationGG: android.content.pm.PackageInfo get_androidcontentpmPackageInfo()>
<android.webkit.JWebCoreJavaBridge: void pause()>
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getDeviceId()>
<android.app.Activity: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>
<android.app.Dialog: android.content.ComponentName getAssociatedActivity()>
<android.drm.DrmRights: java.lang.String getAccountId()>
<android.widget.AbsListView$FlingRunnable: void flywheelTouch()>
<android.view.View: boolean hasHoveredChild()>
<android.net.wifi.p2p.WifiP2pService: android.content.Context access$700(android.net.wifi.p2p.WifiP2pService)>
<android.view.View: int getScrollY()>
<android.media.audiofx.AudioEffect: void checkStatus(int)>
<android.text.format.Time: int compare(android.text.format.Time,android.text.format.Time)>
<GenerationGG: android.media.audiofx.Virtualizer$Settings get_androidmediaaudiofxVirtualizer__Settings()>
<GenerationGG: java.util.concurrent.TimeUnit get_javautilconcurrentTimeUnit()>
<android.media.audiofx.Virtualizer: java.lang.Object access$000(android.media.audiofx.Virtualizer)>
<android.text.format.Time: void <clinit>()>
<android.os.Parcel$1: java.lang.String[] newArray(int)>
<DumbClass: void DumbMethod76()>
<android.media.audiofx.EnvironmentalReverb$Settings: java.lang.String toString()>
<android.drm.DrmManagerClient: int _openConvertSession(int,java.lang.String)>
<android.nfc.tech.NfcA: short getSak()>
<android.app.ActivityThread$ApplicationThread: void dumpGfxInfo(java.io.FileDescriptor,java.lang.String[])>
<android.media.AudioService$VolumeStreamState: int access$602(android.media.AudioService$VolumeStreamState,int)>
<com.android.internal.telephony.ApnContext: java.util.ArrayList getWaitingApns()>
<android.view.textservice.SpellCheckerInfo$1: void <init>()>
<android.telephony.gsm.SmsMessage: android.telephony.gsm.SmsMessage$MessageClass getMessageClass()>
<android.view.ViewRootImpl$AccessibilityInteractionController: android.view.View findViewByAccessibilityId(int)>
<android.server.BluetoothHealthProfileHandler: java.lang.String getStringRole(int)>
<android.view.animation.Animation: void setFillEnabled(boolean)>
<android.net.wifi.SupplicantState: boolean isValidState(android.net.wifi.SupplicantState)>
<com.android.server.AlarmManagerService: void dumpAlarmList(java.io.PrintWriter,java.util.ArrayList,java.lang.String,java.lang.String,long)>
<com.android.server.connectivity.Tethering$TetherMasterSM$SetIpForwardingEnabledErrorState: void enter()>
<android.app.ContextImpl: java.io.File getExternalCacheDir()>
<android.webkit.WebViewWorker$CacheSaveData: void <init>()>
<android.text.method.BaseMovementMethod: boolean rightWord(android.widget.TextView,android.text.Spannable)>
<android.widget.RadioGroup$PassThroughHierarchyChangeListener: android.view.ViewGroup$OnHierarchyChangeListener access$202(android.widget.RadioGroup$PassThroughHierarchyChangeListener,android.view.ViewGroup$OnHierarchyChangeListener)>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: void log(java.lang.String)>
<android.view.GLES20Canvas: void drawPatch(android.graphics.Bitmap,byte[],android.graphics.RectF,android.graphics.Paint)>
<android.text.style.BulletSpan: int getSpanTypeId()>
<android.app.ActivityThread: void handleDispatchPackageBroadcast(int,java.lang.String[])>
<android.telephony.ServiceState: void setCssIndicator(int)>
<android.net.wifi.WifiStateMachine: void enableRssiPolling(boolean)>
<android.view.InputQueue: void <init>(android.view.InputChannel)>
<android.view.inputmethod.InputMethodInfo: int getSubtypeCount()>
<com.android.internal.telephony.cdma.sms.BearerData: boolean decodeCallbackNumber(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)>
<android.net.NetworkInfo: void setRoaming(boolean)>
<android.webkit.WebViewCore: void contentDraw()>
<android.content.pm.PackageParser$Component: void <init>(android.content.pm.PackageParser$Package)>
<android.webkit.WebViewCore: void access$4900(android.webkit.WebViewCore)>
<android.net.wifi.WifiWatchdogStateMachine: int access$000(android.net.wifi.WifiWatchdogStateMachine)>
<com.android.server.DevicePolicyManagerService: long getMaximumTimeToLock(android.content.ComponentName)>
<android.content.pm.PackageItemInfo: void <init>(android.content.pm.PackageItemInfo)>
<android.filterfw.core.GLFrame: int getTextureId()>
<android.view.accessibility.IAccessibilityInteractionConnection$Stub: android.os.IBinder asBinder()>
<android.net.wifi.WifiNative: boolean setPersistentReconnect(boolean)>
<android.widget.TextView: int getErrorX()>
<android.widget.RemoteViewsAdapter: long getItemId(int)>
<android.app.IActivityWatcher$Stub: android.app.IActivityWatcher asInterface(android.os.IBinder)>
<android.database.CursorToBulkCursorAdaptor: void throwIfCursorIsClosed()>
<android.bluetooth.BluetoothClass: boolean hasService(int)>
<android.renderscript.RSTextureView: android.renderscript.RenderScriptGL getRenderScriptGL()>
<android.widget.RelativeLayout: void setGravity(int)>
<android.text.method.SingleLineTransformationMethod: char[] getReplacement()>
<android.media.TimedText: boolean isValidKey(int)>
<android.test.mock.MockContext: java.io.File getDir(java.lang.String,int)>
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimDomainLoaded: void <init>(com.android.internal.telephony.ims.IsimUiccRecords,com.android.internal.telephony.ims.IsimUiccRecords$1)>
<android.os.WorkSource: boolean updateLocked(android.os.WorkSource,boolean,boolean)>
<android.app.Application: void dispatchActivityStopped(android.app.Activity)>
<com.android.server.wm.InputManager: int nativeGetKeyCodeState(int,int,int)>
<android.widget.TextView: int getResolvedLayoutDirection(android.graphics.drawable.Drawable)>
<android.graphics.drawable.StateListDrawable$StateListState: int access$000(android.graphics.drawable.StateListDrawable$StateListState,int[])>
<android.renderscript.Short3: void <init>(short,short,short)>
<android.widget.ScrollView: int computeVerticalScrollRange()>
<android.media.AudioService$3: void <init>(android.media.AudioService)>
<android.app.SharedPreferencesImpl: int getInt(java.lang.String,int)>
<com.android.server.sip.SipService$ConnectivityReceiver$1: void <init>(com.android.server.sip.SipService$ConnectivityReceiver,android.net.NetworkInfo)>
<android.filterfw.core.FilterContext: void <init>()>
<android.webkit.SslCertLookupTable: android.webkit.SslCertLookupTable getInstance()>
<android.webkit.WebViewCore: void access$2200(android.webkit.WebViewCore,android.webkit.WebView$ViewSizeData)>
<android.renderscript.Element: void updateFromNative()>
<com.android.server.PowerManagerService: android.os.Handler access$1802(com.android.server.PowerManagerService,android.os.Handler)>
<android.gesture.Gesture: android.graphics.Bitmap toBitmap(int,int,int,int)>
<android.widget.RelativeLayout: void requestLayout()>
<android.webkit.WebSettings: boolean getDatabaseEnabled()>
<android.hardware.GeomagneticField: float getY()>
<android.net.wifi.WifiConfiguration$IpAssignment: android.net.wifi.WifiConfiguration$IpAssignment[] values()>
<android.widget.ExpandableListConnector$GroupMetadata: void <init>()>
<com.android.internal.util.StateMachine: com.android.internal.util.IState getCurrentState()>
<android.graphics.ColorMatrix: void setScale(float,float,float,float)>
<android.graphics.Canvas: boolean getClipBounds(android.graphics.Rect)>
<android.view.MotionEvent: float getAxisValue(int)>
<com.android.internal.content.PackageMonitor: void onPackageAdded(java.lang.String,int)>
<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$DefaultContainerConnection access$200(com.android.server.pm.PackageManagerService)>
<android.telephony.SmsMessage: java.lang.String getOriginatingAddress()>
<android.widget.CalendarView: java.util.Calendar getCalendarForLocale(java.util.Calendar,java.util.Locale)>
<com.android.internal.telephony.DataConnection: int access$502(com.android.internal.telephony.DataConnection,int)>
<android.widget.GridLayout: void setColumnOrderPreserved(boolean)>
<android.telephony.SignalStrength$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.widget.ExpandableListConnector: java.lang.Object getItem(int)>
<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newInsert(android.net.Uri)>
<android.opengl.Matrix: void <clinit>()>
<android.net.LocalServerSocket: android.net.LocalSocket accept()>
<android.hardware.usb.UsbAccessory: java.lang.String getVersion()>
<android.webkit.JWebCoreJavaBridge: void resume()>
<android.graphics.PointF: void <init>(float,float)>
<android.graphics.LayerRasterizer: void addLayer(android.graphics.Paint)>
<android.bluetooth.BluetoothProfileState$StableState: void <init>(android.bluetooth.BluetoothProfileState,android.bluetooth.BluetoothProfileState$1)>
<android.graphics.RegionIterator: boolean next(android.graphics.Rect)>
<android.app.Service: void onLowMemory()>
<android.text.method.QwertyKeyListener$Replaced: char[] access$000(android.text.method.QwertyKeyListener$Replaced)>
<android.inputmethodservice.InputMethodService: void onBindInput()>
<com.android.server.connectivity.Tethering$TetherMasterSM: com.android.internal.util.State access$4200(com.android.server.connectivity.Tethering$TetherMasterSM)>
<android.preference.Preference: boolean callChangeListener(java.lang.Object)>
<com.android.i18n.phonenumbers.PhoneNumberMatch: boolean equals(java.lang.Object)>
<android.net.wifi.WifiStateMachine: java.util.List syncGetConfiguredNetworks()>
<android.renderscript.Sampler: android.renderscript.Sampler WRAP_LINEAR(android.renderscript.RenderScript)>
<android.text.MeasuredText: float addStyleRun(android.text.TextPaint,int,android.graphics.Paint$FontMetricsInt)>
<android.app.Fragment: void onTrimMemory(int)>
<android.opengl.GLES20: void glVertexAttribPointerBounds(int,int,int,boolean,int,java.nio.Buffer,int)>
<android.test.mock.MockContentProvider$InversionIContentProvider: int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[])>
<android.view.TextureView: android.graphics.Matrix getTransform(android.graphics.Matrix)>
<android.view.animation.Animation: android.view.animation.Animation clone()>
<android.net.wifi.SupplicantStateTracker: int access$008(android.net.wifi.SupplicantStateTracker)>
<android.telephony.PhoneStateListener: void onSignalStrengthChanged(int)>
<android.webkit.SslErrorHandlerImpl: void cancel()>
<android.app.ContextImpl$33: java.lang.Object getService(android.app.ContextImpl)>
<android.content.pm.ServiceInfo$1: void <init>()>
<android.text.style.StyleSpan: int getStyle()>
<android.net.wifi.WifiInfo$1: java.lang.Object[] newArray(int)>
<android.view.textservice.SuggestionsInfo: int getSuggestionsCount()>
<android.widget.BaseAdapter: void <init>()>
<android.view.inputmethod.InputBinding: int describeContents()>
<android.net.http.RequestHandle: java.lang.String KD(java.lang.String,java.lang.String)>
<com.android.internal.view.IInputContext$Stub: com.android.internal.view.IInputContext asInterface(android.os.IBinder)>
<android.util.SparseIntArray: int keyAt(int)>
<com.android.server.usb.UsbSettingsManager$AccessoryFilter: int hashCode()>
<com.android.internal.telephony.sip.SipCommandInterface: void exitEmergencyCallbackMode(android.os.Message)>
<android.webkit.LoadListener: int nativeCreateResponse(java.lang.String,int,java.lang.String,java.lang.String,long,java.lang.String)>
<android.hardware.usb.UsbEndpoint$1: android.hardware.usb.UsbEndpoint[] newArray(int)>
<android.database.sqlite.SQLiteDoneException: void <init>(java.lang.String)>
<android.os.AsyncTask: java.lang.Object get(long,java.util.concurrent.TimeUnit)>
<android.util.TypedValue: java.lang.CharSequence coerceToString()>
<android.app.WallpaperManager$Globals: android.graphics.Bitmap access$002(android.app.WallpaperManager$Globals,android.graphics.Bitmap)>
<com.android.server.am.BatteryStatsService: boolean access$100(com.android.server.am.BatteryStatsService)>
<android.os.Handler: void removeCallbacks(java.lang.Runnable)>
<com.android.internal.telephony.cat.BerTlv: int getTag()>
<com.android.server.pm.PackageManagerService: void access$1400(com.android.server.pm.PackageManagerService,java.lang.String,android.content.pm.PackageParser$Package,boolean,boolean,boolean)>
<android.opengl.Matrix: void setIdentityM(float[],int)>
<GenerationGG: android.database.sqlite.SQLiteDatabaseCorruptException get_androiddatabasesqliteSQLiteDatabaseCorruptException()>
<com.android.server.InputMethodManagerService: int getAppShowFlags()>
<com.android.internal.telephony.cdma.sms.BearerData: byte[] encodeUtf16(java.lang.String)>
<android.content.res.Configuration: void readFromParcel(android.os.Parcel)>
<GenerationGG: android.preference.PreferenceManager get_androidpreferencePreferenceManager()>
<com.android.server.AlarmManagerService: int init()>
<android.view.animation.LinearInterpolator: float getInterpolation(float)>
<GenerationGG: java.util.Collection get_javautilCollection()>
<android.view.inputmethod.InputMethodSubtype: void <init>(android.os.Parcel)>
<Wrapper_android_net_http_HttpResponseCache: void test_android_net_http_HttpResponseCache()>
<android.net.LocalSocket: boolean isOutputShutdown()>
<android.net.wifi.WifiStateMachine: int access$3600(android.net.wifi.WifiStateMachine)>
<android.media.JetPlayer: void <clinit>()>
<android.text.util.LinkSpec: void <init>()>
<android.net.Uri$StringUri: java.lang.String getQuery()>
<android.content.Intent$1: void <init>()>
<android.view.View: boolean awakenScrollBars(int,boolean)>
<com.android.internal.widget.LockPatternUtils: int computePasswordQuality(java.lang.String)>
<android.util.JsonWriter: android.util.JsonWriter endArray()>
<android.content.IntentFilter: int matchData(java.lang.String,java.lang.String,android.net.Uri)>
<com.android.server.ThrottleService: boolean access$1902(com.android.server.ThrottleService,boolean)>
<android.widget.TextView$PositionListener: void <init>(android.widget.TextView,android.widget.TextView$1)>
<android.webkit.AccessibilityInjector$AccessibilityWebContentKeyBinding: int getFirstArgument(int)>
<android.net.Uri$Part: android.net.Uri$Part fromDecoded(java.lang.String)>
<GenerationGG: android.graphics.drawable.ShapeDrawable$ShaderFactory get_androidgraphicsdrawableShapeDrawable__ShaderFactory()>
<com.android.internal.widget.ScrollingTabContainerView: boolean isCollapsed()>
<com.android.server.DevicePolicyManagerService$ActiveAdmin: int getUid()>
<com.android.server.MountService: com.android.internal.app.IMediaContainerService access$1800(com.android.server.MountService)>
<android.view.View: int getLeft()>
<android.nfc.tech.MifareClassic: int blockToSector(int)>
<android.widget.AbsListView: int access$1500(android.widget.AbsListView)>
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: boolean isFilterStopped(android.content.IntentFilter)>
<android.text.AlteredCharSequence$AlteredSpanned: void <init>(java.lang.CharSequence,char[],int,int)>
<android.os.StrictMode$ThreadPolicy$Builder: android.os.StrictMode$ThreadPolicy$Builder detectAll()>
<android.widget.HorizontalScrollView: boolean isOffScreen(android.view.View)>
<android.webkit.CacheManager: void <clinit>()>
<com.android.internal.telephony.cat.RilMessageDecoder: void sendMsgParamsDecoded(com.android.internal.telephony.cat.ResultCode,com.android.internal.telephony.cat.CommandParams)>
<com.android.internal.telephony.cdma.SmsMessage: android.telephony.SmsMessage$MessageClass getMessageClass()>
<android.webkit.WebChromeClient: boolean onJsAlert(android.webkit.WebView,java.lang.String,java.lang.String,android.webkit.JsResult)>
<android.os.Handler: android.os.Looper getLooper()>
<com.android.server.am.ProcessList: void writeFile(java.lang.String,java.lang.String)>
<com.android.internal.telephony.PhoneBase: android.content.Context getContext()>
<android.view.GLES20Canvas: boolean nPreserveBackBuffer()>
<android.view.VolumePanel: boolean isExpanded()>
<android.test.AndroidTestRunner: void setInstrumentaiton(android.app.Instrumentation)>
<android.net.http.AndroidHttpClient: org.apache.http.entity.AbstractHttpEntity getCompressedEntity(byte[],android.content.ContentResolver)>
<android.view.View$10: java.lang.Object get(java.lang.Object)>
<android.widget.AdapterView$AdapterContextMenuInfo: void <init>(android.view.View,int,long)>
<android.app.NativeActivity: void onSurfaceDestroyedNative(int)>
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getRemainingPostDialString()>
<android.os.StrictMode: android.os.StrictMode$ThreadPolicy getThreadPolicy()>
<android.view.InputQueue: void registerInputChannel(android.view.InputChannel,android.view.InputHandler,android.os.MessageQueue)>
<android.graphics.Region$1: android.graphics.Region[] newArray(int)>
<android.bluetooth.BluetoothAdapter: void <init>(android.bluetooth.IBluetooth)>
<android.test.mock.MockCursor: boolean moveToFirst()>
<android.widget.AdapterViewFlipper: void setFlipInterval(int)>
<android.media.AudioManager: void setWiredHeadsetOn(boolean)>
<android.app.IActivityManager$ContentProviderHolder$1: java.lang.Object[] newArray(int)>
<android.view.animation.GridLayoutAnimationController: int getTransformedColumnIndex(android.view.animation.GridLayoutAnimationController$AnimationParameters)>
<android.database.MatrixCursor: void ensureCapacity(int)>
<com.android.internal.os.BatteryStatsImpl$Uid: android.util.SparseArray getPidStats()>
<com.android.internal.os.BatteryStatsImpl$Counter: void reset(boolean)>
<android.text.method.BaseMovementMethod: boolean left(android.widget.TextView,android.text.Spannable)>
<android.content.res.Resources: void <init>(android.content.res.AssetManager,android.util.DisplayMetrics,android.content.res.Configuration)>
<com.android.internal.telephony.cdma.SmsMessage: boolean isStatusReportMessage()>
<com.android.internal.app.ActionBarImpl: java.lang.CharSequence getSubtitle()>
<android.webkit.WebView: void nativeMoveSelection(int,int)>
<android.content.ContentProviderResult: java.lang.String toString()>
<android.view.ViewTreeObserver: void addOnGlobalLayoutListener(android.view.ViewTreeObserver$OnGlobalLayoutListener)>
<android.text.style.MetricAffectingSpan$Passthrough: android.text.style.CharacterStyle getUnderlying()>
<android.app.AlertDialog: void setButton3(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.bluetooth.BluetoothClass: void <init>(int)>
<android.view.accessibility.IAccessibilityManagerClient$Stub$Proxy: void <init>(android.os.IBinder)>
<android.os.MemoryFile: boolean isPurgingAllowed()>
<android.view.GLES20Canvas: void rotate(float)>
<android.widget.TextView: boolean isMultilineInputType(int)>
<com.android.i18n.phonenumbers.AsYouTypeFormatter: java.lang.String inputAccruedNationalNumber()>
<android.net.wifi.WifiStateMachine$SupplicantStoppingState: void <init>(android.net.wifi.WifiStateMachine)>
<android.view.VolumePanel$1: void <init>(android.view.VolumePanel)>
<com.android.internal.app.AlertController$RecycleListView: boolean recycleOnMeasure()>
<com.android.server.pm.PackageManagerService$DumpState: void setTitlePrinted(boolean)>
<android.view.ViewGroup: boolean access$300(android.view.ViewGroup)>
<android.widget.TextView$SuggestionsPopupWindow$SuggestionAdapter: long getItemId(int)>
<com.android.internal.telephony.gsm.GSMPhone: void onNetworkInitiatedUssd(com.android.internal.telephony.gsm.GsmMmiCode)>
<android.database.sqlite.SQLiteDatabase: void addSQLiteClosable(android.database.sqlite.SQLiteClosable)>
<com.android.server.wm.WindowManagerService: com.android.server.wm.AppWindowToken findAppWindowToken(android.os.IBinder)>
<android.location.Address$1: void <init>()>
<android.media.audiofx.EnvironmentalReverb$Settings: void <init>()>
<Wrapper_android_text_Spanned: void test_android_text_Spanned()>
<com.android.internal.os.BatteryStatsImpl$Uid$Wakelock: com.android.internal.os.BatteryStatsImpl$Timer getWakeTime(int)>
<android.webkit.HTML5VideoViewProxy: void access$900(android.webkit.HTML5VideoViewProxy,int)>
<android.widget.ProgressBar: void scheduleAccessibilityEventSender()>
<com.android.internal.view.menu.ActionMenuItemView: com.android.internal.view.menu.MenuItemImpl getItemData()>
<android.app.backup.BackupHelperDispatcher: int allocateHeader_native(android.app.backup.BackupHelperDispatcher$Header,java.io.FileDescriptor)>
<android.telephony.NeighboringCellInfo: void setCid(int)>
<com.android.server.NotificationPlayer: java.lang.String access$200(com.android.server.NotificationPlayer)>
<com.android.server.location.PassiveProvider: boolean supportsSpeed()>
<com.android.server.location.PassiveProvider: boolean requiresNetwork()>
<android.util.SparseIntArray: void <init>()>
<com.android.server.LightsService: com.android.server.LightsService$Light getLight(int)>
<GenerationGG: android.widget.Chronometer$OnChronometerTickListener get_androidwidgetChronometer__OnChronometerTickListener()>
<android.location.Address: java.util.HashMap access$002(android.location.Address,java.util.HashMap)>
<android.graphics.Paint: int native_getStyle(int)>
<com.android.internal.telephony.cdma.CDMAPhone: boolean updateCurrentCarrierInProvider()>
<com.android.internal.telephony.ServiceStateTracker: void registerForRoamingOn(android.os.Handler,int,java.lang.Object)>
<com.android.internal.app.ActionBarImpl: com.android.internal.widget.ActionBarView access$600(com.android.internal.app.ActionBarImpl)>
<com.android.server.wm.ScreenRotationAnimation: android.view.animation.Transformation getEnterTransformation()>
<android.graphics.Path: void finalize()>
<com.android.server.sip.SipSessionGroup$SipSessionImpl$1: void <init>(com.android.server.sip.SipSessionGroup$SipSessionImpl,java.util.EventObject)>
<android.webkit.BrowserFrame: boolean committed()>
<android.renderscript.FieldPacker: void addI8(android.renderscript.Byte3)>
<android.net.wifi.WifiInfo: int describeContents()>
<android.os.AsyncTask: void onPreExecute()>
<android.text.method.BaseKeyListener: void <init>()>
<com.android.internal.telephony.gsm.GsmMmiCode: boolean isServiceCodeCallBarring(java.lang.String)>
<android.text.BoringLayout: int getHeight()>
<android.provider.Telephony$Sms: void <clinit>()>
<android.view.ViewRootImpl: void <clinit>()>
<com.android.internal.telephony.gsm.GsmCallTracker: void <init>(com.android.internal.telephony.gsm.GSMPhone)>
<android.media.audiofx.EnvironmentalReverb$BaseParameterListener: void onParameterChange(android.media.audiofx.AudioEffect,int,byte[],byte[])>
<com.android.internal.telephony.cat.Tone: void writeToParcel(android.os.Parcel,int)>
<com.android.server.am.ActivityManagerService$MemBinder: void <init>(com.android.server.am.ActivityManagerService)>
<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputContext getInputContext()>
<android.os.Bundle: void typeWarning(java.lang.String,java.lang.Object,java.lang.String,java.lang.ClassCastException)>
<android.media.IMediaScannerListener$Stub: void <init>()>
<com.android.internal.util.StateMachine: android.os.Handler getHandler()>
<com.android.internal.telephony.BaseCommands: void setOnSignalStrengthUpdate(android.os.Handler,int,java.lang.Object)>
<com.android.server.sip.SipHelper: javax.sip.header.ContactHeader createContactHeader(android.net.sip.SipProfile)>
<android.app.Activity: void onResume()>
<java.lang.Object: void defineEntityReplacementText(java.lang.String,java.lang.String)>
<android.widget.TimePicker: boolean is24HourView()>
<android.renderscript.Element: android.renderscript.Element I32_2(android.renderscript.RenderScript)>
<android.widget.ScrollBarDrawable: void setAlwaysDrawVerticalTrack(boolean)>
<android.view.TextureView: void init()>
<android.webkit.WebView: android.app.AlertDialog access$10700(android.webkit.WebView)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimSpnLoaded: void <init>(com.android.internal.telephony.cdma.CdmaLteUiccRecords,com.android.internal.telephony.cdma.CdmaLteUiccRecords$1)>
<android.graphics.Matrix$1: boolean postRotate(float,float,float)>
<android.hardware.SensorManager: int getSensors()>
<android.content.res.StringBlock: void finalize()>
<android.graphics.Canvas: void drawColor(int)>
<com.android.server.StatusBarManagerService$6: void <init>(com.android.server.StatusBarManagerService,boolean,boolean)>
<android.app.BackStackRecord: android.app.FragmentTransaction remove(android.app.Fragment)>
<android.hardware.Sensor: int getHandle()>
<android.view.View: void unscheduleDrawable(android.graphics.drawable.Drawable)>
<android.webkit.ByteArrayBuilder: int getByteSize()>
<GenerationGG: android.os.MemoryFile get_androidosMemoryFile()>
<android.provider.SearchRecentSuggestions: void <clinit>()>
<android.emoji.EmojiFactory: int nativeGetMinimumAndroidPua(int)>
<android.view.ViewConfiguration: boolean hasPermanentMenuKey()>
<android.app.Activity$ManagedDialog: void <init>(android.app.Activity$1)>
<android.media.MediaRecorder: void setVideoEncodingBitRate(int)>
<android.content.pm.PackageParser$Provider: java.lang.String toString()>
<android.app.Instrumentation: android.app.Activity newActivity(java.lang.ClassLoader,java.lang.String,android.content.Intent)>
<com.android.internal.telephony.DataConnection: void access$2400(com.android.internal.telephony.DataConnection,com.android.internal.util.IState)>
<android.webkit.CallbackProxy$6: void <init>(android.webkit.CallbackProxy,android.webkit.JsPromptResult)>
<android.os.DropBoxManager$Entry$1: android.os.DropBoxManager$Entry[] newArray(int)>
<GenerationGG: android.view.accessibility.AccessibilityEvent get_androidviewaccessibilityAccessibilityEvent()>
<android.util.XmlPullAttributes: java.lang.String getAttributeName(int)>
<android.app.NativeActivity: void onInputQueueCreated(android.view.InputQueue)>
<android.database.sqlite.SQLiteProgram: void native_bind_long(int,long)>
<android.content.Intent: android.graphics.Rect getSourceBounds()>
<android.provider.UserDictionary: void <clinit>()>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: com.android.internal.util.State access$1400(com.android.server.connectivity.Tethering$TetherInterfaceSM)>
<android.view.MotionEvent$1: android.view.MotionEvent createFromParcel(android.os.Parcel)>
<android.renderscript.Matrix3f: void loadMultiply(android.renderscript.Matrix3f,android.renderscript.Matrix3f)>
<com.android.server.TextServicesManagerService: void <clinit>()>
<android.graphics.Path: void addPath(android.graphics.Path,float,float)>
<android.view.textservice.SuggestionsInfo$1: void <init>()>
<android.net.ConnectivityManager: java.lang.String getNetworkTypeName(int)>
<android.view.accessibility.AccessibilityInteractionClient: void setFindAccessibilityNodeInfosResult(java.util.List,int)>
<android.renderscript.FileA3D: android.renderscript.FileA3D createFromFile(android.renderscript.RenderScript,java.io.File)>
<android.net.Uri: void writeToParcel(android.os.Parcel,android.net.Uri)>
<com.android.server.SamplingProfilerService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.app.Instrumentation: android.content.ComponentName getComponentName()>
<android.media.MediaScannerConnection: boolean isConnected()>
<com.android.internal.app.AlertController: android.widget.ListAdapter access$1202(com.android.internal.app.AlertController,android.widget.ListAdapter)>
<android.webkit.HTML5VideoFullScreen: int access$000(android.webkit.HTML5VideoFullScreen)>
<android.graphics.Path: void rMoveTo(float,float)>
<android.webkit.WebView: int access$6000(android.webkit.WebView,int,int,android.graphics.Rect,android.graphics.Rect)>
<android.app.backup.BackupHelperDispatcher$Header: void <init>()>
<android.util.TimeUtils: void formatDuration(long,java.lang.StringBuilder)>
<com.android.server.EntropyService: void access$100(com.android.server.EntropyService)>
<android.accessibilityservice.AccessibilityServiceInfo: void appendPackageNames(java.lang.StringBuilder,java.lang.String[])>
<android.media.SoundPool: int load(android.content.res.AssetFileDescriptor,int)>
<android.widget.LinearLayout: void setDividerPadding(int)>
<GenerationGG: android.net.rtp.RtpStream get_androidnetrtpRtpStream()>
<android.opengl.GLSurfaceView: boolean access$1002(android.opengl.GLSurfaceView,boolean)>
<android.widget.AdapterViewAnimator: void fyiWillBeAdvancedByHostKThx()>
<android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs: void access$700(android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs)>
<com.android.internal.widget.ScrollingTabContainerView$TabClickListener: void <init>(com.android.internal.widget.ScrollingTabContainerView)>
<android.net.Credentials: int getGid()>
<android.graphics.Bitmap: int getScaledHeight(int)>
<android.view.View: void setOnFocusChangeListener(android.view.View$OnFocusChangeListener)>
<com.android.server.PowerManagerService: void access$1600(com.android.server.PowerManagerService)>
<com.android.server.BackupManagerService: android.app.AlarmManager access$300(com.android.server.BackupManagerService)>
<com.android.internal.telephony.ApnContext: void setApnSetting(com.android.internal.telephony.ApnSetting)>
<android.content.AsyncQueryHandler: void onDeleteComplete(int,java.lang.Object,int)>
<android.content.res.AssetManager: int loadResourceValue(int,short,android.util.TypedValue,boolean)>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void access$1700(com.android.server.connectivity.Tethering$TetherInterfaceSM,com.android.internal.util.IState)>
<Wrapper_android_view_animation_LinearInterpolator: void test_android_view_animation_LinearInterpolator()>
<android.nfc.FormatException: void <init>(java.lang.String)>
<android.location.GpsStatus: java.lang.Iterable getSatellites()>
<android.location.Criteria: boolean isCostAllowed()>
<android.test.mock.MockContext: boolean deleteFile(java.lang.String)>
<android.util.JsonReader: android.util.JsonScope peekStack()>
<android.inputmethodservice.InputMethodService: boolean onEvaluateInputViewShown()>
<android.view.ViewDebug$LooperProfiler$Entry: void <init>()>
<android.view.KeyEvent: java.lang.String metaStateToString(int)>
<android.net.DhcpStateMachine$WaitBeforeRenewalState: void enter()>
<android.graphics.Canvas: int getMaximumBitmapWidth()>
<android.net.wifi.WifiNative: boolean clearBlacklistCommand()>
<android.webkit.WebViewCore: void nativeAutoFillForm(int)>
<android.media.AudioSystem: void setErrorCallback(android.media.AudioSystem$ErrorCallback)>
<android.widget.TextView: void setHeight(int)>
<android.widget.TextView: void setImeActionLabel(java.lang.CharSequence,int)>
<com.android.server.wm.WindowState$DeathRecipient: void <init>(com.android.server.wm.WindowState,com.android.server.wm.WindowState$1)>
<android.webkit.FindActionModeCallback: boolean onLongClick(android.view.View)>
<android.webkit.WebView: android.app.AlertDialog access$10702(android.webkit.WebView,android.app.AlertDialog)>
<android.webkit.HTML5VideoView: void seekTo(int)>
<GenerationGG: android.view.MotionEvent get_androidviewMotionEvent()>
<android.media.CameraProfile: int native_get_num_image_encoding_quality_levels(int)>
<android.net.NetworkInfo: boolean isFailover()>
<android.media.RemoteControlClient: void <clinit>()>
<android.view.HardwareRenderer$GlRenderer: void printConfig(javax.microedition.khronos.egl.EGLConfig)>
<android.widget.CalendarView: android.widget.CalendarView$OnDateChangeListener access$300(android.widget.CalendarView)>
<android.text.method.DigitsKeyListener: android.text.method.DigitsKeyListener getInstance(java.lang.String)>
<android.net.wifi.WifiStateMachine$DriverLoadingState: void <init>(android.net.wifi.WifiStateMachine)>
<android.os.DropBoxManager$Entry: void <init>(java.lang.String,long,android.os.ParcelFileDescriptor,int)>
<android.bluetooth.BluetoothHealth: boolean isValidDevice(android.bluetooth.BluetoothDevice)>
<android.net.http.HttpAuthHeader: void parseParameter(java.lang.String,java.lang.String)>
<com.android.server.usb.UsbSettingsManager: boolean clearCompatibleMatchesLocked(java.lang.String,com.android.server.usb.UsbSettingsManager$AccessoryFilter)>
<android.os.Debug: void startMethodTracing(java.lang.String,java.io.FileDescriptor,int,int)>
<android.media.AudioTrack: int setStereoVolume(float,float)>
<android.text.style.SuggestionSpan$1: android.text.style.SuggestionSpan[] newArray(int)>
<android.widget.TabWidget: android.widget.TabWidget$OnTabSelectionChanged access$100(android.widget.TabWidget)>
<com.android.internal.telephony.CommandsInterface$RadioState: boolean isGsm()>
<android.webkit.CacheManager: java.lang.String getDatabaseKey(java.lang.String,long)>
<com.android.internal.view.menu.MenuPopupHelper: boolean isShowing()>
<com.android.server.am.ActivityRecord: long getKeyDispatchingTimeout()>
<android.bluetooth.BluetoothDeviceProfileState: android.bluetooth.BluetoothHeadset access$1302(android.bluetooth.BluetoothDeviceProfileState,android.bluetooth.BluetoothHeadset)>
<com.android.server.sip.SipSessionGroup: boolean isLoggable(com.android.server.sip.SipSessionGroup$SipSessionImpl)>
<android.webkit.WebViewCore: void removeMessages()>
<GenerationGG: android.text.style.ForegroundColorSpan get_androidtextstyleForegroundColorSpan()>
<android.test.AndroidTestRunner: void setInstrumentationIfInstrumentationTestCase(junit.framework.Test,android.app.Instrumentation)>
<android.graphics.Paint: float measureText(java.lang.String)>
<android.view.KeyEvent: void startTracking()>
<android.widget.CalendarView$2: void <init>(android.widget.CalendarView)>
<com.android.server.wm.WindowManagerService: void adjustInputMethodDialogsLocked()>
<android.webkit.WebSettings: void setSansSerifFontFamily(java.lang.String)>
<android.content.CursorLoader: void registerContentObserver(android.database.Cursor,android.database.ContentObserver)>
<android.webkit.WebViewCore: void nativeFullScreenPluginHidden(int)>
<com.android.server.am.ActivityManagerService: com.android.server.am.ActivityRecord resumedAppLocked()>
<android.accounts.AccountManager$BaseFutureTask$1: void <init>(android.accounts.AccountManager)>
<GenerationGG: android.app.ActivityManager$MemoryInfo get_androidappActivityManager__MemoryInfo()>
<com.android.internal.telephony.AdnRecord: void <init>(int,int,java.lang.String,java.lang.String,java.lang.String[])>
<android.view.View: void getLocationOnScreen(int[])>
<android.net.MailTo: java.lang.String toString()>
<android.graphics.Matrix: boolean native_mapRect(int,android.graphics.RectF,android.graphics.RectF)>
<android.net.Uri$Builder: android.net.Uri$Builder fragment(java.lang.String)>
<android.os.UEventObserver: void startObserving(java.lang.String)>
<android.location.LocationManager$GpsStatusListenerTransport: void onSvStatusChanged(int,int[],float[],float[],float[],int,int,int)>
<com.android.server.am.ActivityManagerService$1: boolean allowFilterResult(android.content.IntentFilter,java.util.List)>
<android.text.Layout: void <clinit>()>
<android.widget.TextView$SuggestionsPopupWindow$SuggestionAdapter: java.lang.Object getItem(int)>
<android.app.BackStackState: int describeContents()>
<android.graphics.Matrix: boolean native_preSkew(int,float,float,float,float)>
<android.view.ViewPropertyAnimator$AnimatorEventListener: void onAnimationRepeat(android.animation.Animator)>
<android.net.wifi.WifiStateMachine: int syncGetWifiApState()>
<com.android.internal.os.BatteryStatsImpl$Timer: boolean reset(com.android.internal.os.BatteryStatsImpl,boolean)>
<android.gesture.GestureStore: void <init>()>
<android.app.ResultInfo: int describeContents()>
<android.widget.GridLayout: android.widget.GridLayout$Alignment getAlignment(int,boolean)>
<android.app.Activity: boolean onKeyMultiple(int,int,android.view.KeyEvent)>
<android.app.backup.BackupDataInput$EntityHeader: void <init>()>
<android.media.AudioService: java.lang.Object access$1300(android.media.AudioService)>
<android.content.res.StringBlock$StyleIDs: int access$900(android.content.res.StringBlock$StyleIDs)>
<android.nfc.NdefMessage: int describeContents()>
<GenerationGG: android.text.TextPaint get_androidtextTextPaint()>
<android.view.VolumePanel: android.media.ToneGenerator getOrCreateToneGenerator(int)>
<android.net.sip.SipProfile: boolean getAutoRegistration()>
<com.android.server.MountService: android.content.Context access$2300(com.android.server.MountService)>
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean enableCellBroadcast(int)>
<android.net.wifi.WifiStateMachine$ScanModeState: void enter()>
<android.widget.Filter: void filter(java.lang.CharSequence)>
<android.content.pm.IPackageManager$Stub$Proxy: android.os.IBinder asBinder()>
<android.renderscript.Element: android.renderscript.Element U64_4(android.renderscript.RenderScript)>
<android.speech.SpeechRecognizer$InternalListener: void <init>(android.speech.SpeechRecognizer,android.speech.SpeechRecognizer$1)>
<android.graphics.Matrix: void setValues(float[])>
<android.view.ViewConfiguration: float getScrollFriction()>
<android.view.accessibility.AccessibilityEvent: void init(android.view.accessibility.AccessibilityEvent)>
<android.graphics.Matrix: boolean native_setConcat(int,int,int)>
<android.content.pm.UserInfo$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.text.style.URLSpan: void writeToParcel(android.os.Parcel,int)>
<android.view.ViewRootImpl$AccessibilityInteractionConnection: void <init>(android.view.ViewRootImpl,android.view.ViewRootImpl)>
<android.widget.RemoteViews$ReflectionAction: void <init>(android.widget.RemoteViews,int,java.lang.String,int,java.lang.Object)>
<com.android.server.InputMethodManagerService: android.view.inputmethod.InputMethodInfo[] access$400(com.android.server.InputMethodManagerService)>
<android.graphics.Paint: void nativeGetStringBounds(int,java.lang.String,int,int,android.graphics.Rect)>
<android.renderscript.RSTextureView: void onSurfaceTextureUpdated(android.graphics.SurfaceTexture)>
<com.android.server.accessibility.AccessibilityManagerService$Service: void linkToOwnDeath()>
<com.android.server.WifiService: boolean access$302(com.android.server.WifiService,boolean)>
<android.content.SyncAdapterType: boolean isAlwaysSyncable()>
<android.location.ILocationProvider$Stub$Proxy: void <init>(android.os.IBinder)>
<android.text.style.TypefaceSpan: int describeContents()>
<android.test.mock.MockResources: android.content.res.XmlResourceParser getAnimation(int)>
<android.webkit.DeviceMotionAndOrientationManager: void <init>(android.webkit.WebViewCore)>
<GenerationGG: android.view.SoundEffectConstants get_androidviewSoundEffectConstants()>
<android.filterfw.core.FilterContext: void initGLEnvironment(android.filterfw.core.GLEnvironment)>
<GenerationGG: android.view.ViewPropertyAnimator get_androidviewViewPropertyAnimator()>
<com.android.internal.telephony.RIL: com.android.internal.telephony.RILRequest findAndRemoveRequestFromList(int)>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.IccFileHandler getIccFileHandler()>
<GenerationGG: android.test.IsolatedContext get_androidtestIsolatedContext()>
<android.net.wifi.WifiInfo: java.lang.String getMacAddress()>
<android.animation.Keyframe$IntKeyframe: int getIntValue()>
<android.hardware.Camera: boolean access$400(android.hardware.Camera)>
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void <init>(android.util.Property,android.animation.FloatKeyframeSet)>
<android.content.IntentFilter: void addDataScheme(java.lang.String)>
<android.graphics.SurfaceTexture$EventHandler: void <init>(android.graphics.SurfaceTexture,android.os.Looper)>
<com.android.internal.net.NetworkStatsFactory: void <init>(java.io.File)>
<com.android.internal.telephony.cat.RilMessageDecoder: com.android.internal.telephony.cat.RilMessageDecoder$StateStart access$700(com.android.internal.telephony.cat.RilMessageDecoder)>
<android.app.WallpaperManager: void setWallpaperOffsetSteps(float,float)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void updateDeviceStatus(java.lang.String,int)>
<android.renderscript.Allocation: void copy1DRangeFrom(int,int,android.renderscript.Allocation,int)>
<com.android.internal.os.BatteryStatsImpl: void noteWifiOnLocked()>
<com.android.internal.view.menu.ActionMenuItem: boolean collapseActionView()>
<android.app.ActivityThread: void handleLowMemory()>
<android.widget.AdapterView: int lookForSelectablePosition(int,boolean)>
<com.android.server.pm.PackageManagerService$8: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,android.content.pm.IPackageDataObserver)>
<android.view.animation.AnimationSet: void setDuration(long)>
<android.content.IIntentSender$Stub: android.os.IBinder asBinder()>
<android.view.animation.ScaleAnimation: void <init>(float,float,float,float,float,float)>
<android.opengl.GLErrorWrapper: void <init>(javax.microedition.khronos.opengles.GL,int)>
<android.net.wifi.ScanResult$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.cdma.sms.BearerData: byte[] encode(com.android.internal.telephony.cdma.sms.BearerData)>
<com.android.server.NotificationPlayer$Command: void <init>(com.android.server.NotificationPlayer$1)>
<android.webkit.WebView$TouchEventQueue: void <init>(android.webkit.WebView)>
<android.os.Bundle: void readFromParcel(android.os.Parcel)>
<android.server.BluetoothAdapterStateMachine$PerProcessState: void enter()>
<android.widget.Filter: void setDelayer(android.widget.Filter$Delayer)>
<GenerationGG: android.os.DeadObjectException get_androidosDeadObjectException()>
<com.android.internal.telephony.ServiceStateTracker: void unregisterForDataConnectionAttached(android.os.Handler)>
<android.location.Country: int describeContents()>
<android.view.animation.BounceInterpolator: float getInterpolation(float)>
<android.bluetooth.BluetoothA2dp: java.lang.String stateToString(int)>
<android.graphics.PointF: boolean equals(float,float)>
<android.net.LocalSocket: android.net.LocalSocketAddress getRemoteSocketAddress()>
<android.graphics.drawable.RotateDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<android.util.TypedValue: int complexToDimensionPixelOffset(int,android.util.DisplayMetrics)>
<GenerationGG: android.app.NotificationManager get_androidappNotificationManager()>
<android.os.PerformanceCollector: void startAllocCounting()>
<android.view.animation.Animation: boolean willChangeBounds()>
<android.widget.GridLayout$Axis: android.widget.GridLayout$Arc[] topologicalSort(java.util.List)>
<android.app.ActivityManagerProxy: boolean testIsSystemReady()>
<com.android.server.MountService$ObbState: void unlink()>
<android.net.wifi.p2p.WifiP2pGroup$1: android.net.wifi.p2p.WifiP2pGroup[] newArray(int)>
<android.content.pm.LabeledIntent$1: java.lang.Object[] newArray(int)>
<android.server.BluetoothPanProfileHandler: boolean access$002(android.server.BluetoothPanProfileHandler,boolean)>
<android.view.ViewGroup$TouchTarget: void <init>()>
<android.database.Observable: void unregisterObserver(java.lang.Object)>
<android.view.InputQueue: void nativeRegisterInputChannel(android.view.InputChannel,android.view.InputHandler,android.os.MessageQueue)>
<android.text.util.Rfc822Tokenizer: void <init>()>
<android.webkit.DeviceMotionAndOrientationManager: void nativeOnOrientationChange(android.webkit.WebViewCore,boolean,double,boolean,double,boolean,double)>
<android.renderscript.Sampler$Value: void <clinit>()>
<android.app.FragmentTransaction: void <init>()>
<android.animation.LayoutTransition$6: void <init>(android.animation.LayoutTransition,android.view.View,android.view.ViewGroup)>
<android.telephony.PhoneNumberUtils: void <init>()>
<android.view.View$AttachInfo$InvalidateInfo$1: void onAcquired(android.util.Poolable)>
<android.net.Uri$OpaqueUri: java.util.List getPathSegments()>
<android.content.ContentService$ObserverNode: void <init>(java.lang.String)>
<Wrapper_android_os_StatFs: void test_android_os_StatFs()>
<android.util.Base64$Encoder: boolean process(byte[],int,int,boolean)>
<com.android.server.usb.UsbSettingsManager$DeviceFilter: com.android.server.usb.UsbSettingsManager$DeviceFilter read(org.xmlpull.v1.XmlPullParser)>
<android.telephony.cdma.CdmaCellLocation: void <init>()>
<android.test.MoreAsserts: void failWithMessage(java.lang.String,java.lang.String)>
<android.app.Notification$Builder: android.app.Notification$Builder setOngoing(boolean)>
<android.database.BulkCursorToCursorAdaptor: void throwIfCursorIsClosed()>
<com.android.internal.telephony.IPhoneSubInfo$Stub: com.android.internal.telephony.IPhoneSubInfo asInterface(android.os.IBinder)>
<com.android.internal.telephony.cat.Tone: void <clinit>()>
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub$Proxy: void <init>(android.os.IBinder)>
<android.text.PackedObjectVector: void insertAt(int,java.lang.Object[])>
<android.location.Country: void writeToParcel(android.os.Parcel,int)>
<android.util.StateSet: int[] trimStateSet(int[],int)>
<com.android.internal.textservice.ISpellCheckerService$Stub$Proxy: android.os.IBinder asBinder()>
<android.app.ContextImpl: void setOuterContext(android.content.Context)>
<android.view.VolumePanel$StreamControl: void <init>(android.view.VolumePanel)>
<android.graphics.Paint: float native_getTextRunAdvances(int,java.lang.String,int,int,int,int,int,float[],int,int)>
<android.text.style.AbsoluteSizeSpan: int getSpanTypeId()>
<android.webkit.ZoomManager: float getZoomOverviewScale()>
<android.renderscript.Matrix2f: void <init>()>
<android.app.ApplicationPackageManager$ResourceName: void <init>(java.lang.String,int)>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String feedbackTypeToString(int)>
<GenerationGG: android.net.ParseException get_androidnetParseException()>
<android.view.textservice.SpellCheckerSession: java.lang.String access$200()>
<android.graphics.RectF: void inset(float,float)>
<android.app.LoadedApk$WarningContextClassLoader: void <init>(android.app.LoadedApk$1)>
<android.view.animation.Animation: void getInvalidateRegion(int,int,int,int,android.graphics.RectF,android.view.animation.Transformation)>
<android.net.http.AndroidHttpClient: android.net.http.AndroidHttpClient newInstance(java.lang.String,android.content.Context)>
<android.test.ViewAsserts: void assertOffScreenAbove(android.view.View,android.view.View)>
<android.telephony.PhoneNumberFormattingTextWatcher: java.lang.String getFormattedNumber(char,boolean)>
<android.view.textservice.TextInfo: java.lang.String getText()>
<android.view.WindowManagerImpl: void removeItem(java.lang.Object[],java.lang.Object[],int)>
<com.android.server.wm.ScreenRotationAnimation: void <init>(android.content.Context,android.view.SurfaceSession,boolean,int,int,int)>
<com.android.internal.telephony.RestrictedState: void <init>()>
<android.nfc.NfcActivityManager: void onNdefPushComplete()>
<android.graphics.Rect: boolean isEmpty()>
<android.graphics.Matrix: boolean mapRect(android.graphics.RectF,android.graphics.RectF)>
<android.speech.IRecognitionListener$Stub: android.speech.IRecognitionListener asInterface(android.os.IBinder)>
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getLine1AlphaTag()>
<android.webkit.WebView: void touchUpOnTextField(android.view.MotionEvent)>
<com.android.server.NotificationManagerService$ToastRecord: void <init>(int,java.lang.String,android.app.ITransientNotification,int)>
<android.widget.GridView: int getTopSelectionPixel(int,int,int)>
<Wrapper_android_database_sqlite_SQLiteAbortException: void test_android_database_sqlite_SQLiteAbortException()>
<android.webkit.CookieManager$Cookie: boolean pathMatch(java.lang.String)>
<android.content.AbstractThreadedSyncAdapter: java.util.HashMap access$300(android.content.AbstractThreadedSyncAdapter)>
<com.android.internal.telephony.SmsAddress: boolean couldBeEmailGateway()>
<android.preference.DialogPreference: void onPrepareDialogBuilder(android.app.AlertDialog$Builder)>
<android.database.CursorJoiner: void remove()>
<android.animation.Keyframe$FloatKeyframe: android.animation.Keyframe$FloatKeyframe clone()>
<android.gesture.GestureOverlayView: boolean isFadeEnabled()>
<android.server.BluetoothA2dpService: void finalize()>
<android.text.method.TimeKeyListener: int getInputType()>
<android.server.BluetoothHealthProfileHandler: int getChannelId()>
<com.android.internal.telephony.SMSDispatcher$1: void onClick(android.content.DialogInterface,int)>
<android.media.ToneGenerator: void finalize()>
<com.android.server.MountService: android.os.Handler access$400(com.android.server.MountService)>
<com.android.server.BackupManagerService: android.content.pm.PackageManager access$500(com.android.server.BackupManagerService)>
<android.os.AsyncTask$Status: android.os.AsyncTask$Status[] values()>
<android.location.IGpsStatusListener$Stub: android.location.IGpsStatusListener asInterface(android.os.IBinder)>
<android.content.SyncManager: android.content.SyncAdapterType[] getSyncAdapterTypes()>
<com.android.server.wm.InputMonitor: void thawInputDispatchingLw()>
<GenerationGG: android.widget.ViewSwitcher$ViewFactory get_androidwidgetViewSwitcher__ViewFactory()>
<android.mtp.MtpDevice: boolean native_open(java.lang.String,int)>
<android.webkit.WebView: boolean access$8102(android.webkit.WebView,boolean)>
<android.view.MotionEvent$PointerCoords: void clear()>
<android.content.pm.PackageStats$1: java.lang.Object[] newArray(int)>
<android.bluetooth.BluetoothSocket$SdpHelper: void cancel()>
<android.webkit.JWebCoreJavaBridge: void setNetworkOnLine(boolean)>
<android.os.StrictMode: void setCloseGuardEnabled(boolean)>
<android.view.VelocityTracker: void clear()>
<android.renderscript.RenderScript: int rsnContextCreateGL(int,int,int,int,int,int,int,int,int,int,int,int,int,float,int)>
<android.net.wifi.WifiWatchdogStateMachine: long access$3100(android.net.wifi.WifiWatchdogStateMachine)>
<com.android.server.ThrottleService$InterfaceObserver: void interfaceRemoved(java.lang.String)>
<android.accounts.Account$1: java.lang.Object[] newArray(int)>
<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableBluetoothRegexs()>
<android.bluetooth.BluetoothDeviceProfileState: android.os.Message access$7200(android.bluetooth.BluetoothDeviceProfileState)>
<android.webkit.WebViewCore$GetUrlData: void <init>()>
<com.android.server.am.ActivityManagerService: boolean isImmersive(android.os.IBinder)>
<android.os.ParcelFileDescriptor: long seekTo(long)>
<android.hardware.usb.UsbRequest: boolean native_queue_array(byte[],int,boolean)>
<Wrapper_android_util_StateSet: void test_android_util_StateSet()>
<android.content.res.Resources: void updateSystemConfiguration(android.content.res.Configuration,android.util.DisplayMetrics,android.content.res.CompatibilityInfo)>
<android.app.ApplicationErrorReport$BatteryInfo: void <init>(android.os.Parcel)>
<android.webkit.FindActionModeCallback: void afterTextChanged(android.text.Editable)>
<android.net.MobileDataStateTracker: android.net.LinkProperties getLinkProperties()>
<android.widget.ExpandableListConnector$GroupMetadata$1: android.widget.ExpandableListConnector$GroupMetadata createFromParcel(android.os.Parcel)>
<GenerationGG: android.graphics.Canvas$VertexMode get_androidgraphicsCanvas__VertexMode()>
<android.view.ViewRootImpl$AccessibilityInteractionController$1: void onReleased(android.util.Poolable)>
<android.bluetooth.BluetoothDeviceProfileState: android.os.Message access$9600(android.bluetooth.BluetoothDeviceProfileState)>
<com.android.internal.os.BatteryStatsImpl: long computeUptime(long,int)>
<android.content.SyncStorageEngine: int getIsSyncable(android.accounts.Account,java.lang.String)>
<com.android.server.BatteryService: int access$400(com.android.server.BatteryService)>
<android.text.style.MaskFilterSpan: void <init>(android.graphics.MaskFilter)>
<android.view.FocusFinder: int majorAxisDistanceToFarEdgeRaw(int,android.graphics.Rect,android.graphics.Rect)>
<android.gesture.Gesture: java.lang.Object clone()>
<android.view.Display: float getRefreshRate()>
<android.webkit.WebViewClient: void onFormResubmission(android.webkit.WebView,android.os.Message,android.os.Message)>
<android.view.GLES20Canvas: void restoreToCount(int)>
<android.os.RemoteCallbackList: java.lang.Object getBroadcastCookie(int)>
<android.widget.FastScroller$1: void <init>(android.widget.FastScroller)>
<android.widget.Gallery: boolean movePrevious()>
<com.android.server.location.MockProvider: void <init>(java.lang.String,android.location.ILocationManager,boolean,boolean,boolean,boolean,boolean,boolean,boolean,int,int)>
<android.test.mock.MockResources: java.lang.String getResourceName(int)>
<GenerationGG: android.location.Criteria get_androidlocationCriteria()>
<android.view.View: void startAnimation(android.view.animation.Animation)>
<com.android.internal.telephony.DataConnection$DcDefaultState: void exit()>
<com.android.internal.telephony.cat.CatService: void getInKeyResponse(java.io.ByteArrayOutputStream,com.android.internal.telephony.cat.Input)>
<android.renderscript.Allocation: void resize(int)>
<android.os.Debug: int getGlobalAllocSize()>
<android.content.ContentProvider: void shutdown()>
<android.view.KeyEvent: int getSource()>
<GenerationGG: android.os.Binder get_androidosBinder()>
<GenerationGG: android.widget.Filter$FilterListener get_androidwidgetFilter__FilterListener()>
<android.webkit.WebView: android.webkit.WebViewCore getWebViewCore()>
<com.android.internal.util.XmlUtils: boolean convertValueToBoolean(java.lang.CharSequence,boolean)>
<android.accounts.AccountManager: void access$1400(android.accounts.AccountManager,android.os.Handler,android.accounts.OnAccountsUpdateListener,android.accounts.Account[])>
<android.telephony.SignalStrength: int getCdmaEcio()>
<Wrapper_android_text_style_SubscriptSpan: void test_android_text_style_SubscriptSpan()>
<com.android.server.am.StrictModeViolationDialog$1: void <init>(com.android.server.am.StrictModeViolationDialog)>
<android.net.http.CharArrayBuffers: boolean containsIgnoreCaseTrimmed(org.apache.http.util.CharArrayBuffer,int,java.lang.String)>
<android.speech.tts.TextToSpeech$Connection: void onServiceDisconnected(android.content.ComponentName)>
<com.android.internal.telephony.DataConnection$DcDisconnectingState: boolean processMessage(android.os.Message)>
<com.android.internal.telephony.BaseCommands: void unregisterForRUIMReady(android.os.Handler)>
<android.app.BackStackRecord: int getId()>
<android.view.GLES20RenderLayer: void setTransform(android.graphics.Matrix)>
<android.app.ProgressDialog: void onProgressChanged()>
<android.webkit.WebViewClient: android.webkit.WebResourceResponse shouldInterceptRequest(android.webkit.WebView,java.lang.String)>
<android.content.Intent$1: java.lang.Object[] newArray(int)>
<android.net.SntpClient: long getNtpTimeReference()>
<android.app.IUiModeManager$Stub: android.app.IUiModeManager asInterface(android.os.IBinder)>
<android.content.SyncManager$5: void <init>(android.content.SyncManager)>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void access$2100(com.android.server.connectivity.Tethering$TetherInterfaceSM,com.android.internal.util.IState)>
<android.view.HardwareRenderer$Gl20Renderer: boolean canDraw()>
<android.os.PerformanceCollector: void <init>()>
<android.location.IGeocodeProvider$Stub$Proxy: void <init>(android.os.IBinder)>
<android.mtp.MtpDevice: long native_get_parent(int)>
<android.view.GLES20Canvas: void setViewport(int,int)>
<com.android.server.wm.WindowManagerService: void removeAppTokensLocked(java.util.List)>
<java.lang.Object: int getInt(int)>
<android.hardware.Camera: void setPreviewDisplay(android.view.Surface)>
<android.view.ViewRootImpl: void postSendWindowContentChangedCallback()>
<GenerationGG: android.renderscript.Byte3 get_androidrenderscriptByte3()>
<android.widget.TextView: android.content.Context access$1200(android.widget.TextView)>
<android.media.AudioTrack: void loge(java.lang.String)>
<android.text.method.BaseMovementMethod: void <init>()>
<android.net.wifi.WifiNative: boolean startWpsWithPinFromAccessPointCommand(java.lang.String,java.lang.String)>
<android.view.GestureDetector$SimpleOnGestureListener: boolean onDoubleTap(android.view.MotionEvent)>
<android.test.mock.MockPackageManager: void clearPackagePreferredActivities(java.lang.String)>
<android.text.SpannableStringBuilder: void getChars(int,int,char[],int)>
<java.lang.Object: java.lang.String getNamespace(java.lang.String)>
<android.app.Dialog: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.os.Message: android.os.Message obtain(android.os.Handler,int)>
<com.android.server.pm.PackageManagerService: void scheduleWriteSettingsLocked()>
<com.android.internal.telephony.cdma.CdmaCall: void attach(com.android.internal.telephony.Connection,com.android.internal.telephony.DriverCall)>
<android.webkit.WebSettings: void setStandardFontFamily(java.lang.String)>
<android.widget.AbsSeekBar: void setThumbOffset(int)>
<android.view.ViewRootImpl$CalledFromWrongThreadException: void <init>(java.lang.String)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: int access$1000(com.android.internal.telephony.cdma.CdmaLteUiccRecords,int)>
<com.android.server.am.ActivityStack: com.android.server.am.ActivityRecord isInStackLocked(android.os.IBinder)>
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: boolean isFilterStopped(android.content.pm.PackageParser$ActivityIntentInfo)>
<com.android.internal.telephony.ServiceStateTracker: void unregisterForDataConnectionDetached(android.os.Handler)>
<com.android.server.sip.SipWakeupTimer: void recalculatePeriods()>
<android.text.SpannableStringInternal: int getSpanFlags(java.lang.Object)>
<android.app.AlertDialog: com.android.internal.app.AlertController access$000(android.app.AlertDialog)>
<android.webkit.WebIconDatabase$EventHandler: void access$900(android.webkit.WebIconDatabase$EventHandler,android.os.Message)>
<android.database.sqlite.SQLiteDatatypeMismatchException: void <init>()>
<DumbClass: void DumbMethod23()>
<android.test.mock.MockPackageManager: void setInstallerPackageName(java.lang.String,java.lang.String)>
<android.util.DisplayMetrics: void <init>()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void setWifiP2pInfoOnGroupTermination()>
<com.android.server.LocationManagerService: java.util.ArrayList access$1800(com.android.server.LocationManagerService)>
<android.content.Intent: java.util.Set getCategories()>
<android.preference.ListPreference$SavedState: void <init>(android.os.Parcelable)>
<com.android.server.location.GeocoderProxy$Connection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<android.view.KeyEvent: boolean isLongPress()>
<android.net.wifi.WifiStateTracker: void setUserDataEnable(boolean)>
<GenerationGG: android.app.ExpandableListActivity get_androidappExpandableListActivity()>
<android.widget.GridLayout$Bounds: int size(boolean)>
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getFmtp(int)>
<android.app.Dialog: boolean dispatchGenericMotionEvent(android.view.MotionEvent)>
<android.gesture.GestureLibrary: void <init>()>
<android.test.mock.MockPackageManager: android.content.res.Resources getResourcesForApplication(java.lang.String)>
<android.widget.TextView: boolean isVisiblePasswordInputType(int)>
<android.app.backup.IRestoreObserver$Stub: android.app.backup.IRestoreObserver asInterface(android.os.IBinder)>
<android.content.res.AssetManager: int addAssetPath(java.lang.String)>
<GenerationGG: android.graphics.Point get_androidgraphicsPoint()>
<com.android.server.am.UriPermissionOwner: void <init>(com.android.server.am.ActivityManagerService,java.lang.Object)>
<android.widget.GridLayout$Axis: void invalidateStructure()>
<android.os.Bundle: void setClassLoader(java.lang.ClassLoader)>
<android.net.Uri$OpaqueUri: java.lang.String getEncodedAuthority()>
<android.widget.StackView$StackSlider: void <init>(android.widget.StackView)>
<android.view.View: int getSuggestedMinimumWidth()>
<android.webkit.HTML5VideoView: void enterFullScreenVideoState(int,android.webkit.HTML5VideoViewProxy,android.webkit.WebView)>
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: void dumpFilter(java.io.PrintWriter,java.lang.String,android.content.IntentFilter)>
<com.android.server.accessibility.AccessibilityManagerService$Service: float getCompatibilityScale(int)>
<android.test.mock.MockContext: java.io.FileInputStream openFileInput(java.lang.String)>
<GenerationGG: java.util.Calendar get_javautilCalendar()>
<GenerationGG: android.content.pm.ResolveInfo get_androidcontentpmResolveInfo()>
<android.renderscript.RenderScript: void nContextDestroy()>
<android.media.AudioService: void access$200(android.os.Handler,int,int,int,int,int,java.lang.Object,int)>
<android.content.IIntentReceiver$Stub$Proxy: android.os.IBinder asBinder()>
<android.util.LongSparseArray: long keyAt(int)>
<android.net.wifi.WifiWatchdogStateMachine: long access$4000(android.net.wifi.WifiWatchdogStateMachine)>
<android.server.BluetoothPanProfileHandler: java.lang.String createNewTetheringAddressLocked()>
<com.android.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitle()>
<android.webkit.WebView: void nativeSelectBestAt(android.graphics.Rect)>
<android.app.IActivityManager$ContentProviderHolder$1: void <init>()>
<android.media.audiofx.Visualizer: int getFft(byte[])>
<android.nfc.NdefRecord: byte[] getId()>
<android.inputmethodservice.Keyboard: boolean setShifted(boolean)>
<android.gesture.GestureOverlayView: void removeOnGestureListener(android.gesture.GestureOverlayView$OnGestureListener)>
<GenerationGG: android.text.style.LineBackgroundSpan get_androidtextstyleLineBackgroundSpan()>
<android.widget.SearchView: boolean isSubmitAreaEnabled()>
<android.view.ViewConfiguration: boolean isFadingMarqueeEnabled()>
<android.content.pm.ResolveInfo$1: java.lang.Object[] newArray(int)>
<com.android.internal.telephony.cdma.CdmaCall$1: void <clinit>()>
<com.android.server.am.ActivityManagerService: android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)>
<android.net.Uri$Part$EmptyPart: boolean isEmpty()>
<com.android.server.PowerManagerService$LockList: int reactivateScreenLocksLocked()>
<android.widget.AbsListView: java.lang.CharSequence getTextFilter()>
<android.net.wifi.WifiStateMachine: void access$10900(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.widget.SimpleAdapter: void setViewBinder(android.widget.SimpleAdapter$ViewBinder)>
<android.os.Debug$MemoryInfo: void writeToParcel(android.os.Parcel,int)>
<android.service.wallpaper.WallpaperService$Engine: void onDestroy()>
<com.android.internal.telephony.DriverCall$State: void <clinit>()>
<android.app.IWallpaperManager$Stub: android.os.IBinder asBinder()>
<android.text.method.BaseMovementMethod: boolean home(android.widget.TextView,android.text.Spannable)>
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: int getCount()>
<android.view.ViewGroup: void scheduleLayoutAnimation()>
<android.widget.TimePicker$SavedState: void <clinit>()>
<android.net.UrlQuerySanitizer: void <clinit>()>
<android.view.inputmethod.InputMethodManager$ControlledInputConnectionWrapper: void <init>(android.view.inputmethod.InputMethodManager,android.os.Looper,android.view.inputmethod.InputConnection)>
<com.android.internal.app.ActionBarImpl$TabImpl: android.view.View getCustomView()>
<com.android.server.sip.SipService$SipSessionGroupExt: android.net.sip.SipProfile getLocalProfile()>
<android.widget.TextView$TextAlign: android.widget.TextView$TextAlign[] values()>
<com.android.server.AlarmManagerService: void removeLocked(android.app.PendingIntent)>
<android.media.AudioService: void waitForAudioHandlerCreation()>
<android.drm.DrmManagerClient: android.drm.DrmManagerClient$OnInfoListener access$700(android.drm.DrmManagerClient)>
<android.widget.ListPopupWindow: void setSoftInputMode(int)>
<android.widget.ViewAnimator: android.view.View getCurrentView()>
<android.widget.FrameLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.media.audiofx.BassBoost$BaseParameterListener: void onParameterChange(android.media.audiofx.AudioEffect,int,byte[],byte[])>
<android.text.Layout: int getHeight()>
<android.app.FragmentManagerImpl: void makeActive(android.app.Fragment)>
<android.net.wifi.WifiNative: boolean wpsPbc()>
<android.widget.StackView$StackFrame: void setSliderAnimator(android.animation.ObjectAnimator)>
<android.content.SyncAdapterType: boolean supportsUploading()>
<com.android.server.am.ActivityManagerService: boolean isUserAMonkey()>
<android.test.InstrumentationTestSuite: void runTest(junit.framework.Test,junit.framework.TestResult)>
<android.mtp.MtpDevice: boolean open(android.hardware.usb.UsbDeviceConnection)>
<android.os.Debug: void resetGlobalFreedSize()>
<android.app.ActivityThread: void doGcIfNeeded()>
<android.view.inputmethod.InputBinding: int getUid()>
<android.hardware.usb.UsbDeviceConnection: boolean open(java.lang.String,android.os.ParcelFileDescriptor)>
<com.android.server.pm.PackageManagerService: java.util.List queryIntentActivityOptions(android.content.ComponentName,android.content.Intent[],java.lang.String[],android.content.Intent,java.lang.String,int)>
<android.os.StrictMode: boolean vmSqliteObjectLeaksEnabled()>
<android.app.LoaderManagerImpl: void <init>(android.app.Activity,boolean)>
<android.widget.PopupWindow: void setWindowLayoutMode(int,int)>
<android.database.DatabaseUtils: void readExceptionFromParcel(android.os.Parcel,java.lang.String,int)>
<android.webkit.WebView: int access$5900(android.webkit.WebView)>
<com.android.server.pm.PackageManagerService: int getUidForVerifier(android.content.pm.VerifierInfo)>
<com.android.internal.os.BatteryStatsImpl: void noteStopWakeFromSourceLocked(android.os.WorkSource,int,java.lang.String,int)>
<android.appwidget.AppWidgetHostView: int generateId()>
<android.media.ExifInterface: void <clinit>()>
<android.hardware.Camera$Parameters: void <init>(android.hardware.Camera,android.hardware.Camera$1)>
<android.os.StatFs: void native_setup(java.lang.String)>
<android.app.Activity: void closeContextMenu()>
<android.widget.TextView$PositionListener: int getPositionY()>
<android.view.GLES20DisplayList$DisplayListFinalizer: void <init>(int)>
<android.view.InputEventConsistencyVerifier: void appendEvent(java.lang.StringBuilder,int,android.view.InputEvent,boolean)>
<android.animation.Animator: void start()>
<android.net.DhcpInfo$1: java.lang.Object[] newArray(int)>
<android.media.MediaPlayer: void updateSurfaceScreenOn()>
<android.view.KeyEvent: int getMaxKeyCode()>
<android.test.mock.MockContext: void setTheme(int)>
<android.net.wifi.p2p.WifiP2pDeviceList: int describeContents()>
<android.view.accessibility.AccessibilityEvent: void <clinit>()>
<android.os.Registrant: void clear()>
<Wrapper_android_util_LogPrinter: void test_android_util_LogPrinter()>
<com.android.internal.telephony.cdma.sms.BearerData: boolean decodeMessageId(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)>
<android.webkit.WebView: int access$7000(android.webkit.WebView)>
<android.bluetooth.BluetoothHeadset$1: void <init>(android.bluetooth.BluetoothHeadset)>
<android.webkit.WebSettings: boolean getBuiltInZoomControls()>
<com.android.internal.os.BatteryStatsImpl$StopwatchTimer: long computeRunTimeLocked(long)>
<com.android.server.AppWidgetService: void dumpProvider(com.android.server.AppWidgetService$Provider,int,java.io.PrintWriter)>
<com.android.internal.telephony.SmsUsageMonitor: boolean check(java.lang.String,int)>
<android.net.MobileDataStateTracker: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>
<android.app.Activity: boolean requestWindowFeature(int)>
<android.app.FragmentManagerImpl: void <clinit>()>
<com.android.server.DropBoxManagerService$1$1: void <init>(com.android.server.DropBoxManagerService$1)>
<android.view.accessibility.AccessibilityRecord: int getCurrentItemIndex()>
<android.preference.DialogPreference: android.app.Dialog getDialog()>
<com.android.server.wm.WindowManagerService$1: void <init>(com.android.server.wm.WindowManagerService,android.os.Handler,java.lang.String)>
<android.view.animation.AnimationSet: void restoreChildrenStartOffset()>
<Wrapper_android_app_backup_BackupDataInput: void test_android_app_backup_BackupDataInput()>
<android.bluetooth.BluetoothDeviceProfileState: void access$6800(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.view.ViewRootImpl$3: void setFormat(int)>
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getSubscriberId()>
<android.animation.IntEvaluator: java.lang.Integer evaluate(float,java.lang.Integer,java.lang.Integer)>
<android.util.SparseArray: void <init>()>
<android.view.IWindowManager$Stub: void <init>()>
<android.test.mock.MockPackageManager: android.content.res.Resources getResourcesForApplication(android.content.pm.ApplicationInfo)>
<android.widget.ExpandableListView$SavedState$1: android.widget.ExpandableListView$SavedState[] newArray(int)>
<com.android.internal.telephony.IWapPushManager$Stub: com.android.internal.telephony.IWapPushManager asInterface(android.os.IBinder)>
<com.android.server.MountService: int doFormatVolume(java.lang.String)>
<android.net.InterfaceConfiguration$1: void <init>()>
<android.app.WallpaperInfo: android.content.pm.ServiceInfo getServiceInfo()>
<android.sax.Element: android.sax.Element getChild(java.lang.String,java.lang.String)>
<android.bluetooth.BluetoothDevice: java.lang.String getAddress()>
<android.graphics.drawable.Drawable: android.graphics.Rect copyBounds()>
<android.webkit.WebSettings: int getUserAgent()>
<android.app.ApplicationErrorReport$1: java.lang.Object[] newArray(int)>
<com.android.server.connectivity.Tethering$TetherMasterSM: com.android.internal.util.State access$3000(com.android.server.connectivity.Tethering$TetherMasterSM)>
<com.android.internal.telephony.WapPushOverSms$WapPushConnection: void rebindWapPushManager()>
<android.test.AssertionFailedError: void <init>()>
<android.speech.tts.SynthesisRequest: void setLanguage(java.lang.String,java.lang.String,java.lang.String)>
<android.net.INetworkManagementEventObserver$Stub: void <init>()>
<android.text.style.SpellCheckSpan: int getSpanTypeId()>
<com.android.internal.telephony.cdma.SmsMessage$SubmitPdu: void <init>()>
<GenerationGG: android.text.util.Linkify$MatchFilter get_androidtextutilLinkify__MatchFilter()>
<android.util.TypedValue: float getDimension(android.util.DisplayMetrics)>
<android.text.style.ForegroundColorSpan: void updateDrawState(android.text.TextPaint)>
<android.net.http.Headers: java.lang.String getProxyAuthenticate()>
<android.view.ViewConfiguration: int getScaledDoubleTapSlop()>
<android.graphics.ColorMatrix: void setYUV2RGB()>
<android.accounts.NetworkErrorException: void <init>()>
<android.animation.ValueAnimator: void setObjectValues(java.lang.Object[])>
<android.content.IntentFilter: java.util.Iterator authoritiesIterator()>
<android.webkit.LoadListener: void attachRequestHandle(android.net.http.RequestHandle)>
<GenerationGG: android.text.style.URLSpan get_androidtextstyleURLSpan()>
<android.app.Application: void registerActivityLifecycleCallbacks(android.app.Application$ActivityLifecycleCallbacks)>
<android.renderscript.RenderScript: void rsnContextDump(int,int)>
<GenerationGG: android.view.ActionMode get_androidviewActionMode()>
<android.speech.tts.AudioPlaybackHandler: int getChannelConfig(int)>
<android.test.mock.MockCursor: boolean isAfterLast()>
<android.app.ActivityManager$RunningServiceInfo: void <clinit>()>
<android.test.ClassPathPackageInfo: int hashCode()>
<android.telephony.SmsMessage$MessageClass: void <init>(java.lang.String,int)>
<android.graphics.drawable.shapes.Shape: android.graphics.drawable.shapes.Shape clone()>
<android.os.StrictMode$VmPolicy: java.lang.String toString()>
<android.widget.GridLayout$2: void <init>()>
<android.preference.EditTextPreference$SavedState$1: android.preference.EditTextPreference$SavedState[] newArray(int)>
<android.webkit.LoadListener: long postIdentifier()>
<android.view.View: android.graphics.Matrix getMatrix()>
<android.media.MediaRecorder: void setOutputFormat(int)>
<android.widget.TableLayout: void setStretchAllColumns(boolean)>
<android.view.View$TransformationInfo: int access$502(android.view.View$TransformationInfo,int)>
<android.graphics.drawable.ClipDrawable: int getOpacity()>
<android.view.View: boolean isHardwareAccelerated()>
<GenerationGG: android.provider.SyncStateContract get_androidproviderSyncStateContract()>
<com.android.server.am.StrictModeViolationDialog: com.android.server.am.ProcessRecord access$000(com.android.server.am.StrictModeViolationDialog)>
<android.content.pm.Signature: byte[] toByteArray()>
<android.webkit.HTML5VideoViewProxy: boolean access$000(android.graphics.SurfaceTexture,int,int,int,int)>
<com.android.server.am.ActivityManagerService$Identity: void <init>(com.android.server.am.ActivityManagerService,int,int)>
<android.media.AudioService: void checkUpdateRemoteControlDisplay_syncAfRcs(int)>
<android.webkit.WebChromeClient: void onReceivedTouchIconUrl(android.webkit.WebView,java.lang.String,boolean)>
<com.android.server.DevicePolicyManagerService: boolean isAdminActive(android.content.ComponentName)>
<com.android.internal.telephony.CommandException$Error: void <init>(java.lang.String,int)>
<android.webkit.HTML5VideoViewProxy: android.content.Context getContext()>
<com.android.server.wm.WindowManagerService: void placeWindowAfter(com.android.server.wm.WindowState,com.android.server.wm.WindowState)>
<android.graphics.RectF: void roundOut(android.graphics.Rect)>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>
<android.view.DragEvent: android.view.DragEvent obtain(android.view.DragEvent)>
<android.app.DialogFragment: void onCancel(android.content.DialogInterface)>
<com.android.server.am.ProcessRecord: void setPid(int)>
<DumbClass: void DumbMethod27()>
<com.android.internal.telephony.cdma.RuimRecords: java.lang.String getRUIMOperatorNumeric()>
<com.android.internal.telephony.PhoneProxy: android.telephony.SignalStrength getSignalStrength()>
<android.view.KeyCharacterMap: char getMatch(int,char[],int)>
<android.os.ParcelUuid: void writeToParcel(android.os.Parcel,int)>
<android.net.http.AndroidHttpClientConnection: void bind(java.net.Socket,org.apache.http.params.HttpParams)>
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void finalize()>
<java.lang.Object: boolean getAttributeBooleanValue(int,boolean)>
<android.widget.RatingBar: void dispatchRatingChange(boolean)>
<android.app.ActivityManager$RunningServiceInfo: void writeToParcel(android.os.Parcel,int)>
<android.drm.DrmInfo: void <init>(int,java.lang.String,java.lang.String)>
<com.android.internal.telephony.sip.SipPhone: android.net.LinkProperties getLinkProperties(java.lang.String)>
<android.webkit.WebBackForwardList: void restoreIndex(int,int)>
<android.net.sip.SipSession$Listener: void onError(android.net.sip.SipSession,int,java.lang.String)>
<android.service.wallpaper.WallpaperService$Engine: void onSurfaceChanged(android.view.SurfaceHolder,int,int,int)>
<com.android.server.BatteryService: int getBatteryLevel()>
<android.app.FragmentManagerImpl: void enqueueAction(java.lang.Runnable,boolean)>
<com.android.internal.telephony.sip.SipConnectionBase: long getDurationMillis()>
<android.text.Layout: android.text.Layout$Alignment getParagraphAlignment(int)>
<com.android.internal.telephony.OperatorInfo$1: java.lang.Object[] newArray(int)>
<com.android.server.WifiService: java.util.concurrent.atomic.AtomicBoolean access$900(com.android.server.WifiService)>
<android.widget.SearchView$9: void onNothingSelected(android.widget.AdapterView)>
<android.view.View: int getScrollBarStyle()>
<android.net.NetworkInfo$DetailedState: android.net.NetworkInfo$DetailedState valueOf(java.lang.String)>
<android.view.animation.GridLayoutAnimationController$AnimationParameters: void <init>()>
<android.media.MediaRecorder: android.media.MediaRecorder$OnErrorListener access$100(android.media.MediaRecorder)>
<android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs: java.lang.Object getNextPoolable()>
<android.util.SparseBooleanArray: void clear()>
<android.net.wifi.SupplicantStateTracker: com.android.internal.util.State access$400(android.net.wifi.SupplicantStateTracker)>
<android.graphics.Paint: void setTextScaleX(float)>
<android.view.GestureDetector: void setOnDoubleTapListener(android.view.GestureDetector$OnDoubleTapListener)>
<android.widget.SimpleExpandableListAdapter: void <init>(android.content.Context,java.util.List,int,int,java.lang.String[],int[],java.util.List,int,java.lang.String[],int[])>
<android.widget.AbsListView$CheckForKeyLongPress: void <init>(android.widget.AbsListView)>
<android.view.PointerIcon: android.view.PointerIcon createCustomIcon(android.graphics.Bitmap,float,float)>
<com.android.server.location.MockProvider: boolean requiresCell()>
<com.android.server.pm.UserManager: android.content.pm.UserInfo readUser(int)>
<android.widget.TextView$SuggestionsPopupWindow$SuggestionSpanComparator: void <init>(android.widget.TextView$SuggestionsPopupWindow,android.widget.TextView$1)>
<android.net.rtp.AudioGroup: void sendDtmf(int)>
<com.android.server.wm.Session: boolean performHapticFeedback(android.view.IWindow,int,boolean)>
<android.webkit.WebIconDatabase: void access$100(java.lang.String)>
<android.test.mock.MockContentProvider: android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.internal.os.IDropBoxManagerService$Stub: void <init>()>
<android.net.LinkProperties: android.net.ProxyProperties getHttpProxy()>
<android.webkit.WebViewFragment: android.webkit.WebView getWebView()>
<com.android.internal.telephony.cat.Tone: void <init>(java.lang.String,int,int)>
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: void loge(java.lang.String)>
<java.lang.Object: void setInput(java.io.Reader)>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.Phone$DataState getDataConnectionState(java.lang.String)>
<android.content.ContextWrapper: java.io.FileOutputStream openFileOutput(java.lang.String,int)>
<android.renderscript.Element: android.renderscript.Element MATRIX_3X3(android.renderscript.RenderScript)>
<android.location.Location: void removeAccuracy()>
<GenerationGG: android.bluetooth.BluetoothHealth get_androidbluetoothBluetoothHealth()>
<com.android.server.pm.Settings: void transferPermissionsLPw(java.lang.String,java.lang.String)>
<android.renderscript.RenderScript: void rsnAllocationRead(int,int,float[])>
<android.text.style.SuperscriptSpan: void <init>()>
<android.server.BluetoothEventLoop: void stopEventLoopNative()>
<android.view.GLES20Canvas: void nUpdateTextureLayer(int,int,int,boolean,android.graphics.SurfaceTexture)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setFixedLine(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<android.view.inputmethod.CompletionInfo: java.lang.String toString()>
<android.net.wifi.p2p.WifiP2pInfo: void <init>()>
<com.android.server.PowerManagerService: void enableLightSensorLocked(boolean)>
<android.net.sip.SipSession$Listener: void onRinging(android.net.sip.SipSession,android.net.sip.SipProfile,java.lang.String)>
<com.android.internal.telephony.gsm.SIMRecords: void <clinit>()>
<android.view.View: int getVisibility()>
<android.database.sqlite.DatabaseConnectionPool$PoolObj: android.database.sqlite.SQLiteDatabase access$000(android.database.sqlite.DatabaseConnectionPool$PoolObj)>
<android.content.pm.FeatureInfo$1: android.content.pm.FeatureInfo createFromParcel(android.os.Parcel)>
<com.android.internal.view.InputBindResult: java.lang.String toString()>
<android.widget.AbsListView$PerformClick: void <init>(android.widget.AbsListView,android.widget.AbsListView$1)>
<android.view.MotionEvent$PointerCoords: android.view.MotionEvent$PointerCoords[] createArray(int)>
<android.view.ViewGroup$TouchTarget: void recycle()>
<android.test.mock.MockContentResolver: void <init>()>
<Wrapper_android_content_pm_Signature: void test_android_content_pm_Signature()>
<android.net.wifi.WifiStateMachine: void access$14500(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.content.pm.VerifierInfo$1: android.content.pm.VerifierInfo[] newArray(int)>
<android.graphics.drawable.ClipDrawable: boolean isStateful()>
<android.graphics.Matrix: boolean preScale(float,float,float,float)>
<android.webkit.ZoomManager$ScaleDetectorListener: void <init>(android.webkit.ZoomManager)>
<android.content.Context: int getThemeResId()>
<android.os.Debug$MemoryInfo: int describeContents()>
<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler)>
<GenerationGG: android.graphics.Bitmap get_androidgraphicsBitmap()>
<android.view.MotionEvent: float nativeGetYOffset(int)>
<android.graphics.Region: boolean nativeOp(int,android.graphics.Rect,int,int)>
<android.accessibilityservice.AccessibilityServiceInfo$1: void <init>()>
<android.content.OperationApplicationException: void <init>(java.lang.String)>
<android.net.wifi.SupplicantState: void <init>(java.lang.String,int)>
<GenerationGG: android.net.ConnectivityManager get_androidnetConnectivityManager()>
<android.webkit.HTML5VideoFullScreen$3: void onBufferingUpdate(android.media.MediaPlayer,int)>
<android.widget.VideoView: int access$1802(android.widget.VideoView,int)>
<android.media.SoundPool$EventHandler: void handleMessage(android.os.Message)>
<GenerationGG: android.test.suitebuilder.annotation.MediumTest get_androidtestsuitebuilderannotationMediumTest()>
<android.widget.CalendarView: long getMinDate()>
<com.android.server.TextServicesManagerService: android.view.textservice.SpellCheckerInfo access$500(com.android.server.TextServicesManagerService,java.lang.String,java.lang.String)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pEnablingState: void <init>(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<android.widget.TableLayout: android.widget.LinearLayout$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.view.View$5: java.lang.Object get(java.lang.Object)>
<android.view.inputmethod.InputBinding: void <clinit>()>
<android.view.Surface$1: java.lang.Object[] newArray(int)>
<com.android.internal.telephony.gsm.SmsCbHeader: boolean isEmergencyMessage(int)>
<android.content.res.CompatibilityInfo: boolean alwaysSupportsScreen()>
<com.android.server.AlarmManagerService: java.util.ArrayList access$600(com.android.server.AlarmManagerService)>
<android.server.BluetoothService: boolean setAdapterPropertyStringNative(java.lang.String,java.lang.String)>
<android.net.wifi.WifiStateMachine: com.android.internal.util.State access$8500(android.net.wifi.WifiStateMachine)>
<android.net.RouteInfo$1: java.lang.Object[] newArray(int)>
<android.net.sip.SipSessionAdapter: void onCallBusy(android.net.sip.ISipSession)>
<com.android.server.CountryDetectorService: void setCountryListener(android.location.CountryListener)>
<android.net.wifi.WifiConfiguration: int getAuthType()>
<android.widget.ExpandableListView: android.widget.ListAdapter getAdapter()>
<android.preference.GenericInflater: void <init>(android.content.Context)>
<android.widget.TextView: void setFreezesText(boolean)>
<android.view.accessibility.AccessibilityRecord: boolean isChecked()>
<java.lang.Object: int getItemViewType(int)>
<android.accounts.AuthenticatorDescription: int hashCode()>
<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: android.os.IBinder asBinder()>
<android.view.inputmethod.BaseInputConnection: android.view.inputmethod.ExtractedText getExtractedText(android.view.inputmethod.ExtractedTextRequest,int)>
<android.test.PackageInfoSources: android.test.ClassPathPackageInfoSource forClassPath(java.lang.ClassLoader)>
<android.media.audiofx.AudioEffect: boolean native_getEnabled()>
<android.bluetooth.IBluetoothPbap$Stub$Proxy: void <init>(android.os.IBinder)>
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[])>
<android.net.sip.ISipSessionListener$Stub: void <init>()>
<android.content.Intent: android.content.Intent setType(java.lang.String)>
<GenerationGG: android.view.Window get_androidviewWindow()>
<android.net.http.RequestQueue$ActivePool: void <init>(android.net.http.RequestQueue,int)>
<android.webkit.CookieManager$4: void <init>(android.webkit.CookieManager)>
<android.animation.PropertyValuesHolder: void setupEndValue(java.lang.Object)>
<android.location.GpsStatus: void setTimeToFirstFix(int)>
<android.location.Address$1: android.location.Address createFromParcel(android.os.Parcel)>
<android.webkit.WebIconDatabase: void access$700(java.lang.String)>
<android.widget.OverScroller$SplineOverScroller: boolean access$000(android.widget.OverScroller$SplineOverScroller)>
<android.media.MediaRecorder: void native_setup(java.lang.Object)>
<com.android.server.am.ConnectionRecord: java.lang.String toString()>
<android.util.Log: int println(int,java.lang.String,java.lang.String)>
<android.webkit.DateSorter: java.lang.String getLabel(int)>
<android.animation.ValueAnimator: java.lang.ThreadLocal access$600()>
<Wrapper_android_content_res_AssetManager: void test_android_content_res_AssetManager()>
<android.preference.TwoStatePreference$SavedState$1: java.lang.Object[] newArray(int)>
<android.test.mock.MockContext: java.lang.String getPackageCodePath()>
<android.content.ContentProvider$Transport: android.content.ContentProvider getContentProvider()>
<android.opengl.GLES10: void <clinit>()>
<android.view.ScaleGestureDetector: float getFocusY()>
<com.android.server.PowerManagerService: boolean access$5600(com.android.server.PowerManagerService,int)>
<com.android.server.WifiService$DeathRecipient: void unlinkDeathRecipient()>
<android.net.wifi.WifiStateMachine$SupplicantStartedState: void <init>(android.net.wifi.WifiStateMachine)>
<android.bluetooth.BluetoothDeviceProfileState: boolean access$1202(android.bluetooth.BluetoothDeviceProfileState,boolean)>
<android.provider.Browser: void requestAllIcons(android.content.ContentResolver,java.lang.String,android.webkit.WebIconDatabase$IconListener)>
<android.app.ContextImpl: java.lang.String[] fileList()>
<android.hardware.usb.UsbEndpoint: int getInterval()>
<android.accessibilityservice.AccessibilityServiceInfo: void appendFeedbackTypes(java.lang.StringBuilder,int)>
<android.view.ViewTreeObserver$InternalInsetsInfo: void set(android.view.ViewTreeObserver$InternalInsetsInfo)>
<android.view.GLES20Canvas: void setDrawFilter(android.graphics.DrawFilter)>
<android.widget.ProgressBar: void startAnimation()>
<android.app.Activity: void setFeatureDrawable(int,android.graphics.drawable.Drawable)>
<android.graphics.Interpolator: int getKeyFrameCount()>
<com.android.internal.statusbar.StatusBarIcon: com.android.internal.statusbar.StatusBarIcon clone()>
<android.graphics.ColorMatrix: void <init>(float[])>
<android.view.inputmethod.InputMethodManager: com.android.internal.view.IInputMethodClient getClient()>
<android.app.ActivityManagerNative$1: void <init>()>
<android.os.ParcelUuid$1: android.os.ParcelUuid[] newArray(int)>
<com.android.internal.os.BatteryStatsImpl: long getPhoneDataConnectionTime(int,long,int)>
<android.hardware.GeomagneticField: void computeGeocentricCoordinates(float,float,float)>
<android.widget.NumberPicker: float getBottomFadingEdgeStrength()>
<android.net.http.HttpAuthHeader: int getScheme()>
<android.nfc.NfcActivityManager: void <init>(android.nfc.NfcAdapter)>
<android.renderscript.RenderScript: void nElementGetNativeData(int,int[])>
<android.content.IntentSender: int hashCode()>
<android.view.GLES20Canvas: void drawPicture(android.graphics.Picture,android.graphics.Rect)>
<android.test.LoaderTestCase$2: void <init>(android.test.LoaderTestCase,java.util.concurrent.ArrayBlockingQueue)>
<android.view.MotionEvent: float getToolMajor(int)>
<android.app.LoaderManager: void enableDebugLogging(boolean)>
<android.app.Instrumentation: boolean checkMonitorHit(android.app.Instrumentation$ActivityMonitor,int)>
<android.net.NetworkPolicyManager: boolean isUidValidForPolicy(android.content.Context,int)>
<android.database.sqlite.SQLiteAbortException: void <init>(java.lang.String)>
<com.android.internal.telephony.cat.CommandParamsFactory: boolean processRefresh(com.android.internal.telephony.cat.CommandDetails,java.util.List)>
<android.database.sqlite.DatabaseObjectNotClosedException: void <init>()>
<android.speech.tts.TextToSpeech$Connection$1: void utteranceCompleted(java.lang.String)>
<com.android.internal.os.BatteryStatsImpl$StopwatchTimer: void detach()>
<GenerationGG: android.util.PrintWriterPrinter get_androidutilPrintWriterPrinter()>
<android.test.MoreAsserts: void assertNotMatchesRegex(java.lang.String,java.lang.String,java.lang.String)>
<android.webkit.HTML5VideoFullScreen$1: void <init>(android.webkit.HTML5VideoFullScreen)>
<android.net.sip.ISipSession$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.internal.telephony.cdma.sms.BearerData: java.lang.String decode7bitGsm(byte[],int,int)>
<android.content.res.ColorStateList$1: android.content.res.ColorStateList[] newArray(int)>
<android.renderscript.RenderScript: void nScriptSetVarI(int,int,int)>
<android.test.MoreAsserts: java.util.regex.MatchResult assertContainsRegex(java.lang.String,java.lang.String,java.lang.String)>
<android.media.MediaPlayer: android.media.MediaPlayer$OnVideoSizeChangedListener access$600(android.media.MediaPlayer)>
<com.android.server.am.UsageStatsService$TimeStats: void add(int)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: boolean getCsimSpnDisplayCondition()>
<junit.runner.BaseTestRunner: void endTest(junit.framework.Test)>
<android.widget.AdapterView: long getSelectedItemId()>
<android.renderscript.Long3: void <init>()>
<android.renderscript.FieldPacker: void addI64(long)>
<com.android.internal.util.FastXmlSerializer: void setFeature(java.lang.String,boolean)>
<android.speech.tts.TextToSpeech: void access$1000(android.speech.tts.TextToSpeech,int)>
<android.webkit.DeviceMotionService: void onAccuracyChanged(android.hardware.Sensor,int)>
<android.net.wifi.p2p.WifiP2pDeviceList: java.util.Collection getDeviceList()>
<android.animation.ObjectAnimator: android.animation.ObjectAnimator clone()>
<android.view.Display: int getOrientation()>
<android.graphics.Paint: int native_initWithPaint(int)>
<android.text.SpannedString: int getSpanStart(java.lang.Object)>
<android.content.res.AssetManager: void ensureSystemAssets()>
<android.os.Binder: void dumpAsync(java.io.FileDescriptor,java.lang.String[])>
<android.view.GLES20RecordingCanvas: void drawRect(android.graphics.RectF,android.graphics.Paint)>
<android.app.IActivityManager$ContentProviderHolder: int describeContents()>
<com.android.internal.telephony.ServiceStateTracker: void registerForPsRestrictedDisabled(android.os.Handler,int,java.lang.Object)>
<android.widget.GridView: boolean determineColumns(int)>
<android.view.MenuInflater: android.content.Context access$100(android.view.MenuInflater)>
<com.android.internal.telephony.cdma.sms.BearerData: java.lang.String toString()>
<android.accounts.AccountManager$BaseFutureTask: void <init>(android.accounts.AccountManager,android.os.Handler)>
<android.widget.TableRow$LayoutParams: void <init>()>
<android.os.Handler: boolean sendMessageAtTime(android.os.Message,long)>
<android.net.wifi.WifiStateMachine: com.android.internal.util.State access$2800(android.net.wifi.WifiStateMachine)>
<android.filterfw.core.SerializedFrame$DirectByteOutputStream: void write(byte[],int,int)>
<com.android.server.wm.WindowManagerService: int getOrientationFromAppTokensLocked()>
<android.view.accessibility.AccessibilityNodeInfo: void setText(java.lang.CharSequence)>
<android.view.View: boolean getLocalVisibleRect(android.graphics.Rect)>
<com.android.server.DevicePolicyManagerService: boolean isExtStorageEncrypted()>
<android.view.inputmethod.InputBinding: java.lang.String toString()>
<com.android.server.pm.Settings: java.lang.Object getUserIdLPr(int)>
<android.net.LinkCapabilities$1: java.lang.Object[] newArray(int)>
<android.webkit.WebSettings: int getDoubleTapZoom()>
<android.view.GLES20RenderLayer: void resize(int,int)>
<android.opengl.ETC1: void formatHeader(java.nio.Buffer,int,int)>
<android.content.res.CompatibilityInfo: void <init>()>
<com.android.internal.telephony.SmsMessageBase: java.lang.String getOriginatingAddress()>
<android.content.ContentProvider: java.lang.String getReadPermission()>
<android.hardware.Sensor: float getMaximumRange()>
<android.net.wifi.WifiConfigStore: java.lang.String makeString(java.util.BitSet,java.lang.String[])>
<com.android.i18n.phonenumbers.RegexCache$LRUCache$1: void <init>(com.android.i18n.phonenumbers.RegexCache$LRUCache,int,float,boolean)>
<android.os.BatteryStats: long computeWakeLock(android.os.BatteryStats$Timer,long,int)>
<android.view.ViewStub: void setLayoutResource(int)>
<java.lang.Object: int getGroupCount()>
<android.widget.GridLayout$Assoc: android.widget.GridLayout$PackedMap pack()>
<android.util.FloatMath: float ceil(float)>
<android.view.View$8: void setValue(java.lang.Object,float)>
<android.os.IPermissionController$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumUpperCase(android.content.ComponentName)>
<com.android.server.wm.WindowManagerService: int computeForcedAppOrientationLocked()>
<android.text.style.StrikethroughSpan: void <init>()>
<android.location.Location: float access$802(android.location.Location,float)>
<android.media.audiofx.Visualizer: void native_release()>
<android.view.animation.AnimationSet: void setFlag(int,boolean)>
<com.android.internal.content.NativeLibraryHelper: boolean removeNativeBinariesFromDirLI(java.io.File)>
<android.os.BatteryStats: void printBitDescriptions(java.io.PrintWriter,int,int,android.os.BatteryStats$BitDescription[])>
<android.graphics.PointF$1: android.graphics.PointF createFromParcel(android.os.Parcel)>
<android.text.Annotation: void <init>(java.lang.String,java.lang.String)>
<android.content.AbstractThreadedSyncAdapter$SyncThread: void <init>(android.content.AbstractThreadedSyncAdapter,java.lang.String,android.content.SyncContext,java.lang.String,android.accounts.Account,android.os.Bundle,android.content.AbstractThreadedSyncAdapter$1)>
<com.android.server.sip.SipService$SipSessionGroupExt: boolean isOpenedToReceiveCalls()>
<android.net.wifi.WpsStateMachine$InactiveState: boolean processMessage(android.os.Message)>
<android.test.MoreAsserts: void assertEmpty(java.lang.String,java.lang.Iterable)>
<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getApplicationLogo(android.content.pm.ApplicationInfo)>
<android.content.res.XmlBlock: int nativeGetAttributeNamespace(int,int)>
<android.view.animation.AnticipateInterpolator: float getInterpolation(float)>
<com.android.internal.telephony.BaseCommands: void unregisterForNotAvailable(android.os.Handler)>
<android.webkit.WebView: void nativeSelectAt(int,int)>
<android.gesture.GestureOverlayView: void setGestureStrokeType(int)>
<android.webkit.WebSettings: void setMinimumLogicalFontSize(int)>
<java.lang.Object: android.os.Bundle respond(android.os.Bundle)>
<android.net.MobileDataStateTracker: android.net.NetworkInfo getNetworkInfo()>
<android.view.inputmethod.BaseInputConnection: boolean endBatchEdit()>
<android.bluetooth.BluetoothHealthAppConfiguration$1: void <init>()>
<com.android.internal.telephony.ITelephonyRegistry$Stub$Proxy: void <init>(android.os.IBinder)>
<android.bluetooth.BluetoothDeviceProfileState: android.bluetooth.BluetoothDevice getDevice()>
<android.test.IsolatedContext$MockAccountManager$MockAccountManagerFuture: java.lang.Object getResult(long,java.util.concurrent.TimeUnit)>
<android.webkit.WebView: android.os.Message access$10802(android.webkit.WebView,android.os.Message)>
<android.webkit.WebView: boolean nativeEvaluateLayersAnimations(int)>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void destroyDataConnections()>
<android.app.ActivityThread$ApplicationThread: void profilerControl(boolean,java.lang.String,android.os.ParcelFileDescriptor,int)>
<android.server.BluetoothEventLoop: boolean isEventLoopRunning()>
<android.content.pm.LabeledIntent: int getLabelResource()>
<android.text.PackedObjectVector: void <init>(int)>
<android.view.Surface: void unlockCanvasAndPost(android.graphics.Canvas)>
<android.os.StrictMode$ThreadPolicy: java.lang.String toString()>
<android.net.wifi.WifiStateMachine: void access$4600(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.hardware.SensorManager: void unregisterListener(android.hardware.SensorListener)>
<com.android.server.wm.InputFilter: com.android.server.wm.InputFilter$Host access$002(com.android.server.wm.InputFilter,com.android.server.wm.InputFilter$Host)>
<android.net.http.LoggingEventHandler: void headers(android.net.http.Headers)>
<android.view.inputmethod.InputMethodSubtype: void writeToParcel(android.os.Parcel,int)>
<android.widget.AbsSpinner$SavedState: java.lang.String toString()>
<android.util.JsonScope: void <clinit>()>
<android.content.ContentValues: int size()>
<android.net.http.AndroidHttpClientConnection: void sendRequestEntity(org.apache.http.HttpEntityEnclosingRequest)>
<android.renderscript.RenderScript: int nAllocationCubeCreateFromBitmap(int,int,android.graphics.Bitmap,int)>
<android.view.GLES20Canvas: void nSetupShader(int,int)>
<android.drm.DrmSupportInfo: void <init>()>
<android.location.Location: void setTime(long)>
<android.util.JsonReader: java.lang.String toString()>
<com.android.server.VibratorService: boolean vibratorExists()>
<android.content.ContentValues: int hashCode()>
<android.graphics.drawable.PictureDrawable: void draw(android.graphics.Canvas)>
<android.net.InterfaceConfiguration$1: android.net.InterfaceConfiguration[] newArray(int)>
<GenerationGG: android.database.sqlite.SQLiteDatabase$CursorFactory get_androiddatabasesqliteSQLiteDatabase__CursorFactory()>
<android.content.res.XmlBlock: int access$700(int,int)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setSingleChoiceItems(android.widget.ListAdapter,int,android.content.DialogInterface$OnClickListener)>
<android.app.ListFragment$2: void <init>(android.app.ListFragment)>
<android.view.GLES20RenderLayer: void <init>(int,int,boolean)>
<android.widget.StackView$StackSlider: float rotationInterpolator(float)>
<android.content.pm.RegisteredServicesCache$2: void <init>(android.content.pm.RegisteredServicesCache,android.content.pm.RegisteredServicesCacheListener,java.lang.Object,boolean)>
<android.widget.Filter: android.os.Handler access$402(android.widget.Filter,android.os.Handler)>
<android.bluetooth.BluetoothTetheringDataTracker: android.bluetooth.BluetoothPan access$002(android.bluetooth.BluetoothTetheringDataTracker,android.bluetooth.BluetoothPan)>
<android.text.style.ForegroundColorSpan: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.WpsStateMachine: com.android.internal.util.State access$300(android.net.wifi.WpsStateMachine)>
<Wrapper_android_hardware_usb_UsbRequest: void test_android_hardware_usb_UsbRequest()>
<android.text.style.SuperscriptSpan: int describeContents()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean isDisconnected()>
<com.android.server.pm.PackageManagerService: java.util.List getPreferredPackages(int)>
<android.media.AudioTrack: int write(byte[],int,int)>
<com.android.internal.os.BatteryStatsImpl: int getDischargeAmountScreenOffSinceCharge()>
<android.widget.OverScroller: float getCurrVelocity()>
<com.android.i18n.phonenumbers.geocoding.FlyweightMapStorage: int readWordFromBuffer(java.nio.ByteBuffer,int,int)>
<android.widget.ArrayAdapter: android.content.Context getContext()>
<GenerationGG: org.xmlpull.v1.XmlPullParser get_orgxmlpullv1XmlPullParser()>
<android.location.ICountryDetector$Stub: android.location.ICountryDetector asInterface(android.os.IBinder)>
<android.view.View: boolean onKeyPreIme(int,android.view.KeyEvent)>
<android.app.backup.BackupDataInput: boolean readNextHeader()>
<android.app.ContextImpl: java.lang.String uriModeFlagToString(int)>
<android.widget.ActivityChooserView: android.widget.ActivityChooserView$ActivityChooserViewAdapter access$000(android.widget.ActivityChooserView)>
<android.telephony.gsm.SmsMessage: boolean isReplyPathPresent()>
<android.database.MergeCursor: void registerDataSetObserver(android.database.DataSetObserver)>
<com.android.server.InputMethodManagerService$InputMethodSettings: void buildEnabledInputMethodsSettingString(java.lang.StringBuilder,android.util.Pair)>
<android.os.Parcel: void enforceInterface(java.lang.String)>
<android.app.ListFragment: void onListItemClick(android.widget.ListView,android.view.View,int,long)>
<android.media.JetPlayer: void access$200(java.lang.String)>
<com.android.server.net.NetworkStatsService$7: void <init>(com.android.server.net.NetworkStatsService)>
<android.widget.NumberPicker: boolean isEventInViewHitRect(android.view.MotionEvent,android.view.View)>
<GenerationGG: android.text.style.LineHeightSpan get_androidtextstyleLineHeightSpan()>
<com.android.internal.app.AlertController$ButtonHandler: void <init>(android.content.DialogInterface)>
<android.test.mock.MockContentProvider$InversionIContentProvider: java.lang.String getType(android.net.Uri)>
<com.android.server.am.ProcessRecord: void <init>(com.android.internal.os.BatteryStatsImpl$Uid$Proc,android.app.IApplicationThread,android.content.pm.ApplicationInfo,java.lang.String)>
<com.android.server.ThrottleService: android.app.Notification access$2002(com.android.server.ThrottleService,android.app.Notification)>
<android.preference.SwitchPreference$Listener: void <init>(android.preference.SwitchPreference)>
<android.os.Process: int myUid()>
<android.app.NativeActivity: void unloadNativeCode(int)>
<com.android.internal.telephony.cat.Input: int describeContents()>
<android.database.sqlite.SQLiteCompiledSql: void releaseSqlStatement()>
<GenerationGG: android.net.sip.SipAudioCall get_androidnetsipSipAudioCall()>
<android.content.SyncManager: boolean access$400(android.content.SyncManager)>
<android.os.MemoryFile: java.io.InputStream getInputStream()>
<android.content.res.AssetFileDescriptor: android.os.ParcelFileDescriptor getParcelFileDescriptor()>
<com.android.internal.telephony.gsm.GsmConnection: void onStartedHolding()>
<com.android.internal.net.NetworkStatsFactory: java.lang.String[] fileListWithoutNull(java.io.File)>
<android.server.BluetoothBondState: void setPendingOutgoingBonding(java.lang.String)>
<android.content.ContentResolver$1: void <init>(android.content.SyncStatusObserver)>
<com.android.server.am.UsageStatsService$TimeStats: void incCount()>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getUnregisteredParameterValueSanitizer()>
<com.android.internal.telephony.cdma.sms.BearerData: byte[] encodeDtmfSmsAddress(java.lang.String)>
<android.webkit.WebViewCore: void useMockDeviceOrientation()>
<android.graphics.Paint: float native_measureText(java.lang.String)>
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: void <init>(com.android.server.pm.PackageManagerService)>
<com.android.internal.util.AsyncChannel$SyncMessenger$SyncHandler: void handleMessage(android.os.Message)>
<com.android.internal.widget.ActionBarView$3: void onClick(android.view.View)>
<android.content.pm.PackageParser$ServiceIntentInfo: void <init>(android.content.pm.PackageParser$Service)>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.Phone$State getState()>
<Wrapper_android_widget_Filterable: void test_android_widget_Filterable()>
<com.android.internal.widget.IRemoteViewsFactory$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.server.LocationManagerService: boolean providerHasListener(java.lang.String,int,com.android.server.LocationManagerService$Receiver)>
<android.accounts.NetworkErrorException: void <init>(java.lang.Throwable)>
<android.media.MediaMetadataRetriever: void native_setup()>
<android.webkit.CookieSyncManager: void checkInstanceIsCreated()>
<android.bluetooth.IBluetoothHealthCallback$Stub$Proxy: android.os.IBinder asBinder()>
<android.mtp.MtpObjectInfo: int getFormat()>
<android.view.accessibility.AccessibilityRecord: void setBeforeText(java.lang.CharSequence)>
<android.content.CursorLoader: android.net.Uri getUri()>
<android.widget.QuickContactBadge: boolean isAssigned()>
<android.widget.SearchView: android.view.View access$900(android.widget.SearchView)>
<android.app.backup.FullBackupDataOutput: android.app.backup.BackupDataOutput getData()>
<android.graphics.Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>
<com.android.server.pm.PackageManagerService: void setApplicationInfoPaths(android.content.pm.PackageParser$Package,java.lang.String,java.lang.String)>
<android.widget.ZoomButtonsController$2: void <init>(android.widget.ZoomButtonsController)>
<com.android.internal.app.ActionBarImpl: void configureTab(android.app.ActionBar$Tab,int)>
<android.widget.GridLayout: boolean canStretch(int)>
<android.widget.PopupWindow: boolean isAboveAnchor()>
<android.text.TextPaint: void <init>(android.graphics.Paint)>
<android.animation.Keyframe$FloatKeyframe: float getFloatValue()>
<android.widget.ExpandableListView: void setChildIndicator(android.graphics.drawable.Drawable)>
<android.media.JetPlayer: int getMaxTracks()>
<java.lang.Object: int getEventType()>
<android.webkit.LoadListener$1: void header(java.lang.String,java.lang.String)>
<com.android.server.accessibility.TouchExplorer$PointerTracker: int getInjectedPointerDownCount()>
<android.view.VelocityTracker$1: android.view.VelocityTracker newInstance()>
<android.view.View: boolean isSoundEffectsEnabled()>
<android.view.inputmethod.InputMethodSubtype: boolean containsExtraValueKey(java.lang.String)>
<android.net.http.AndroidHttpClientConnection: long determineLength(android.net.http.Headers)>
<android.app.Activity: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.net.wifi.WifiConfiguration: void <clinit>()>
<com.android.server.am.ServiceRecord: void clearDeliveredStartsLocked()>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String flagToString(int)>
<com.android.server.connectivity.Tethering$TetherMasterSM: int access$2802(com.android.server.connectivity.Tethering$TetherMasterSM,int)>
<android.text.style.BulletSpan: int getLeadingMargin(boolean)>
<android.widget.ActivityChooserModel$HistoryPersister: void <init>(android.widget.ActivityChooserModel)>
<com.android.i18n.phonenumbers.PhoneNumberMatch: int start()>
<android.view.GLES20Canvas: boolean drawDisplayList(android.view.DisplayList,int,int,android.graphics.Rect)>
<android.renderscript.Element: android.renderscript.Element createPixel(android.renderscript.RenderScript,android.renderscript.Element$DataType,android.renderscript.Element$DataKind)>
<com.android.server.usb.UsbDeviceManager: boolean containsFunction(java.lang.String,java.lang.String)>
<android.widget.GridLayout: int getTotalMargin(android.view.View,boolean)>
<Wrapper_android_view_inputmethod_InputBinding: void test_android_view_inputmethod_InputBinding()>
<android.widget.ActivityChooserModel: void setOnChooseActivityListener(android.widget.ActivityChooserModel$OnChooseActivityListener)>
<android.graphics.Matrix$1: boolean postTranslate(float,float)>
<android.opengl.GLSurfaceView: boolean getPreserveEGLContextOnPause()>
<android.graphics.RectF: void offset(float,float)>
<android.graphics.drawable.shapes.RoundRectShape: void <init>(float[],android.graphics.RectF,float[])>
<com.android.server.net.NetworkStatsService: android.os.PowerManager$WakeLock access$400(com.android.server.net.NetworkStatsService)>
<android.text.SpannableStringInternal: int getSpanStart(java.lang.Object)>
<com.android.server.PowerManagerService$13: void <init>(com.android.server.PowerManagerService)>
<android.view.ViewStub: void draw(android.graphics.Canvas)>
<android.net.LinkCapabilities$1: android.net.LinkCapabilities[] newArray(int)>
<android.widget.ActivityChooserModel$DefaultSorter: void <init>(android.widget.ActivityChooserModel,android.widget.ActivityChooserModel$1)>
<android.filterfw.core.GLEnvironment: boolean isAnyContextActive()>
<com.android.server.location.PassiveProvider: boolean requiresCell()>
<android.animation.AnimatorSet: android.animation.AnimatorSet setDuration(long)>
<android.app.BackStackState$1: android.app.BackStackState[] newArray(int)>
<com.android.server.wm.ScreenRotationAnimation: void setRotation(int)>
<com.android.server.PowerManagerService: android.os.HandlerThread access$1900(com.android.server.PowerManagerService)>
<com.android.server.location.GpsLocationProvider: void native_inject_time(long,long,int)>
<android.webkit.WebViewCore: void access$5100(android.webkit.WebViewCore,int,int,int)>
<com.android.server.PowerManagerService$LockList: com.android.server.PowerManagerService$WakeLock removeLock(android.os.IBinder)>
<Wrapper_android_graphics_DrawFilter: void test_android_graphics_DrawFilter()>
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getSensorStats()>
<android.ddm.DdmRegister: void registerHandlers()>
<android.filterfw.core.Frame: android.filterfw.core.Frame release()>
<android.widget.AbsListView$2: void <init>(android.widget.AbsListView)>
<com.android.server.pm.PackageManagerService: void finishPackageInstall(int)>
<DumbClass: void DumbMethod45()>
<android.app.Dialog: boolean dispatchTrackballEvent(android.view.MotionEvent)>
<com.android.server.am.ActivityManagerService: java.lang.String getCallingPackage(android.os.IBinder)>
<android.graphics.SurfaceTexture: void setOnFrameAvailableListener(android.graphics.SurfaceTexture$OnFrameAvailableListener)>
<android.view.accessibility.AccessibilityNodeInfo: boolean isClickable()>
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,android.renderscript.Allocation$MipmapControl,int)>
<android.database.sqlite.SQLiteDatabase$DatabaseReentrantLock: void <init>(boolean)>
<android.telephony.PhoneNumberUtils: int findDialableIndexFromPostDialStr(java.lang.String)>
<android.server.BluetoothBondState: java.util.ArrayList access$200(android.server.BluetoothBondState)>
<com.android.internal.view.menu.MenuBuilder: boolean isShortcutKey(int,android.view.KeyEvent)>
<android.graphics.drawable.DrawableContainer: void <init>()>
<android.view.View$11: java.lang.Float get(android.view.View)>
<android.view.inputmethod.InputBinding$1: void <init>()>
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getOrigDialString()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc setExampleNumber(java.lang.String)>
<android.graphics.Point: int describeContents()>
<com.android.server.am.ActivityManagerService: void setProfileApp(android.content.pm.ApplicationInfo,java.lang.String,java.lang.String,android.os.ParcelFileDescriptor,boolean)>
<android.animation.IntKeyframeSet: int getIntValue(float)>
<GenerationGG: android.graphics.Path$FillType get_androidgraphicsPath__FillType()>
<android.content.AsyncQueryHandler$WorkerHandler: void <init>(android.content.AsyncQueryHandler,android.os.Looper)>
<android.webkit.CookieManager: void syncedACookie(android.webkit.CookieManager$Cookie)>
<android.view.GLES20Canvas: boolean nClipRect(int,int,int,int,int,int)>
<android.text.style.TextAppearanceSpan: void updateDrawState(android.text.TextPaint)>
<android.webkit.WebView: android.webkit.ZoomManager access$2400(android.webkit.WebView)>
<DumbClass: void DumbMethod74()>
<com.android.server.wm.BlackFrame$BlackSurface: void <init>(com.android.server.wm.BlackFrame,android.view.SurfaceSession,int,int,int,int,int)>
<android.app.ApplicationPackageManager: android.graphics.drawable.Drawable getCachedIcon(android.app.ApplicationPackageManager$ResourceName)>
<android.hardware.Camera: android.hardware.Camera$PictureCallback access$200(android.hardware.Camera)>
<android.widget.VideoView: android.media.MediaPlayer$OnErrorListener access$1500(android.widget.VideoView)>
<android.view.View$AttachInfo$InvalidateInfo: void setNextPoolable(android.view.View$AttachInfo$InvalidateInfo)>
<GenerationGG: android.database.sqlite.SQLiteCantOpenDatabaseException get_androiddatabasesqliteSQLiteCantOpenDatabaseException()>
<com.android.internal.util.ArrayUtils: int idealObjectArraySize(int)>
<Wrapper_android_util_Base64OutputStream: void test_android_util_Base64OutputStream()>
<com.android.internal.telephony.SmsUsageMonitor: void removeExpiredTimestamps()>
<android.widget.Toast: int getDuration()>
<android.widget.GridLayout: android.widget.GridLayout$Spec spec(int,android.widget.GridLayout$Alignment)>
<android.sax.RootElement: org.xml.sax.ContentHandler getContentHandler()>
<android.view.View: void needGlobalAttributesUpdate(boolean)>
<com.android.internal.view.IInputContextCallback$Stub$Proxy: android.os.IBinder asBinder()>
<android.net.Uri$Part: android.net.Uri$Part fromEncoded(java.lang.String)>
<android.net.wifi.WifiStateMachine: void loge(java.lang.String)>
<android.content.res.AssetManager: int getStringBlockCount()>
<android.graphics.NinePatch: boolean hasAlpha()>
<android.app.ContextImpl$11: void <init>()>
<android.webkit.WebViewCore$EventHub: int access$2700(android.webkit.WebViewCore$EventHub)>
<android.view.HardwareRenderer$GlRenderer: int getHeight()>
<com.android.internal.telephony.cdma.CDMAPhone: void notifyDisconnect(com.android.internal.telephony.Connection)>
<GenerationGG: android.os.IBinder get_androidosIBinder()>
<android.content.Intent: void <init>(java.lang.String)>
<java.lang.Object: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>
<android.widget.RemoteViewsAdapter: android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache access$400(android.widget.RemoteViewsAdapter)>
<android.view.GLES20Canvas: boolean getClipBounds(android.graphics.Rect)>
<android.widget.AbsListView: boolean onKeyDown(int,android.view.KeyEvent)>
<com.android.server.usb.UsbDeviceManager: boolean access$1100(com.android.server.usb.UsbDeviceManager)>
<android.bluetooth.BluetoothDeviceProfileState: void access$7100(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.IState)>
<android.view.GLES20RenderLayer: android.view.HardwareCanvas start(android.graphics.Canvas)>
<android.renderscript.Int4: void <init>(int,int,int,int)>
<android.accounts.IAccountManagerResponse$Stub: android.accounts.IAccountManagerResponse asInterface(android.os.IBinder)>
<android.inputmethodservice.Keyboard: java.util.List getKeys()>
<android.webkit.WebSettings: boolean getUseDoubleTree()>
<com.android.server.BackupManagerService$RestorePolicy: com.android.server.BackupManagerService$RestorePolicy[] values()>
<android.view.MotionEvent: int nativeReadFromParcel(int,android.os.Parcel)>
<android.net.wifi.SupplicantStateTracker$DefaultState: void <init>(android.net.wifi.SupplicantStateTracker)>
<android.app.Activity$ManagedDialog: void <init>()>
<android.net.WebAddress: void <clinit>()>
<android.view.MotionEvent: void getPointerProperties(int,android.view.MotionEvent$PointerProperties)>
<android.app.TabActivity: android.widget.TabWidget getTabWidget()>
<android.widget.ZoomButtonsController: void <clinit>()>
<android.os.Parcel: java.lang.String[] readStringArray()>
<java.lang.Object: java.lang.String getPrefix()>
<android.graphics.RectF: void set(android.graphics.RectF)>
<android.view.accessibility.AccessibilityEvent: int getEventType()>
<android.text.DynamicLayout: int getEllipsisStart(int)>
<android.widget.ListPopupWindow: android.widget.PopupWindow access$700(android.widget.ListPopupWindow)>
<android.net.DnsPinger$DnsArg: void <init>(android.net.DnsPinger,java.net.InetAddress,int)>
<android.webkit.WebViewCore: android.content.Context access$3700(android.webkit.WebViewCore)>
<com.android.internal.os.BatteryStatsImpl$Uid: void noteScanWifiLockReleasedLocked()>
<android.inputmethodservice.InputMethodService: android.view.inputmethod.InputBinding getCurrentInputBinding()>
<android.graphics.drawable.LayerDrawable: void addLayer(android.graphics.drawable.Drawable,int,int,int,int,int)>
<com.android.internal.os.BatteryStatsImpl$StopwatchTimer: void writeToParcel(android.os.Parcel,long)>
<android.webkit.ZoomControlExternal$3: void <init>(android.webkit.ZoomControlExternal)>
<android.view.ViewPropertyAnimator$PropertyBundle: void <init>(int,java.util.ArrayList)>
<com.android.server.accessibility.AccessibilityManagerService$Service: void setServiceInfo(android.accessibilityservice.AccessibilityServiceInfo)>
<android.test.ViewAsserts: void assertLeftAligned(android.view.View,android.view.View)>
<android.net.wifi.WifiApConfigStore: void <clinit>()>
<android.widget.RemoteViewsAdapter$1: void <init>(android.widget.RemoteViewsAdapter)>
<android.graphics.Rect: void printShortString(java.io.PrintWriter)>
<GenerationGG: android.view.View$OnLongClickListener get_androidviewView__OnLongClickListener()>
<android.widget.MediaController: android.view.WindowManager access$400(android.widget.MediaController)>
<android.accounts.AccountsException: void <init>(java.lang.String,java.lang.Throwable)>
<com.android.server.WallpaperManagerService: void <clinit>()>
<android.content.ContentProviderResult$1: void <init>()>
<android.widget.PopupWindow: void setFocusable(boolean)>
<GenerationGG: android.inputmethodservice.KeyboardView$OnKeyboardActionListener get_androidinputmethodserviceKeyboardView__OnKeyboardActionListener()>
<android.renderscript.FieldPacker: void addU16(android.renderscript.Int4)>
<android.opengl.ETC1: void encodeImage(java.nio.Buffer,int,int,int,int,java.nio.Buffer)>
<android.os.Parcel: int[] createIntArray()>
<GenerationGG: android.media.MediaPlayer$OnSeekCompleteListener get_androidmediaMediaPlayer__OnSeekCompleteListener()>
<com.android.server.net.NetworkPolicyManagerService: android.content.Intent buildAllowBackgroundDataIntent()>
<android.test.mock.MockContext: void <init>()>
<com.android.internal.telephony.cat.RilMessageDecoder: void access$900(com.android.internal.telephony.cat.RilMessageDecoder,android.os.Message)>
<com.android.server.connectivity.Tethering: android.os.INetworkManagementService access$2000(com.android.server.connectivity.Tethering)>
<android.location.GeocoderParams$1: android.location.GeocoderParams createFromParcel(android.os.Parcel)>
<android.webkit.WebChromeClient: void onCloseWindow(android.webkit.WebView)>
<android.media.AudioService$VolumeStreamState: boolean setIndex(int,boolean)>
<android.media.AudioTrack: int write(short[],int,int)>
<android.webkit.WebView: float calculateDragAngle(int,int)>
<android.location.LocationManager$GpsStatusListenerTransport: void onGpsStopped()>
<android.animation.Keyframe$FloatKeyframe: android.animation.Keyframe clone()>
<android.net.wifi.WifiNative: boolean setNetworkVariableCommand(int,java.lang.String,java.lang.String)>
<android.webkit.WebStorage$Origin: void <init>(java.lang.String)>
<android.webkit.WebIconDatabase$EventHandler: void access$400(android.webkit.WebIconDatabase$EventHandler,java.lang.String,android.webkit.WebIconDatabase$IconListener)>
<android.webkit.WebViewCore$JSKeyData: void <init>()>
<android.net.DummyDataStateTracker: void setTeardownRequested(boolean)>
<android.net.sip.SipAudioCall: android.net.sip.SipSession access$200(android.net.sip.SipAudioCall)>
<android.ddm.DdmHandleThread: void <clinit>()>
<android.opengl.GLSurfaceView: void <clinit>()>
<GenerationGG: android.util.SparseBooleanArray get_androidutilSparseBooleanArray()>
<android.webkit.WebSettings: boolean getUseFixedViewport()>
<android.net.wifi.WifiStateMachine: void access$13000(android.net.wifi.WifiStateMachine,android.os.Message)>
<android.view.MotionEvent: int nativeCopy(int,int,boolean)>
<com.android.internal.telephony.IccRecords: java.lang.String getServiceProviderName()>
<android.graphics.Region: void setEmpty()>
<com.android.server.AlarmManagerService: java.lang.Object access$500(com.android.server.AlarmManagerService)>
<java.lang.Object: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>
<com.android.internal.view.menu.ActionMenuView: boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<GenerationGG: android.database.sqlite.SQLiteQueryBuilder get_androiddatabasesqliteSQLiteQueryBuilder()>
<android.app.SearchDialog$4: boolean onQueryTextSubmit(java.lang.String)>
<android.net.NetworkStats$1: android.net.NetworkStats createFromParcel(android.os.Parcel)>
<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void <init>(android.os.ParcelFileDescriptor)>
<android.widget.GridLayout: boolean isGone(android.view.View)>
<android.nfc.Tag: int getConnectedTechnology()>
<android.provider.Browser: void <init>()>
<com.android.internal.os.BatteryStatsImpl: void <init>(android.os.Parcel)>
<android.webkit.BrowserFrame: void nativeAuthenticationCancel(int)>
<com.android.internal.telephony.cat.Input$1: void <init>()>
<android.mtp.MtpObjectInfo: int getObjectHandle()>
<android.database.CursorWrapper: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.view.ViewRootImpl: void dispatchGetNewSurface()>
<android.util.AndroidRuntimeException: void <init>(java.lang.String,java.lang.Throwable)>
<com.android.server.am.ActivityManagerService: int getProcessLimit()>
<android.speech.tts.EventLogTags: void writeTtsSpeakFailure(java.lang.String,java.lang.String,int,java.lang.String,int,int)>
<android.view.textservice.SuggestionsInfo: java.lang.String getSuggestionAt(int)>
<android.view.GLES20Canvas: void nDrawTextRun(int,java.lang.String,int,int,int,int,float,float,int,int)>
<android.content.res.AssetManager$AssetInputStream: void close()>
<android.view.ViewGroup: void setPersistentDrawingCache(int)>
<android.net.LocalSocketImpl: void shutdownInput()>
<com.android.server.am.PendingThumbnailsRecord: void <init>(android.app.IThumbnailReceiver)>
<android.text.method.BaseMovementMethod: boolean up(android.widget.TextView,android.text.Spannable)>
<android.app.ActivityManager$RunningServiceInfo: void <init>(android.os.Parcel,android.app.ActivityManager$1)>
<com.android.internal.content.PackageMonitor: void onPackagesAvailable(java.lang.String[])>
<android.animation.LayoutTransition: java.util.LinkedHashMap access$700(android.animation.LayoutTransition)>
<android.animation.Keyframe: void setInterpolator(android.animation.TimeInterpolator)>
<java.lang.Object: int getLineNumber()>
<android.webkit.WebViewCore: void nativeUpdateFrameCache()>
<android.speech.tts.SynthesisRequest: int getSpeechRate()>
<android.net.http.CharArrayBuffers: char toLower(char)>
<android.media.AudioManager: boolean isWiredHeadsetOn()>
<android.net.Uri$Builder: boolean hasSchemeOrAuthority()>
<android.os.Process: boolean readProcFile(java.lang.String,int[],java.lang.String[],long[],float[])>
<android.app.WallpaperManager$FastBitmapDrawable: void setColorFilter(android.graphics.ColorFilter)>
<android.net.Uri: boolean isOpaque()>
<com.android.internal.telephony.cdma.sms.CdmaSmsAddress: java.lang.String toString()>
<android.test.mock.MockCursor: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.content.ContextWrapper: android.content.res.Resources getResources()>
<com.android.internal.util.BitwiseOutputStream: void write(int,int)>
<android.content.ActivityNotFoundException: void <init>(java.lang.String)>
<android.webkit.ZoomManager: void clearDocumentAnchor()>
<android.view.View$AttachInfo$InvalidateInfo$1: void <init>()>
<com.android.internal.telephony.cat.RilMessageDecoder: void <init>(android.os.Handler,com.android.internal.telephony.IccFileHandler)>
<android.graphics.Point$1: android.graphics.Point[] newArray(int)>
<android.text.AlteredCharSequence$AlteredSpanned: java.lang.Object[] getSpans(int,int,java.lang.Class)>
<android.net.SntpClient: void writeTimeStamp(byte[],int,long)>
<com.android.internal.telephony.ims.IsimUiccRecords: void <init>()>
<android.hardware.SensorManager: boolean registerLegacyListener(int,int,android.hardware.SensorListener,int,int)>
<android.database.CursorToBulkCursorAdaptor: void createAndRegisterObserverProxyLocked(android.database.IContentObserver)>
<android.server.BluetoothAdapterStateMachine: void access$4900(android.server.BluetoothAdapterStateMachine,android.os.Message)>
<android.view.animation.LayoutAnimationController: void <init>(android.view.animation.Animation,float)>
<android.widget.ScrollView: void fling(int)>
<GenerationGG: android.view.View$DragShadowBuilder get_androidviewView__DragShadowBuilder()>
<android.net.sip.SipAudioCall: android.net.sip.SipSession$Listener createListener()>
<android.widget.AdapterView: void addView(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.widget.ScrollBarDrawable: void setVerticalThumbDrawable(android.graphics.drawable.Drawable)>
<android.graphics.ColorFilter: void <init>()>
<android.view.GLES20Canvas: boolean isAvailable()>
<com.android.internal.telephony.IccFileHandler$LoadLinearFixedContext: void <init>(int,int,android.os.Message)>
<android.renderscript.Element: android.renderscript.Element I8_2(android.renderscript.RenderScript)>
<android.widget.QuickContactBadge: void <clinit>()>
<com.android.server.PowerManagerService: void setLightBrightness(int,int)>
<android.test.suitebuilder.TestGrouping$TestCasePredicate: void <init>(android.test.suitebuilder.TestGrouping$1)>
<android.widget.BaseExpandableListAdapter: void registerDataSetObserver(android.database.DataSetObserver)>
<android.webkit.CallbackProxy: void onNewHistoryItem(android.webkit.WebHistoryItem)>
<android.webkit.WebViewCore: void loadUrl(java.lang.String,java.util.Map)>
<android.view.InputDevice: int getKeyboardType()>
<android.text.TextPaint: void <init>()>
<com.android.internal.telephony.cat.ComprehensionTlv: int getLength()>
<android.webkit.PerfChecker: void responseAlert(java.lang.String)>
<android.os.Environment: java.io.File getDataDirectory()>
<android.view.IOnKeyguardExitResult$Stub: void <init>()>
<android.net.wifi.WifiStateMachine: void access$3200(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.server.BluetoothAdapterStateMachine: void access$3300(android.server.BluetoothAdapterStateMachine,com.android.internal.util.IState)>
<com.android.server.wm.InputManager: void setPointerSpeed(int)>
<android.net.wifi.SupplicantState$1: java.lang.Object[] newArray(int)>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid$Pkg getPackageStatsLocked(int,java.lang.String)>
<android.graphics.Canvas: boolean clipRect(int,int,int,int)>
<GenerationGG: android.net.rtp.AudioCodec get_androidnetrtpAudioCodec()>
<com.android.server.UiModeManagerService$6: void <init>(com.android.server.UiModeManagerService)>
<GenerationGG: org.xmlpull.v1.XmlSerializer get_orgxmlpullv1XmlSerializer()>
<android.animation.ValueAnimator$AnimationHandler: void <init>()>
<android.bluetooth.BluetoothInputDevice: boolean isValidDevice(android.bluetooth.BluetoothDevice)>
<com.android.server.location.MockProvider: void clearStatus()>
<android.view.View$AttachInfo$InvalidateInfo: void <clinit>()>
<android.util.LruCache: void trimToSize(int)>
<android.bluetooth.BluetoothSocket: void close()>
<android.ddm.DdmHandleThread: void register()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$4: void onClick(android.content.DialogInterface,int)>
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1$1: void <init>(android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask$1)>
<android.drm.DrmManagerClient: android.content.ContentValues _getConstraints(int,java.lang.String,int)>
<android.content.pm.VerifierInfo$1: java.lang.Object[] newArray(int)>
<android.widget.SearchView: void setOnSuggestionListener(android.widget.SearchView$OnSuggestionListener)>
<android.view.View$12: java.lang.Float get(android.view.View)>
<android.opengl.GLES20: void glVertexAttribPointer(int,int,int,boolean,int,java.nio.Buffer)>
<android.widget.RelativeLayout$DependencyGraph$Node: android.widget.RelativeLayout$DependencyGraph$Node acquire(android.view.View)>
<android.bluetooth.BluetoothDeviceProfileState: void access$4100(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.widget.TextView: boolean getDefaultEditable()>
<android.server.BluetoothService: boolean releaseChannelFdNative(java.lang.String)>
<android.webkit.GeolocationPermissions: boolean access$200(java.lang.String)>
<android.os.AsyncTask: android.os.AsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[])>
<android.webkit.WebViewClient: void onReceivedHttpAuthRequest(android.webkit.WebView,android.webkit.HttpAuthHandler,java.lang.String,java.lang.String)>
<android.view.ViewConfiguration: int getJumpTapTimeout()>
<Wrapper_android_text_style_LineBackgroundSpan: void test_android_text_style_LineBackgroundSpan()>
<android.widget.ZoomButtonsController: void setAutoDismissed(boolean)>
<android.net.wifi.WifiStateMachine: android.app.PendingIntent access$13300(android.net.wifi.WifiStateMachine)>
<com.android.internal.util.MemInfoReader: long getTotalSize()>
<android.app.FragmentManagerImpl: void attachActivity(android.app.Activity)>
<android.os.StrictMode: int getThreadPolicyMask()>
<android.app.Dialog: void onOptionsMenuClosed(android.view.Menu)>
<android.widget.AdapterViewAnimator: android.view.View getSelectedView()>
<android.hardware.usb.UsbDevice: int getDeviceSubclass()>
<com.android.server.am.ActivityRecord: void takeFromHistory()>
<android.widget.CalendarView: boolean access$2200(android.widget.CalendarView)>
<android.speech.tts.TextToSpeechService: java.lang.String access$500(android.speech.tts.TextToSpeechService)>
<android.widget.CalendarView$WeekView: void drawWeekSeparators(android.graphics.Canvas)>
<android.app.Activity: void onActivityResult(int,int,android.content.Intent)>
<android.webkit.WebSettings: int getDoubleTapToastCount()>
<com.android.internal.telephony.Call$State: boolean isDialing()>
<android.webkit.CookieManager: boolean nativeAcceptFileSchemeCookies()>
<android.os.Handler: void <init>(android.os.Looper,android.os.Handler$Callback)>
<android.graphics.BitmapRegionDecoder: int nativeGetWidth(int)>
<android.animation.ValueAnimator: java.lang.ThreadLocal access$200()>
<android.graphics.Interpolator: void nativeSetKeyFrame(int,int,int,float[],float[])>
<com.android.server.pm.Settings: void writePermissionLPr(org.xmlpull.v1.XmlSerializer,com.android.server.pm.BasePermission)>
<com.android.server.ProcessMap: java.util.HashMap getMap()>
<android.content.res.TypedArray: float getFraction(int,int,int,float)>
<com.android.internal.telephony.DataConnection: int access$500(com.android.internal.telephony.DataConnection)>
<android.view.animation.Transformation: void set(android.view.animation.Transformation)>
<com.android.internal.net.DNParser: char getUTF8()>
<android.content.res.XmlBlock: int access$1500(int)>
<android.util.LongSparseArray: java.lang.Object get(long)>
<com.android.server.wm.WindowManagerService$DummyAnimation: boolean getTransformation(long,android.view.animation.Transformation)>
<android.bluetooth.BluetoothDeviceProfileState: void access$5500(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.renderscript.RenderScript: void nAllocationRead(int,float[])>
<android.app.PendingIntent: void <clinit>()>
<GenerationGG: android.view.ViewTreeObserver$OnGlobalFocusChangeListener get_androidviewViewTreeObserver__OnGlobalFocusChangeListener()>
<com.android.internal.telephony.PhoneBase: void setUnitTestMode(boolean)>
<android.widget.FrameLayout$LayoutParams: void <init>(int,int)>
<android.graphics.Matrix: boolean native_postTranslate(int,float,float)>
<com.android.internal.backup.IBackupTransport$Stub: com.android.internal.backup.IBackupTransport asInterface(android.os.IBinder)>
<com.android.server.TextServicesManagerService: android.view.textservice.SpellCheckerInfo[] getEnabledSpellCheckers()>
<android.bluetooth.BluetoothTetheringDataTracker: void <init>()>
<android.os.Message: void recycle()>
<GenerationGG: java.io.PrintWriter get_javaioPrintWriter()>
<android.opengl.GLSurfaceView: void setGLWrapper(android.opengl.GLSurfaceView$GLWrapper)>
<android.webkit.WebStorage$2: void handleMessage(android.os.Message)>
<android.os.BatteryStats$Counter: void <init>()>
<android.os.ParcelUuid: int describeContents()>
<com.android.internal.os.BatteryStatsImpl: int getCpuSpeedSteps()>
<android.net.wifi.WifiManager: int calculateSignalLevel(int,int)>
<java.lang.Object: char[] getTextCharacters(int[])>
<com.android.server.pm.PackageManagerService: java.lang.String[] getSystemSharedLibraryNames()>
<android.view.accessibility.AccessibilityRecord: void enforceNotSealed()>
<android.content.BroadcastReceiver: void clearAbortBroadcast()>
<android.widget.HeaderViewListAdapter: boolean areAllItemsEnabled()>
<android.os.Parcel: void readByteArray(byte[])>
<android.view.accessibility.AccessibilityNodeInfo: boolean canPerformRequestOverConnection(int)>
<android.widget.CalendarView$WeeksAdapter: java.util.Calendar access$100(android.widget.CalendarView$WeeksAdapter)>
<android.server.BluetoothEventLoop$2: void onServiceDisconnected(int)>
<android.renderscript.RenderScript: int nSamplerCreate(int,int,int,int,int,float)>
<android.widget.RatingBar: float getStepSize()>
<android.media.AsyncPlayer$Command: void <init>(android.media.AsyncPlayer$1)>
<com.android.server.am.ActivityManagerService: int dumpProcessList(java.io.PrintWriter,com.android.server.am.ActivityManagerService,java.util.List,java.lang.String,java.lang.String,java.lang.String)>
<android.widget.ListView: boolean getItemsCanFocus()>
<android.hardware.SensorManager: void onRotationChanged(int)>
<android.widget.EditText: android.text.Editable getText()>
<java.lang.Object: void getChars(int,int,char[],int)>
<android.view.View: int getNextFocusLeftId()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: java.lang.String findBestLanguage(byte[])>
<android.graphics.Bitmap: android.graphics.Bitmap access$000(android.os.Parcel)>
<android.app.Fragment: void performDestroyView()>
<com.android.server.MountService: void <clinit>()>
<android.widget.NumberPicker: boolean getWrapSelectorWheel()>
<android.widget.ShareActionProvider$ShareMenuItemOnMenuItemClickListener: void <init>(android.widget.ShareActionProvider)>
<android.util.FloatProperty: void <init>(java.lang.String)>
<com.android.internal.os.PkgUsageStats: void <init>(android.os.Parcel)>
<android.webkit.HTML5VideoViewProxy: boolean nativeSendSurfaceTexture(android.graphics.SurfaceTexture,int,int,int,int)>
<android.graphics.Paint: android.graphics.PathEffect setPathEffect(android.graphics.PathEffect)>
<android.app.SharedPreferencesImpl: android.content.SharedPreferences$Editor edit()>
<android.text.method.LinkMovementMethod: void <clinit>()>
<com.android.internal.telephony.AdnRecord$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.app.ActivityThread$ApplicationThread: void scheduleSuicide()>
<android.app.DownloadManager: void <init>(android.content.ContentResolver,java.lang.String)>
<com.android.internal.telephony.cat.GetInputParams: void <init>(com.android.internal.telephony.cat.CommandDetails,com.android.internal.telephony.cat.Input)>
<com.android.server.wm.WindowManagerService: void overridePendingAppTransition(java.lang.String,int,int)>
<android.graphics.drawable.shapes.RectShape: android.graphics.drawable.shapes.Shape clone()>
<android.view.GLES20Canvas: boolean quickReject(android.graphics.RectF,android.graphics.Canvas$EdgeType)>
<android.view.GLES20Canvas: void nDestroyRenderer(int)>
<com.android.server.am.ServiceRecord: com.android.server.am.ServiceRecord$StartItem findDeliveredStart(int,boolean)>
<GenerationGG: android.util.TimeFormatException get_androidutilTimeFormatException()>
<android.graphics.drawable.NinePatchDrawable: int getOpacity()>
<com.android.internal.os.BatteryStatsImpl: void removeUidStatsLocked(int)>
<android.server.BluetoothBondState$2: void <init>(android.server.BluetoothBondState)>
<android.text.PackedIntVector: void setValueInternal(int,int,int)>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: java.lang.String generateTag()>
<android.content.res.XmlBlock: void nativeDestroy(int)>
<android.content.res.StringBlock$StyleIDs: int access$602(android.content.res.StringBlock$StyleIDs,int)>
<com.android.internal.os.BatteryStatsImpl: void notePhoneOnLocked()>
<android.webkit.WebChromeClient: void onConsoleMessage(java.lang.String,int,java.lang.String)>
<android.widget.RemoteViewsAdapter: int getConvertViewTypeId(android.view.View)>
<com.android.server.IntentResolver: int register_mime_types(android.content.IntentFilter,java.lang.String)>
<android.webkit.WebView: boolean nativeMoveCursor(int,int,boolean)>
<android.hardware.usb.UsbEndpoint$1: java.lang.Object[] newArray(int)>
<android.graphics.Path: void native_arcTo(int,android.graphics.RectF,float,float,boolean)>
<android.test.mock.MockResources: int getColor(int)>
<android.media.AudioService: boolean loadSoundEffects()>
<android.app.Instrumentation$Idler: void waitForIdle()>
<android.webkit.JniUtil: void setContext(android.content.Context)>
<android.widget.CalendarView$WeeksAdapter$CalendarGestureListener: boolean onSingleTapUp(android.view.MotionEvent)>
<android.graphics.drawable.InsetDrawable: int getIntrinsicWidth()>
<GenerationGG: android.graphics.MaskFilter get_androidgraphicsMaskFilter()>
<android.widget.AbsListView$PositionScroller: void start(int)>
<android.app.ExpandableListActivity: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
<com.android.server.UiModeManagerService: boolean access$002(com.android.server.UiModeManagerService,boolean)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: java.lang.String access$302(com.android.internal.telephony.cdma.CdmaLteUiccRecords,java.lang.String)>
<android.os.TokenWatcher$Death: void finalize()>
<android.os.SystemClock: long elapsedRealtime()>
<android.util.SparseBooleanArray: boolean get(int)>
<android.graphics.Bitmap: int getHeight()>
<android.server.BluetoothHealthProfileHandler$HealthChannel: boolean access$1400(android.server.BluetoothHealthProfileHandler$HealthChannel)>
<android.telephony.ServiceState: int getRadioTechnology()>
<com.android.internal.telephony.BaseCommands: void setOnUSSD(android.os.Handler,int,java.lang.Object)>
<com.android.server.wm.WindowManagerService: void enableScreenIfNeededLocked()>
<com.android.server.LightsService$Light: void setBrightness(int)>
<android.widget.TextView: int getImeActionId()>
<GenerationGG: android.content.Loader$OnLoadCompleteListener get_androidcontentLoader__OnLoadCompleteListener()>
<android.app.ContextImpl: java.io.File makeFilename(java.io.File,java.lang.String)>
<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getActivityLogo(android.content.ComponentName)>
<com.android.internal.util.StateMachine: void sendMessage(android.os.Message)>
<android.animation.ObjectAnimator: void <init>()>
<android.app.SearchableInfo: java.lang.String getSuggestIntentData()>
<android.os.StrictMode: int access$1000(java.lang.String)>
<android.net.NetworkInfo: java.lang.String access$502(android.net.NetworkInfo,java.lang.String)>
<android.app.ContextImpl$StaticServiceFetcher: void <init>()>
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.test.SimulatedRadioControl getSimulatedRadioControl()>
<android.text.StaticLayout: int getBottomPadding()>
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: void <init>(android.os.IBinder)>
<android.app.Fragment: boolean onContextItemSelected(android.view.MenuItem)>
<android.location.Address: int access$102(android.location.Address,int)>
<android.graphics.drawable.LevelListDrawable$LevelListState: int indexOfLevel(int)>
<android.inputmethodservice.InputMethodService: void onComputeInsets(android.inputmethodservice.InputMethodService$Insets)>
<android.hardware.SensorManager$ListenerDelegate: int removeSensor(android.hardware.Sensor)>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: void addCpuTimeLocked(int,int)>
<android.text.style.ReplacementSpan: void updateMeasureState(android.text.TextPaint)>
<android.content.Intent: boolean isExcludingStopped()>
<android.speech.tts.TextToSpeech$2: void <init>(android.speech.tts.TextToSpeech,java.lang.String,int,java.util.HashMap)>
<android.graphics.Movie: android.graphics.Movie decodeByteArray(byte[],int,int)>
<com.android.internal.telephony.gsm.SmsMessage: boolean isTypeZero()>
<android.graphics.Picture: int nativeBeginRecording(int,int,int)>
<android.inputmethodservice.InputMethodService: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.test.mock.MockPackageManager: java.lang.CharSequence getApplicationLabel(android.content.pm.ApplicationInfo)>
<android.database.sqlite.SQLiteDatabase: void resetTransactionUsingExecSqlFlag()>
<android.accounts.AccountManager$Future2Task: java.lang.Object internalGetResult(java.lang.Long,java.util.concurrent.TimeUnit)>
<android.gesture.GestureStroke: android.graphics.Path toPath(float,float,int)>
<GenerationGG: android.renderscript.RenderScript$RSErrorHandler get_androidrenderscriptRenderScript__RSErrorHandler()>
<com.android.internal.view.menu.ActionMenuView: void setPresenter(com.android.internal.view.menu.ActionMenuPresenter)>
<android.test.mock.MockContentResolver: android.content.IContentProvider acquireExistingProvider(android.content.Context,java.lang.String)>
<android.graphics.Shader: boolean getLocalMatrix(android.graphics.Matrix)>
<android.database.BulkCursorNative: void <init>()>
<android.view.GLES20Canvas: void drawHardwareLayer(android.view.HardwareLayer,float,float,android.graphics.Paint)>
<android.test.mock.MockResources: int getInteger(int)>
<android.app.backup.BackupDataInput: java.lang.String getKey()>
<android.view.WindowManagerImpl$CompatModeWrapper: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.os.ParcelUuid: void <clinit>()>
<android.net.MobileDataStateTracker: android.net.LinkCapabilities getLinkCapabilities()>
<com.android.internal.view.menu.MenuBuilder: void stopDispatchingItemsChanged()>
<android.view.View$7: void setValue(android.view.View,float)>
<android.content.res.XmlBlock: int access$500(int)>
<android.test.mock.MockCursor: void deactivate()>
<android.content.ClipboardManager$2: void handleMessage(android.os.Message)>
<android.text.util.Linkify$2: boolean acceptMatch(java.lang.CharSequence,int,int)>
<android.widget.ExpandableListConnector: android.widget.Filter getFilter()>
<android.content.IntentFilter: void writeToParcel(android.os.Parcel,int)>
<android.util.Xml: void <clinit>()>
<android.preference.Preference$BaseSavedState: void <init>(android.os.Parcelable)>
<android.view.MenuInflater$InflatedOnMenuItemClickListener: boolean onMenuItemClick(android.view.MenuItem)>
<android.content.ContextWrapper: android.os.Looper getMainLooper()>
<android.net.LocalSocketImpl: void writeba_native(byte[],int,int,java.io.FileDescriptor)>
<com.android.server.accessibility.TouchExplorer$PointerTracker: float getReceivedPointerDownY(int)>
<android.net.wifi.WpsStateMachine$ActiveState: void enter()>
<Wrapper_android_net_Uri: void test_android_net_Uri()>
<android.widget.TabWidget: void onSizeChanged(int,int,int,int)>
<android.os.Debug: void getMemoryInfo(int,android.os.Debug$MemoryInfo)>
<android.net.DummyDataStateTracker: void setDependencyMet(boolean)>
<android.app.SharedPreferencesImpl: java.io.File makeBackupFile(java.io.File)>
<android.os.Message: java.lang.String toString(long)>
<android.speech.tts.TextToSpeech$3: void <init>(android.speech.tts.TextToSpeech,java.lang.String,int,java.util.HashMap)>
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: void setUpdateVersion(int)>
<android.webkit.WebViewCore: java.lang.String nativeRetrieveHref(int,int)>
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getType()>
<android.os.DropBoxManager$Entry$1: java.lang.Object[] newArray(int)>
<com.android.internal.telephony.sip.SipPhone$SipConnection: android.net.sip.SipAudioCall access$702(com.android.internal.telephony.sip.SipPhone$SipConnection,android.net.sip.SipAudioCall)>
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getClassName()>
<com.android.internal.view.InputConnectionWrapper$InputContextCallback: void dispose()>
<android.widget.PopupWindow: int access$300(android.widget.PopupWindow)>
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getExtension()>
<android.util.EventLog: void <clinit>()>
<android.net.LocalSocketImpl: java.io.FileDescriptor[] getAncillaryFileDescriptors()>
<android.security.KeyChainException: void <init>(java.lang.String,java.lang.Throwable)>
<android.app.SharedPreferencesImpl: java.util.Map access$402(android.app.SharedPreferencesImpl,java.util.Map)>
<android.widget.RemoteViews: void setShort(int,java.lang.String,short)>
<com.android.internal.app.ShutdownThread: void <clinit>()>
<android.graphics.drawable.RotateDrawable: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.animation.ValueAnimator: long getCurrentPlayTime()>
<com.android.server.am.ActivityResult: void <init>(com.android.server.am.ActivityRecord,java.lang.String,int,int,android.content.Intent)>
<android.telephony.SignalStrength$1: android.telephony.SignalStrength createFromParcel(android.os.Parcel)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$P2pNotSupportedState: void <init>(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<android.widget.GridLayout$Axis: android.widget.GridLayout$Arc[][] groupArcsByFirstVertex(android.widget.GridLayout$Arc[])>
<android.net.http.AndroidHttpClient: android.net.http.AndroidHttpClient newInstance(java.lang.String)>
<com.android.server.connectivity.Tethering$TetherMasterSM: com.android.internal.util.State access$3600(com.android.server.connectivity.Tethering$TetherMasterSM)>
<android.webkit.BrowserFrame: java.lang.String childFramesAsText()>
<android.test.InstrumentationTestRunner$StringResultPrinter: void <init>(android.test.InstrumentationTestRunner,java.io.PrintStream)>
<GenerationGG: android.database.sqlite.SQLiteOpenHelper get_androiddatabasesqliteSQLiteOpenHelper()>
<android.net.wifi.WifiStateMachine$ConnectModeState: void <init>(android.net.wifi.WifiStateMachine)>
<android.test.mock.MockPackageManager: void setApplicationEnabledSetting(java.lang.String,int,int)>
<com.android.server.DevicePolicyManagerService: boolean getCameraDisabled(android.content.ComponentName)>
<android.speech.tts.TextToSpeechService: android.speech.tts.TextToSpeechService$CallbackMap access$300(android.speech.tts.TextToSpeechService)>
<android.os.StrictMode$Span: java.lang.String access$1900(android.os.StrictMode$Span)>
<android.media.RingtoneManager: android.net.Uri getDefaultUri(int)>
<android.text.format.Formatter: java.lang.String formatIpAddress(int)>
<android.test.mock.MockResources: android.graphics.Movie getMovie(int)>
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: void setCustomView(android.view.View)>
<android.app.ActivityThread$ApplicationThread: void dumpHeap(boolean,java.lang.String,android.os.ParcelFileDescriptor)>
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: boolean isFilterStopped(android.content.pm.PackageParser$ServiceIntentInfo)>
<android.content.res.Resources: android.util.DisplayMetrics getDisplayMetrics()>
<android.graphics.Canvas: void drawLines(float[],android.graphics.Paint)>
<android.renderscript.ProgramStore$Builder: android.renderscript.ProgramStore$Builder setDepthFunc(android.renderscript.ProgramStore$DepthFunc)>
<com.android.server.pm.Settings$1: void <init>(com.android.server.pm.Settings)>
<com.android.server.location.GpsLocationProvider: android.os.PowerManager$WakeLock access$1700(com.android.server.location.GpsLocationProvider)>
<com.android.server.am.ThumbnailHolder: void <init>()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc: com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc setNationalNumberPattern(java.lang.String)>
<android.webkit.BrowserFrame: void externalRepresentation(android.os.Message)>
<android.widget.RemoteViews$ReflectionActionWithoutParams: void <init>(android.widget.RemoteViews,int,java.lang.String)>
<android.os.RemoteCallback$LocalCallback: void sendResult(android.os.Bundle)>
<android.view.View: void onAnimationStart()>
<com.android.internal.view.menu.BaseMenuPresenter: boolean collapseItemActionView(com.android.internal.view.menu.MenuBuilder,com.android.internal.view.menu.MenuItemImpl)>
<android.text.Layout: void <init>(java.lang.CharSequence,android.text.TextPaint,int,android.text.Layout$Alignment,float,float)>
<com.android.server.location.PassiveProvider: boolean sendExtraCommand(java.lang.String,android.os.Bundle)>
<android.net.sip.SimpleSessionDescription$Media: void setRtpPayload(int,java.lang.String,java.lang.String)>
<com.android.server.wm.InputMonitor: void <init>(com.android.server.wm.WindowManagerService)>
<android.os.Looper: java.lang.Thread getThread()>
<android.test.IsolatedContext: android.content.ContentResolver getContentResolver()>
<android.telephony.SmsManager: void <clinit>()>
<com.android.internal.view.menu.MenuItemImpl: int getOrdering()>
<android.content.Intent: android.content.Intent setFlags(int)>
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.IccCard getIccCard()>
<android.renderscript.FieldPacker: void align(int)>
<com.android.internal.telephony.ApnContext: void removeNextWaitingApn()>
<com.android.internal.telephony.BaseCommands: void <clinit>()>
<com.android.server.am.ActivityManagerService$ItemMatcher: boolean match(java.lang.Object,android.content.ComponentName)>
<android.test.mock.MockResources: java.io.InputStream openRawResource(int)>
<android.graphics.ComposeShader: int nativePostCreate1(int,int,int,int)>
<com.android.server.PowerManagerService: void updateNativePowerStateLocked()>
<android.widget.TabWidget$TabClickListener: void <init>(android.widget.TabWidget,int,android.widget.TabWidget$1)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$5800(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,com.android.internal.util.IState)>
<android.webkit.WebViewCore: java.lang.String nativeRequestLabel(int,int)>
<android.app.WallpaperManager$FastBitmapDrawable: int getMinimumHeight()>
<android.opengl.ETC1Util$ETC1Texture: int getHeight()>
<com.android.internal.telephony.GsmAlphabet: int access$000()>
<android.renderscript.FieldPacker: void <init>(int)>
<android.test.ViewAsserts: void assertOnScreen(android.view.View,android.view.View)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: byte[] access$100(com.android.internal.telephony.cdma.CdmaLteUiccRecords)>
<android.bluetooth.BluetoothDeviceProfileState: android.content.Context access$1600(android.bluetooth.BluetoothDeviceProfileState)>
<android.hardware.Camera: void native_cancelAutoFocus()>
<android.text.style.TextAppearanceSpan: int describeContents()>
<com.android.server.am.ActivityManagerService: boolean dumpProvidersLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],int,boolean)>
<android.media.AudioSystem: int getDeviceConnectionState(int,java.lang.String)>
<android.location.LocationManager: android.location.GpsStatus getGpsStatus(android.location.GpsStatus)>
<com.android.server.PowerManagerService$SettingsObserver: void <init>(com.android.server.PowerManagerService,com.android.server.PowerManagerService$1)>
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: boolean queuePositionsToBePreloadedFromRequestedPosition(int)>
<android.app.SearchDialog$SearchBar: void setSearchDialog(android.app.SearchDialog)>
<android.drm.DrmManagerClient: int checkRightsStatus(java.lang.String)>
<Wrapper_android_drm_DrmErrorEvent: void test_android_drm_DrmErrorEvent()>
<com.android.server.sip.SipSessionListenerProxy$4: void <init>(com.android.server.sip.SipSessionListenerProxy,android.net.sip.ISipSession,java.lang.String)>
<android.view.View$TransformationInfo: boolean access$900(android.view.View$TransformationInfo)>
<GenerationGG: android.view.inputmethod.InputMethodManager get_androidviewinputmethodInputMethodManager()>
<android.widget.ResourceCursorAdapter: android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup)>
<Wrapper_android_test_InstrumentationTestSuite: void test_android_test_InstrumentationTestSuite()>
<android.widget.LinearLayout: void setGravity(int)>
<com.android.internal.os.BatteryStatsImpl: long getPhoneOnTime(long,int)>
<android.widget.ScrollBarDrawable: void setAlwaysDrawHorizontalTrack(boolean)>
<android.net.wifi.SupplicantStateTracker$HandshakeState: void enter()>
<android.content.SyncStatusInfo: void setPeriodicSyncTime(int,long)>
<android.net.NetworkInfo$State: android.net.NetworkInfo$State[] values()>
<android.content.ContentProvider: void setWritePermission(java.lang.String)>
<android.widget.ScrollView: boolean isOffScreen(android.view.View)>
<android.content.pm.InstrumentationInfo: void <clinit>()>
<android.test.IsolatedContext$MockAccountManager$MockAccountManagerFuture: boolean cancel(boolean)>
<android.webkit.WebView: void nativeResetSelection()>
<android.widget.TextView: android.graphics.drawable.Drawable access$6902(android.widget.TextView,android.graphics.drawable.Drawable)>
<com.android.server.BackupManagerService: android.content.Context access$1900(com.android.server.BackupManagerService)>
<com.android.server.am.ProcessList: long getMemLevel(int)>
<android.test.InstrumentationTestCase: android.app.Instrumentation getInstrumentation()>
<android.content.SyncManager: void sendSyncFinishedOrCanceledMessage(android.content.SyncManager$ActiveSyncContext,android.content.SyncResult)>
<GenerationGG: android.widget.SimpleCursorAdapter$ViewBinder get_androidwidgetSimpleCursorAdapter__ViewBinder()>
<android.text.format.Time: void set(long)>
<android.net.Uri$StringUri: android.net.Uri readFrom(android.os.Parcel)>
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void setupSetter(java.lang.Class)>
<android.media.audiofx.PresetReverb: void setPreset(short)>
<android.net.wifi.WifiConfiguration$ProxySettings: void <init>(java.lang.String,int)>
<com.android.server.connectivity.Tethering$TetherMasterSM: void access$3400(com.android.server.connectivity.Tethering$TetherMasterSM,com.android.internal.util.IState)>
<com.android.internal.telephony.DataConnection$DcInactiveState: void <init>(com.android.internal.telephony.DataConnection)>
<com.android.internal.telephony.cat.Duration: void <clinit>()>
<GenerationGG: android.inputmethodservice.AbstractInputMethodService get_androidinputmethodserviceAbstractInputMethodService()>
<android.util.Log$TerribleFailure: void <init>(java.lang.String,java.lang.Throwable)>
<android.content.SyncManager$1: void onReceive(android.content.Context,android.content.Intent)>
<android.renderscript.Element: android.renderscript.Element U64(android.renderscript.RenderScript)>
<com.android.server.location.ComprehensiveCountryDetector: android.telephony.ServiceState access$002(com.android.server.location.ComprehensiveCountryDetector,android.telephony.ServiceState)>
<com.android.server.am.BatteryStatsService: boolean access$102(com.android.server.am.BatteryStatsService,boolean)>
<android.database.sqlite.SQLiteDatabase: void setLastSqlStatement(java.lang.String)>
<com.android.internal.telephony.sip.SipConnectionBase: long getCreateTime()>
<GenerationGG: android.graphics.RadialGradient get_androidgraphicsRadialGradient()>
<com.android.i18n.phonenumbers.geocoding.AreaCodeMapStorageStrategy: int getNumOfEntries()>
<android.media.audiofx.AudioEffect: void setControlStatusListener(android.media.audiofx.AudioEffect$OnControlStatusChangeListener)>
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: java.lang.String packageForFilter(android.content.pm.PackageParser$ActivityIntentInfo)>
<android.content.pm.ProviderInfo: java.lang.String toString()>
<android.test.ViewAsserts: void assertTopAligned(android.view.View,android.view.View)>
<android.net.sip.SimpleSessionDescription$Fields: void set(java.lang.String,char,java.lang.String)>
<android.net.wifi.WifiStateMachine: android.net.NetworkInfo$DetailedState getNetworkDetailedState()>
<android.webkit.ZoomManager: boolean exceedsMinScaleIncrement(float,float)>
<android.widget.TextView$SelectionStartHandleView: android.widget.TextView$ActionPopupWindow getActionPopupWindow()>
<GenerationGG: android.text.style.ReplacementSpan get_androidtextstyleReplacementSpan()>
<android.app.ActivityManager$RunningAppProcessInfo: void <clinit>()>
<android.graphics.Paint: android.graphics.Paint$Join getStrokeJoin()>
<com.android.internal.telephony.DataConnectionAc: android.net.LinkCapabilities rspLinkCapabilities(android.os.Message)>
<com.android.server.wm.InputMonitor: void clearInputWindowHandlesLw()>
<android.hardware.usb.IUsbManager$Stub$Proxy: void <init>(android.os.IBinder)>
<android.bluetooth.BluetoothProfileState: android.os.Message access$700(android.bluetooth.BluetoothProfileState)>
<android.net.wifi.WifiStateMachine$DriverLoadedState: void <init>(android.net.wifi.WifiStateMachine)>
<android.webkit.ByteArrayBuilder: boolean isEmpty()>
<android.view.inputmethod.InputConnectionWrapper: void setTarget(android.view.inputmethod.InputConnection)>
<android.media.AudioService: int getLastAudibleStreamVolume(int)>
<android.content.SyncResult: boolean hasHardError()>
<android.speech.tts.BlockingMediaPlayer: boolean access$302(android.speech.tts.BlockingMediaPlayer,boolean)>
<GenerationGG: android.content.ContentProviderResult[] get_androidcontentContentProviderResult_ARRAY_()>
<android.nfc.tech.NfcV: byte getDsfId()>
<android.net.wifi.WifiConfiguration: java.lang.String toString()>
<com.android.internal.telephony.PhoneSubInfo: void dispose()>
<android.server.BluetoothService: void cleanNativeAfterShutoffBluetooth()>
<android.renderscript.Allocation: void validateIsInt16()>
<android.app.AlertDialog: void setView(android.view.View)>
<android.widget.ListView$ArrowScrollFocusResult: void <init>(android.widget.ListView$1)>
<com.android.server.am.ActivityManagerService$AppNotResponding: void <init>(com.android.server.am.ActivityManagerService,com.android.server.am.ProcessRecord,java.lang.String)>
<GenerationGG: android.database.DatabaseUtils$InsertHelper get_androiddatabaseDatabaseUtils__InsertHelper()>
<android.app.ITransientNotification$Stub: android.app.ITransientNotification asInterface(android.os.IBinder)>
<android.util.Base64OutputStream: void write(byte[],int,int)>
<android.widget.TextView: java.lang.CharSequence getImeActionLabel()>
<android.net.wifi.WifiStateMachine: void access$2900(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<com.android.internal.widget.ScrollingTabContainerView$TabClickListener: void <init>(com.android.internal.widget.ScrollingTabContainerView,com.android.internal.widget.ScrollingTabContainerView$1)>
<com.android.internal.telephony.sip.SipCommandInterface: void handleCallSetupRequestFromSim(boolean,android.os.Message)>
<Wrapper_android_drm_DrmConvertedStatus: void test_android_drm_DrmConvertedStatus()>
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: void sortResults(java.util.List)>
<android.media.JetPlayer: boolean native_setMuteArray(boolean[],boolean)>
<android.view.Surface$OutOfResourcesException: void <init>(java.lang.String)>
<android.net.wifi.WifiWatchdogStateMachine: void access$5700(android.net.wifi.WifiWatchdogStateMachine,com.android.internal.util.IState)>
<GenerationGG: android.net.MailTo get_androidnetMailTo()>
<android.gesture.GestureLibrary: void setSequenceType(int)>
<android.net.sip.SimpleSessionDescription: java.lang.String getAddress()>
<com.android.server.location.MockProvider: boolean supportsBearing()>
<android.widget.PopupWindow: void setIgnoreCheekPress()>
<Wrapper_android_graphics_drawable_shapes_Shape: void test_android_graphics_drawable_shapes_Shape()>
<android.view.SurfaceSession: void <init>()>
<com.android.server.location.PassiveProvider: void disable()>
<com.android.server.sip.SipHelper: java.util.List createViaHeaders()>
<android.webkit.WebSettings: boolean getJavaScriptEnabled()>
<android.widget.AbsListView$WindowRunnnable: void <init>(android.widget.AbsListView)>
<android.preference.DialogPreference$SavedState$1: java.lang.Object[] newArray(int)>
<android.view.WindowManager$LayoutParams: boolean mayUseInputMethod(int)>
<android.widget.DatePicker$SavedState: int access$1100(android.widget.DatePicker$SavedState)>
<com.android.server.DropBoxManagerService$1: void <init>(com.android.server.DropBoxManagerService)>
<android.graphics.Canvas: void native_drawRect(int,android.graphics.RectF,int)>
<android.app.ActivityManager$TaskThumbnails$1: android.app.ActivityManager$TaskThumbnails[] newArray(int)>
<android.net.NetworkStatsHistory: void setLong(long[],int,long)>
<android.widget.ExpandableListPosition: void <clinit>()>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void access$1100(com.android.server.connectivity.Tethering$TetherInterfaceSM,com.android.internal.util.IState)>
<com.android.server.NotificationManagerService: java.util.ArrayList access$100(com.android.server.NotificationManagerService)>
<android.test.mock.MockContext: void startActivity(android.content.Intent)>
<android.renderscript.AllocationAdapter: int getID()>
<Wrapper_android_graphics_Picture: void test_android_graphics_Picture()>
<com.android.server.location.ComprehensiveCountryDetector: android.location.Country getLocaleCountry()>
<android.media.MediaPlayer: int getVideoWidth()>
<android.text.Layout$TabStops: void <init>(int,java.lang.Object[])>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$2500(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,com.android.internal.util.IState)>
<android.net.DhcpStateMachine: com.android.internal.util.State access$1800(android.net.DhcpStateMachine)>
<com.android.server.pm.PackageManagerService: java.lang.String arrayToString(int[])>
<com.android.server.VibratorService$Vibration: long access$400(com.android.server.VibratorService$Vibration)>
<android.content.IntentFilter$AuthorityEntry: int match(android.net.Uri)>
<android.net.LinkProperties: void setInterfaceName(java.lang.String)>
<com.android.internal.content.PackageMonitor: void onBeginPackageChanges()>
<android.view.GLES20Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>
<GenerationGG: android.net.sip.SipAudioCall$Listener get_androidnetsipSipAudioCall__Listener()>
<com.android.internal.widget.LockPatternView$SavedState: void <clinit>()>
<android.net.http.CertificateChainValidator: android.net.http.CertificateChainValidator getInstance()>
<android.view.TextureView: boolean hasStaticLayer()>
<android.speech.tts.TextToSpeech: int setOnUtteranceCompletedListener(android.speech.tts.TextToSpeech$OnUtteranceCompletedListener)>
<android.app.ContextImpl: boolean isRestricted()>
<com.android.server.LocationManagerService: void <clinit>()>
<DumbClass: void DumbMethod22()>
<android.webkit.WebSettings: void setSavePassword(boolean)>
<android.renderscript.Sampler: android.renderscript.Sampler WRAP_NEAREST(android.renderscript.RenderScript)>
<android.widget.ListPopupWindow: int getHorizontalOffset()>
<com.android.internal.util.StateMachine: void removeMessages(int)>
<android.view.ViewRootImpl$3: void removeCallback(android.view.SurfaceHolder$Callback)>
<android.net.NetworkInfo: java.lang.String getTypeName()>
<android.telephony.gsm.SmsMessage: boolean isMWIClearMessage()>
<GenerationGG: android.widget.WrapperListAdapter get_androidwidgetWrapperListAdapter()>
<com.android.internal.telephony.gsm.SmsMessage: boolean isStatusReportMessage()>
<android.content.res.CompatibilityInfo$Translator: void translateRectInScreenToAppWinFrame(android.graphics.Rect)>
<Wrapper_android_graphics_Camera: void test_android_graphics_Camera()>
<android.content.res.StringBlock$StyleIDs: int access$402(android.content.res.StringBlock$StyleIDs,int)>
<com.android.server.NotificationManagerService: com.android.server.NotificationManagerService$NotificationRecord access$902(com.android.server.NotificationManagerService,com.android.server.NotificationManagerService$NotificationRecord)>
<android.media.AudioManager: boolean isMusicActive()>
<android.database.Observable: void <init>()>
<android.net.sip.SipAudioCall: android.net.sip.SipSession access$600(android.net.sip.SipAudioCall)>
<android.app.DialogFragment: void setShowsDialog(boolean)>
<android.telephony.PhoneNumberUtils: boolean checkPrefixIsIgnorable(java.lang.String,int,int)>
<android.widget.CursorTreeAdapter$MyCursorHelper$MyContentObserver: boolean deliverSelfNotifications()>
<com.android.server.am.ActivityRecord: void removeResultsLocked(com.android.server.am.ActivityRecord,java.lang.String,int)>
<com.android.server.PowerManagerService$6: void <init>(com.android.server.PowerManagerService)>
<android.net.Uri$OpaqueUri: boolean isRelative()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: boolean isConstantSize()>
<com.android.server.am.ActivityManagerService: void getMemoryInfo(android.app.ActivityManager$MemoryInfo)>
<android.net.Uri$PathPart: android.net.Uri$PathPart appendDecodedSegment(android.net.Uri$PathPart,java.lang.String)>
<java.lang.Object: int getAttributeNameResource(int)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: android.os.IBinder asBinder()>
<android.webkit.WebView: void abortAnimation()>
<com.android.internal.telephony.AdnRecordCache: int extensionEfForEf(int)>
<android.webkit.WebStorage: void deleteAllData()>
<android.text.style.TypefaceSpan: int getSpanTypeId()>
<android.view.ViewRootImpl$3: android.graphics.Canvas lockCanvas(android.graphics.Rect)>
<com.android.org.bouncycastle.asn1.x509.AlgorithmIdentifier: void <init>(com.android.org.bouncycastle.asn1.DERObjectIdentifier)>
<android.view.View: void dispatchFinishTemporaryDetach()>
<android.renderscript.FileA3D: void <init>(int,android.renderscript.RenderScript,java.io.InputStream)>
<android.webkit.WebViewCore: void nativeRevealSelection()>
<com.android.internal.telephony.PhoneBase: java.lang.String getMsisdn()>
<android.location.Address: java.lang.String access$602(android.location.Address,java.lang.String)>
<com.android.internal.appwidget.IAppWidgetService$Stub: com.android.internal.appwidget.IAppWidgetService asInterface(android.os.IBinder)>
<android.net.sip.SipSession$State: java.lang.String toString(int)>
<Wrapper_android_graphics_PathMeasure: void test_android_graphics_PathMeasure()>
<android.graphics.Canvas: void scale(float,float)>
<com.android.internal.os.BatteryStatsImpl$SamplingCounter: void <init>(java.util.ArrayList)>
<android.speech.SpeechRecognizer$InternalListener: android.speech.RecognitionListener access$1000(android.speech.SpeechRecognizer$InternalListener)>
<com.android.server.BackupManagerService: void writeRestoreTokens()>
<android.content.pm.PermissionGroupInfo$1: java.lang.Object[] newArray(int)>
<android.content.res.XmlBlock$Parser: void setInput(java.io.InputStream,java.lang.String)>
<android.widget.StackView$LayoutParams: void setVerticalOffset(int)>
<android.view.KeyEvent: void setTainted(boolean)>
<android.content.pm.PackageStats: void <clinit>()>
<android.view.SurfaceView: void setZOrderMediaOverlay(boolean)>
<android.view.HardwareRenderer$Gl20Renderer: void destroyHardwareLayer(android.view.View)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Short)>
<android.view.View$ScrollabilityCache: void <init>(android.view.ViewConfiguration,android.view.View)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: byte[] access$002(com.android.internal.telephony.cdma.CdmaLteUiccRecords,byte[])>
<android.view.animation.Animation: void start()>
<com.android.internal.telephony.PhoneBase: java.lang.String getIccSerialNumber()>
<GenerationGG: android.webkit.DownloadListener get_androidwebkitDownloadListener()>
<android.text.TextUtils: boolean isGraphic(java.lang.CharSequence)>
<android.content.res.Resources$1: void put(long,java.lang.Object)>
<android.app.ContextImpl$16: void <init>()>
<android.graphics.Bitmap: int getScaledWidth(int)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimImsimLoaded: void <init>(com.android.internal.telephony.cdma.CdmaLteUiccRecords,com.android.internal.telephony.cdma.CdmaLteUiccRecords$1)>
<com.android.internal.view.menu.ActionMenuPresenter$OverflowMenuButton: boolean needsDividerBefore()>
<android.webkit.ViewManager$1: void <init>(android.webkit.ViewManager,android.view.SurfaceView)>
<android.widget.AutoCompleteTextView: android.widget.AutoCompleteTextView$Validator getValidator()>
<android.graphics.BlurMaskFilter$Blur: void <init>(java.lang.String,int,int)>
<android.media.audiofx.AudioEffect: int setEnabled(boolean)>
<android.util.Patterns: void <clinit>()>
<android.content.res.Configuration: boolean equals(android.content.res.Configuration)>
<com.android.internal.os.BatteryStatsImpl: long getBatteryRealtimeLocked(long)>
<com.android.internal.app.NetInitiatedActivity: int access$200(com.android.internal.app.NetInitiatedActivity)>
<android.view.View: void dispatchSetActivated(boolean)>
<android.view.ViewGroup: void setStaticTransformationsEnabled(boolean)>
<com.android.server.location.PassiveProvider: int getAccuracy()>
<android.webkit.WebView: int nativeDraw(android.graphics.Canvas,int,int,boolean)>
<android.webkit.WebSettings: void setPluginsPath(java.lang.String)>
<android.graphics.Path: void native_reset(int)>
<android.net.LinkProperties: void <init>(android.net.LinkProperties)>
<android.graphics.Bitmap: android.graphics.Bitmap createBitmap(int[],int,int,int,int,android.graphics.Bitmap$Config)>
<android.content.ClipData$Item: android.content.Intent getIntent()>
<com.android.internal.telephony.ApnContext: boolean isReady()>
<com.android.internal.view.menu.ActionMenuView: android.widget.LinearLayout$LayoutParams generateDefaultLayoutParams()>
<android.widget.GridLayout$3: int getAlignmentValue(android.view.View,int)>
<android.nfc.TechListParcel: void <init>(java.lang.String[][])>
<android.graphics.Canvas: void setMatrix(android.graphics.Matrix)>
<com.android.internal.telephony.IccCard: com.android.internal.telephony.IccCard$State getIccCardState()>
<android.app.ITransientNotification$Stub: void <init>()>
<android.graphics.drawable.NinePatchDrawable: int getMinimumWidth()>
<android.text.method.BaseMovementMethod: void initialize(android.widget.TextView,android.text.Spannable)>
<com.android.server.sip.SipService: android.os.Looper access$1800()>
<android.content.SyncManager: android.net.ConnectivityManager getConnectivityManager()>
<android.view.ViewDebug$1: void <init>(android.view.View)>
<android.widget.CalendarView: int getFirstDayOfWeek()>
<GenerationGG: android.view.ViewDebug$HierarchyTraceType get_androidviewViewDebug__HierarchyTraceType()>
<com.android.server.pm.PackageSignatures: void <init>()>
<android.text.method.PasswordTransformationMethod$Visible: android.text.method.PasswordTransformationMethod access$000(android.text.method.PasswordTransformationMethod$Visible)>
<android.database.CursorWindow: boolean nativePutString(int,java.lang.String,int,int)>
<com.android.internal.os.BatteryStatsImpl: void doDataPlug(long[],long)>
<android.graphics.Region: boolean nativeSetPath(int,int,int)>
<com.android.server.NotificationManagerService: void updateLightsLocked()>
<android.widget.GridLayout$Axis: void include(java.util.List,android.widget.GridLayout$Interval,android.widget.GridLayout$MutableInt)>
<com.android.internal.os.AtomicFile: java.io.FileOutputStream openAppend()>
<android.text.style.AlignmentSpan$Standard: int getSpanTypeId()>
<android.app.LoadedApk$ServiceDispatcher: void setUnbindLocation(java.lang.RuntimeException)>
<android.opengl.GLSurfaceView: void surfaceChanged(android.view.SurfaceHolder,int,int,int)>
<android.app.backup.RestoreSession$RestoreObserverWrapper: void onUpdate(int,java.lang.String)>
<android.view.View$AccessibilityDelegate: void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo)>
<android.graphics.Color: int HSVToColor(int,float[])>
<android.webkit.WebViewCore$CursorData: void <init>()>
<GenerationGG: android.view.View$OnTouchListener get_androidviewView__OnTouchListener()>
<com.android.internal.util.Preconditions: java.lang.Object checkNotNull(java.lang.Object,java.lang.Object)>
<com.android.internal.telephony.ApnContext: void decWaitingApnsPermFailCount()>
<android.drm.DrmManagerClient: void <init>(android.content.Context)>
<com.android.internal.telephony.DataConnection: com.android.internal.telephony.DataConnection$DcDisconnectionErrorCreatingConnection access$2000(com.android.internal.telephony.DataConnection)>
<com.android.internal.telephony.DataConnection: void notifyDisconnectCompleted(com.android.internal.telephony.DataConnection$DisconnectParams)>
<com.android.internal.view.IInputContextCallback$Stub: com.android.internal.view.IInputContextCallback asInterface(android.os.IBinder)>
<android.widget.SearchView$10: void beforeTextChanged(java.lang.CharSequence,int,int,int)>
<com.android.server.PowerManagerService: com.android.server.PowerManagerService$LockList access$500(com.android.server.PowerManagerService)>
<android.animation.ObjectAnimator: void setFloatValues(float[])>
<android.test.AndroidTestRunner: void testEnded(java.lang.String)>
<android.net.NetworkInfo: java.lang.String toString()>
<android.net.wifi.WifiConfigStore: void markAllNetworksDisabled()>
<android.text.method.MetaKeyKeyListener: void <init>()>
<com.android.internal.telephony.cdma.CDMAPhone: void setSystemProperty(java.lang.String,java.lang.String)>
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumLetters(android.content.ComponentName)>
<android.widget.NumberPicker: void onDetachedFromWindow()>
<android.net.NetworkTemplate: int getMatchRule()>
<android.renderscript.Mesh: android.renderscript.Allocation getIndexSetAllocation(int)>
<android.widget.ExpandableListConnector$GroupMetadata$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.test.ProviderTestCase2$MockContext2: java.io.File getDir(java.lang.String,int)>
<com.android.server.wm.WindowState: boolean isDrawnLw()>
<android.content.Intent: android.content.Intent addFlags(int)>
<com.android.internal.util.StateMachine: void quitting()>
<com.android.server.location.LocationProviderProxy$Connection: void onServiceDisconnected(android.content.ComponentName)>
<Wrapper_android_content_SyncStatusObserver: void test_android_content_SyncStatusObserver()>
<android.graphics.Canvas: boolean quickReject(float,float,float,float,android.graphics.Canvas$EdgeType)>
<android.media.audiofx.Virtualizer$Settings: java.lang.String toString()>
<android.bluetooth.BluetoothProfileState: android.bluetooth.BluetoothDevice access$302(android.bluetooth.BluetoothProfileState,android.bluetooth.BluetoothDevice)>
<android.view.VelocityTracker: float getXVelocity()>
<android.widget.ListView: void setFooterDividersEnabled(boolean)>
<android.location.Location: double convert(java.lang.String)>
<android.database.CursorJoiner: java.util.Iterator iterator()>
<GenerationGG: android.view.textservice.TextInfo[] get_androidviewtextserviceTextInfo_ARRAY_()>
<android.graphics.Canvas: void native_drawBitmap(int,int,android.graphics.Rect,android.graphics.Rect,int,int,int)>
<android.webkit.WebView: int scaleTrackballY(float,int)>
<android.os.Power: int setScreenState(boolean)>
<android.widget.ActivityChooserModel$ActivityResolveInfo: void <init>(android.widget.ActivityChooserModel,android.content.pm.ResolveInfo)>
<android.text.format.Time: long normalize(boolean)>
<com.android.server.am.UsageStatsService: void writeHistoryStatsFLOCK(com.android.internal.os.AtomicFile)>
<com.android.server.pm.PackageManagerService$InstallParams: void handleServiceError()>
<android.app.Activity: void onPrepareDialog(int,android.app.Dialog)>
<android.webkit.WebView: int getHistoryPictureWidth()>
<com.android.internal.widget.ActionBarView$1: void onNothingSelected(android.widget.AdapterView)>
<android.location.ILocationListener$Stub: android.os.IBinder asBinder()>
<android.graphics.Matrix: boolean native_preScale(int,float,float,float,float)>
<GenerationGG: android.renderscript.Long3 get_androidrenderscriptLong3()>
<android.view.inputmethod.InputMethodManager: void setFullscreenMode(boolean)>
<GenerationGG: android.renderscript.Int3 get_androidrenderscriptInt3()>
<android.net.MobileDataStateTracker: android.os.Messenger access$1002(android.net.MobileDataStateTracker,android.os.Messenger)>
<android.os.StrictMode: java.lang.ThreadLocal access$2200()>
<android.server.BluetoothAdapterStateMachine: void access$6600(android.server.BluetoothAdapterStateMachine,android.os.Message)>
<android.os.ParcelFileDescriptor: long getStatSize()>
<GenerationGG: android.sax.EndElementListener get_androidsaxEndElementListener()>
<android.net.wifi.p2p.WifiP2pGroup: boolean isClientListEmpty()>
<android.widget.GridLayout$5$1: int size(boolean)>
<android.app.ActivityGroup: android.app.LocalActivityManager getLocalActivityManager()>
<android.test.InstrumentationTestRunner: java.lang.String getCoverageFilePath()>
<android.server.BluetoothAdapterStateMachine: android.os.Message access$6000(android.server.BluetoothAdapterStateMachine)>
<com.android.internal.telephony.cat.Duration$1: java.lang.Object[] newArray(int)>
<android.view.View: int getNextFocusRightId()>
<android.test.suitebuilder.TestSuiteBuilder: boolean satisfiesAllPredicates(android.test.suitebuilder.TestMethod)>
<android.graphics.Matrix: boolean native_postScale(int,float,float)>
<com.android.internal.os.SamplingProfilerIntegration: boolean isEnabled()>
<android.renderscript.RenderScript: int nAllocationGetType(int)>
<com.android.server.wm.Session: boolean getInTouchMode()>
<android.net.Uri$StringUri: java.lang.String parseFragment()>
<com.android.internal.os.BatteryStatsImpl$Uid: void noteWifiMulticastDisabledLocked()>
<android.widget.GridLayout$Alignment: int getSizeInCell(android.view.View,int,int,int)>
<android.content.SyncInfo: void <init>(int,android.accounts.Account,java.lang.String,long)>
<android.webkit.WebTextView$AutoCompleteAdapter: void access$200(android.webkit.WebTextView$AutoCompleteAdapter,android.widget.TextView)>
<android.renderscript.RenderScript: void rsnScriptSetVarObj(int,int,int,int)>
<android.content.ContentProviderOperation: android.net.Uri getUri()>
<android.util.Base64$Coder: void <init>()>
<android.renderscript.Allocation: void copy1DRangeFrom(int,int,short[])>
<android.widget.TextView: android.text.Layout$Alignment getLayoutAlignment()>
<android.view.VolumePanel: int access$200(android.view.VolumePanel)>
<android.net.sip.SipAudioCall: void setAudioGroup(android.net.rtp.AudioGroup)>
<android.content.ContentProviderOperation: android.content.ContentProviderOperation$Builder newUpdate(android.net.Uri)>
<android.graphics.Bitmap$Config: android.graphics.Bitmap$Config nativeToConfig(int)>
<android.view.InputChannel$1: android.view.InputChannel createFromParcel(android.os.Parcel)>
<android.net.UrlQuerySanitizer: boolean hasParameter(java.lang.String)>
<android.text.StaticLayout: int getEllipsizedWidth()>
<android.content.res.XmlBlock: int nativeGetNamespace(int)>
<GenerationGG: android.util.JsonReader get_androidutilJsonReader()>
<android.text.method.AllCapsTransformationMethod: void onFocusChanged(android.view.View,java.lang.CharSequence,boolean,int,android.graphics.Rect)>
<com.android.internal.util.BitwiseOutputStream: void skip(int)>
<com.android.internal.content.PackageMonitor: void onFinishPackageChanges()>
<android.widget.TextView$HandleView: void addPositionToTouchUpFilter(int)>
<android.graphics.DashPathEffect: void <init>(float[],float)>
<android.content.SyncStatusInfo$1: void <init>()>
<com.android.server.location.GpsLocationProvider: void access$600(com.android.server.location.GpsLocationProvider)>
<com.android.internal.os.ProcessStats: long[] getCpuSpeedTimes(long[])>
<android.media.AudioManager: int getRouting(int)>
<android.accessibilityservice.AccessibilityServiceInfo$1: java.lang.Object[] newArray(int)>
<android.net.LinkProperties: void addLinkAddress(android.net.LinkAddress)>
<android.app.Dialog: boolean requestWindowFeature(int)>
<android.text.TextDirectionHeuristics: android.text.TextDirectionHeuristics$TriState access$100(int)>
<android.widget.ArrayAdapter: void setDropDownViewResource(int)>
<android.content.ContentService$ObserverNode: void addObserverLocked(android.net.Uri,android.database.IContentObserver,boolean,java.lang.Object,int,int)>
<com.android.server.connectivity.Vpn$LegacyVpnRunner: void <init>(com.android.server.connectivity.Vpn,com.android.internal.net.VpnConfig,java.lang.String[],java.lang.String[])>
<android.security.SystemKeyStore: byte[] generateNewKey(int,java.lang.String,java.lang.String)>
<Wrapper_android_util_Pair: void test_android_util_Pair()>
<java.lang.Object: java.lang.String getAttributeType(int)>
<android.view.View: boolean hasFocusable()>
<android.text.style.SuggestionSpan: void updateDrawState(android.text.TextPaint)>
<android.os.Debug: void startMethodTracing(java.lang.String,int)>
<android.view.View: boolean onGenericMotionEvent(android.view.MotionEvent)>
<GenerationGG: android.view.View$OnHoverListener get_androidviewView__OnHoverListener()>
<android.os.Binder: void setThreadStrictModePolicy(int)>
<android.view.View$BaseSavedState: void <clinit>()>
<GenerationGG: android.gesture.Gesture get_androidgestureGesture()>
<com.android.server.connectivity.Vpn: void interfaceLinkStateChanged(java.lang.String,boolean)>
<android.view.KeyEvent: int getScanCode()>
<GenerationGG: android.widget.NumberPicker$Formatter get_androidwidgetNumberPicker__Formatter()>
<com.android.server.VibratorService$Vibration: void <init>(com.android.server.VibratorService,android.os.IBinder,long[],int,int)>
<android.net.NetworkInfo: boolean isConnected()>
<android.net.sip.SipSession: android.net.sip.ISipSessionListener createListener()>
<android.bluetooth.BluetoothDeviceProfileState: void access$2000(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.renderscript.Font: java.lang.String getFontFileName(java.lang.String,android.renderscript.Font$Style)>
<android.animation.FloatKeyframeSet: void <init>(android.animation.Keyframe$FloatKeyframe[])>
<android.text.style.RelativeSizeSpan: void <init>(float)>
<android.hardware.Camera: void setHasPreviewCallback(boolean,boolean)>
<android.content.res.AssetManager: long getAssetLength(int)>
<android.text.style.ForegroundColorSpan: int getSpanTypeId()>
<android.webkit.WebView$SaveWebArchiveMessage: void <init>(java.lang.String,boolean,android.webkit.ValueCallback)>
<android.webkit.CookieManager$Cookie: void <init>()>
<android.graphics.Rect: java.lang.String flattenToString()>
<android.webkit.WebView: void access$5300(android.webkit.WebView)>
<android.text.method.DialerKeyListener: char[] getAcceptedChars()>
<com.android.server.wm.DimSurface: void show(int,int,int,int)>
<android.view.View: boolean isInEditMode()>
<android.filterfw.core.FilterGraph: void flushFrames()>
<android.app.ActivityThread$ApplicationThread: void scheduleSendResult(android.os.IBinder,java.util.List)>
<android.view.ViewTreeObserver$InternalInsetsInfo: void <init>()>
<android.security.KeyChain$KeyChainConnection: void <init>(android.content.Context,android.content.ServiceConnection,android.security.IKeyChainService)>
<com.android.internal.widget.LockPatternView: float getCenterYForRow(int)>
<GenerationGG: android.widget.RemoteViewsService get_androidwidgetRemoteViewsService()>
<android.content.pm.PackageInfo: int describeContents()>
<android.graphics.SurfaceTexture: void nativeRelease()>
<android.webkit.WebStorage: void setQuotaForOrigin(java.lang.String,long)>
<android.telephony.NeighboringCellInfo$1: void <init>()>
<android.bluetooth.BluetoothProfileState: android.bluetooth.BluetoothProfileState$StableState access$800(android.bluetooth.BluetoothProfileState)>
<com.android.server.MountService$ObbState: android.os.IBinder getBinder()>
<android.graphics.Paint: boolean isSubpixelText()>
<android.app.ActivityThread$ApplicationThread: void scheduleCrash(java.lang.String)>
<android.webkit.WebView: void nativeUseHardwareAccelSkia(boolean)>
<android.media.RemoteControlClient: void access$1800(android.media.RemoteControlClient,android.media.IRemoteControlDisplay)>
<android.view.ViewDebug: boolean isRequestedView(android.view.View,java.lang.String,int)>
<android.widget.TextView: android.content.Context access$1400(android.widget.TextView)>
<android.preference.DialogPreference: java.lang.CharSequence getPositiveButtonText()>
<Wrapper_android_graphics_Point: void test_android_graphics_Point()>
<android.webkit.CallbackProxy$5: void <init>(android.webkit.CallbackProxy,android.webkit.JsResult)>
<com.android.server.wm.InputManager: boolean hasKeys(int,int,int[],boolean[])>
<android.net.NetworkTemplate: void <clinit>()>
<com.android.server.NotificationManagerService$ToastRecord: void update(int)>
<android.media.AudioManager: void unregisterAudioFocusListener(android.media.AudioManager$OnAudioFocusChangeListener)>
<com.android.server.ThrottleService: int access$900(com.android.server.ThrottleService)>
<android.telephony.gsm.SmsMessage: java.lang.String getOriginatingAddress()>
<android.app.FragmentManagerImpl$5: void <init>(android.app.FragmentManagerImpl,android.view.ViewGroup,android.view.View,android.app.Fragment)>
<android.ddm.DdmHandleHello: void register()>
<android.view.textservice.SpellCheckerSubtype: boolean equals(java.lang.Object)>
<com.android.internal.widget.LockPatternView$Cell: int getColumn()>
<com.android.internal.telephony.ApnContext: boolean isDisconnected()>
<com.android.internal.util.AsyncChannel$AsyncChannelConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<android.database.CursorWrapper: android.database.Cursor getWrappedCursor()>
<android.security.SystemKeyStore: java.io.File getKeyFile(java.lang.String)>
<android.bluetooth.BluetoothProfileState$PendingCommandState: void dispatchMessage(android.os.Message)>
<android.view.ViewConfiguration: long getZoomControlsTimeout()>
<android.text.format.Time: boolean nativeParse3339(java.lang.String)>
<android.graphics.Camera: void applyToCanvas(android.graphics.Canvas)>
<android.animation.AnimatorSet: android.animation.Animator clone()>
<android.widget.SimpleExpandableListAdapter: boolean isChildSelectable(int,int)>
<android.view.InputQueue$FinishedCallback: void finished(boolean)>
<android.view.GLES20Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)>
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: boolean getShowDefaultActivity()>
<android.widget.ProgressBar: android.graphics.drawable.Drawable getIndeterminateDrawable()>
<android.net.NetworkInfo: android.net.NetworkInfo$State access$002(android.net.NetworkInfo,android.net.NetworkInfo$State)>
<com.android.internal.util.FastXmlSerializer: void startDocument(java.lang.String,java.lang.Boolean)>
<android.os.RemoteCallback: void <clinit>()>
<android.renderscript.Element: android.renderscript.Element U32_2(android.renderscript.RenderScript)>
<android.renderscript.RenderScript: void rsnObjDestroy(int,int)>
<android.content.pm.ManifestDigest$1: java.lang.Object[] newArray(int)>
<android.hardware.GeomagneticField: float[][] computeSchmidtQuasiNormFactors(int)>
<android.net.Uri$HierarchicalUri: java.lang.String getAuthority()>
<android.filterfw.core.VertexFrame: int getVboId()>
<com.android.server.wm.ScreenRotationAnimation: void kill()>
<android.widget.RemoteViews: void setOnClickPendingIntent(int,android.app.PendingIntent)>
<android.view.animation.ScaleAnimation: float resolveScale(float,int,int,int,int)>
<android.speech.SpeechRecognizer$InternalListener: void onEvent(int,android.os.Bundle)>
<android.mtp.MtpDevice: android.mtp.MtpObjectInfo getObjectInfo(int)>
<android.view.textservice.TextInfo$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.widget.RemoteViews: void setString(int,java.lang.String,java.lang.String)>
<Wrapper_android_graphics_PorterDuffXfermode: void test_android_graphics_PorterDuffXfermode()>
<android.view.ViewDebug: void trace(android.view.View,android.view.ViewDebug$RecyclerTraceType,int[])>
<android.view.View: int[] mergeDrawableStates(int[],int[])>
<android.webkit.WebView$InvokeListBox$MyArrayListAdapter: boolean isEnabled(int)>
<android.app.backup.RestoreSession$RestoreObserverWrapper$1: void handleMessage(android.os.Message)>
<android.graphics.drawable.AnimatedRotateDrawable: boolean isStateful()>
<android.net.wifi.WifiStateMachine: void access$10600(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<GenerationGG: android.view.ViewTreeObserver$OnGlobalLayoutListener get_androidviewViewTreeObserver__OnGlobalLayoutListener()>
<com.android.server.connectivity.Tethering: android.net.INetworkStatsService access$2200(com.android.server.connectivity.Tethering)>
<android.nfc.NfcAdapter: void enforceResumed(android.app.Activity)>
<android.net.http.AndroidHttpClient: void disableCurlLogging()>
<android.graphics.Canvas: android.graphics.DrawFilter getDrawFilter()>
<android.app.WallpaperInfo: java.lang.String getServiceName()>
<android.media.AudioRecord: void stop()>
<com.android.internal.telephony.AdnRecordCache: void clearUserWriters()>
<GenerationGG: android.database.CursorWrapper get_androiddatabaseCursorWrapper()>
<GenerationGG: android.util.DisplayMetrics get_androidutilDisplayMetrics()>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccSmsInterfaceManager getIccSmsInterfaceManager()>
<android.net.NetworkIdentity: java.lang.String toString()>
<com.android.internal.telephony.gsm.SpnOverride: java.lang.String getSpn(java.lang.String)>
<android.database.sqlite.SQLiteProgram: int getUniqueId()>
<java.lang.Object: boolean onKeyUp(int,android.view.KeyEvent)>
<android.view.inputmethod.BaseInputConnection: int getComposingSpanEnd(android.text.Spannable)>
<com.android.server.StatusBarManagerService$3: void <init>(com.android.server.StatusBarManagerService,android.os.IBinder,int,int)>
<android.opengl.GLSurfaceView$SimpleEGLConfigChooser: void <init>(android.opengl.GLSurfaceView,boolean)>
<android.widget.ZoomControls: void setZoomSpeed(long)>
<android.test.mock.MockPackageManager: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>
<android.net.NetworkStatsHistory: void <init>(long,int,int)>
<android.os.Debug$MemoryInfo: void <init>()>
<com.android.internal.view.menu.MenuBuilder: void setCurrentMenuInfo(android.view.ContextMenu$ContextMenuInfo)>
<com.android.server.ThrottleService: android.app.PendingIntent access$1600(com.android.server.ThrottleService)>
<android.view.GLES20Canvas: int saveLayer(float,float,float,float,android.graphics.Paint,int)>
<android.view.View: void resetResolvedLayoutDirection()>
<java.lang.Object: int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[])>
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPacked(java.lang.String,int,int)>
<android.app.LoadedApk: android.app.IServiceConnection forgetServiceDispatcher(android.content.Context,android.content.ServiceConnection)>
<android.net.NetworkStatsHistory$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.os.FileObserver: void finalize()>
<android.widget.RelativeLayout: void setIgnoreGravity(int)>
<android.content.res.CompatibilityInfo: boolean isScalingRequired()>
<android.graphics.Path: void native_offset(int,float,float)>
<GenerationGG: android.view.textservice.TextServicesManager get_androidviewtextserviceTextServicesManager()>
<android.content.res.CompatibilityInfo$Translator: void translateRectInAppWindowToScreen(android.graphics.Rect)>
<android.location.Address: void setAdminArea(java.lang.String)>
<android.location.Address: boolean access$1302(android.location.Address,boolean)>
<android.graphics.Canvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>
<com.android.internal.widget.ActionBarContextView: void onAnimationStart(android.animation.Animator)>
<android.telephony.gsm.SmsMessage: long getTimestampMillis()>
<android.view.MotionEvent: float nativeGetRawAxisValue(int,int,int,int)>
<android.content.pm.PackageInfo: void <init>()>
<com.android.server.pm.PackageManagerService: void updatePermissionsLPw(java.lang.String,android.content.pm.PackageParser$Package,boolean,boolean,boolean)>
<android.content.AsyncTaskLoader: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getDefaultActivityIcon()>
<android.view.ViewRootImpl$AccessibilityInteractionConnection: void findAccessibilityNodeInfoByAccessibilityId(int,int,android.view.accessibility.IAccessibilityInteractionConnectionCallback,int,long)>
<android.provider.ContactsContract$PhoneLookup: void <clinit>()>
<com.android.internal.telephony.cdma.CdmaCallTracker: void <init>(com.android.internal.telephony.cdma.CDMAPhone)>
<android.webkit.WebIconDatabase$EventHandler: boolean access$1000(android.webkit.WebIconDatabase$EventHandler)>
<android.hardware.usb.UsbEndpoint$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.sip.SipPhone$SipConnection: boolean isIncoming()>
<android.widget.AutoCompleteTextView: android.widget.AdapterView$OnItemClickListener getOnItemClickListener()>
<android.widget.AbsSpinner$RecycleBin: void put(int,android.view.View)>
<android.os.MessageQueue: boolean removeMessages(android.os.Handler,int,java.lang.Object,boolean)>
<android.net.DummyDataStateTracker: boolean isTeardownRequested()>
<android.app.Activity: void setResult(int,android.content.Intent)>
<android.renderscript.Float4: void <init>()>
<android.widget.Toast: void setMargin(float,float)>
<com.android.server.NotificationManagerService: boolean access$1502(com.android.server.NotificationManagerService,boolean)>
<android.widget.RemoteViews: void setScrollPosition(int,int)>
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onRadioOffOrNotAvailable()>
<com.android.internal.telephony.WapPushOverSms$WapPushConnection$1: void <init>(com.android.internal.telephony.WapPushOverSms$WapPushConnection,android.content.ServiceConnection)>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: void writeToParcelLocked(android.os.Parcel)>
<android.animation.AnimatorSet: void setTarget(java.lang.Object)>
<android.webkit.ZoomManager$FocusMovementQueue: void access$700(android.webkit.ZoomManager$FocusMovementQueue,float)>
<android.test.suitebuilder.TestSuiteBuilder: java.lang.String getSuiteName()>
<android.text.method.QwertyKeyListener: java.lang.String toTitleCase(java.lang.String)>
<android.view.GLES20Canvas: boolean nIsAvailable()>
<com.android.internal.widget.ScrollingTabContainerView: void setAllowCollapse(boolean)>
<com.android.server.pm.PackageManagerService: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int)>
<android.test.IsolatedContext: void <init>(android.content.ContentResolver,android.content.Context)>
<com.android.internal.telephony.BaseCommands: void setOnCatCallSetUp(android.os.Handler,int,java.lang.Object)>
<android.bluetooth.BluetoothDeviceProfileState: boolean access$1400(android.bluetooth.BluetoothDeviceProfileState)>
<android.text.style.TextAppearanceSpan: int getTextStyle()>
<android.net.NetworkStatsHistory$DataStreamUtils: long[] readFullLongArray(java.io.DataInputStream)>
<com.android.server.am.ActivityManagerService: void cancelBroadcastTimeoutLocked()>
<android.view.MotionEvent: long getEventTime()>
<com.android.internal.telephony.cdma.CdmaDataConnection: void <init>(com.android.internal.telephony.cdma.CDMAPhone,java.lang.String,int,com.android.internal.telephony.RetryManager)>
<android.widget.TextView: boolean canCut()>
<android.view.GestureDetector$GestureHandler: void <init>(android.view.GestureDetector,android.os.Handler)>
<android.graphics.Bitmap: void setPixel(int,int,int)>
<Wrapper_android_text_style_CharacterStyle: void test_android_text_style_CharacterStyle()>
<android.media.AudioService$ScoClient: int getCount()>
<android.widget.ExpandableListConnector$GroupMetadata: void <clinit>()>
<android.net.DhcpStateMachine: void access$1400(android.net.DhcpStateMachine,com.android.internal.util.IState)>
<android.renderscript.AllocationAdapter: void <init>(int,android.renderscript.RenderScript,android.renderscript.Allocation)>
<android.widget.OverScroller: boolean springBack(int,int,int,int,int,int)>
<android.webkit.WebView: android.content.Context access$10200(android.webkit.WebView)>
<android.view.inputmethod.EditorInfo: void makeCompatible(int)>
<android.graphics.Picture: void <init>()>
<android.app.LoadedApk$ServiceDispatcher: int getFlags()>
<com.android.server.DropBoxManagerService$EntryFile: void <init>(long)>
<android.webkit.AccessibilityInjector$AccessibilityWebContentKeyBinding: java.lang.String toString()>
<Wrapper_android_widget_OverScroller: void test_android_widget_OverScroller()>
<junit.runner.BaseTestRunner: int getPreference(java.lang.String,int)>
<android.widget.ZoomButton$1: void <init>(android.widget.ZoomButton)>
<android.location.Address: java.lang.String access$502(android.location.Address,java.lang.String)>
<android.net.NetworkState: void <init>(android.net.NetworkInfo,android.net.LinkProperties,android.net.LinkCapabilities)>
<GenerationGG: android.view.ViewTreeObserver$OnPreDrawListener get_androidviewViewTreeObserver__OnPreDrawListener()>
<android.text.Layout: int getWidth()>
<android.media.audiofx.EnvironmentalReverb: java.lang.Object access$000(android.media.audiofx.EnvironmentalReverb)>
<com.android.internal.telephony.IccRecords: java.lang.String getMsisdnNumber()>
<android.widget.GridLayout: int getMeasurement(android.view.View,boolean)>
<android.widget.SpellChecker: android.widget.TextView access$100(android.widget.SpellChecker)>
<android.speech.tts.BlockingMediaPlayer: android.os.ConditionVariable access$200(android.speech.tts.BlockingMediaPlayer)>
<android.widget.ExpandableListConnector: boolean areAllItemsEnabled()>
<android.server.BluetoothAdapterStateMachine: void access$3500(android.server.BluetoothAdapterStateMachine,com.android.internal.util.IState)>
<com.android.server.connectivity.Tethering$TetherInterfaceSM$InitialState: void <init>(com.android.server.connectivity.Tethering$TetherInterfaceSM)>
<android.widget.ListView: boolean isDirectChildHeaderOrFooter(android.view.View)>
<android.test.suitebuilder.TestMethod: java.lang.String toString()>
<GenerationGG: android.database.Observable get_androiddatabaseObservable()>
<android.bluetooth.BluetoothHealthAppConfiguration: int hashCode()>
<android.webkit.WebSettings: void setFixedFontFamily(java.lang.String)>
<android.webkit.CacheLoader: boolean setupStreamAndSendStatus()>
<android.util.Xml: void parse(java.io.InputStream,android.util.Xml$Encoding,org.xml.sax.ContentHandler)>
<android.database.ContentObserver: android.database.IContentObserver getContentObserver()>
<com.android.server.net.NetworkIdentitySet: void <init>(java.io.DataInputStream)>
<com.android.internal.util.StateMachine$SmHandler: boolean isQuit(android.os.Message)>
<android.graphics.drawable.LayerDrawable: int getNumberOfLayers()>
<com.android.internal.telephony.gsm.SmsCbHeader: void <init>(byte[])>
<android.util.NoSuchPropertyException: void <init>(java.lang.String)>
<Wrapper_android_util_Base64DataException: void test_android_util_Base64DataException()>
<android.content.res.XmlBlock: int access$1700(int)>
<android.app.Activity: void attach(android.content.Context,android.app.ActivityThread,android.app.Instrumentation,android.os.IBinder,int,android.app.Application,android.content.Intent,android.content.pm.ActivityInfo,java.lang.CharSequence,android.app.Activity,java.lang.String,android.app.Activity$NonConfigurationInstances,android.content.res.Configuration)>
<android.widget.GridLayout$LayoutParams: void setRowSpecSpan(android.widget.GridLayout$Interval)>
<android.app.ActivityManager$RunningAppProcessInfo$1: android.app.ActivityManager$RunningAppProcessInfo createFromParcel(android.os.Parcel)>
<android.content.ContextWrapper: android.content.res.Resources$Theme getTheme()>
<android.server.BluetoothService: boolean createPairedDeviceOutOfBandNative(java.lang.String,int)>
<com.android.server.usb.UsbDeviceManager$UsbHandler$1: void onReceive(android.content.Context,android.content.Intent)>
<android.test.mock.MockContext: java.io.File getExternalCacheDir()>
<android.telephony.SmsMessage: boolean isCphsMwiMessage()>
<android.renderscript.BaseObj: boolean equals(java.lang.Object)>
<android.content.SyncManager: void dumpDayStatistic(java.io.PrintWriter,android.content.SyncStorageEngine$DayStats)>
<android.view.SurfaceView$MyWindow: void <init>(android.view.SurfaceView)>
<android.renderscript.Matrix2f: void multiply(android.renderscript.Matrix2f)>
<android.content.ContextWrapper: java.lang.String getPackageResourcePath()>
<android.widget.TextView: android.text.method.TransformationMethod getTransformationMethod()>
<com.android.server.accessibility.TouchExplorer$PointerTracker: void handleReceivedPointerMove(android.view.MotionEvent)>
<android.webkit.WebView: boolean nativeCacheHitIsPlugin()>
<android.view.ViewGroup: boolean hasFocus()>
<android.app.WallpaperInfo: java.lang.String getPackageName()>
<android.content.BroadcastReceiver: int getResultCode()>
<android.view.View: android.os.IBinder getApplicationWindowToken()>
<GenerationGG: android.text.util.Linkify$TransformFilter get_androidtextutilLinkify__TransformFilter()>
<android.service.wallpaper.WallpaperService$Engine: void onSurfaceCreated(android.view.SurfaceHolder)>
<android.bluetooth.BluetoothDeviceProfileState: void access$2100(android.bluetooth.BluetoothDeviceProfileState,java.lang.String)>
<android.widget.ViewFlipper: int access$400(android.widget.ViewFlipper)>
<android.content.ContentProviderOperation: int describeContents()>
<android.view.InputDevice$1: android.view.InputDevice createFromParcel(android.os.Parcel)>
<android.view.textservice.SpellCheckerSubtype: int describeContents()>
<android.content.res.XmlBlock: int nativeGetAttributeName(int,int)>
<android.net.MobileDataStateTracker: java.lang.String toString()>
<android.os.Parcel: java.io.FileDescriptor internalReadFileDescriptor()>
<android.hardware.SensorManager$ListenerDelegate: java.util.List getSensors()>
<android.renderscript.RenderScript: void nAllocationData1D(int,int,int,int,int[],int)>
<android.widget.SuggestionsAdapter: void setQueryRefinement(int)>
<android.drm.DrmRights: void <init>(java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.android.server.am.ActivityManagerService: com.android.server.am.ProcessRecord newProcessRecordLocked(android.app.IApplicationThread,android.content.pm.ApplicationInfo,java.lang.String)>
<android.webkit.WebView$QueuedTouch: android.webkit.WebView$QueuedTouch set(android.webkit.WebViewCore$TouchEventData)>
<android.net.wifi.WifiStateMachine: android.os.Message access$1500(android.net.wifi.WifiStateMachine)>
<android.app.Instrumentation: void onCreate(android.os.Bundle)>
<android.preference.PreferenceInflater: void <init>(android.content.Context,android.preference.PreferenceManager)>
<android.view.Display: void init(int)>
<android.content.Loader: boolean isStarted()>
<android.net.wifi.WifiStateMachine: java.lang.String access$3902(android.net.wifi.WifiStateMachine,java.lang.String)>
<android.widget.ImageView: android.graphics.Matrix getImageMatrix()>
<android.net.ConnectivityManager: boolean getBackgroundDataSetting()>
<android.view.MotionEvent: void transform(android.graphics.Matrix)>
<android.content.res.XmlBlock$Parser: void finalize()>
<com.android.internal.telephony.Connection: java.lang.String getOrigDialString()>
<android.webkit.WebViewWorker: void <clinit>()>
<com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaLineControlInfoRec: java.lang.String toString()>
<android.widget.ExpandableListConnector: void refreshExpGroupMetadataList(boolean,boolean)>
<com.android.server.am.ActivityManagerService: java.util.List getProcessesInErrorState()>
<android.content.PeriodicSync$1: void <init>()>
<android.database.sqlite.SQLiteOpenHelper: void onOpen(android.database.sqlite.SQLiteDatabase)>
<com.android.internal.telephony.DataConnection: void access$2900(com.android.internal.telephony.DataConnection,android.os.Message)>
<android.app.Activity: android.app.Application getApplication()>
<android.webkit.LoadListener: void setUrl(java.lang.String)>
<android.renderscript.Short2: void <init>(short,short)>
<android.view.DragEvent: android.view.DragEvent obtain()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isSelected()>
<android.view.KeyEvent: void <init>(long,java.lang.String,int,int)>
<android.view.HardwareRenderer$GlRenderer: boolean initialize(android.view.SurfaceHolder)>
<android.widget.RemoteViews: void setByte(int,java.lang.String,byte)>
<android.media.ThumbnailUtils: void <init>()>
<android.net.http.Request: java.lang.String toString()>
<GenerationGG: android.text.style.MaskFilterSpan get_androidtextstyleMaskFilterSpan()>
<com.android.server.EntropyService: void access$000(com.android.server.EntropyService)>
<android.view.ViewConfiguration: int getDoubleTapSlop()>
<android.view.GLES20Canvas: void nDrawLayer(int,int,float,float,int)>
<com.android.internal.telephony.gsm.SIMFileHandler: void <init>(com.android.internal.telephony.gsm.GSMPhone)>
<com.android.internal.telephony.gsm.GsmSmsAddress: boolean isCphsVoiceMessageIndicatorAddress()>
<android.drm.DrmInfo: boolean isValid()>
<android.widget.OverScroller$SplineOverScroller: void setFinalPosition(int)>
<android.text.TextUtils: java.lang.Object[] removeEmptySpans(java.lang.Object[],android.text.Spanned,java.lang.Class)>
<android.media.IRemoteControlDisplay$Stub: android.media.IRemoteControlDisplay asInterface(android.os.IBinder)>
<com.android.internal.view.menu.ActionMenuPresenter$SavedState: void <init>(android.os.Parcel)>
<android.location.Location$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.net.Uri: boolean isAllowed(char,java.lang.String)>
<android.content.res.ObbInfo: void <init>(android.os.Parcel)>
<android.webkit.WebHistoryItem: void <init>(byte[])>
<android.view.inputmethod.InputMethodSubtype: java.lang.String getExtraValue()>
<android.net.LocalSocketImpl: java.lang.Object access$200(android.net.LocalSocketImpl)>
<android.widget.ArrayAdapter: void <init>(android.content.Context,int,int,java.lang.Object[])>
<android.text.TextDirectionHeuristics$TextDirectionHeuristicInternal: boolean defaultIsRtl()>
<android.app.SearchableInfo$ActionKeyInfo: java.lang.String getSuggestActionMsgColumn()>
<android.webkit.ZoomManager: android.view.ScaleGestureDetector getMultiTouchGestureDetector()>
<android.net.wifi.WifiConfigStore: boolean enableNetworkWithoutBroadcast(int,boolean)>
<com.android.internal.os.HandlerCaller$MyHandler: void <init>(com.android.internal.os.HandlerCaller,android.os.Looper)>
<android.util.JsonWriter: void setLenient(boolean)>
<android.graphics.drawable.AnimationDrawable: void stop()>
<android.widget.TextView$EasyEditPopupWindow: int getVerticalLocalPosition(int)>
<android.hardware.usb.UsbConstants: void <init>()>
<android.webkit.URLUtil: java.lang.String parseContentDisposition(java.lang.String)>
<android.test.ViewAsserts: void assertVerticalCenterAligned(android.view.View,android.view.View)>
<android.webkit.WebChromeClient: boolean onJsPrompt(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String,android.webkit.JsPromptResult)>
<android.app.ActivityManagerProxy: android.os.IBinder asBinder()>
<android.telephony.ServiceState$1: void <init>()>
<android.net.LinkCapabilities: void <init>(android.net.LinkCapabilities)>
<android.renderscript.Matrix3f: void transpose()>
<com.android.internal.telephony.sip.SipPhoneBase: java.lang.String getVoiceMailNumber()>
<android.view.textservice.SpellCheckerSession$SpellCheckerSessionListenerImpl: void <init>(android.os.Handler)>
<android.telephony.PhoneNumberUtils: boolean isTwoToNine(char)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$WaitForUserActionState: void enter()>
<android.os.FileUtils: int getPermissions(java.lang.String,int[])>
<android.graphics.Paint: float getTextRunAdvances(char[],int,int,int,int,int,float[],int,int)>
<android.webkit.WebViewCore: void access$5600(android.webkit.WebViewCore,int)>
<android.widget.TextView: android.text.method.MovementMethod getMovementMethod()>
<android.speech.tts.ITextToSpeechService$Stub: android.os.IBinder asBinder()>
<android.content.pm.UserInfo: void <init>(android.os.Parcel)>
<android.net.NetworkInfo: boolean isRoaming()>
<android.app.PendingIntent: void writeToParcel(android.os.Parcel,int)>
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.Connection$PostDialState getPostDialState()>
<android.content.pm.PackageStats$1: android.content.pm.PackageStats createFromParcel(android.os.Parcel)>
<android.content.IntentSender: java.lang.String toString()>
<android.os.Handler$MessengerImpl: void send(android.os.Message)>
<com.android.internal.telephony.sip.SipPhone: android.telephony.ServiceState getServiceState()>
<android.net.wifi.ScanResult$1: java.lang.Object[] newArray(int)>
<com.android.server.am.ActivityManagerService: void access$200(com.android.server.am.ActivityManagerService,boolean)>
<android.location.Address: java.lang.String getFeatureName()>
<android.preference.Preference: void setOrder(int)>
<com.android.internal.widget.ActionBarContainer: void setPrimaryBackground(android.graphics.drawable.Drawable)>
<android.widget.GridLayout: int getDefaultMargin(android.view.View,boolean,boolean,boolean)>
<android.view.animation.DecelerateInterpolator: float getInterpolation(float)>
<android.widget.TableRow: void initTableRow()>
<com.android.server.wm.InputManager: void nativeSetFocusedApplication(com.android.server.wm.InputApplicationHandle)>
<android.os.Parcel: void recycle()>
<java.lang.Object: int getPosition()>
<android.bluetooth.BluetoothDeviceProfileState: void access$8000(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.app.BackStackRecord: android.app.FragmentTransaction show(android.app.Fragment)>
<android.database.sqlite.DatabaseConnectionPool: void <clinit>()>
<android.test.ClassPathPackageInfo: void <init>(android.test.ClassPathPackageInfoSource,java.lang.String,java.util.Set,java.util.Set)>
<android.graphics.drawable.StateListDrawable: int getStateDrawableIndex(int[])>
<com.android.server.net.NetworkPolicyManagerService$3: void <init>(com.android.server.net.NetworkPolicyManagerService)>
<android.content.ContentService$ObserverNode$ObserverEntry: void dumpLocked(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[],java.lang.String,java.lang.String,android.util.SparseIntArray)>
<android.widget.PopupWindow: int getInputMethodMode()>
<com.android.internal.telephony.RetryManager: boolean configure(int,int,int)>
<android.view.GLES20RecordingCanvas: void setNextPoolable(java.lang.Object)>
<Wrapper_android_os_ParcelFormatException: void test_android_os_ParcelFormatException()>
<android.widget.AbsListView: int getTopPaddingOffset()>
<DumbClass: void DumbMethod75()>
<android.graphics.drawable.ColorDrawable$ColorState: void <init>(android.graphics.drawable.ColorDrawable$ColorState)>
<android.graphics.drawable.LayerDrawable: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<android.os.Parcel: void <clinit>()>
<GenerationGG: android.webkit.WebIconDatabase$IconListener get_androidwebkitWebIconDatabase__IconListener()>
<android.accounts.AccountAuthenticatorCache: android.content.pm.RegisteredServicesCache$ServiceInfo getServiceInfo(android.accounts.AuthenticatorDescription)>
<android.widget.TableLayout: void requestLayout()>
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getToServiceId()>
<android.renderscript.FieldPacker: void addF32(float)>
<Wrapper_android_text_style_AlignmentSpan: void test_android_text_style_AlignmentSpan()>
<android.provider.CallLog: void <clinit>()>
<android.view.MotionEvent$PointerProperties: android.view.MotionEvent$PointerProperties[] createArray(int)>
<android.os.Parcel$1: void <init>()>
<android.os.Message: void setData(android.os.Bundle)>
<GenerationGG: android.database.sqlite.SQLiteStatement get_androiddatabasesqliteSQLiteStatement()>
<android.graphics.Color: int rgb(int,int,int)>
<android.webkit.WebView$TouchEventQueue: void recycleQueuedTouch(android.webkit.WebView$QueuedTouch)>
<android.app.ActivityThread$ResultData: java.lang.String toString()>
<android.view.KeyEvent: int getUnicodeChar(int)>
<android.app.ActivityThread: void requestRelaunchActivity(android.os.IBinder,java.util.List,java.util.List,int,boolean,android.content.res.Configuration,boolean)>
<android.view.animation.Animation: int getZAdjustment()>
<android.view.GestureDetector$SimpleOnGestureListener: boolean onDoubleTapEvent(android.view.MotionEvent)>
<com.android.internal.telephony.PhoneProxy: java.lang.String getLine1Number()>
<android.telephony.ServiceState: void setEmergencyOnly(boolean)>
<android.view.GLES20Canvas: void drawARGB(int,int,int,int)>
<android.bluetooth.BluetoothTetheringDataTracker: void setTeardownRequested(boolean)>
<android.view.MotionEvent: float getYPrecision()>
<android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs: void setNextPoolable(android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs)>
<android.app.FragmentManagerImpl: android.app.Fragment findFragmentByTag(java.lang.String)>
<android.view.GLES20Canvas: boolean nCallDrawGLFunction(int,int)>
<android.test.suitebuilder.TestPredicates: void <clinit>()>
<android.net.EthernetDataTracker: void <clinit>()>
<com.android.internal.telephony.sip.SipPhoneBase: void startRingbackTone()>
<android.graphics.drawable.BitmapDrawable: android.graphics.Shader$TileMode getTileModeY()>
<android.webkit.WebView: android.graphics.Rect nativeFocusCandidateNodeBounds()>
<android.renderscript.RenderScript: void nScriptSetVarV(int,int,byte[])>
<android.animation.AnimatorSet: void playSequentially(java.util.List)>
<android.content.res.AssetManager: int getResourceIdentifier(java.lang.String,java.lang.String,java.lang.String)>
<android.accounts.AccountManagerService: android.accounts.AccountManagerService$MessageHandler access$700(android.accounts.AccountManagerService)>
<android.widget.PopupWindow: void setSoftInputMode(int)>
<android.renderscript.Sampler$Builder: void <init>(android.renderscript.RenderScript)>
<android.test.mock.MockPackageManager: java.util.List queryInstrumentation(java.lang.String,int)>
<android.widget.ExpandableListConnector: void setExpandedGroupMetadataList(java.util.ArrayList)>
<android.test.mock.MockPackageManager: android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName,int)>
<android.net.NetworkStatsHistory: void <clinit>()>
<com.android.server.usb.UsbService: android.hardware.usb.UsbAccessory getCurrentAccessory()>
<android.preference.EditTextPreference$SavedState: void <init>(android.os.Parcelable)>
<android.content.pm.ResolveInfo$1: void <init>()>
<android.location.Location: double access$402(android.location.Location,double)>
<android.view.textservice.SuggestionsInfo: void <init>(int,java.lang.String[],int,int)>
<android.net.wifi.WifiNative: boolean addToBlacklistCommand(java.lang.String)>
<android.accounts.AccountManagerResponse: void <init>(android.accounts.IAccountManagerResponse)>
<android.content.res.ObbInfo: void <init>()>
<android.app.FragmentManagerImpl: void <init>()>
<android.graphics.PathMeasure: boolean native_isClosed(int)>
<android.widget.ShareActionProvider: java.lang.String access$200(android.widget.ShareActionProvider)>
<android.content.OperationApplicationException: void <init>(java.lang.String,int)>
<android.content.SyncResult: void <init>(android.os.Parcel,android.content.SyncResult$1)>
<android.net.http.Headers: java.lang.String getContentEncoding()>
<android.webkit.CookieManager: void removeAllCookie()>
<android.net.NetworkConfig: void <init>(java.lang.String)>
<android.view.InflateException: void <init>(java.lang.String,java.lang.Throwable)>
<Wrapper_android_animation_IntEvaluator: void test_android_animation_IntEvaluator()>
<com.android.server.location.MockProvider: boolean meetsCriteria(android.location.Criteria)>
<android.media.AudioTrack: void release()>
<android.view.View: void setTranslationY(float)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Byte)>
<android.view.GLES20Layer: void <init>()>
<android.net.NetworkState: int describeContents()>
<android.inputmethodservice.InputMethodService$InputMethodSessionImpl: void viewClicked(boolean)>
<android.content.SyncManager$SyncHandler: java.lang.Long access$1300(android.content.SyncManager$SyncHandler)>
<android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodSessionImpl: void <init>(android.inputmethodservice.AbstractInputMethodService)>
<android.text.method.MetaKeyKeyListener: int getActive(java.lang.CharSequence,java.lang.Object,int,int)>
<com.android.server.ThrottleService$DataRecorder: long getPeriodTx(int)>
<android.location.GeocoderParams: java.util.Locale access$102(android.location.GeocoderParams,java.util.Locale)>
<android.widget.DatePicker: void setDate(int,int,int)>
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: android.view.MenuInflater getMenuInflater()>
<android.content.res.CompatibilityInfo: void <init>(android.os.Parcel,android.content.res.CompatibilityInfo$1)>
<android.widget.ActivityChooserModel$ActivityResolveInfo: java.lang.String toString()>
<com.android.server.usb.UsbHostManager: android.os.ParcelFileDescriptor nativeOpenDevice(java.lang.String)>
<com.android.server.wm.InputManager: void nativeMonitor()>
<android.view.View$TransformationInfo: android.graphics.Camera access$700(android.view.View$TransformationInfo)>
<android.app.SearchManager: void stopSearch()>
<com.android.internal.net.VpnConfig: int describeContents()>
<android.webkit.WebStorage: java.util.Map access$400(android.webkit.WebStorage)>
<android.text.TextDirectionHeuristics$TriState: void <clinit>()>
<Wrapper_android_view_animation_BounceInterpolator: void test_android_view_animation_BounceInterpolator()>
<android.util.Slog: int w(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.net.IThrottleManager$Stub: void <init>()>
<android.app.admin.DeviceAdminInfo: java.lang.String getTagForPolicy(int)>
<android.renderscript.RenderScript: int nFontCreateFromAssetStream(java.lang.String,float,int,int)>
<android.test.InstrumentationTestRunner: com.android.internal.util.Predicate getNotAnnotationPredicate(java.lang.String)>
<com.android.internal.telephony.cat.CommandParamsFactory: void <clinit>()>
<com.android.internal.backup.LocalTransport: void <init>(android.content.Context)>
<android.webkit.CookieManager$1: void <init>(android.webkit.CookieManager)>
<android.webkit.WebSettings: int getDefaultFixedFontSize()>
<android.animation.FloatEvaluator: java.lang.Object evaluate(float,java.lang.Object,java.lang.Object)>
<android.view.SurfaceView$MyWindow: void windowFocusChanged(boolean,boolean)>
<android.net.RouteInfo: android.net.RouteInfo makeHostRoute(java.net.InetAddress,java.net.InetAddress)>
<com.android.server.IntentResolver: void removeFilter(android.content.IntentFilter)>
<android.graphics.drawable.shapes.OvalShape: void <init>()>
<com.android.server.pm.PackageManagerService: java.lang.String getRequiredVerifierLPr()>
<android.net.wifi.WifiInfo: java.lang.String access$002(android.net.wifi.WifiInfo,java.lang.String)>
<android.view.TextureView: android.graphics.Bitmap getBitmap(android.graphics.Bitmap)>
<android.net.LocalSocketAddress$Namespace: int getId()>
<android.media.JetPlayer: void loge(java.lang.String)>
<android.telephony.SignalStrength: int getEvdoDbm()>
<android.net.LocalSocket: boolean isClosed()>
<android.accounts.AccountManagerService$DatabaseHelper: void onOpen(android.database.sqlite.SQLiteDatabase)>
<android.media.audiofx.Equalizer: void setBandLevel(short,short)>
<GenerationGG: android.app.DownloadManager$Query get_androidappDownloadManager__Query()>
<GenerationGG: android.widget.Filterable get_androidwidgetFilterable()>
<android.location.Country: int getSource()>
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: java.util.List queryIntent(android.content.Intent,java.lang.String,int)>
<android.widget.SlidingDrawer: boolean access$200(android.widget.SlidingDrawer)>
<android.text.method.BaseMovementMethod: boolean onTrackballEvent(android.widget.TextView,android.text.Spannable,android.view.MotionEvent)>
<com.android.server.am.UriPermissionOwner: void removeWritePermission(com.android.server.am.UriPermission)>
<com.android.internal.app.ResolverActivity: android.content.pm.PackageManager access$200(com.android.internal.app.ResolverActivity)>
<android.net.http.RequestHandle: java.lang.String getMethod()>
<com.android.server.UiModeManagerService$5: void <init>(com.android.server.UiModeManagerService)>
<android.accounts.AccountManager$BaseFutureTask$Response: void <init>(android.accounts.AccountManager$BaseFutureTask)>
<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer$Connection access$802(android.speech.SpeechRecognizer,android.speech.SpeechRecognizer$Connection)>
<android.text.style.DrawableMarginSpan: void chooseHeight(java.lang.CharSequence,int,int,int,int,android.graphics.Paint$FontMetricsInt)>
<com.android.internal.telephony.gsm.UsimPhoneBookManager: int access$102(com.android.internal.telephony.gsm.UsimPhoneBookManager,int)>
<android.test.MoreAsserts: void assertNotEmpty(java.util.Map)>
<android.graphics.Xfermode: void finalizer(int)>
<GenerationGG: android.provider.Settings get_androidproviderSettings()>
<android.filterfw.core.GLEnvironment: void <init>()>
<android.widget.RemoteViews: java.lang.String getPackage()>
<android.view.View: java.lang.String printFlags(int)>
<GenerationGG: android.view.SubMenu get_androidviewSubMenu()>
<android.net.Proxy: void setHttpProxySystemProperty(android.net.ProxyProperties)>
<android.view.animation.Animation$Description: android.view.animation.Animation$Description parseValue(android.util.TypedValue)>
<com.android.internal.telephony.BaseCommands: void registerForIccStatusChanged(android.os.Handler,int,java.lang.Object)>
<com.android.server.PowerManagerService: int access$300(com.android.server.PowerManagerService)>
<android.app.FragmentManagerImpl: void dispatchLowMemory()>
<android.test.mock.MockContext: java.io.File getFilesDir()>
<android.view.accessibility.AccessibilityEvent: void appendRecord(android.view.accessibility.AccessibilityRecord)>
<android.content.res.StringBlock: void <init>(int,boolean)>
<android.graphics.PorterDuffColorFilter: void <init>(int,android.graphics.PorterDuff$Mode)>
<android.view.textservice.SpellCheckerSession$SpellCheckerSessionListenerImpl: boolean isDisconnected()>
<junit.framework.TestCase: void assertEquals(java.lang.String,short,short)>
<Wrapper_android_drm_DrmInfoEvent: void test_android_drm_DrmInfoEvent()>
<android.accessibilityservice.IEventListener$Stub: android.os.IBinder asBinder()>
<android.widget.SlidingDrawer: void lock()>
<android.view.View: void getDrawingRect(android.graphics.Rect)>
<android.widget.TextView$SuggestionsPopupWindow$SuggestionSpanComparator: void <init>(android.widget.TextView$SuggestionsPopupWindow)>
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimImpuLoaded: void onRecordLoaded(android.os.AsyncResult)>
<android.widget.TabHost: void sendAccessibilityEvent(int)>
<android.util.MonthDisplayHelper: void nextMonth()>
<android.renderscript.RSInvalidStateException: void <init>(java.lang.String)>
<com.android.internal.telephony.cat.Item: int describeContents()>
<android.view.animation.AccelerateDecelerateInterpolator: void <init>(android.content.Context,android.util.AttributeSet)>
<android.renderscript.Short4: void <init>(short,short,short,short)>
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: boolean reset()>
<android.net.http.SslError: void <init>(int,android.net.http.SslCertificate,java.lang.String)>
<android.preference.PreferenceManager: void <init>(android.content.Context)>
<android.filterfw.core.GLFrame: boolean nativeDetachTexFromFbo()>
<com.android.internal.widget.ScrollingTabContainerView: void onConfigurationChanged(android.content.res.Configuration)>
<android.webkit.WebViewCore: void resumePriority()>
<com.android.server.ThrottleService: android.app.AlarmManager access$1700(com.android.server.ThrottleService)>
<android.view.ViewGroup: void resetResolvedLayoutDirection()>
<android.opengl.Matrix: void multiplyMV(float[],int,float[],int,float[],int)>
<android.app.FragmentManagerImpl: void removeOnBackStackChangedListener(android.app.FragmentManager$OnBackStackChangedListener)>
<com.android.server.PowerManagerService: void access$4400(com.android.server.PowerManagerService,int,int)>
<android.test.mock.MockPackageManager: void removePermission(java.lang.String)>
<android.webkit.CertTool: java.lang.String getCertType(java.lang.String)>
<android.view.animation.Animation: void setFillAfter(boolean)>
<android.telephony.PhoneNumberUtils: boolean compare(java.lang.String,java.lang.String)>
<com.android.server.wm.InputManager: void nativeUnregisterInputChannel(android.view.InputChannel)>
<android.graphics.LinearGradient: void <init>(float,float,float,float,int[],float[],android.graphics.Shader$TileMode)>
<android.view.View: int getId()>
<GenerationGG: android.test.AndroidTestRunner get_androidtestAndroidTestRunner()>
<com.android.internal.telephony.cat.CommandParamsFactory$1: void <clinit>()>
<android.content.res.StringBlock$StyleIDs: int access$702(android.content.res.StringBlock$StyleIDs,int)>
<android.widget.ArrayAdapter: java.util.ArrayList access$100(android.widget.ArrayAdapter)>
<android.webkit.ByteArrayBuilder: void processPoolLocked()>
<android.webkit.ZoomControlEmbedded: void <init>(android.webkit.ZoomManager,android.webkit.WebView)>
<android.net.sip.SipAudioCall: void <init>(android.content.Context,android.net.sip.SipProfile)>
<GenerationGG: org.apache.http.client.methods.HttpUriRequest get_orgapachehttpclientmethodsHttpUriRequest()>
<android.net.DummyDataStateTracker: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>
<android.view.View: android.view.animation.Animation getAnimation()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void finalize()>
<android.view.View$AccessibilityDelegate: void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent)>
<android.content.pm.IPackageMoveObserver$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.internal.telephony.SMSDispatcher: void <clinit>()>
<android.nfc.tech.Ndef: java.lang.String getType()>
<android.test.mock.MockPackageManager: boolean hasSystemFeature(java.lang.String)>
<com.android.internal.util.StateMachine$SmHandler: void setDbg(boolean)>
<com.android.server.AlarmManagerService: int access$1410(com.android.server.AlarmManagerService)>
<android.view.GLES20RecordingCanvas: void recycle()>
<android.os.StrictMode$StrictModeCustomViolation: void <init>(int,java.lang.String)>
<android.media.MediaRecorder$EventHandler: void handleMessage(android.os.Message)>
<android.widget.BaseAdapter: boolean hasStableIds()>
<android.content.pm.ManifestDigest$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.server.ThrottleService: void <clinit>()>
<android.text.DynamicLayout: void <clinit>()>
<android.media.audiofx.Virtualizer: void setProperties(android.media.audiofx.Virtualizer$Settings)>
<java.lang.Object: java.lang.String getString(int)>
<android.widget.AdapterViewAnimator$SavedState$1: java.lang.Object[] newArray(int)>
<com.android.server.wm.WindowManagerService: int getAppOrientation(android.view.IApplicationToken)>
<android.net.NetworkStats$Entry: java.lang.String toString()>
<android.widget.ZoomButtonsController: android.view.View access$300(android.widget.ZoomButtonsController)>
<android.view.animation.Transformation: void printShortString(java.io.PrintWriter)>
<Wrapper_android_util_SparseArray: void test_android_util_SparseArray()>
<android.widget.TextView: boolean access$1700(android.widget.TextView)>
<android.net.wifi.WifiStateMachine: void access$7000(android.net.wifi.WifiStateMachine,android.net.NetworkInfo$DetailedState)>
<android.os.MessageQueue: void <init>()>
<android.content.Context: android.content.res.TypedArray obtainStyledAttributes(int[])>
<com.android.server.net.NetworkStatsService$5: void <init>(com.android.server.net.NetworkStatsService)>
<com.android.internal.view.menu.MenuPopupHelper$ExpandedIndexObserver: void <init>(com.android.internal.view.menu.MenuPopupHelper,com.android.internal.view.menu.MenuPopupHelper$1)>
<com.android.internal.telephony.gsm.SIMRecords: void loge(java.lang.String)>
<android.media.AudioService: java.lang.Object access$5400(android.media.AudioService)>
<android.text.SpannableStringInternal: java.lang.String toString()>
<com.android.internal.view.BaseIWindow: void dispatchGetNewSurface()>
<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int)>
<android.app.ITransientNotification$Stub$Proxy: android.os.IBinder asBinder()>
<android.widget.AdapterView: android.view.View getEmptyView()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimLiLoaded: java.lang.String getEfName()>
<android.webkit.HTML5VideoViewProxy: void nativeOnPrepared(int,int,int,int)>
<android.view.GLES20Canvas: void drawColor(int)>
<android.widget.ExpandableListConnector: boolean isGroupExpanded(int)>
<android.media.audiofx.PresetReverb$Settings: void <init>()>
<android.widget.RelativeLayout$LayoutParams: int access$402(android.widget.RelativeLayout$LayoutParams,int)>
<android.widget.TimePicker$3: void <init>(android.widget.TimePicker)>
<android.graphics.RectF: boolean intersects(android.graphics.RectF,android.graphics.RectF)>
<com.android.internal.telephony.IccPhoneBookInterfaceManager: void checkThread()>
<android.speech.tts.SynthesisMessageParams: void clearBuffers()>
<com.android.server.TextServicesManagerService: java.util.HashMap access$100(com.android.server.TextServicesManagerService)>
<android.database.MergeCursor$1: void onInvalidated()>
<android.location.Address: void <clinit>()>
<android.widget.Scroller: void abortAnimation()>
<android.view.View: int getPaddingLeft()>
<android.widget.TextView: android.content.Context access$4200(android.widget.TextView)>
<android.drm.DrmInfoRequest: java.lang.String getMimeType()>
<android.webkit.WebViewCore: boolean nativeFocusBoundsChanged()>
<android.net.wifi.WifiStateMachine: void access$5500(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.os.StrictMode: java.lang.ThreadLocal access$700()>
<android.test.InstrumentationTestCase: void <init>()>
<android.net.wifi.WifiStateMachine: void startWps(android.os.Messenger,android.net.wifi.WpsInfo)>
<com.android.internal.telephony.cdma.RuimPhoneBookInterfaceManager: void dispose()>
<android.database.ContentObserver: boolean deliverSelfNotifications()>
<com.android.server.pm.PackageManagerService: void scheduleWriteStoppedPackagesLocked()>
<com.android.server.pm.PackageSignatures: void writeXml(org.xmlpull.v1.XmlSerializer,java.lang.String,java.util.ArrayList)>
<android.view.GestureDetector: android.view.MotionEvent access$000(android.view.GestureDetector)>
<com.android.server.am.ActivityManagerService: int getLRURecordIndexForAppLocked(android.app.IApplicationThread)>
<android.content.pm.PackageInfo$1: android.content.pm.PackageInfo[] newArray(int)>
<junit.framework.TestCase: void assertFalse(boolean)>
<android.widget.TextView: android.widget.TextView$SelectionModifierCursorController access$5200(android.widget.TextView)>
<android.graphics.drawable.GradientDrawable$GradientState: float access$402(android.graphics.drawable.GradientDrawable$GradientState,float)>
<android.webkit.WebView: int nativeMoveGeneration()>
<android.gesture.GestureStroke: java.lang.Object clone()>
<android.content.res.Configuration: void <init>(android.content.res.Configuration)>
<android.content.SyncManager$1: void <init>(android.content.SyncManager)>
<android.util.Base64InputStream: void <init>(java.io.InputStream,int,boolean)>
<android.app.WallpaperInfo: void dump(android.util.Printer,java.lang.String)>
<android.widget.TextView: int access$4000(android.widget.TextView)>
<GenerationGG: android.content.pm.FeatureInfo get_androidcontentpmFeatureInfo()>
<GenerationGG: android.graphics.PaintFlagsDrawFilter get_androidgraphicsPaintFlagsDrawFilter()>
<android.accounts.AccountManagerService$4: void <init>(android.accounts.AccountManagerService,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,java.lang.String,java.lang.String[],android.os.Bundle,java.lang.String)>
<com.android.server.am.ActivityManagerService: void addProcessToGcListLocked(com.android.server.am.ProcessRecord)>
<android.net.wifi.WifiStateMachine: android.net.DhcpInfo syncGetDhcpInfo()>
<com.android.server.am.BatteryStatsService: void dumpHelp(java.io.PrintWriter)>
<com.android.internal.util.StateMachine: java.lang.String getName()>
<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int)>
<android.graphics.Canvas: int native_saveLayerAlpha(int,float,float,float,float,int,int)>
<android.drm.DrmManagerClient$EventHandler: void <init>(android.drm.DrmManagerClient,android.os.Looper)>
<android.content.res.XmlBlock: void <init>(android.content.res.AssetManager,int)>
<android.view.View: int getVerticalScrollbarWidth()>
<android.widget.RadioGroup: android.widget.LinearLayout$LayoutParams generateDefaultLayoutParams()>
<android.view.MotionEvent: float getRawX()>
<android.nfc.tech.NfcV: android.nfc.Tag getTag()>
<android.os.Process: void sendSignal(int,int)>
<GenerationGG: android.content.ComponentName[] get_androidcontentComponentName_ARRAY_()>
<android.content.PeriodicSync: void <init>(android.accounts.Account,java.lang.String,android.os.Bundle,long)>
<android.app.ActivityThread: void unregisterOnActivityPausedListener(android.app.Activity,android.app.OnActivityPausedListener)>
<com.android.internal.telephony.DataConnectionAc: void log(java.lang.String)>
<android.os.StrictMode$ThreadPolicy: void <init>(int)>
<com.android.internal.telephony.cdma.CDMAPhone: void log(java.lang.String)>
<com.android.server.wm.ScreenRotationAnimation: void createRotationMatrix(int,int,int,android.graphics.Matrix)>
<android.view.View: void getLocationInWindow(int[])>
<android.net.wifi.p2p.WifiP2pService: java.lang.String[] access$7700()>
<com.android.internal.view.menu.ActionMenuView: android.widget.LinearLayout$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimImpuLoaded: java.lang.String getEfName()>
<android.content.res.XmlBlock: int nativeGetStringBlock(int)>
<com.android.internal.telephony.gsm.GsmSmsAddress: boolean isCphsVoiceMessageClear()>
<android.content.BroadcastReceiver: boolean isInitialStickyBroadcast()>
<com.android.server.wm.InputManager: int[] getInputDeviceIds()>
<android.content.BroadcastReceiver$PendingResult: java.lang.String getResultData()>
<android.view.ViewDebug: long profileViewOperation(android.view.View,android.view.ViewDebug$ViewOperation)>
<com.android.server.UiModeManagerService$7: void onProviderEnabled(java.lang.String)>
<android.net.NetworkQuotaInfo$1: java.lang.Object[] newArray(int)>
<android.view.ViewRootImpl: int enqueuePendingEvent(java.lang.Object,boolean)>
<android.view.ViewGroup: boolean onInterceptTouchEvent(android.view.MotionEvent)>
<android.content.SyncStatusInfo: void removePeriodicSyncTime(int)>
<android.net.wifi.WifiStateMachine: android.net.DhcpStateMachine access$10302(android.net.wifi.WifiStateMachine,android.net.DhcpStateMachine)>
<com.android.internal.widget.ScrollingTabContainerView$1: void <init>(com.android.internal.widget.ScrollingTabContainerView,android.view.View)>
<android.accounts.AccountManager$AmsTask: void access$500(android.accounts.AccountManager$AmsTask,java.lang.Throwable)>
<android.os.SystemProperties: int native_get_int(java.lang.String,int)>
<android.net.wifi.SupplicantStateTracker: android.os.Message access$700(android.net.wifi.SupplicantStateTracker)>
<android.widget.SlidingDrawer: void moveHandle(int)>
<android.nfc.Tag: void setConnectedTechnology(int)>
<com.android.internal.telephony.IccCardApplication$AppState: boolean isAppNotReady()>
<android.webkit.JWebCoreJavaBridge: void nativeFinalize()>
<android.view.ViewGroup: boolean getChildVisibleRect(android.view.View,android.graphics.Rect,android.graphics.Point)>
<android.widget.RelativeLayout$DependencyGraph$Node$1: void <init>()>
<android.text.StaticLayout: int getEllipsisCount(int)>
<com.android.server.pm.PackageManagerService: boolean verifySignaturesLP(com.android.server.pm.PackageSetting,android.content.pm.PackageParser$Package)>
<android.app.IWallpaperManagerCallback$Stub: android.os.IBinder asBinder()>
<android.net.Uri$HierarchicalUri: java.lang.String getPath()>
<android.bluetooth.BluetoothClass: void <clinit>()>
<android.view.ViewConfiguration: int getScaledEdgeSlop()>
<android.view.textservice.SpellCheckerSubtype: void <init>(android.os.Parcel)>
<android.speech.IRecognitionService$Stub: android.os.IBinder asBinder()>
<android.content.ContentValues: void put(java.lang.String,java.lang.String)>
<com.android.internal.telephony.DataConnection: void <clinit>()>
<android.widget.AbsListView$FlingRunnable: void <init>(android.widget.AbsListView)>
<GenerationGG: android.animation.Keyframe get_androidanimationKeyframe()>
<android.ddm.DdmHandleProfiling: void register()>
<com.android.server.NetworkManagementService: android.net.NetworkStats$Entry getNetworkStatsTethering(java.lang.String,java.lang.String)>
<android.webkit.MimeTypeMap: void <init>()>
<android.webkit.WebView: void recordButtons(android.graphics.Canvas,boolean,boolean,boolean)>
<android.location.Location: float getSpeed()>
<com.android.internal.os.BatteryStatsImpl: boolean isScreenOn()>
<android.speech.SpeechRecognizer$InternalListener: android.speech.RecognitionListener access$1002(android.speech.SpeechRecognizer$InternalListener,android.speech.RecognitionListener)>
<android.database.sqlite.SQLiteDatabase: void lockForced(java.lang.String)>
<android.telephony.SignalStrength: void <init>(int,int,int,int,int,int,int,int,int,int,int,int,boolean)>
<android.net.MailTo: java.lang.String getSubject()>
<android.webkit.WebViewCore: void access$3200(android.webkit.WebViewCore)>
<android.media.AudioTrack: int native_set_position(int)>
<android.database.BulkCursorToCursorAdaptor: android.database.IContentObserver getObserver()>
<android.widget.SearchView: void setOnQueryTextFocusChangeListener(android.view.View$OnFocusChangeListener)>
<Wrapper_android_database_CursorIndexOutOfBoundsException: void test_android_database_CursorIndexOutOfBoundsException()>
<android.media.AudioService: int access$6502(android.media.AudioService,int)>
<android.widget.AbsListView$PositionScroller: void stop()>
<android.app.admin.DevicePolicyManager: void <clinit>()>
<android.app.BackStackRecord: android.app.FragmentTransaction setCustomAnimations(int,int)>
<com.android.internal.telephony.ITelephonyRegistry$Stub: com.android.internal.telephony.ITelephonyRegistry asInterface(android.os.IBinder)>
<android.webkit.WebViewCore: void nativeSetNewStorageLimit(long)>
<android.graphics.drawable.shapes.PathShape: void onResize(float,float)>
<android.telephony.SignalStrength: int hashCode()>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: boolean isConcurrentVoiceAndDataAllowed()>
<android.hardware.Camera$Parameters: java.lang.String flatten()>
<android.preference.PreferenceGroupAdapter: long getItemId(int)>
<android.hardware.GeomagneticField: float getInclination()>
<android.accounts.OperationCanceledException: void <init>()>
<com.android.internal.backup.IBackupTransport$Stub: android.os.IBinder asBinder()>
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setShowAsActionFlags(int)>
<android.widget.BaseExpandableListAdapter: int getChildTypeCount()>
<com.android.internal.telephony.sip.SipPhone: java.lang.String getSipDomain(android.net.sip.SipProfile)>
<android.widget.OverScroller: void startScroll(int,int,int,int,int)>
<android.webkit.WebViewCore: void access$300(android.webkit.WebViewCore,long)>
<android.location.Criteria: boolean isAltitudeRequired()>
<android.webkit.HTML5VideoViewProxy: void nativeOnStopFullscreen(int)>
<com.android.internal.telephony.cat.CommandDetails$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.util.Log: int v(java.lang.String,java.lang.String)>
<GenerationGG: android.text.style.BackgroundColorSpan get_androidtextstyleBackgroundColorSpan()>
<com.android.server.connectivity.Tethering: boolean access$100(com.android.server.connectivity.Tethering)>
<com.android.internal.telephony.IccCard$1: void <init>(com.android.internal.telephony.IccCard)>
<android.renderscript.RenderScript: int rsnAllocationCreateFromBitmap(int,int,int,android.graphics.Bitmap,int)>
<android.test.ClassPathPackageInfo: boolean equals(java.lang.Object)>
<android.text.style.TypefaceSpan: void apply(android.graphics.Paint,java.lang.String)>
<android.content.res.Configuration$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.BaseCommands: void unSetOnNewGsmBroadcastSms(android.os.Handler)>
<android.animation.PropertyValuesHolder$FloatPropertyValuesHolder: void <init>(java.lang.String,android.animation.FloatKeyframeSet)>
<android.net.ProxyProperties$1: android.net.ProxyProperties[] newArray(int)>
<android.animation.LayoutTransition: void setDuration(long)>
<android.net.MailTo: java.util.Map getHeaders()>
<Wrapper_android_gesture_GestureStore: void test_android_gesture_GestureStore()>
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getDeviceId()>
<android.net.wifi.WpsResult: void writeToParcel(android.os.Parcel,int)>
<android.net.wifi.WifiStateMachine: void access$12500(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.drm.DrmInfo: java.util.Iterator keyIterator()>
<android.media.audiofx.BassBoost: void setProperties(android.media.audiofx.BassBoost$Settings)>
<android.graphics.Path: void native_addRect(int,float,float,float,float,int)>
<android.content.pm.IPackageManager$Stub: android.os.IBinder asBinder()>
<android.net.wifi.SupplicantStateTracker: boolean access$600(android.net.wifi.SupplicantStateTracker)>
<android.widget.GridLayout: void requestLayout()>
<android.content.res.XmlBlock$Parser: int getAttributeResourceValue(int,int)>
<com.android.server.LightsService$2: void handleMessage(android.os.Message)>
<android.widget.RemoteViewsAdapter: android.os.Handler access$600(android.widget.RemoteViewsAdapter)>
<android.app.IWallpaperManager$Stub: void <init>()>
<android.server.BluetoothService: void truncateIncomingConnectionFile()>
<android.location.Criteria: void setBearingRequired(boolean)>
<android.telephony.gsm.SmsManager: android.telephony.gsm.SmsManager getDefault()>
<android.net.http.Headers: long getTransferEncoding()>
<android.content.ContentUris: android.net.Uri withAppendedId(android.net.Uri,long)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void log(java.lang.String)>
<android.animation.AnimatorSet$Builder: android.animation.AnimatorSet$Builder before(android.animation.Animator)>
<android.telephony.PhoneStateListener$1: void <init>(android.telephony.PhoneStateListener)>
<android.app.ActivityManager$RecentTaskInfo$1: android.app.ActivityManager$RecentTaskInfo[] newArray(int)>
<android.webkit.WebView: void setLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.os.AsyncTask: void <clinit>()>
<android.content.pm.ActivityInfo$1: android.content.pm.ActivityInfo[] newArray(int)>
<android.inputmethodservice.IInputMethodWrapper$InputMethodSessionCallbackWrapper: void <init>(android.content.Context,com.android.internal.view.IInputMethodCallback)>
<android.server.BluetoothHealthProfileHandler: java.util.HashMap access$600(android.server.BluetoothHealthProfileHandler)>
<com.android.server.am.AppErrorDialog: com.android.server.am.ProcessRecord access$000(com.android.server.am.AppErrorDialog)>
<android.graphics.Paint: boolean isStrikeThruText()>
<android.text.method.WordIterator: void <init>()>
<android.test.mock.MockCursor: boolean isNull(int)>
<com.android.server.pm.PackageSettingBase: void <init>(java.lang.String,java.lang.String,java.io.File,java.io.File,java.lang.String,int,int)>
<android.hardware.usb.UsbDeviceConnection: boolean native_release_interface(int)>
<android.text.MeasuredText: int breakText(int,int,boolean,float)>
<android.widget.GridLayout$5$1: void include(int,int)>
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setEnabled(boolean)>
<android.widget.Toast: void cancel()>
<android.server.BluetoothService: void readIncomingConnectionState()>
<android.webkit.CallbackProxy$4: void <init>(android.webkit.CallbackProxy,android.webkit.JsResult)>
<com.android.internal.telephony.cdma.sms.BearerData: void encodeMsgCount(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)>
<android.os.Parcel: void writeFloatArray(float[])>
<Wrapper_android_graphics_ColorFilter: void test_android_graphics_ColorFilter()>
<android.net.DhcpInfo: java.lang.String toString()>
<com.android.server.pm.PackageManagerService: java.lang.String[] getPackagesForUid(int)>
<android.widget.ActivityChooserModel$HistoricalRecord: boolean equals(java.lang.Object)>
<com.android.server.AlarmManagerService$BroadcastStats: void <init>()>
<android.os.Message: android.os.Message obtain(android.os.Handler,int,int,int)>
<android.content.AsyncQueryHandler: void <clinit>()>
<android.webkit.WebSettings: java.lang.String getDatabasePath()>
<android.view.inputmethod.ExtractedText$1: java.lang.Object[] newArray(int)>
<android.app.Activity: void <clinit>()>
<android.app.SharedPreferencesImpl: void <init>(java.io.File,int)>
<android.renderscript.RenderScript: void nContextBindRootScript(int)>
<com.android.internal.telephony.sip.SipCommandInterface: void sendSMS(java.lang.String,java.lang.String,android.os.Message)>
<android.app.Fragment: android.app.LoaderManager getLoaderManager()>
<android.view.inputmethod.InputMethodInfo: void dump(android.util.Printer,java.lang.String)>
<com.android.server.WifiService$AsyncServiceHandler: void <init>(com.android.server.WifiService,android.os.Looper)>
<com.android.internal.telephony.SmsHeader$PortAddrs: void <init>()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setPremiumRate(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<android.content.pm.ApplicationInfo: void dump(android.util.Printer,java.lang.String)>
<android.content.ClipData$1: android.content.ClipData[] newArray(int)>
<android.webkit.GeolocationPermissions: void clearAll()>
<android.speech.tts.FileSynthesisCallback: int start(int,int,int)>
<android.graphics.NinePatch: boolean isNinePatchChunk(byte[])>
<android.net.wifi.WifiNative: boolean p2pListen()>
<android.media.AudioService$SetModeDeathHandler: android.os.IBinder getBinder()>
<android.hardware.Camera: android.hardware.Camera$AutoFocusCallback access$800(android.hardware.Camera)>
<android.app.NativeActivity: int loadNativeCode(java.lang.String,java.lang.String,android.os.MessageQueue,java.lang.String,java.lang.String,java.lang.String,int,android.content.res.AssetManager,byte[])>
<android.net.Uri$Builder: android.net.Uri$Builder query(java.lang.String)>
<GenerationGG: android.media.audiofx.Equalizer$Settings get_androidmediaaudiofxEqualizer__Settings()>
<android.widget.GridLayout$PackedMap: void <init>(java.lang.Object[],java.lang.Object[],android.widget.GridLayout$1)>
<com.android.internal.os.BatteryStatsImpl: long getScreenOnTime(long,int)>
<android.graphics.drawable.ShapeDrawable: int modulateAlpha(int,int)>
<android.view.GLES20Canvas: int getDisplayListSize(int)>
<DumbClass: void DumbMethod6()>
<android.hardware.usb.UsbDevice: java.lang.String native_get_device_name(int)>
<android.view.ViewGroup: void onViewRemoved(android.view.View)>
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimImpiLoaded: void <init>(com.android.internal.telephony.ims.IsimUiccRecords)>
<android.view.View: android.view.View findViewByAccessibilityIdTraversal(int)>
<android.content.BroadcastReceiver: void setResultData(java.lang.String)>
<android.view.VelocityTracker$1: void onReleased(android.view.VelocityTracker)>
<android.view.VelocityTracker: boolean isPooled()>
<android.preference.TwoStatePreference: void setDisableDependentsState(boolean)>
<com.android.internal.view.InputBindResult: void <clinit>()>
<android.opengl.GLES10: void glColorPointer(int,int,int,java.nio.Buffer)>
<android.os.IRemoteCallback$Stub: android.os.IBinder asBinder()>
<android.service.wallpaper.WallpaperService$WallpaperCommand: void <init>()>
<android.os.storage.StorageVolume$1: java.lang.Object[] newArray(int)>
<android.accessibilityservice.IAccessibilityServiceConnection$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.internal.os.IDropBoxManagerService$Stub: android.os.IBinder asBinder()>
<android.database.sqlite.SQLiteDatabase: java.util.Map getSyncedTables()>
<android.os.Debug$MemoryInfo$1: void <init>()>
<android.widget.MediaController: android.view.WindowManager$LayoutParams access$300(android.widget.MediaController)>
<android.graphics.RectF: void sort()>
<android.database.sqlite.SQLiteDatabase: void deallocCachedSqlStatements()>
<com.android.server.NetworkManagementSocketTagger: int native_deleteTagData(int,int)>
<android.view.View: void postInvalidateDelayed(long,int,int,int,int)>
<android.os.BadParcelableException: void <init>(java.lang.Exception)>
<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator)>
<android.content.res.AssetManager: int readAssetChar(int)>
<android.media.AudioTrack: void setPlaybackPositionUpdateListener(android.media.AudioTrack$OnPlaybackPositionUpdateListener)>
<android.text.style.LeadingMarginSpan$Standard: void <init>(android.os.Parcel)>
<android.view.View: void invalidate()>
<android.content.ContentValues: void put(java.lang.String,java.lang.Long)>
<android.text.style.IconMarginSpan: int getLeadingMargin(boolean)>
<android.view.MotionEvent: void nativeSetAction(int,int)>
<android.webkit.BrowserFrame$ConfigCallback: void <init>(android.view.WindowManager)>
<android.text.style.TextAppearanceSpan: void <init>(java.lang.String,int,int,android.content.res.ColorStateList,android.content.res.ColorStateList)>
<com.android.internal.telephony.cat.CatCmdMessage$1: com.android.internal.telephony.cat.CatCmdMessage[] newArray(int)>
<android.widget.GridLayout: void <clinit>()>
<android.graphics.RectF: void union(float,float)>
<android.text.BoringLayout: int getLineStart(int)>
<android.content.pm.ConfigurationInfo: java.lang.String getGlEsVersion()>
<android.content.ContentResolver: void <init>(android.content.Context)>
<com.android.server.pm.Settings: com.android.server.pm.PackageSetting addPackageLPw(java.lang.String,java.lang.String,java.io.File,java.io.File,java.lang.String,int,int,int)>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime(long)>
<android.content.res.Configuration: boolean isLayoutSizeAtLeast(int)>
<android.net.wifi.NetworkUpdateResult: void <init>(boolean,boolean)>
<android.view.inputmethod.InputMethodSubtype: int getNameResId()>
<com.android.server.location.MockProvider: void enable()>
<com.android.server.UiModeManagerService: boolean isDoingNightMode()>
<com.android.internal.telephony.IccSmsInterfaceManager: byte[] makeSmsRecordData(int,byte[])>
<android.webkit.WebView: boolean shouldDelayChildPressedState()>
<com.android.server.WifiService: java.util.concurrent.atomic.AtomicInteger access$1100(com.android.server.WifiService)>
<android.content.ContentResolver$CursorWrapperInner: void finalize()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: byte[] access$000(com.android.internal.telephony.cdma.CdmaLteUiccRecords)>
<android.view.View: int getTop()>
<android.view.ViewDebug$LooperProfiler: void profile(android.os.Message,long,long,long,long)>
<android.text.style.RelativeSizeSpan: int getSpanTypeId()>
<com.android.server.am.UriPermission: void <init>(int,android.net.Uri)>
<android.view.accessibility.AccessibilityInteractionClient: android.view.accessibility.AccessibilityInteractionClient getInstance()>
<com.android.server.IntentResolver: boolean dump(java.io.PrintWriter,java.lang.String,java.lang.String,java.lang.String,boolean)>
<android.widget.StackView$StackSlider: float viewAlphaInterpolator(float)>
<android.app.NativeActivity: void onLowMemory()>
<android.os.MemoryFile: int native_read(java.io.FileDescriptor,int,byte[],int,int,int,boolean)>
<android.text.method.ScrollingMovementMethod: android.text.method.MovementMethod getInstance()>
<android.util.XmlPullAttributes: void <init>(org.xmlpull.v1.XmlPullParser)>
<android.net.http.Connection: void setCanPersist(org.apache.http.HttpEntity,org.apache.http.ProtocolVersion,int)>
<android.view.GLES20DisplayList: boolean isValid()>
<android.graphics.Bitmap: int nativeHeight(int)>
<com.android.server.location.GeocoderProxy$Connection: void <init>(com.android.server.location.GeocoderProxy)>
<android.content.SyncAdapterType: boolean allowParallelSyncs()>
<com.android.internal.telephony.IPhoneStateListener$Stub: android.os.IBinder asBinder()>
<android.animation.LayoutTransition: long getStagger(int)>
<android.graphics.Rect: void <init>(int,int,int,int)>
<android.app.ContextImpl: java.io.File validateFilePath(java.lang.String,boolean)>
<android.media.AudioTrack: int attachAuxEffect(int)>
<com.android.server.am.UriPermissionOwner: void removeUriPermissionsLocked()>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: void growArray(int,int)>
<android.renderscript.Element: android.renderscript.Element A_8(android.renderscript.RenderScript)>
<android.filterfw.core.NativeFrame: boolean hasNativeAllocation()>
<android.app.backup.SharedPreferencesBackupHelper: void writeNewStateDescription(android.os.ParcelFileDescriptor)>
<android.os.BatteryStats$HistoryItem: int buildStateInt()>
<com.android.server.wm.WindowManagerService: void hideBootMessagesLocked()>
<android.content.pm.ProviderInfo: void <init>(android.content.pm.ProviderInfo)>
<android.os.AsyncTask$1: void <init>()>
<android.os.StatFs: void <init>(java.lang.String)>
<android.os.WorkSource: void <init>(android.os.Parcel)>
<android.gesture.GestureLibrary: void setOrientationStyle(int)>
<android.content.res.Configuration: void writeToParcel(android.os.Parcel,int)>
<android.net.http.HttpAuthHeader: boolean isDigest()>
<android.graphics.Paint: boolean isAntiAlias()>
<android.view.animation.LayoutAnimationController: android.view.animation.Animation getAnimation()>
<android.graphics.Paint: void setFlags(int)>
<GenerationGG: android.net.http.AndroidHttpClient get_androidnethttpAndroidHttpClient()>
<android.content.pm.ProviderInfo$1: android.content.pm.ProviderInfo[] newArray(int)>
<android.os.RecoverySystem: java.util.HashSet getTrustedCerts(java.io.File)>
<android.database.sqlite.SQLiteDatabase: void enableSqlTracing(java.lang.String,short)>
<android.view.MotionEvent: float getHistoricalOrientation(int,int)>
<android.opengl.GLUtils: int native_getInternalFormat(android.graphics.Bitmap)>
<android.os.ParcelFileDescriptor$AutoCloseOutputStream: void close()>
<android.net.NetworkInfo: void setDetailedState(android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>
<android.net.wifi.WifiStateMachine: void clearBlacklist()>
<android.widget.Filter$RequestHandler: void <init>(android.widget.Filter,android.os.Looper)>
<android.animation.AnimatorSet$1: void <init>(android.animation.AnimatorSet,java.util.ArrayList)>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: java.lang.String toString()>
<android.text.style.ForegroundColorSpan: void <init>(android.os.Parcel)>
<Wrapper_android_webkit_WebHistoryItem: void test_android_webkit_WebHistoryItem()>
<android.app.ContextImpl: void <init>()>
<android.text.style.SuperscriptSpan: void writeToParcel(android.os.Parcel,int)>
<android.app.ActivityGroup: java.util.HashMap onRetainNonConfigurationChildInstances()>
<android.media.effect.EffectContext: void release()>
<android.webkit.WebViewCore$EventHub: void transferMessages()>
<android.widget.ListView$ArrowScrollFocusResult: int getAmountToScroll()>
<android.view.Surface$CompatibleCanvas: void getMatrix(android.graphics.Matrix)>
<android.os.AsyncTask: void execute(java.lang.Runnable)>
<com.android.server.PowerManagerService: com.android.server.PowerManagerService$UnsynchronizedWakeLock access$5100(com.android.server.PowerManagerService)>
<android.app.SearchableInfo: int getSettingsDescriptionId()>
<android.widget.AbsListView: int access$1400(android.widget.AbsListView)>
<android.content.pm.IPackageManager$Stub: void <init>()>
<android.view.View$TransformationInfo: android.graphics.Matrix access$802(android.view.View$TransformationInfo,android.graphics.Matrix)>
<android.net.NetworkInfo: int getType()>
<android.database.sqlite.SQLiteDatabase: void closePendingStatements()>
<android.app.IActivityController$Stub$Proxy: void <init>(android.os.IBinder)>
<android.graphics.TableMaskFilter: android.graphics.TableMaskFilter CreateClipTable(int,int)>
<android.opengl.GLSurfaceView: void setRenderMode(int)>
<android.media.audiofx.AudioEffect: short byteArrayToShort(byte[],int)>
<android.hardware.usb.UsbManager: void <init>(android.content.Context,android.hardware.usb.IUsbManager)>
<android.view.View: void onOverScrolled(int,int,boolean,boolean)>
<android.widget.RemoteViews: void setInt(int,java.lang.String,int)>
<android.content.SyncStorageEngine$AccountInfo: void <init>(android.accounts.Account)>
<android.content.pm.ParceledListSlice: void <clinit>()>
<android.widget.TextView: android.graphics.Typeface getTypeface()>
<com.android.internal.telephony.cdma.CdmaCallTracker: android.os.Message obtainCompleteMessage(int)>
<android.os.MemoryFile: void finalize()>
<android.view.TextureView: android.graphics.SurfaceTexture getSurfaceTexture()>
<com.android.internal.os.BatteryStatsImpl: boolean startIteratingHistoryLocked()>
<com.android.server.sip.SipSessionGroup$KeepAliveProcessCallbackProxy$2: void <init>(com.android.server.sip.SipSessionGroup$KeepAliveProcessCallbackProxy,int,java.lang.String)>
<android.net.UrlQuerySanitizer: void <init>(java.lang.String)>
<android.net.wifi.p2p.WifiP2pGroup: void setIsGroupOwner(boolean)>
<com.android.server.sip.SipService: boolean isCallerCreatorOrRadio(com.android.server.sip.SipService$SipSessionGroupExt)>
<android.os.Parcel: double[] createDoubleArray()>
<android.content.pm.InstrumentationInfo: java.lang.String toString()>
<GenerationGG: android.database.DatabaseErrorHandler get_androiddatabaseDatabaseErrorHandler()>
<android.widget.LinearLayout: void setOrientation(int)>
<android.os.FileObserver$ObserverThread: int startWatching(java.lang.String,int,android.os.FileObserver)>
<android.renderscript.ProgramStore$Builder: android.renderscript.ProgramStore$Builder setBlendFunc(android.renderscript.ProgramStore$BlendSrcFunc,android.renderscript.ProgramStore$BlendDstFunc)>
<com.android.internal.widget.ActionBarContextView: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<android.webkit.BrowserFrame: void addJavascriptInterface(java.lang.Object,java.lang.String)>
<android.view.IApplicationToken$Stub$Proxy: android.os.IBinder asBinder()>
<android.view.Display: int getRotation()>
<android.widget.RemoteViews$SetEmptyView: void <init>(android.widget.RemoteViews,android.os.Parcel)>
<com.android.internal.widget.AbsActionBarView$VisibilityAnimListener: void onAnimationCancel(android.animation.Animator)>
<android.os.Environment: java.io.File getExternalStorageAppDataDirectory(java.lang.String)>
<android.net.sip.SipAudioCall: int access$1002(android.net.sip.SipAudioCall,int)>
<com.android.internal.telephony.cdma.sms.CdmaSmsAddress: void <init>()>
<android.test.mock.MockCursor: android.os.Bundle getExtras()>
<android.bluetooth.BluetoothDeviceProfileState$IncomingHid: void <init>(android.bluetooth.BluetoothDeviceProfileState)>
<android.test.mock.MockCursor: long getLong(int)>
<android.speech.tts.TextToSpeechService$SilenceSpeechItem: void stopImpl()>
<android.hardware.usb.UsbDeviceConnection: void close()>
<com.android.internal.os.BatteryStatsImpl: void noteScreenBrightnessLocked(int)>
<android.app.backup.BackupAgent: void attach(android.content.Context)>
<android.graphics.Picture: android.graphics.Picture createFromStream(java.io.InputStream)>
<android.view.InputQueue: android.view.InputChannel getInputChannel()>
<com.android.server.connectivity.Tethering$TetherInterfaceSM$UnavailableState: void <init>(com.android.server.connectivity.Tethering$TetherInterfaceSM)>
<com.android.server.connectivity.Tethering: java.lang.String[] getTetherableUsbRegexs()>
<com.android.internal.app.ActionBarImpl$TabImpl: android.graphics.drawable.Drawable getIcon()>
<android.view.IOnKeyguardExitResult$Stub: android.os.IBinder asBinder()>
<android.webkit.WebViewCore: void sendUpdateTextEntry()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: int intlNumberFormatSize()>
<android.os.RemoteCallbackList: boolean register(android.os.IInterface,java.lang.Object)>
<android.telephony.SignalStrength: int getLevel()>
<android.webkit.HTML5VideoFullScreen: android.view.SurfaceHolder access$302(android.webkit.HTML5VideoFullScreen,android.view.SurfaceHolder)>
<android.speech.tts.PlaybackSynthesisCallback: int done()>
<com.android.internal.statusbar.StatusBarIcon: java.lang.String toString()>
<android.content.pm.FeatureInfo: void <init>(android.os.Parcel,android.content.pm.FeatureInfo$1)>
<android.view.accessibility.AccessibilityRecord: boolean isPassword()>
<android.net.wifi.WifiWatchdogStateMachine$BlacklistedApState: boolean processMessage(android.os.Message)>
<android.app.ActivityThread: android.os.Looper getLooper()>
<android.net.LocalSocket: java.io.OutputStream getOutputStream()>
<com.android.server.UiModeManagerService: android.location.Location access$702(com.android.server.UiModeManagerService,android.location.Location)>
<android.net.NetworkStatsHistory$ParcelUtils: long[] readLongArray(android.os.Parcel)>
<android.net.LocalSocketImpl: void <init>(java.io.FileDescriptor)>
<android.webkit.WebView: void initiateTextFieldDrag(float,float,long)>
<android.mtp.MtpDeviceInfo: java.lang.String getManufacturer()>
<android.graphics.drawable.LayerDrawable$LayerState: int getChangingConfigurations()>
<android.graphics.Path: void native_rQuadTo(int,float,float,float,float)>
<com.android.internal.telephony.cdma.sms.CdmaSmsAddress: java.lang.String filterNumericSugar(java.lang.String)>
<android.app.Service: void onDestroy()>
<com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaT53AudioControlInfoRec: java.lang.String toString()>
<com.android.internal.os.AtomicFile: java.io.FileOutputStream startWrite()>
<com.android.internal.telephony.IccCard$State: void <clinit>()>
<android.app.LoadedApk: java.io.File getDataDirFile()>
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: java.lang.Object newResult(android.content.IntentFilter,int)>
<android.webkit.WebView: void access$000(int)>
<com.android.server.connectivity.Tethering$TetherMasterSM: int access$2800(com.android.server.connectivity.Tethering$TetherMasterSM)>
<com.android.server.LocationManagerService$LpAccuracyComparator: void <init>(com.android.server.LocationManagerService)>
<com.android.internal.telephony.DataConnectionTracker$Activity: void <clinit>()>
<android.webkit.WebSettings: boolean enableSmoothTransition()>
<android.graphics.drawable.ColorDrawable: void draw(android.graphics.Canvas)>
<android.animation.AnimatorSet: android.animation.AnimatorSet$Builder play(android.animation.Animator)>
<android.hardware.Camera: android.hardware.Camera open(int)>
<android.text.LoginFilter$UsernameFilterGMail: boolean isAllowed(char)>
<android.graphics.Canvas: void native_drawPosText(int,char[],int,int,float[],int)>
<android.media.JetPlayer: void native_release()>
<android.content.ComponentName: int describeContents()>
<android.os.storage.IMountShutdownObserver$Stub: android.os.storage.IMountShutdownObserver asInterface(android.os.IBinder)>
<android.view.SurfaceHolder$BadSurfaceTypeException: void <init>(java.lang.String)>
<com.android.server.PowerManagerService: int access$4500(com.android.server.PowerManagerService)>
<com.android.internal.telephony.cat.CallSetupParams: boolean setIcon(android.graphics.Bitmap)>
<android.app.backup.FileBackupHelperBase: void performBackup_checked(android.os.ParcelFileDescriptor,android.app.backup.BackupDataOutput,android.os.ParcelFileDescriptor,java.lang.String[],java.lang.String[])>
<android.telephony.SmsMessage: byte[] getUserData()>
<android.media.audiofx.AudioEffect: int byteArrayToInt(byte[],int)>
<com.android.server.CountryDetectorService$2: void <init>(com.android.server.CountryDetectorService,android.location.CountryListener)>
<com.android.server.am.ActivityStack: void logStartActivity(int,com.android.server.am.ActivityRecord,com.android.server.am.TaskRecord)>
<android.os.PatternMatcher: boolean match(java.lang.String)>
<android.speech.tts.SynthesisRequest: void setSpeechRate(int)>
<android.widget.ProgressBar$RefreshProgressRunnable: void setup(int,int,boolean)>
<com.android.internal.telephony.cat.ToneSettings: int describeContents()>
<android.media.MediaRecorder: void setOnErrorListener(android.media.MediaRecorder$OnErrorListener)>
<android.content.pm.PackageParser$NewPermissionInfo: void <init>(java.lang.String,int,int)>
<android.view.View: android.graphics.drawable.Drawable getBackground()>
<com.android.internal.telephony.cat.CommandDetails: void <clinit>()>
<android.location.Location: float bearingTo(android.location.Location)>
<android.view.KeyCharacterMap: android.view.KeyEvent[] getEvents(char[])>
<android.animation.AnimatorSet: void playSequentially(android.animation.Animator[])>
<android.app.Fragment: android.app.FragmentManager getFragmentManager()>
<android.text.Layout: int getLineVisibleEnd(int)>
<android.view.ViewGroup$MarginLayoutParams: void resolveWithDirection(int)>
<com.android.internal.telephony.DataConnectionTracker: com.android.internal.telephony.DataConnectionTracker$Activity getActivity()>
<android.content.Entity: void addSubValue(android.net.Uri,android.content.ContentValues)>
<android.graphics.drawable.NinePatchDrawable: void computeBitmapSize()>
<com.android.internal.telephony.cdma.CdmaCallTracker: void registerForVoiceCallEnded(android.os.Handler,int,java.lang.Object)>
<android.view.HardwareRenderer$Gl20Renderer: void onPostDraw()>
<android.speech.tts.TextToSpeechService$SilenceSpeechItem: boolean isValid()>
<android.view.MotionEvent: java.lang.String axisToString(int)>
<android.opengl.Matrix: boolean invertM(float[],int,float[],int)>
<android.view.ViewRootImpl$SendWindowContentChangedAccessibilityEvent: void <init>(android.view.ViewRootImpl)>
<GenerationGG: javax.microedition.khronos.opengles.GL get_javaxmicroeditionkhronosopenglesGL()>
<android.media.AudioRecord: int native_read_in_direct_buffer(java.lang.Object,int)>
<android.view.View: int getDrawingCacheBackgroundColor()>
<com.android.internal.os.BatteryStatsImpl$Timer: void <init>(int,java.util.ArrayList)>
<GenerationGG: android.drm.DrmStore get_androiddrmDrmStore()>
<android.widget.PopupWindow: void <init>()>
<android.renderscript.RSRuntimeException: void <init>(java.lang.String)>
<android.hardware.usb.UsbAccessory: int describeContents()>
<com.android.server.am.ActivityManagerService: android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()>
<android.telephony.NeighboringCellInfo: void <init>(int,java.lang.String,int)>
<android.animation.LayoutTransition: long access$400(android.animation.LayoutTransition)>
<android.view.inputmethod.InputMethodManager: void <init>(com.android.internal.view.IInputMethodManager,android.os.Looper)>
<android.drm.DrmRights: java.lang.String getSubscriptionId()>
<com.android.internal.telephony.cat.Tone: com.android.internal.telephony.cat.Tone fromInt(int)>
<com.android.internal.util.State: void enter()>
<com.android.server.PowerManagerService$UnsynchronizedWakeLock: boolean isHeld()>
<android.renderscript.FieldPacker: void skip(int)>
<android.renderscript.RenderScriptGL: int getHeight()>
<GenerationGG: android.os.ParcelFormatException get_androidosParcelFormatException()>
<com.android.server.wm.InputManager: void nativeSetPointerSpeed(int)>
<android.view.WindowManagerImpl: android.view.Display getDefaultDisplay()>
<android.appwidget.AppWidgetManager: void <clinit>()>
<android.view.GLES20Canvas: void nInterrupt(int)>
<android.widget.GridLayout$Axis: int size(int[])>
<android.content.res.Configuration: void <init>()>
<android.speech.tts.AudioPlaybackHandler$ListEntry: void <init>(android.speech.tts.AudioPlaybackHandler,int,android.speech.tts.MessageParams,int,android.speech.tts.AudioPlaybackHandler$1)>
<android.widget.TabWidget: int getChildDrawingOrder(int,int)>
<android.content.AsyncQueryHandler: void startQuery(int,java.lang.Object,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String)>
<com.android.internal.telephony.cat.DisplayTextParams: void <init>(com.android.internal.telephony.cat.CommandDetails,com.android.internal.telephony.cat.TextMessage)>
<android.view.textservice.SpellCheckerSubtype: void writeToParcel(android.os.Parcel,int)>
<android.app.ContextImpl$33: void <init>()>
<android.animation.PropertyValuesHolder: void calculateValue(float)>
<android.widget.TimePicker$SavedState$1: android.widget.TimePicker$SavedState[] newArray(int)>
<GenerationGG: android.location.LocationProvider get_androidlocationLocationProvider()>
<android.view.ViewRootImpl: void unscheduleTraversals()>
<com.android.server.wm.InputWindowHandle: void nativeDispose()>
<android.content.pm.ApplicationInfo: java.lang.String toString()>
<android.view.View: void removeTapCallback()>
<GenerationGG: android.app.Activity get_androidappActivity()>
<android.renderscript.RenderScript: void nContextBindProgramFragment(int)>
<com.android.server.UiModeManagerService$6: void onLocationChanged(android.location.Location)>
<android.graphics.drawable.DrawableContainer$DrawableContainerState: int getChangingConfigurations()>
<android.view.View$PerformClick: void <init>(android.view.View,android.view.View$1)>
<com.android.server.IntentResolver: int unregister_mime_types(android.content.IntentFilter,java.lang.String)>
<com.android.server.WifiService$Multicaster: void <init>(com.android.server.WifiService,java.lang.String,android.os.IBinder)>
<android.widget.ImageView: void setMaxWidth(int)>
<android.widget.RemoteViews: void setBoolean(int,java.lang.String,boolean)>
<android.drm.DrmManagerClient: java.lang.String _getOriginalMimeType(int,java.lang.String)>
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: java.util.ArrayList access$300(com.android.internal.telephony.gsm.SimSmsInterfaceManager,java.util.ArrayList)>
<com.android.server.DevicePolicyManagerService: int getMaximumFailedPasswordsForWipe(android.content.ComponentName)>
<android.text.style.StyleSpan: void updateMeasureState(android.text.TextPaint)>
<android.database.sqlite.SQLiteException: void <init>()>
<android.app.NativeActivity: void surfaceCreated(android.view.SurfaceHolder)>
<android.util.JsonReader: java.lang.String nextName()>
<android.content.SyncManager: boolean access$402(android.content.SyncManager,boolean)>
<junit.framework.TestSuite: int countTestCases()>
<com.android.server.wm.WindowManagerService: void getInitialDisplaySize(android.graphics.Point)>
<com.android.internal.telephony.GsmAlphabet: byte[] stringToGsm7BitPackedWithHeader(java.lang.String,byte[],int,int)>
<android.net.rtp.AudioGroup: int getMode()>
<android.webkit.WebSettings: int getTextZoom()>
<com.android.internal.telephony.BaseCommands: void registerForNVReady(android.os.Handler,int,java.lang.Object)>
<android.view.ViewRootImpl$1: void <init>(android.view.ViewRootImpl)>
<android.graphics.BitmapRegionDecoder: android.graphics.BitmapRegionDecoder nativeNewInstance(byte[],int,int,boolean)>
<com.android.internal.telephony.cdma.sms.BearerData: java.lang.String decode7bitAscii(byte[],int,int)>
<android.opengl.GLDebugHelper: javax.microedition.khronos.egl.EGL wrap(javax.microedition.khronos.egl.EGL,int,java.io.Writer)>
<android.graphics.RectF: void printShortString(java.io.PrintWriter)>
<GenerationGG: android.widget.ImageView$ScaleType get_androidwidgetImageView__ScaleType()>
<android.renderscript.FieldPacker: void addU16(android.renderscript.Int3)>
<android.view.ViewGroup$MarginLayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<com.android.server.LocationManagerService$LpAccuracyComparator: void <init>(com.android.server.LocationManagerService,com.android.server.LocationManagerService$1)>
<com.android.server.wm.WindowManagerService: boolean injectInputEventNoWait(android.view.InputEvent)>
<android.test.MoreAsserts: void failNotContains(java.lang.String,java.lang.String,java.lang.String)>
<android.nfc.Tag: int describeContents()>
<android.nfc.NdefRecord$1: android.nfc.NdefRecord[] newArray(int)>
<android.test.TestCaseUtil: junit.framework.Test invokeSuiteMethodIfPossible(java.lang.Class,java.util.Set)>
<android.net.Uri$HierarchicalUri: java.util.List getPathSegments()>
<android.graphics.PaintFlagsDrawFilter: void <init>(int,int)>
<android.mtp.MtpStorageInfo: java.lang.String getDescription()>
<android.graphics.PointF: float length()>
<android.widget.OverScroller$SplineOverScroller: boolean springback(int,int,int)>
<android.view.View: boolean post(java.lang.Runnable)>
<android.net.http.Request: void setBodyProvider(java.io.InputStream,int)>
<android.graphics.drawable.LevelListDrawable$LevelListState: int[] access$000(android.graphics.drawable.LevelListDrawable$LevelListState)>
<android.renderscript.RSSurfaceView: android.renderscript.RenderScriptGL getRenderScriptGL()>
<android.gesture.Instance: float[] spatialSampler(android.gesture.Gesture)>
<android.webkit.WebView: void nativeSetIsScrolling(boolean)>
<com.android.internal.telephony.IccPhoneBookInterfaceManager: void waitForResult(java.util.concurrent.atomic.AtomicBoolean)>
<android.graphics.Bitmap: int getWidth()>
<android.text.method.TextKeyListener: android.text.method.TextKeyListener getInstance(boolean,android.text.method.TextKeyListener$Capitalize)>
<com.android.internal.os.ProcessStats: java.lang.String printCurrentState(long)>
<android.app.ActivityThread$ApplicationThread: void scheduleResumeActivity(android.os.IBinder,boolean)>
<android.hardware.Camera: void getCameraInfo(int,android.hardware.Camera$CameraInfo)>
<android.test.mock.MockCursor: int getType(int)>
<android.content.pm.PackageManager: int getUid(int,int)>
<android.content.pm.VerifierDeviceIdentity$1: android.content.pm.VerifierDeviceIdentity[] newArray(int)>
<android.net.MobileDataStateTracker: android.net.LinkProperties access$600(android.net.MobileDataStateTracker)>
<com.android.server.BackupManagerService$ClearParams: void <init>(com.android.server.BackupManagerService,com.android.internal.backup.IBackupTransport,android.content.pm.PackageInfo)>
<com.android.internal.view.IInputContextCallback$Stub: void <init>()>
<android.widget.TextView$SelectionModifierCursorController: void resetTouchOffsets()>
<android.view.View: boolean hasWindowFocus()>
<com.android.internal.telephony.cat.Item: void <clinit>()>
<android.bluetooth.BluetoothDeviceProfileState: void access$6700(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<com.android.server.am.BroadcastRecord: java.lang.String toString()>
<android.widget.AbsListView$SavedState$1: java.lang.Object[] newArray(int)>
<GenerationGG: android.speech.SpeechRecognizer get_androidspeechSpeechRecognizer()>
<android.app.ContextImpl: int getThemeResId()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String[] getActiveApnTypes()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: java.lang.String access$502(com.android.internal.telephony.cdma.CdmaLteUiccRecords,java.lang.String)>
<com.android.internal.util.HexDump: byte[] hexStringToByteArray(java.lang.String)>
<android.content.pm.ParceledListSlice: int describeContents()>
<android.renderscript.Short3: void <init>()>
<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getDrawable(java.lang.String,int,android.content.pm.ApplicationInfo)>
<android.webkit.WebViewClient: void onReceivedLoginRequest(android.webkit.WebView,java.lang.String,java.lang.String,java.lang.String)>
<android.animation.FloatKeyframeSet: java.lang.Object getValue(float)>
<android.media.AudioTrack: void native_start()>
<Wrapper_android_media_audiofx_Visualizer: void test_android_media_audiofx_Visualizer()>
<com.android.internal.telephony.ServiceStateTracker: void <init>()>
<android.view.ViewConfiguration: int getKeyRepeatDelay()>
<junit.framework.TestCase: void assertTrue(boolean)>
<android.content.res.AssetManager: android.content.res.AssetFileDescriptor openNonAssetFd(java.lang.String)>
<Wrapper_android_net_LocalServerSocket: void test_android_net_LocalServerSocket()>
<android.graphics.Region: int nativeCreateFromParcel(android.os.Parcel)>
<android.os.DropBoxManager$Entry$1: void <init>()>
<android.media.AudioService: void setStreamMute(int,boolean,android.os.IBinder)>
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: void <init>(android.accounts.AccountManager,java.lang.String,java.lang.String,java.lang.String[],android.app.Activity,android.os.Bundle,android.os.Bundle,android.accounts.AccountManagerCallback,android.os.Handler)>
<com.android.internal.telephony.gsm.SimTlv: boolean parseCurrentTlvObject()>
<android.content.IntentFilter$1: android.content.IntentFilter[] newArray(int)>
<android.graphics.Matrix: void mapVectors(float[],int,float[],int,int)>
<com.android.server.location.GpsLocationProvider: void access$500(com.android.server.location.GpsLocationProvider,int,int)>
<android.text.style.SuggestionRangeSpan: void <init>()>
<android.content.SyncResult: void <init>()>
<com.android.i18n.phonenumbers.AsYouTypeFormatter: java.lang.String getFormattingTemplate(java.lang.String,java.lang.String)>
<android.media.audiofx.Equalizer: short getBand(int)>
<android.app.KeyguardManager$1: void <init>(android.app.KeyguardManager,android.app.KeyguardManager$OnKeyguardExitResult)>
<android.widget.AutoCompleteTextView: void performFiltering(java.lang.CharSequence,int)>
<com.android.internal.view.menu.ActionMenuItem: char getNumericShortcut()>
<android.view.ViewRootImpl: android.view.View getView()>
<android.graphics.Canvas: void setScreenDensity(int)>
<android.net.http.HttpConnection: android.net.http.AndroidHttpClientConnection openConnection(android.net.http.Request)>
<com.android.server.am.ActivityStack$2: android.graphics.Bitmap getThumbnail(int)>
<android.view.View: boolean getFilterTouchesWhenObscured()>
<com.android.server.pm.PackageManagerService: android.content.pm.ResolveInfo chooseBestActivity(android.content.Intent,java.lang.String,int,java.util.List)>
<android.accounts.AccountManagerService$Session: void <init>(android.accounts.AccountManagerService,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean)>
<com.android.internal.telephony.BaseCommands: void registerForCallStateChanged(android.os.Handler,int,java.lang.Object)>
<android.webkit.WebHistoryItem: java.lang.Object clone()>
<android.net.wifi.WifiWatchdogStateMachine: android.content.Context access$800(android.net.wifi.WifiWatchdogStateMachine)>
<android.view.ViewGroup: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.graphics.Matrix: boolean native_preScale(int,float,float)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$WaitForWifiDisableState: void enter()>
<android.content.pm.PackageParser$ActivityIntentInfo: void <init>(android.content.pm.PackageParser$Activity)>
<com.android.internal.telephony.Phone$DataState: com.android.internal.telephony.Phone$DataState[] values()>
<GenerationGG: java.lang.StringBuilder get_javalangStringBuilder()>
<android.text.method.DateTimeKeyListener: void <clinit>()>
<com.android.server.BatteryService$Led: void updateLightsLocked()>
<com.android.internal.telephony.gsm.GSMPhone: void notifyDisconnect(com.android.internal.telephony.Connection)>
<android.app.ContextImpl$4: void <init>()>
<android.net.sip.SimpleSessionDescription: void setAttribute(java.lang.String,java.lang.String)>
<com.android.server.wm.InputManager: void nativeSetShowTouches(boolean)>
<android.opengl.GLUtils: java.lang.String getEGLErrorString(int)>
<android.server.BluetoothService: android.util.Pair getIncomingState(java.lang.String)>
<android.content.pm.IPackageInstallObserver$Stub: void <init>()>
<android.net.sip.SipSessionAdapter: void onRinging(android.net.sip.ISipSession,android.net.sip.SipProfile,java.lang.String)>
<android.widget.TextView: int getFadeHeight(boolean)>
<GenerationGG: android.graphics.PixelXorXfermode get_androidgraphicsPixelXorXfermode()>
<android.widget.ListView$FocusSelector: android.widget.ListView$FocusSelector setup(int,int)>
<android.app.SearchDialog$5: void <init>(android.app.SearchDialog)>
<android.content.res.XmlBlock: int access$1600(int)>
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: void <init>(com.android.internal.telephony.cdma.CDMAPhone,com.android.internal.telephony.SMSDispatcher)>
<com.android.internal.app.AlertController$AlertParams: void <init>(android.content.Context)>
<android.view.View: int getScrollX()>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void access$700(com.android.server.connectivity.Tethering$TetherInterfaceSM,boolean)>
<android.server.BluetoothAdapterStateMachine: void log(java.lang.String)>
<android.widget.HorizontalScrollView: int getMaxScrollAmount()>
<android.webkit.BrowserFrame: void removeJavascriptInterface(java.lang.String)>
<com.android.internal.telephony.cat.CatService: void <clinit>()>
<android.app.ApplicationErrorReport$AnrInfo: void <init>(android.os.Parcel)>
<android.webkit.WebSettings: java.lang.String convertObsoleteLanguageCodeToNew(java.lang.String)>
<android.os.storage.StorageEventListener: void onUsbMassStorageConnectionChanged(boolean)>
<android.widget.AbsListView: int getListPaddingBottom()>
<GenerationGG: junit.framework.TestResult get_junitframeworkTestResult()>
<android.test.InstrumentationTestRunner: junit.framework.TestSuite getAllTests()>
<GenerationGG: android.graphics.Color get_androidgraphicsColor()>
<com.android.server.connectivity.Tethering: java.lang.String[] access$3500(com.android.server.connectivity.Tethering)>
<GenerationGG: android.webkit.WebSettings$PluginState get_androidwebkitWebSettings__PluginState()>
<android.app.ActivityGroup: void <init>()>
<android.net.wifi.WifiStateMachine: android.net.wifi.SupplicantStateTracker access$3700(android.net.wifi.WifiStateMachine)>
<com.android.server.am.ActivityManagerService: android.app.ActivityManager$ProcessErrorStateInfo generateProcessError(com.android.server.am.ProcessRecord,int,java.lang.String,java.lang.String,java.lang.String,java.lang.String)>
<com.android.server.location.PassiveProvider: boolean supportsBearing()>
<android.graphics.Paint$Align: void <clinit>()>
<android.webkit.WebSettings: java.lang.String getFixedFontFamily()>
<android.test.ViewAsserts: void assertBottomAligned(android.view.View,android.view.View,int)>
<com.android.internal.telephony.BaseCommands: void setOnNewGsmBroadcastSms(android.os.Handler,int,java.lang.Object)>
<android.location.LocationManager$ListenerTransport$2: void <init>(android.location.LocationManager$ListenerTransport,android.os.Looper,android.location.LocationManager)>
<android.net.rtp.AudioGroup: void finalize()>
<android.drm.DrmSupportInfo: boolean equals(java.lang.Object)>
<android.webkit.WebView$PackageListener: void <init>()>
<android.app.Activity: boolean onOptionsItemSelected(android.view.MenuItem)>
<com.android.internal.net.LegacyVpnInfo: void <init>()>
<android.widget.BaseExpandableListAdapter: void onGroupExpanded(int)>
<android.hardware.SensorManager$1: void <init>(android.hardware.SensorManager)>
<android.webkit.BrowserFrame: boolean documentHasImages()>
<android.appwidget.AppWidgetProvider: void onDisabled(android.content.Context)>
<android.util.LruCache: int hitCount()>
<android.util.AndroidRuntimeException: void <init>()>
<android.widget.VideoView: android.media.MediaPlayer access$700(android.widget.VideoView)>
<android.view.GLES20Canvas: boolean clipRect(int,int,int,int)>
<com.android.server.pm.PackageManagerService: boolean isUpdatedSystemApp(android.content.pm.PackageParser$Package)>
<android.server.BluetoothEventLoop: android.server.BluetoothService access$000(android.server.BluetoothEventLoop)>
<com.android.internal.util.AsyncChannel$SyncMessenger: void <init>()>
<android.app.FragmentBreadCrumbs: android.app.FragmentManager$BackStackEntry getPreEntry(int)>
<android.view.VelocityTracker: float getYVelocity()>
<java.lang.Object: android.view.MenuItem add(int,int,int,java.lang.CharSequence)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: java.lang.String getInternationalPrefix()>
<android.webkit.ZoomManager: float access$1300(android.webkit.ZoomManager)>
<android.widget.GridLayout: void onViewRemoved(android.view.View)>
<android.widget.TableLayout$PassThroughHierarchyChangeListener: android.view.ViewGroup$OnHierarchyChangeListener access$102(android.widget.TableLayout$PassThroughHierarchyChangeListener,android.view.ViewGroup$OnHierarchyChangeListener)>
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: com.android.internal.os.BatteryStatsImpl$StopwatchTimer readTimerFromParcel(java.util.ArrayList,android.os.Parcel)>
<android.net.wifi.WifiWatchdogStateMachine: void access$1800(android.net.wifi.WifiWatchdogStateMachine,com.android.internal.util.IState)>
<android.media.audiofx.EnvironmentalReverb: void setReverbLevel(short)>
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: java.util.List queryIntent(android.content.Intent,java.lang.String,boolean)>
<android.app.ListFragment$1: void <init>(android.app.ListFragment)>
<android.nfc.NdefRecord: void <init>(short,byte[],byte[],byte[])>
<android.hardware.usb.UsbEndpoint: int getDirection()>
<com.android.internal.view.menu.ActionMenuItemView: boolean prefersCondensedTitle()>
<android.widget.ExpandableListView: void setGroupIndicator(android.graphics.drawable.Drawable)>
<android.server.BluetoothAdapterStateMachine: int access$4000(android.server.BluetoothAdapterStateMachine)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setLeadingDigits(java.lang.String)>
<android.view.KeyEvent: char getDisplayLabel()>
<android.view.textservice.SpellCheckerSubtype$1: android.view.textservice.SpellCheckerSubtype createFromParcel(android.os.Parcel)>
<android.view.IWindowManager$Stub: android.view.IWindowManager asInterface(android.os.IBinder)>
<android.webkit.WebViewCore$3: void onReceiveValue(java.lang.Object)>
<android.text.method.BaseMovementMethod: int getBottomLine(android.widget.TextView)>
<android.database.DatabaseUtils: void <clinit>()>
<android.renderscript.Allocation: void copyFromUnchecked(float[])>
<android.net.NetworkQuotaInfo$1: android.net.NetworkQuotaInfo[] newArray(int)>
<android.test.MoreAsserts: java.util.regex.MatchResult assertContainsRegex(java.lang.String,java.lang.String)>
<com.android.internal.telephony.Phone$DataActivityState: void <clinit>()>
<android.webkit.WebViewFragment: void onDestroyView()>
<android.widget.ViewFlipper: boolean access$300(android.widget.ViewFlipper)>
<android.preference.MultiSelectListPreference: int findIndexOfValue(java.lang.String)>
<android.test.MoreAsserts: void assertEmpty(java.util.Map)>
<com.android.internal.telephony.Call: boolean isRinging()>
<android.os.storage.StorageManager$ListenerDelegate$1: void <init>(android.os.storage.StorageManager$ListenerDelegate,android.os.Looper,android.os.storage.StorageManager)>
<android.view.SurfaceView$2: void <init>(android.view.SurfaceView)>
<android.widget.TextView: int viewportToContentHorizontalOffset()>
<android.view.LayoutInflater$BlinkLayout: boolean access$100(android.view.LayoutInflater$BlinkLayout)>
<com.android.server.InputMethodManagerService: com.android.server.InputMethodManagerService$InputMethodFileManager access$200(com.android.server.InputMethodManagerService)>
<com.android.server.pm.PackageManagerService: android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName,int)>
<android.view.InputEventConsistencyVerifier: void <clinit>()>
<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.HttpHost,org.apache.http.HttpRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>
<android.media.MediaPlayer: void prepareAsync()>
<com.android.internal.telephony.IccCard: void access$000(com.android.internal.telephony.IccCard,java.lang.String)>
<android.content.Intent: android.content.Intent setClassName(android.content.Context,java.lang.String)>
<android.security.KeyStore: boolean password(java.lang.String)>
<android.webkit.WebView: void nativeUpdateDrawGLFunction(android.graphics.Rect,android.graphics.Rect)>
<android.net.http.CertificateChainValidator: void closeSocketThrowException(javax.net.ssl.SSLSocket,java.lang.String)>
<android.graphics.Canvas: void drawRGB(int,int,int)>
<Wrapper_android_util_Property: void test_android_util_Property()>
<com.android.server.net.NetworkPolicyManagerService$XmlUtils: void writeIntAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,int)>
<com.android.internal.telephony.cdma.CDMAPhone: void notifyUnknownConnection()>
<android.app.FragmentManagerImpl: boolean dispatchOptionsItemSelected(android.view.MenuItem)>
<android.database.sqlite.DatabaseConnectionPool$PoolObj: void access$200(android.database.sqlite.DatabaseConnectionPool$PoolObj)>
<android.webkit.WebView$TouchEventQueue: void <init>(android.webkit.WebView,android.webkit.WebView$1)>
<com.android.i18n.phonenumbers.AsYouTypeFormatter: java.lang.String inputDigitAndRememberPosition(char)>
<android.server.BluetoothAdapterStateMachine: void access$1100(android.server.BluetoothAdapterStateMachine,android.os.Message)>
<android.animation.LayoutTransition: void setStagger(int,long)>
<android.os.RecoverySystem: void <clinit>()>
<GenerationGG: android.hardware.usb.UsbEndpoint get_androidhardwareusbUsbEndpoint()>
<android.bluetooth.BluetoothDeviceProfileState: boolean access$6202(android.bluetooth.BluetoothDeviceProfileState,boolean)>
<android.view.GLES20Canvas: boolean clipRect(android.graphics.Rect,android.graphics.Region$Op)>
<android.view.textservice.TextInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.VolumePanel: android.media.AudioManager access$300(android.view.VolumePanel)>
<android.widget.TextView: boolean hasInsertionController()>
<android.text.TextDirectionHeuristics$AnyStrong: void <clinit>()>
<Wrapper_android_media_MediaRecorder: void test_android_media_MediaRecorder()>
<android.content.res.XmlBlock: void finalize()>
<android.media.RemoteControlClient: void access$1600(android.media.RemoteControlClient,java.lang.Integer,int,int)>
<com.android.server.location.GpsLocationProvider: void native_agps_data_conn_failed()>
<android.bluetooth.BluetoothDeviceProfileState: int access$1002(android.bluetooth.BluetoothDeviceProfileState,int)>
<android.content.IntentFilter: void writeToXml(org.xmlpull.v1.XmlSerializer)>
<android.view.TextureView: void onDraw(android.graphics.Canvas)>
<android.renderscript.RenderScript: void rsnScriptSetTimeZone(int,int,byte[])>
<com.android.server.ThrottleService: void dispatchReset()>
<com.android.internal.telephony.IccUtils: java.lang.String networkNameToString(byte[],int,int)>
<android.view.inputmethod.BaseInputConnection: void <init>(android.view.inputmethod.InputMethodManager,boolean)>
<com.android.server.am.UsageStatsService$PkgUsageStatsExtended: void <init>(com.android.server.am.UsageStatsService,android.os.Parcel)>
<com.android.internal.telephony.DataConnectionAc: int rspRefCount(android.os.Message)>
<android.media.CameraProfile: int[] getImageEncodingQualityLevels(int)>
<android.test.mock.MockContext: android.database.sqlite.SQLiteDatabase openOrCreateDatabase(java.lang.String,int,android.database.sqlite.SQLiteDatabase$CursorFactory)>
<com.android.server.sip.SipHelper: java.lang.String getCallId(javax.sip.message.Message)>
<android.content.SyncStatusInfo: void <clinit>()>
<android.net.wifi.WifiWatchdogStateMachine: boolean access$3400(android.net.wifi.WifiWatchdogStateMachine)>
<com.android.server.StatusBarManagerService: void onHardKeyboardStatusChange(boolean,boolean)>
<com.android.server.BackupManagerService$3: void <init>(com.android.server.BackupManagerService,java.lang.String,java.util.HashSet)>
<android.webkit.AccessibilityInjector: boolean traverseCurrentAxis(int,boolean,java.lang.String)>
<android.net.wifi.WifiStateMachine$1: void <init>(android.net.wifi.WifiStateMachine)>
<android.content.pm.UserInfo$1: java.lang.Object[] newArray(int)>
<android.speech.RecognitionService: void dispatchClearCallback()>
<android.service.wallpaper.WallpaperService$Engine: void access$000(android.service.wallpaper.WallpaperService$Engine,android.view.MotionEvent)>
<android.widget.HeaderViewListAdapter: void unregisterDataSetObserver(android.database.DataSetObserver)>
<com.android.server.sip.SipSessionGroup: com.android.server.sip.SipHelper access$300(com.android.server.sip.SipSessionGroup)>
<android.app.Application: void onCreate()>
<com.android.server.wm.WindowManagerService: void moveInputMethodDialogsLocked(int)>
<android.inputmethodservice.Keyboard: int getShiftKeyIndex()>
<android.speech.tts.ITextToSpeechCallback$Stub: android.os.IBinder asBinder()>
<android.view.View: void setRotationX(float)>
<android.hardware.usb.UsbDevice: int getInterfaceCount()>
<android.view.inputmethod.ExtractedTextRequest$1: android.view.inputmethod.ExtractedTextRequest[] newArray(int)>
<android.graphics.Matrix: boolean native_postSkew(int,float,float,float,float)>
<GenerationGG: android.drm.DrmInfo get_androiddrmDrmInfo()>
<com.android.internal.telephony.WapPushOverSms$WapPushConnection: void <init>(com.android.internal.telephony.WapPushOverSms,android.content.Context)>
<android.net.NetworkStatsHistory: int size()>
<android.view.textservice.SpellCheckerInfo: android.content.ComponentName getComponent()>
<android.net.NetworkTemplate: void writeToParcel(android.os.Parcel,int)>
<android.graphics.RectF: boolean contains(android.graphics.RectF)>
<com.android.server.am.ActivityManagerService$8: void <init>(com.android.server.am.ActivityManagerService,java.util.ArrayList,java.lang.Runnable)>
<android.widget.CalendarView: int access$1600(android.widget.CalendarView)>
<android.view.View: void onWindowVisibilityChanged(int)>
<com.android.internal.util.AsyncChannel: void connected(android.content.Context,android.os.Handler,android.os.Messenger)>
<android.database.sqlite.SQLiteStatement: int native_execute()>
<com.android.internal.telephony.sip.SipCommandInterface: void queryFacilityLock(java.lang.String,java.lang.String,int,android.os.Message)>
<android.media.ExifInterface: int getAttributeInt(java.lang.String,int)>
<android.server.BluetoothService: java.lang.String toBondStateString(int)>
<android.view.ViewRootImpl: void recomputeViewAttributes(android.view.View)>
<android.os.Debug: void startMethodTracing()>
<android.widget.AutoCompleteTextView: void setDropDownDismissedOnCompletion(boolean)>
<android.renderscript.BaseObj: int hashCode()>
<android.view.ViewGroup: boolean access$302(android.view.ViewGroup,boolean)>
<android.speech.tts.TextToSpeech: java.util.Map access$600(android.speech.tts.TextToSpeech)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setMultiChoiceItems(java.lang.CharSequence[],boolean[],android.content.DialogInterface$OnMultiChoiceClickListener)>
<android.widget.GridLayout$PackedMap: void <init>(java.lang.Object[],java.lang.Object[])>
<android.webkit.CallbackProxy: void onReceivedCertificate(android.net.http.SslCertificate)>
<android.view.GLES20Canvas: void nConcatMatrix(int,int)>
<android.webkit.WebViewClient: void <init>()>
<com.android.internal.app.ActionBarImpl: android.app.ActionBar$Tab getSelectedTab()>
<android.net.EthernetDataTracker: void interfaceAdded(java.lang.String)>
<android.widget.RelativeLayout$LayoutParams: int access$100(android.widget.RelativeLayout$LayoutParams)>
<com.android.internal.telephony.cdma.sms.BearerData$Gsm7bitCodingResult: void <init>()>
<android.content.SyncAdapterType: int hashCode()>
<android.database.MergeCursor: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.security.SystemKeyStore: java.lang.String generateNewKeyHexString(int,java.lang.String,java.lang.String)>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: void startNetStatPoll()>
<android.renderscript.RenderScript: int rsnFontCreateFromAssetStream(int,java.lang.String,float,int,int)>
<android.view.GLES20Canvas: void nResetDisplayListRenderer(int)>
<android.content.ComponentName: void <init>(android.content.Context,java.lang.String)>
<com.android.internal.util.StateMachine$ProcessedMessages: void <init>()>
<android.net.sip.SipProfile: java.lang.Object access$200(android.net.sip.SipProfile)>
<com.android.server.pm.PackageSettingBase: int getInstallStatus()>
<com.android.internal.view.menu.ActionMenuItem: boolean isVisible()>
<android.view.InputEventConsistencyVerifier: void onInputEvent(android.view.InputEvent,int)>
<android.util.JsonWriter: void replaceTop(android.util.JsonScope)>
<com.android.internal.telephony.cdma.sms.BearerData: com.android.internal.telephony.cdma.sms.BearerData$Gsm7bitCodingResult encode7bitGsm(java.lang.String,int,boolean)>
<android.view.GLES20Canvas: void nTranslate(int,float,float)>
<com.android.internal.telephony.cdma.EriManager: com.android.internal.telephony.cdma.EriInfo getEriInfo(int)>
<android.os.Debug: void resetGlobalExternalAllocSize()>
<android.graphics.Matrix: boolean equals(java.lang.Object)>
<android.server.BluetoothBondState$1: void onServiceDisconnected(int)>
<android.renderscript.Allocation: void copy1DRangeFromUnchecked(int,int,short[])>
<android.widget.TableLayout: void setColumnStretchable(int,boolean)>
<android.gesture.GestureOverlayView: void removeAllOnGestureListeners()>
<android.test.MoreAsserts: void assertEquals(java.util.Set,java.util.Set)>
<android.widget.LinearLayout: boolean isMeasureWithLargestChildEnabled()>
<android.animation.AnimatorSet: void sortNodes()>
<android.os.Process: void setProcessGroup(int,int)>
<com.android.internal.telephony.sip.SipPhone: java.lang.String getUriString(android.net.sip.SipProfile)>
<android.content.OperationApplicationException: int getNumSuccessfulYieldPoints()>
<android.preference.Preference: void setOnPreferenceClickListener(android.preference.Preference$OnPreferenceClickListener)>
<android.app.Notification$Builder: void <init>(android.content.Context)>
<com.android.server.BackupManagerService: com.android.internal.backup.IBackupTransport getTransport(java.lang.String)>
<android.os.Messenger$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.webkit.WebView: void access$9700(android.webkit.WebView,int,int)>
<android.gesture.Learner: java.util.ArrayList getInstances()>
<com.android.internal.telephony.gsm.SmsMessage: boolean isReplace()>
<com.android.i18n.phonenumbers.AsYouTypeFormatter: void narrowDownPossibleFormats(java.lang.String)>
<android.util.LongSparseArray: java.lang.Object valueAt(int)>
<android.net.rtp.RtpStream: java.net.InetAddress getLocalAddress()>
<android.text.style.StyleSpan: void apply(android.graphics.Paint,int)>
<android.widget.AbsoluteLayout$LayoutParams: void <init>(int,int,int,int)>
<com.android.server.wm.Session: void windowAddedLocked()>
<GenerationGG: android.preference.PreferenceActivity get_androidpreferencePreferenceActivity()>
<android.drm.DrmRights: void <init>(java.lang.String,java.lang.String)>
<android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiWatchdogStateMachine$WalledGardenState access$3500(android.net.wifi.WifiWatchdogStateMachine)>
<android.view.View$6: java.lang.Float get(android.view.View)>
<android.widget.VideoView$1: void <init>(android.widget.VideoView)>
<GenerationGG: android.view.WindowManager get_androidviewWindowManager()>
<android.app.IWallpaperManager$Stub$Proxy: void <init>(android.os.IBinder)>
<android.app.Activity: void onContextMenuClosed(android.view.Menu)>
<android.content.CursorLoader: void setSelectionArgs(java.lang.String[])>
<android.graphics.Paint: void <clinit>()>
<com.android.server.usb.UsbDeviceManager: java.lang.String access$200()>
<android.graphics.Paint: int breakText(java.lang.String,boolean,float,float[])>
<com.android.internal.util.JournaledFile: void commit()>
<android.database.MatrixCursor: int getType(int)>
<com.android.server.TextServicesManagerService$InternalServiceConnection: void onServiceDisconnected(android.content.ComponentName)>
<android.view.Surface: void setTransparentRegionHint(android.graphics.Region)>
<android.webkit.WebViewCore: void nativeSetScrollOffset(int,boolean,int,int)>
<android.content.IOnPrimaryClipChangedListener$Stub: void <init>()>
<android.widget.OverScroller$SplineOverScroller: double getSplineDeceleration(int)>
<android.media.AudioRecord: int read(short[],int,int)>
<android.nfc.Tag: void <clinit>()>
<android.graphics.BitmapFactory: void <init>()>
<com.android.internal.os.BatteryStatsImpl$StopwatchTimer: void readSummaryFromParcelLocked(android.os.Parcel)>
<android.widget.DatePicker: int getYear()>
<android.content.res.XmlBlock: int access$1100(int,int)>
<android.view.textservice.TextInfo$1: android.view.textservice.TextInfo createFromParcel(android.os.Parcel)>
<android.graphics.Bitmap: void nativeSetPixels(int,int[],int,int,int,int,int,int)>
<com.android.internal.widget.LockPatternView$Cell: com.android.internal.widget.LockPatternView$Cell of(int,int)>
<com.android.internal.telephony.sip.SipPhone$SipCall: com.android.internal.telephony.Phone getPhone()>
<android.content.ComponentName: void <init>(java.lang.String,android.os.Parcel)>
<android.app.ActivityThread: android.app.Application getApplication()>
<com.android.internal.telephony.WspTypeDecoder: boolean decodeIntegerValue(int)>
<android.server.BluetoothInputProfileHandler: void debugLog(java.lang.String)>
<android.location.Location: boolean access$502(android.location.Location,boolean)>
<com.android.server.net.NetworkStatsService: int access$1002(com.android.server.net.NetworkStatsService,int)>
<android.webkit.BrowserFrame: void nativeSslCertErrorProceed(int)>
<android.webkit.CacheManager: void <init>()>
<android.renderscript.Allocation$MipmapControl: void <clinit>()>
<android.webkit.ConsoleMessage$MessageLevel: void <clinit>()>
<android.net.wifi.ScanResult: void <init>(java.lang.String,java.lang.String,java.lang.String,int,int)>
<android.renderscript.AllocationAdapter: void setFace(android.renderscript.Type$CubemapFace)>
<android.media.AudioService: void dumpRCStack(java.io.PrintWriter)>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccFileHandler getIccFileHandler()>
<android.widget.TableLayout: boolean isStretchAllColumns()>
<GenerationGG: android.animation.TimeInterpolator get_androidanimationTimeInterpolator()>
<android.telephony.PhoneStateListener$1: void onServiceStateChanged(android.telephony.ServiceState)>
<android.animation.Keyframe: android.animation.Keyframe ofInt(float,int)>
<com.android.server.sip.SipWakeupTimer: java.lang.String getAction()>
<android.renderscript.RenderScript: void <clinit>()>
<android.net.NetworkQuotaInfo$1: android.net.NetworkQuotaInfo createFromParcel(android.os.Parcel)>
<android.webkit.BrowserFrame$ConfigCallback: void onConfigurationChanged(android.content.res.Configuration)>
<com.android.server.accessibility.TouchExplorer: void handleMotionEventStateDragging(android.view.MotionEvent,int)>
<android.view.ViewConfiguration: int getScaledOverscrollDistance()>
<android.text.method.BaseMovementMethod: boolean onKeyUp(android.widget.TextView,android.text.Spannable,int,android.view.KeyEvent)>
<android.content.res.ObbInfo$1: void <init>()>
<android.widget.TextView: void setFilters(android.text.Editable,android.text.InputFilter[])>
<android.widget.Toast: int getYOffset()>
<GenerationGG: android.view.Surface get_androidviewSurface()>
<com.android.server.BackupManagerService$PerformFullBackupTask: void <init>(com.android.server.BackupManagerService,android.os.ParcelFileDescriptor,android.app.backup.IFullBackupRestoreObserver,boolean,boolean,java.lang.String,java.lang.String,boolean,boolean,java.lang.String[],java.util.concurrent.atomic.AtomicBoolean)>
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromCubeFaces(android.renderscript.RenderScript,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap,android.graphics.Bitmap)>
<com.android.server.am.UsageStatsService: void writeStatsToParcelFLOCK(android.os.Parcel)>
<android.net.wifi.WifiConfiguration$EnterpriseField: void <init>(android.net.wifi.WifiConfiguration,java.lang.String,android.net.wifi.WifiConfiguration$1)>
<com.android.server.location.GpsLocationProvider: boolean meetsCriteria(android.location.Criteria)>
<android.net.sip.SipSession$Listener: void onRegistering(android.net.sip.SipSession)>
<com.android.server.pm.Settings: int getComponentEnabledSettingLPr(android.content.ComponentName)>
<android.net.wifi.p2p.WifiP2pService: int access$102(android.net.wifi.p2p.WifiP2pService,int)>
<com.android.server.am.ActivityManagerService$1: void <init>(com.android.server.am.ActivityManagerService)>
<com.android.server.DevicePolicyManagerService: long getPasswordExpirationTimeout(android.content.ComponentName)>
<android.os.RemoteCallback: void writeToParcel(android.os.Parcel,int)>
<android.net.NetworkStats: android.net.NetworkStats$Entry getTotal(android.net.NetworkStats$Entry)>
<android.server.BluetoothAdapterStateMachine: void access$4300(android.server.BluetoothAdapterStateMachine,int)>
<com.android.internal.os.BatteryStatsImpl: void notePhoneDataConnectionStateLocked(int,boolean)>
<GenerationGG: java.util.Set get_javautilSet()>
<com.android.server.wm.WindowManagerService: void rebuildBlackFrame(boolean)>
<android.database.sqlite.SQLiteDatabase: boolean isPooledConnection()>
<com.android.internal.os.BatteryStatsImpl: void writeOldHistory(android.os.Parcel)>
<android.renderscript.RenderScript: void nProgramBindSampler(int,int,int)>
<android.graphics.Rect$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.server.PackageManagerBackupAgent: com.android.server.PackageManagerBackupAgent$Metadata getRestoredMetadata(java.lang.String)>
<com.android.server.accessibility.TouchExplorer$PointerTracker: boolean wasLastReceivedUpPointerActive()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimCdmaHomeLoaded: void <init>(com.android.internal.telephony.cdma.CdmaLteUiccRecords,com.android.internal.telephony.cdma.CdmaLteUiccRecords$1)>
<android.os.DropBoxManager$Entry: java.lang.String getTag()>
<android.telephony.PhoneStateListener: void onCallStateChanged(int,java.lang.String)>
<android.graphics.RadialGradient: int nativePostCreate2(int,float,float,float,int,int,int)>
<android.view.KeyEvent: long getDownTime()>
<android.graphics.Matrix: boolean postScale(float,float,float,float)>
<android.net.InterfaceConfiguration$1: java.lang.Object[] newArray(int)>
<android.widget.MediaController: android.view.View access$200(android.widget.MediaController)>
<android.webkit.HTML5VideoInline: boolean surfaceTextureDeleted()>
<android.view.ViewGroup: void setChildrenDrawingOrderEnabled(boolean)>
<android.graphics.drawable.GradientDrawable: void <init>(android.graphics.drawable.GradientDrawable$GradientState)>
<android.app.Notification$1: java.lang.Object[] newArray(int)>
<android.app.Fragment: void onOptionsMenuClosed(android.view.Menu)>
<android.speech.tts.TextToSpeech: android.speech.tts.TextToSpeech$Connection access$202(android.speech.tts.TextToSpeech,android.speech.tts.TextToSpeech$Connection)>
<android.accounts.AccountManager$4: void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback,android.accounts.Account,java.lang.String,android.os.Bundle)>
<android.text.style.ScaleXSpan: void updateMeasureState(android.text.TextPaint)>
<com.android.server.wm.WindowToken: java.lang.String toString()>
<GenerationGG: android.opengl.ETC1Util$ETC1Texture get_androidopenglETC1Util__ETC1Texture()>
<android.accounts.AccountAuthenticatorResponse: void <clinit>()>
<android.test.InstrumentationTestSuite: void <init>(java.lang.String,android.app.Instrumentation)>
<android.app.LoaderManagerImpl: java.lang.String toString()>
<com.android.server.PowerManagerService: boolean isScreenOn()>
<com.android.server.DeviceStorageMonitorService: boolean access$102(com.android.server.DeviceStorageMonitorService,boolean)>
<com.android.internal.telephony.cdma.CdmaCallTracker: void finalize()>
<android.renderscript.RenderScript: void nAssignName(int,byte[])>
<android.content.IntentFilter: java.lang.String getAction(int)>
<android.webkit.WebIconDatabase: void nativeRemoveAllIcons()>
<android.webkit.ZoomControlExternal: android.webkit.WebView access$400(android.webkit.ZoomControlExternal)>
<com.android.internal.telephony.IccRecords: void <init>(com.android.internal.telephony.PhoneBase)>
<android.app.backup.RestoreSet: int describeContents()>
<android.hardware.Sensor: java.lang.String getName()>
<android.net.Uri$Builder: android.net.Uri$Builder appendPath(java.lang.String)>
<com.android.internal.view.IInputContextCallback$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.internal.telephony.ApnContext: java.lang.String getReason()>
<android.location.GpsStatus: void setStatus(android.location.GpsStatus)>
<android.app.LoaderManagerImpl: void updateActivity(android.app.Activity)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: java.lang.String getDeviceAddress(java.lang.String)>
<com.android.server.AlarmManagerService: void access$700(com.android.server.AlarmManagerService,java.util.ArrayList,java.util.ArrayList,long)>
<com.android.internal.util.HexDump: java.lang.String toHexString(byte[],int,int)>
<android.speech.tts.AudioPlaybackHandler: void enqueueSynthesisStart(android.speech.tts.SynthesisMessageParams)>
<android.media.effect.EffectContext: android.media.effect.EffectFactory getFactory()>
<com.android.server.BatteryService: int getIcon(int)>
<android.app.BackStackRecord: boolean isAddToBackStackAllowed()>
<android.content.SyncStorageEngine: void writeStatisticsLocked()>
<android.app.FragmentManagerImpl: boolean execPendingActions()>
<android.net.Uri$StringUri: java.lang.String getEncodedFragment()>
<android.webkit.WebView: boolean nativeCursorIsTextInput()>
<android.net.sip.SipAudioCall: boolean isMuted()>
<android.graphics.ColorMatrix: void setRGB2YUV()>
<android.content.pm.PackageParser$Component: void setPackageName(java.lang.String)>
<com.android.server.WifiService$LockList: java.util.List access$2500(com.android.server.WifiService$LockList)>
<android.os.IHardwareService$Stub: void <init>()>
<android.content.IOnPrimaryClipChangedListener$Stub: android.os.IBinder asBinder()>
<android.os.Debug: void startNativeTracing()>
<android.net.Uri$HierarchicalUri: java.lang.String getQuery()>
<android.content.ComponentName: void <init>(android.os.Parcel)>
<android.content.SyncManager: int access$2500()>
<android.view.accessibility.AccessibilityNodeInfo: void setEnabled(boolean)>
<android.media.AudioService: void registerMediaButtonIntent(android.app.PendingIntent,android.content.ComponentName)>
<com.android.server.am.BaseErrorDialog$1: void <init>(com.android.server.am.BaseErrorDialog)>
<android.net.Uri: java.util.List getQueryParameters(java.lang.String)>
<com.android.internal.widget.ActionBarView: java.lang.CharSequence getTitle()>
<android.widget.SlidingDrawer$SlidingHandler: void <init>(android.widget.SlidingDrawer)>
<com.android.server.am.FactoryErrorDialog$1: void handleMessage(android.os.Message)>
<android.renderscript.Matrix3f: float[] getArray()>
<Wrapper_android_content_pm_PackageStats: void test_android_content_pm_PackageStats()>
<android.webkit.BrowserFrame: boolean hasPasswordField()>
<android.graphics.PathMeasure: boolean native_getPosTan(int,float,float[],float[])>
<android.server.BluetoothAdapterStateMachine: void access$3800(android.server.BluetoothAdapterStateMachine,android.os.Message)>
<android.view.View: boolean postDelayed(java.lang.Runnable,long)>
<android.graphics.Rect: boolean equals(java.lang.Object)>
<android.preference.Preference: java.lang.String getKey()>
<android.net.sip.SipException: void <init>(java.lang.String)>
<android.graphics.drawable.ColorDrawable: int getColor()>
<android.view.ViewRootImpl: void requestChildFocus(android.view.View,android.view.View)>
<android.bluetooth.IBluetoothHealthCallback$Stub: android.os.IBinder asBinder()>
<android.webkit.WebChromeClient: void onRequestFocus(android.webkit.WebView)>
<android.nfc.INfcTag$Stub: android.nfc.INfcTag asInterface(android.os.IBinder)>
<android.net.wifi.p2p.WifiP2pGroup: void <init>()>
<com.android.internal.telephony.AdnRecordCache: void reset()>
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$Receiver getReceiver(android.app.PendingIntent)>
<android.media.audiofx.Visualizer: java.lang.Object access$000(android.media.audiofx.Visualizer)>
<android.widget.SuggestionsAdapter$1: void <init>(android.widget.SuggestionsAdapter)>
<Wrapper_android_renderscript_Short3: void test_android_renderscript_Short3()>
<android.view.InputEvent$1: android.view.InputEvent createFromParcel(android.os.Parcel)>
<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState getDetailedState()>
<android.text.util.Linkify$2: void <init>()>
<android.net.Uri$1: void <init>()>
<com.android.server.MountService: int access$100(com.android.server.MountService,java.lang.String,boolean,boolean)>
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumNumeric(android.content.ComponentName)>
<android.view.inputmethod.InputMethodManager: void focusOut(android.view.View)>
<GenerationGG: android.net.wifi.p2p.WifiP2pManager$GroupInfoListener get_androidnetwifip2pWifiP2pManager__GroupInfoListener()>
<android.widget.AbsListView$PerformClick: void <init>(android.widget.AbsListView)>
<android.os.StrictMode: void <clinit>()>
<android.content.pm.ConfigurationInfo: java.lang.String toString()>
<android.bluetooth.BluetoothDeviceProfileState: android.os.Message access$10600(android.bluetooth.BluetoothDeviceProfileState)>
<android.util.MonthDisplayHelper: int getNumberOfDaysInMonth()>
<android.view.LayoutInflater: android.view.LayoutInflater 'from'(android.content.Context)>
<android.content.pm.Signature: boolean equals(java.lang.Object)>
<android.view.View: boolean isFocusable()>
<android.widget.EdgeEffect: void setSize(int,int)>
<android.app.FragmentManagerImpl: java.lang.String toString()>
<android.net.wifi.WifiApConfigStore: android.content.Context access$300()>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromFd(int)>
<android.graphics.PixelFormat: void <init>()>
<com.android.server.am.TaskRecord: void dump(java.io.PrintWriter,java.lang.String)>
<Wrapper_android_sax_TextElementListener: void test_android_sax_TextElementListener()>
<android.ddm.DdmHandleHeap: void register()>
<android.renderscript.RenderScript: void rsnContextBindProgramVertex(int,int)>
<android.net.sip.SipProfile: int access$402(android.net.sip.SipProfile,int)>
<android.content.ClipDescription$1: android.content.ClipDescription[] newArray(int)>
<android.view.SurfaceView$MyWindow: void dispatchGetNewSurface()>
<com.android.server.usb.UsbDeviceManager: java.lang.String access$800(java.lang.String,java.lang.String)>
<android.widget.SimpleAdapter: java.util.ArrayList access$100(android.widget.SimpleAdapter)>
<android.widget.Scroller: int getDuration()>
<android.widget.AbsListView: int getFooterViewsCount()>
<android.view.textservice.TextInfo$1: void <init>()>
<com.android.server.DevicePolicyManagerService$ActiveAdmin: void dump(java.lang.String,java.io.PrintWriter)>
<android.renderscript.Matrix2f: void loadScale(float,float)>
<android.webkit.DeviceMotionService$2: void <init>(android.webkit.DeviceMotionService)>
<android.view.MotionEvent: void nativeOffsetLocation(int,float,float)>
<android.net.wifi.WifiConfigStore: android.net.LinkProperties getLinkProperties(int)>
<android.widget.LinearLayout: int measureNullChild(int)>
<android.preference.PreferenceGroupAdapter: java.lang.Object getItem(int)>
<android.hardware.Camera: android.hardware.Camera$Parameters getParameters()>
<com.android.server.AppWidgetService: int[] getAppWidgetIds(com.android.server.AppWidgetService$Provider)>
<com.android.internal.telephony.GsmAlphabet: java.lang.String gsm7BitPackedToString(byte[],int,int,int,int,int)>
<Wrapper_android_sax_StartElementListener: void test_android_sax_StartElementListener()>
<android.content.SyncStats: void writeToParcel(android.os.Parcel,int)>
<android.text.method.TextKeyListener$NullKeyListener: void <init>()>
<com.android.internal.telephony.cdma.sms.BearerData: void decodeIs91VoicemailStatus(com.android.internal.telephony.cdma.sms.BearerData)>
<android.server.search.Searchables: android.content.ComponentName getGlobalSearchActivity()>
<android.opengl.GLException: void <init>(int,java.lang.String)>
<android.test.suitebuilder.TestMethod: int hashCode()>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: boolean isTethered()>
<android.view.View$12: void setValue(java.lang.Object,float)>
<android.os.ResultReceiver: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Path: void addOval(android.graphics.RectF,android.graphics.Path$Direction)>
<com.android.server.am.ContentProviderRecord: void <init>(android.content.pm.ProviderInfo,android.content.pm.ApplicationInfo,android.content.ComponentName)>
<android.widget.MediaController: boolean access$600(android.widget.MediaController)>
<com.android.internal.view.IInputMethodCallback$Stub$Proxy: void <init>(android.os.IBinder)>
<android.widget.AutoCompleteTextView: void setDropDownHorizontalOffset(int)>
<android.util.NtpTrustedTime: void <init>(java.lang.String,long)>
<android.net.wifi.NetworkUpdateResult: boolean hasProxyChanged()>
<android.widget.TextView$CharWrapper: float measureText(int,int,android.graphics.Paint)>
<android.media.audiofx.AudioEffect: void finalize()>
<android.content.pm.LabeledIntent: void <init>(android.content.Intent,java.lang.String,java.lang.CharSequence,int)>
<android.net.NetworkIdentity: void <init>(int,int,java.lang.String,boolean)>
<com.android.server.connectivity.Vpn$Connection: android.os.IBinder access$000(com.android.server.connectivity.Vpn$Connection)>
<android.webkit.WebViewCore: void signalRepaintDone()>
<android.content.pm.PackageInfo: void <clinit>()>
<android.net.LinkProperties: void clear()>
<android.animation.ObjectAnimator: java.lang.Object getTarget()>
<android.hardware.usb.UsbAccessory: java.lang.String toString()>
<android.test.mock.MockApplication: void onCreate()>
<junit.framework.TestCase: void assertEquals(short,short)>
<com.android.internal.widget.IRemoteViewsAdapterConnection$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.internal.view.menu.ActionMenuItem: boolean hasSubMenu()>
<android.gesture.GesturePoint: java.lang.Object clone()>
<android.nfc.NfcActivityManager$NfcActivityState: void <init>(android.nfc.NfcActivityManager)>
<android.graphics.drawable.ShapeDrawable: void <init>()>
<android.inputmethodservice.AbstractInputMethodService$AbstractInputMethodImpl: void revokeSession(android.view.inputmethod.InputMethodSession)>
<android.widget.TabHost$TabSpec: java.lang.String getTag()>
<android.widget.DatePicker: void <clinit>()>
<android.net.ProxyProperties: void <clinit>()>
<android.app.Dialog: boolean onCreatePanelMenu(int,android.view.Menu)>
<android.net.LocalSocketImpl: android.net.Credentials getPeerCredentials()>
<com.android.server.am.ActivityManagerService: boolean checkUriPermissionLocked(android.net.Uri,int,int)>
<android.net.wifi.WifiNative: boolean pingCommand()>
<com.android.server.sip.SipSessionGroup$KeepAliveProcessCallbackProxy: void proxy(java.lang.Runnable)>
<android.test.mock.MockContentProvider: int bulkInsert(android.net.Uri,android.content.ContentValues[])>
<GenerationGG: android.database.DatabaseUtils get_androiddatabaseDatabaseUtils()>
<android.net.http.AndroidHttpClientConnection: void close()>
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest)>
<com.android.internal.location.DummyLocationProvider: boolean requiresCell()>
<android.graphics.drawable.RotateDrawable: int getOpacity()>
<android.server.BluetoothService: void clearApplicationStateChangeTracker()>
<com.android.internal.os.BatteryStatsImpl: java.util.Map readKernelWakelockStats()>
<android.test.mock.MockContext: java.io.File getFileStreamPath(java.lang.String)>
<android.app.ActivityThread$ApplicationThread: void schedulePauseActivity(android.os.IBinder,boolean,boolean,int)>
<com.android.server.wm.InputManager: void nativeInit(android.content.Context,com.android.server.wm.InputManager$Callbacks,android.os.MessageQueue)>
<android.view.View: int getHorizontalFadingEdgeLength()>
<com.android.server.ThrottleService: android.os.INetworkManagementService access$1200(com.android.server.ThrottleService)>
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getMeid()>
<android.renderscript.FileA3D$EntryType: void <init>(java.lang.String,int,int)>
<com.android.internal.telephony.sip.SipPhoneBase: boolean getCallForwardingIndicator()>
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimImpiLoaded: void <init>(com.android.internal.telephony.ims.IsimUiccRecords,com.android.internal.telephony.ims.IsimUiccRecords$1)>
<android.renderscript.RenderScript: void rsnScriptSetVarI(int,int,int,int)>
<android.graphics.SurfaceTexture: android.graphics.SurfaceTexture$OnFrameAvailableListener access$000(android.graphics.SurfaceTexture)>
<android.net.wifi.WifiStateMachine: boolean access$500(android.net.wifi.WifiStateMachine)>
<com.android.internal.telephony.sip.SipPhone$SipConnection: void changeOwner(com.android.internal.telephony.sip.SipPhone$SipCall)>
<android.webkit.FindActionModeCallback: void setWebView(android.webkit.WebView)>
<android.view.accessibility.AccessibilityRecord: void <init>()>
<com.android.server.connectivity.Vpn$Connection: void <init>(com.android.server.connectivity.Vpn,com.android.server.connectivity.Vpn$1)>
<android.graphics.Path: void native_addArc(int,android.graphics.RectF,float,float)>
<android.drm.DrmManagerClient: int _removeRights(int,java.lang.String)>
<android.view.inputmethod.InputMethodInfo$1: void <init>()>
<com.android.server.pm.PackageManagerService: int checkSignatures(java.lang.String,java.lang.String)>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: java.lang.String getUserDataGSM7Bit(int,int,int)>
<Wrapper_android_sax_Element: void test_android_sax_Element()>
<android.media.JetPlayer: java.lang.Object access$000(android.media.JetPlayer)>
<android.widget.RelativeLayout: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<android.widget.TextView: boolean getLinksClickable()>
<android.speech.SpeechRecognizer: void stopListening()>
<android.view.HardwareRenderer$Gl20Renderer: android.view.HardwareLayer createHardwareLayer(boolean)>
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getDeviceSvn()>
<android.filterfw.core.CachedFrameManager: void tearDown()>
<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageO(int,java.lang.Object)>
<android.opengl.GLES10Ext: void _nativeClassInit()>
<com.android.internal.telephony.gsm.GsmCall: void <init>(com.android.internal.telephony.gsm.GsmCallTracker)>
<android.widget.ActivityChooserView: int access$1100(android.widget.ActivityChooserView)>
<android.util.JsonWriter: void <init>(java.io.Writer)>
<android.media.TimedText$TextPos: void <init>(android.media.TimedText)>
<android.gesture.GestureOverlayView: void setFadeOffset(long)>
<android.util.Property: void <init>(java.lang.Class,java.lang.String)>
<android.content.SyncManager$ActiveSyncContext: void onServiceDisconnected(android.content.ComponentName)>
<android.inputmethodservice.ExtractEditLayout: boolean isActionModeStarted()>
<com.android.internal.widget.ActionBarContainer: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback)>
<android.telephony.ServiceState: java.lang.String getOperatorAlphaShort()>
<GenerationGG: android.media.JetPlayer$OnJetEventListener get_androidmediaJetPlayer__OnJetEventListener()>
<android.widget.Filter: android.os.Handler access$200(android.widget.Filter)>
<GenerationGG: android.content.BroadcastReceiver get_androidcontentBroadcastReceiver()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: void readFromParcelLocked(android.os.Parcel)>
<android.webkit.WebViewCore: java.lang.String access$4800(android.webkit.WebViewCore,int,int)>
<com.android.internal.os.BatteryStatsImpl: long getBatteryUptimeLocked(long)>
<android.media.AudioRecord: int native_get_min_buff_size(int,int,int)>
<android.net.wifi.WifiStateTracker: void <init>(int,java.lang.String)>
<android.content.pm.PermissionInfo$1: android.content.pm.PermissionInfo[] newArray(int)>
<com.android.server.am.CompatModePackages: int getPackageFlags(java.lang.String)>
<android.app.Instrumentation$1ContextMenuRunnable: void <init>(android.app.Instrumentation,android.app.Activity,int,int)>
<android.os.Message: android.os.Message obtain(android.os.Handler,java.lang.Runnable)>
<android.app.SharedPreferencesImpl: boolean contains(java.lang.String)>
<android.widget.GridView: int computeVerticalScrollOffset()>
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: java.lang.String getRawInput()>
<android.app.SharedPreferencesImpl: java.util.Map getAll()>
<com.android.internal.view.menu.ActionMenuPresenter: boolean isOverflowMenuShowing()>
<android.server.BluetoothService: android.server.BluetoothAdapterStateMachine access$400(android.server.BluetoothService)>
<GenerationGG: android.app.LauncherActivity get_androidappLauncherActivity()>
<com.android.internal.util.XmlUtils: void skipCurrentTag(org.xmlpull.v1.XmlPullParser)>
<com.android.internal.telephony.SmsRawData: int describeContents()>
<GenerationGG: android.view.Menu get_androidviewMenu()>
<android.text.TextUtils$TruncateAt: void <init>(java.lang.String,int)>
<android.view.animation.Animation: boolean hasEnded()>
<android.app.LoadedApk$ReceiverDispatcher$InnerReceiver: void <init>(android.app.LoadedApk$ReceiverDispatcher,boolean)>
<com.android.server.AppWidgetService: com.android.internal.os.AtomicFile savedStateFile()>
<com.android.internal.statusbar.StatusBarNotification$1: void <init>()>
<android.net.NetworkStats$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.app.Fragment: void setTargetFragment(android.app.Fragment,int)>
<android.view.View: boolean dispatchGenericPointerEvent(android.view.MotionEvent)>
<com.android.internal.widget.ScrollingTabContainerView$VisibilityAnimListener: void onAnimationCancel(android.animation.Animator)>
<android.bluetooth.IBluetoothStateChangeCallback$Stub: android.bluetooth.IBluetoothStateChangeCallback asInterface(android.os.IBinder)>
<android.accounts.AccountManager: void postToHandler(android.os.Handler,android.accounts.OnAccountsUpdateListener,android.accounts.Account[])>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$1: void onClick(android.content.DialogInterface,int)>
<android.content.IntentSender: android.content.IIntentSender getTarget()>
<android.view.InputEventConsistencyVerifier$KeyState: void <clinit>()>
<Wrapper_android_gesture_Gesture: void test_android_gesture_Gesture()>
<android.net.http.Headers: java.lang.String getPragma()>
<com.android.internal.location.DummyLocationProvider: void setRequiresSatellite(boolean)>
<com.android.internal.view.menu.MenuBuilder: android.content.Context getContext()>
<android.speech.IRecognitionListener$Stub: void <init>()>
<android.widget.AdapterViewAnimator: void setInAnimation(android.animation.ObjectAnimator)>
<GenerationGG: android.renderscript.RSDriverException get_androidrenderscriptRSDriverException()>
<android.widget.TextView: boolean isInBatchEditMode()>
<android.content.pm.ParceledListSlice: void writeToParcel(android.os.Parcel,int)>
<android.renderscript.Font$Style: android.renderscript.Font$Style[] values()>
<android.app.backup.FileBackupHelperBase: void <init>(android.content.Context)>
<com.android.internal.telephony.IccUtils: byte[] hexStringToBytes(java.lang.String)>
<android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs: void clear()>
<android.content.IntentFilter: int countDataAuthorities()>
<android.mtp.MtpDevice: boolean deleteObject(int)>
<android.widget.EdgeEffect: void finish()>
<android.webkit.LoadListener: void certificate(android.net.http.SslCertificate)>
<android.view.View: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>
<android.widget.OverScroller: void <init>(android.content.Context,android.view.animation.Interpolator,float,float,boolean)>
<android.widget.TextView$SuggestionsPopupWindow: boolean access$3000(android.widget.TextView$SuggestionsPopupWindow)>
<android.bluetooth.BluetoothDevice$1: void <init>()>
<com.android.internal.telephony.AdnRecord: java.lang.String getAlphaTag()>
<GenerationGG: android.util.TimingLogger get_androidutilTimingLogger()>
<GenerationGG: android.database.sqlite.SQLiteClosable get_androiddatabasesqliteSQLiteClosable()>
<com.android.internal.telephony.Connection: void <clinit>()>
<android.net.NetworkInfo: boolean access$302(android.net.NetworkInfo,boolean)>
<android.media.AudioService: void access$5800(android.media.AudioService)>
<com.android.internal.telephony.gsm.GsmCall$1: void <clinit>()>
<android.preference.PreferenceGroupAdapter: boolean hasStableIds()>
<android.view.animation.BounceInterpolator: void <init>()>
<com.android.server.IntentResolver: int register_intent_filter(android.content.IntentFilter,java.util.Iterator,java.util.HashMap,java.lang.String)>
<com.android.server.am.ActivityRecord: void makeFinishing()>
<GenerationGG: android.content.SyncStatusObserver get_androidcontentSyncStatusObserver()>
<android.os.storage.StorageManager$MountServiceBinderListener: void onUsbMassStorageConnectionChanged(boolean)>
<com.android.internal.view.menu.ActionMenuPresenter$PopupPresenterCallback: void <init>(com.android.internal.view.menu.ActionMenuPresenter)>
<android.app.ContextImpl: android.content.Context getApplicationContext()>
<android.gesture.GestureOverlayView$FadeOutRunnable: void <init>(android.gesture.GestureOverlayView,android.gesture.GestureOverlayView$1)>
<android.content.Intent: void <init>(android.content.Context,java.lang.Class)>
<android.webkit.WebView: boolean nativeFocusCandidateIsRtlText()>
<com.android.server.ThrottleService: java.util.concurrent.atomic.AtomicInteger access$000(com.android.server.ThrottleService)>
<GenerationGG: android.text.ClipboardManager get_androidtextClipboardManager()>
<android.webkit.WebView: int getContentWidth()>
<android.widget.RelativeLayout$LayoutParams: void <init>(int,int)>
<android.view.InputDevice: java.lang.String getName()>
<android.widget.GridView: boolean isCandidateSelection(int,int)>
<android.location.IGpsStatusListener$Stub: void <init>()>
<android.os.Parcel: void unmarshall(byte[],int,int)>
<android.view.WindowManagerImpl: void setStoppedState(android.os.IBinder,boolean)>
<android.speech.tts.SynthesisMessageParams: android.media.AudioTrack getAudioTrack()>
<android.content.ContextWrapper: android.content.Context getApplicationContext()>
<android.widget.AdapterView: boolean isInFilterMode()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setVoip(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<Wrapper_android_util_NoSuchPropertyException: void test_android_util_NoSuchPropertyException()>
<android.app.Service: java.lang.String getClassName()>
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat setDomesticCarrierCodeFormattingRule(java.lang.String)>
<android.view.View$5: void setValue(android.view.View,float)>
<android.view.ViewConfiguration: int getScaledFadingEdgeLength()>
<android.security.SystemKeyStore: byte[] retrieveKey(java.lang.String)>
<android.net.http.Request: java.lang.String getHostPort()>
<android.provider.Browser: void addOrUrlEquals(java.lang.StringBuilder)>
<com.android.server.am.ActivityManagerService: void dismissKeyguardOnNextActivity()>
<android.graphics.Path: void addPath(android.graphics.Path,android.graphics.Matrix)>
<android.media.AudioService: boolean hasScheduledA2dpDockTimeout()>
<DumbClass: void DumbMethod0()>
<com.android.internal.telephony.SmsRawData$1: com.android.internal.telephony.SmsRawData[] newArray(int)>
<android.os.Bundle: void <init>(java.lang.ClassLoader)>
<android.accounts.AccountManagerService: java.lang.Object access$400(android.accounts.AccountManagerService)>
<com.android.server.am.BroadcastRecord: void <init>(android.content.Intent,com.android.server.am.ProcessRecord,java.lang.String,int,int,java.lang.String,java.util.List,android.content.IIntentReceiver,int,java.lang.String,android.os.Bundle,boolean,boolean,boolean)>
<android.view.MotionEvent: float getX()>
<android.net.LinkCapabilities$1: android.net.LinkCapabilities createFromParcel(android.os.Parcel)>
<android.telephony.SignalStrength$1: android.telephony.SignalStrength[] newArray(int)>
<GenerationGG: android.accounts.AccountManager get_androidaccountsAccountManager()>
<android.app.ActionBar$Tab: void <init>()>
<Wrapper_android_test_suitebuilder_annotation_LargeTest: void test_android_test_suitebuilder_annotation_LargeTest()>
<com.android.i18n.phonenumbers.PhoneNumberUtil: com.android.i18n.phonenumbers.AsYouTypeFormatter getAsYouTypeFormatter(java.lang.String)>
<GenerationGG: android.renderscript.RenderScriptGL get_androidrenderscriptRenderScriptGL()>
<android.graphics.YuvImage: boolean compressToJpeg(android.graphics.Rect,int,java.io.OutputStream)>
<android.view.GLES20Canvas: void nDrawCircle(int,float,float,float,int)>
<android.webkit.WebIconDatabase: void close()>
<android.opengl.ETC1: int getWidth(java.nio.Buffer)>
<android.location.LocationManager$ListenerTransport: void onProviderEnabled(java.lang.String)>
<android.view.View: int getSolidColor()>
<android.preference.PreferenceGroupAdapter: boolean isEnabled(int)>
<android.text.StaticLayout: int getTopPadding()>
<android.preference.PreferenceActivity$Header: int describeContents()>
<android.os.storage.StorageVolume: void setStorageId(int)>
<android.media.AudioRecord: int getSampleRate()>
<com.android.internal.telephony.RestrictedState: boolean isCsNormalRestricted()>
<android.renderscript.Sampler$Value: void <init>(java.lang.String,int,int)>
<android.util.SparseIntArray: int size()>
<android.widget.RemoteViews$MemoryUsageCounter: void clear()>
<android.location.ICountryListener$Stub: android.location.ICountryListener asInterface(android.os.IBinder)>
<GenerationGG: android.bluetooth.BluetoothProfile get_androidbluetoothBluetoothProfile()>
<android.text.method.BaseMovementMethod: boolean pageDown(android.widget.TextView,android.text.Spannable)>
<android.preference.MultiSelectListPreference: void setEntries(java.lang.CharSequence[])>
<com.android.server.am.ProcessRecord: java.lang.String toString()>
<com.android.server.am.ActivityManagerService: void registerProcessObserver(android.app.IProcessObserver)>
<android.app.WallpaperInfo$1: void <init>()>
<android.net.DhcpStateMachine: android.app.AlarmManager access$1600(android.net.DhcpStateMachine)>
<com.android.server.DevicePolicyManagerService: long getPasswordExpiration(android.content.ComponentName)>
<GenerationGG: android.webkit.CookieSyncManager get_androidwebkitCookieSyncManager()>
<android.telephony.TelephonyManager: int getPhoneTypeFromProperty()>
<android.app.ActivityManager$ProcessErrorStateInfo: void <init>()>
<android.animation.Animator: void cancel()>
<android.net.http.HttpConnection: void <init>(android.content.Context,org.apache.http.HttpHost,android.net.http.RequestFeeder)>
<android.renderscript.FieldPacker: void addU64(long)>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: boolean readExcessivePowerFromParcelLocked(android.os.Parcel)>
<android.hardware.usb.UsbDevice: java.lang.String toString()>
<android.content.SyncResult: void writeToParcel(android.os.Parcel,int)>
<android.opengl.GLU: void gluOrtho2D(javax.microedition.khronos.opengles.GL10,float,float,float,float)>
<android.view.textservice.SpellCheckerInfo: android.view.textservice.SpellCheckerSubtype getSubtypeAt(int)>
<android.widget.ZoomButtonsController: void setFocusable(boolean)>
<android.content.res.AssetManager: void destroy()>
<GenerationGG: android.os.Bundle get_androidosBundle()>
<android.server.BluetoothService: void log(java.lang.String)>
<android.media.audiofx.AudioEffect: int native_setParameter(int,byte[],int,byte[])>
<android.widget.AbsListView$3: void <init>(android.widget.AbsListView,android.view.inputmethod.InputConnection,boolean)>
<android.test.ClassPathPackageInfoSource: void findClasses(java.lang.String,java.util.Set,java.util.Set)>
<android.view.View$AttachInfo$InvalidateInfo: android.view.View$AttachInfo$InvalidateInfo getNextPoolable()>
<android.widget.ListPopupWindow: void setHorizontalOffset(int)>
<android.filterfw.core.SerializedFrame: java.lang.String toString()>
<android.view.ViewRootImpl$RunQueue$HandlerAction: void <init>()>
<com.android.internal.telephony.IccRecords: java.lang.String getVoiceMailNumber()>
<android.widget.ProgressBar: android.graphics.drawable.Drawable getProgressDrawable()>
<android.os.ParcelFileDescriptor$1: void <init>()>
<GenerationGG: android.renderscript.Long2 get_androidrenderscriptLong2()>
<android.view.textservice.SpellCheckerSession$1: void <init>(android.view.textservice.SpellCheckerSession)>
<android.view.OrientationEventListener: boolean canDetectOrientation()>
<com.android.internal.telephony.gsm.GsmMmiCode: void <clinit>()>
<android.util.Base64$Decoder: void <clinit>()>
<android.widget.VideoView: int getDuration()>
<android.location.Address: double getLongitude()>
<android.location.Address: void setCountryName(java.lang.String)>
<android.widget.ExpandableListConnector: void access$000(android.widget.ExpandableListConnector,boolean,boolean)>
<android.preference.Preference: void requireKey()>
<com.android.server.net.NetworkPolicyManagerService$5: void <init>(com.android.server.net.NetworkPolicyManagerService)>
<android.media.MediaRecorder: int access$000(android.media.MediaRecorder)>
<android.os.Process$ProcessStartResult: void <init>()>
<com.android.internal.net.NetworkStatsFactory: android.net.NetworkStats readNetworkStatsDetail(int)>
<com.android.server.am.ActivityManagerService: boolean willActivityBeVisible(android.os.IBinder)>
<com.android.server.am.ActivityManagerService: void saveLocaleLocked(java.util.Locale,boolean,boolean)>
<android.view.Surface: void closeTransaction()>
<com.android.server.wm.WindowManagerService: int getPreferredOptionsPanelGravity()>
<android.graphics.Canvas: void drawPath(android.graphics.Path,android.graphics.Paint)>
<android.animation.ValueAnimator: java.lang.ThreadLocal access$000()>
<android.graphics.drawable.Drawable: int getMinimumHeight()>
<GenerationGG: android.database.sqlite.SQLiteDiskIOException get_androiddatabasesqliteSQLiteDiskIOException()>
<GenerationGG: android.view.KeyEvent$Callback get_androidviewKeyEvent__Callback()>
<android.net.wifi.WifiStateMachine: android.net.wifi.WifiInfo syncRequestConnectionInfo()>
<android.app.ApplicationErrorReport: void readFromParcel(android.os.Parcel)>
<com.android.internal.telephony.cdma.CdmaDataConnection: void log(java.lang.String)>
<com.android.server.AlarmManagerService: void setRepeating(int,long,long,android.app.PendingIntent)>
<android.net.VpnService: void <init>()>
<android.content.res.CompatibilityInfo$2: android.content.res.CompatibilityInfo[] newArray(int)>
<android.widget.ActivityChooserModel: android.content.pm.ResolveInfo getActivity(int)>
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: int getFromCodeScheme()>
<android.text.method.ReplacementTransformationMethod$SpannedReplacementCharSequence: void <init>(android.text.Spanned,char[],char[])>
<com.android.server.location.GpsLocationProvider: java.lang.String getName()>
<android.widget.TextView: android.text.method.MovementMethod getDefaultMovementMethod()>
<android.drm.mobile1.DrmRawContent$DrmInputStream: int read(byte[])>
<android.content.pm.PackageParser$Provider: void setPackageName(java.lang.String)>
<android.widget.AbsListView$FlingRunnable: void startOverfling(int)>
<android.webkit.WebView$TouchEventQueue: void preQueueTouchEventData(android.webkit.WebViewCore$TouchEventData)>
<android.content.pm.FeatureInfo: void <init>()>
<android.view.FocusFinder: void <clinit>()>
<android.ddm.DdmHandleHello: void <init>()>
<android.view.GLES20Canvas: boolean nClipRect(int,float,float,float,float,int)>
<com.android.i18n.phonenumbers.AsYouTypeFormatter: void <init>(java.lang.String)>
<android.app.ExpandableListActivity: android.widget.ExpandableListAdapter getExpandableListAdapter()>
<com.android.server.wm.WindowManagerService: void getWindowDisplayFrame(com.android.server.wm.Session,android.view.IWindow,android.graphics.Rect)>
<com.android.internal.telephony.gsm.SuppServiceNotification: java.lang.String toString()>
<android.text.method.ReplacementTransformationMethod: void <init>()>
<com.android.server.pm.PackageManagerService: void processPendingInstall(com.android.server.pm.PackageManagerService$InstallArgs,int)>
<android.location.GeocoderParams: void <clinit>()>
<android.preference.DialogPreference: boolean needInputMethod()>
<com.android.server.am.ServiceRecord$StartItem: void removeUriPermissionsLocked()>
<android.widget.ZoomControls: boolean onTouchEvent(android.view.MotionEvent)>
<android.os.Message: void clearForRecycle()>
<android.content.OperationApplicationException: void <init>(java.lang.String,java.lang.Throwable)>
<android.text.method.LinkMovementMethod: android.text.method.MovementMethod getInstance()>
<android.net.wifi.WifiStateMachine: void setDriverStart(boolean)>
<com.android.internal.textservice.ISpellCheckerSession$Stub: com.android.internal.textservice.ISpellCheckerSession asInterface(android.os.IBinder)>
<android.graphics.PixelXorXfermode: int nativeCreate(int)>
<com.android.internal.os.BatteryStatsImpl: long getBatteryRealtime(long)>
<android.content.ReceiverCallNotAllowedException: void <init>(java.lang.String)>
<com.android.internal.database.SortCursor$1: void <init>(com.android.internal.database.SortCursor)>
<android.webkit.WebView: java.lang.String nativeCursorText()>
<Wrapper_android_gesture_GesturePoint: void test_android_gesture_GesturePoint()>
<android.os.Parcel: void <init>(int)>
<GenerationGG: android.util.NoSuchPropertyException get_androidutilNoSuchPropertyException()>
<android.preference.MultiSelectListPreference: java.util.Set getValues()>
<android.widget.TimePicker: boolean access$102(android.widget.TimePicker,boolean)>
<android.filterfw.core.Filter: java.lang.String getName()>
<android.database.CursorWindow: void nativeDispose(int)>
<com.android.internal.view.BaseIWindow: void setSession(android.view.IWindowSession)>
<android.location.ICountryDetector$Stub$Proxy: android.os.IBinder asBinder()>
<android.widget.RelativeLayout: void setHorizontalGravity(int)>
<android.widget.OverScroller: void forceFinished(boolean)>
<android.webkit.SelectActionModeCallback: boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu)>
<com.android.server.sip.SipSessionListenerProxy: void proxy(java.lang.Runnable)>
<android.webkit.CookieManager$Cookie: boolean domainMatch(java.lang.String)>
<android.preference.Preference: java.lang.String getDependency()>
<android.view.inputmethod.InputMethodSubtype$1: java.lang.Object[] newArray(int)>
<android.net.Uri$OpaqueUri: java.lang.String getHost()>
<com.android.server.ConnectivityService: boolean isNetworkBlocked(android.net.NetworkStateTracker,int)>
<com.android.internal.os.storage.ExternalStorageFormatter: void <clinit>()>
<android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs: void setPooled(boolean)>
<android.speech.tts.TextToSpeech: android.content.Context access$1100(android.speech.tts.TextToSpeech)>
<android.widget.GridLayout$Spec: boolean equals(java.lang.Object)>
<android.renderscript.FieldPacker: void addF32(android.renderscript.Float4)>
<Wrapper_android_webkit_WebStorage: void test_android_webkit_WebStorage()>
<com.android.internal.util.Predicates: com.android.internal.util.Predicate or(java.lang.Iterable)>
<android.app.ApplicationPackageManager: void <clinit>()>
<android.text.method.LinkMovementMethod: void <init>()>
<com.android.server.ThrottleService$MyHandler: java.util.Calendar calculatePeriodEnd(long)>
<GenerationGG: android.graphics.EmbossMaskFilter get_androidgraphicsEmbossMaskFilter()>
<com.android.internal.app.IMediaContainerService$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.internal.widget.LockPatternUtils: java.lang.String patternToString(java.util.List)>
<android.net.wifi.WifiStateMachine: com.android.internal.util.AsyncChannel access$000(android.net.wifi.WifiStateMachine)>
<android.util.Pair: android.util.Pair create(java.lang.Object,java.lang.Object)>
<android.media.AudioService: void <clinit>()>
<GenerationGG: android.widget.CursorTreeAdapter get_androidwidgetCursorTreeAdapter()>
<com.android.server.connectivity.Tethering$TetherMasterSM$InitialState: void <init>(com.android.server.connectivity.Tethering$TetherMasterSM)>
<android.test.ClassPathPackageInfoSource: android.test.ClassPathPackageInfo access$000(android.test.ClassPathPackageInfoSource,java.lang.String)>
<android.app.Activity: int getVolumeControlStream()>
<Wrapper_android_graphics_PixelFormat: void test_android_graphics_PixelFormat()>
<Wrapper_android_nfc_TagLostException: void test_android_nfc_TagLostException()>
<android.net.NetworkStats: java.lang.String tagToString(int)>
<android.view.KeyEvent: android.view.InputEvent copy()>
<android.test.ActivityUnitTestCase$MockParent: void startActivityFromChild(android.app.Activity,android.content.Intent,int)>
<android.content.ClipData: android.content.ClipDescription getDescription()>
<android.view.animation.Transformation: android.graphics.Matrix getMatrix()>
<android.location.Criteria: int getSpeedAccuracy()>
<android.app.ActivityThread$ApplicationThread: void scheduleUnbindService(android.os.IBinder,android.content.Intent)>
<GenerationGG: android.webkit.MimeTypeMap get_androidwebkitMimeTypeMap()>
<android.graphics.Canvas: void drawPatch(android.graphics.Bitmap,byte[],android.graphics.RectF,android.graphics.Paint)>
<com.android.internal.widget.ActionBarView: com.android.internal.widget.ActionBarView$ExpandedActionViewMenuPresenter access$100(com.android.internal.widget.ActionBarView)>
<android.graphics.Region: java.lang.String nativeToString(int)>
<android.net.sip.ISipSessionListener$Stub: android.net.sip.ISipSessionListener asInterface(android.os.IBinder)>
<android.widget.CursorAdapter: android.widget.FilterQueryProvider getFilterQueryProvider()>
<android.widget.TextView: java.lang.CharSequence getHint()>
<android.accounts.Account: java.lang.String toString()>
<android.webkit.CacheManager: java.io.File getCacheFileBaseDir()>
<android.net.NetworkInfo: java.lang.String getReason()>
<android.app.Instrumentation$ActivityMonitor: android.app.Activity waitForActivity()>
<android.view.MotionEvent: float getToolMinor()>
<android.text.style.SubscriptSpan: int getSpanTypeId()>
<android.widget.TextView: android.content.Context access$3300(android.widget.TextView)>
<com.android.server.am.ActivityRecord: boolean mayFreezeScreenLocked(com.android.server.am.ProcessRecord)>
<android.renderscript.Script: void bindAllocation(android.renderscript.Allocation,int)>
<android.animation.LayoutTransition: void addTransitionListener(android.animation.LayoutTransition$TransitionListener)>
<com.android.server.PowerManagerService$LockList: void <init>(com.android.server.PowerManagerService)>
<android.widget.TextView: int getAutoLinkMask()>
<com.android.server.usb.UsbSettingsManager: boolean hasPermission(android.hardware.usb.UsbAccessory)>
<com.android.server.LocationManagerService$1: void <init>(com.android.server.LocationManagerService)>
<android.media.Metadata: void checkType(int,int)>
<android.text.AlteredCharSequence$AlteredSpanned: int nextSpanTransition(int,int,java.lang.Class)>
<android.text.DynamicLayout: int getTopPadding()>
<com.android.internal.telephony.sip.SipPhone$SipConnection: com.android.internal.telephony.Call$State getState()>
<android.widget.ListView: void removeFixedViewInfo(android.view.View,java.util.ArrayList)>
<GenerationGG: android.view.accessibility.AccessibilityManager$AccessibilityStateChangeListener get_androidviewaccessibilityAccessibilityManager__AccessibilityStateChangeListener()>
<com.android.server.CountryDetectorService$Receiver: int hashCode()>
<android.widget.EdgeEffect: void onPull(float)>
<android.test.mock.MockContentProvider: java.lang.String getType(android.net.Uri)>
<android.os.Messenger$1: android.os.Messenger[] newArray(int)>
<android.view.GLES20Canvas: int nSaveLayerAlpha(int,int,int)>
<android.database.BulkCursorToCursorAdaptor: int findRowIdColumnIndex(java.lang.String[])>
<android.animation.PropertyValuesHolder: void <init>(android.util.Property,android.animation.PropertyValuesHolder$1)>
<com.android.internal.widget.LockPatternView$DisplayMode: com.android.internal.widget.LockPatternView$DisplayMode[] values()>
<android.database.sqlite.SQLiteDatabase: boolean isDbLockedByOtherThreads()>
<android.webkit.CookieManager: void setAcceptFileSchemeCookies(boolean)>
<android.app.BackStackRecord: android.app.FragmentTransaction add(android.app.Fragment,java.lang.String)>
<android.telephony.SmsMessage$SubmitPdu: java.lang.String toString()>
<android.test.mock.MockResources: java.lang.String getResourcePackageName(int)>
<android.webkit.WebView: android.webkit.WebViewCore$DrawData access$6900(android.webkit.WebView)>
<android.app.Activity: void onContentChanged()>
<com.android.server.WifiService$LockList: void <init>(com.android.server.WifiService,com.android.server.WifiService$1)>
<android.os.Environment: java.io.File getSecureDataDirectory()>
<android.telephony.gsm.SmsMessage: boolean isMWISetMessage()>
<com.android.server.location.GpsXtraDownloader: byte[] doDownload(java.lang.String,boolean,java.lang.String,int)>
<android.media.AudioService: boolean access$5500(android.media.AudioService)>
<android.content.IntentSender: int describeContents()>
<com.android.internal.widget.ActionBarView: android.os.Parcelable onSaveInstanceState()>
<com.android.server.PowerManagerService: java.lang.Runnable access$5900(com.android.server.PowerManagerService)>
<com.android.internal.os.BatteryStatsImpl$Uid$Proc: long getUserTime(int)>
<android.net.Uri$StringUri: android.net.Uri$Part getSsp()>
<com.android.server.usb.UsbHostManager: void <clinit>()>
<android.util.MonthDisplayHelper: void <init>(int,int)>
<android.media.FaceDetector: void fft_get_face(android.media.FaceDetector$Face,int)>
<android.content.IntentFilter: android.content.IntentFilter create(java.lang.String,java.lang.String)>
<android.filterfw.core.NativeFrame: int getNativeCapacity()>
<android.graphics.drawable.DrawableContainer$1: void <init>(android.graphics.drawable.DrawableContainer)>
<android.bluetooth.BluetoothDeviceProfileState: void setTrust(int)>
<android.webkit.WebViewCore: void nativeStopPaintingCaret()>
<android.app.IAlarmManager$Stub: android.os.IBinder asBinder()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: void unplug(long,long)>
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getDeviceSvn()>
<android.view.View: boolean isClickable()>
<android.widget.AbsListView: void initVelocityTrackerIfNotExists()>
<android.net.NetworkStats: long getElapsedRealtimeAge()>
<android.widget.ActivityChooserView: android.widget.FrameLayout access$800(android.widget.ActivityChooserView)>
<android.opengl.GLSurfaceView$GLThreadManager: void <init>(android.opengl.GLSurfaceView$1)>
<com.android.server.connectivity.Tethering: boolean isBluetooth(java.lang.String)>
<android.graphics.drawable.InsetDrawable: void scheduleDrawable(android.graphics.drawable.Drawable,java.lang.Runnable,long)>
<com.android.server.WifiService: boolean access$2000(com.android.server.WifiService)>
<com.android.internal.util.StateMachine: void addState(com.android.internal.util.State,com.android.internal.util.State)>
<android.net.wifi.WifiNative: java.lang.String scanResultsCommand()>
<android.content.IntentFilter: void setPriority(int)>
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void onCdmaOtaProvision(android.os.AsyncResult)>
<android.net.wifi.WifiStateMachine: void setWifiEnabled(boolean)>
<android.renderscript.Sampler$Builder: void setMinification(android.renderscript.Sampler$Value)>
<android.renderscript.RenderScript: void nProgramBindConstants(int,int,int)>
<android.graphics.Matrix: boolean native_setRectToRect(int,android.graphics.RectF,android.graphics.RectF,int)>
<android.graphics.NinePatch: android.graphics.Region getTransparentRegion(android.graphics.Rect)>
<android.opengl.GLException: void <init>(int)>
<android.os.Debug: int getGlobalExternalAllocCount()>
<android.graphics.drawable.shapes.ArcShape: void draw(android.graphics.Canvas,android.graphics.Paint)>
<android.inputmethodservice.KeyboardView: boolean access$500(android.inputmethodservice.KeyboardView)>
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void <clinit>()>
<android.net.Uri$Builder: void <init>()>
<android.test.TestCaseUtil: java.util.List getTests(junit.framework.Test,boolean,java.util.Set)>
<com.android.server.sip.SipSessionGroup: void closeToNotReceiveCalls()>
<android.view.FocusFinder: int minorAxisDistance(int,android.graphics.Rect,android.graphics.Rect)>
<android.view.ViewRootImpl: android.media.AudioManager getAudioManager()>
<android.app.Notification$Builder: android.app.Notification$Builder setOnlyAlertOnce(boolean)>
<GenerationGG: android.animation.IntEvaluator get_androidanimationIntEvaluator()>
<com.android.server.BackupManagerService$RestoreParams: void <init>(com.android.server.BackupManagerService,com.android.internal.backup.IBackupTransport,android.app.backup.IRestoreObserver,long,boolean)>
<android.net.wifi.WifiStateMachine: com.android.internal.util.State access$2000(android.net.wifi.WifiStateMachine)>
<android.graphics.Path: void native_rCubicTo(int,float,float,float,float,float,float)>
<com.android.internal.telephony.Phone$State: void <clinit>()>
<com.android.internal.view.menu.MenuItemImpl: boolean hasSubMenu()>
<android.view.IApplicationToken$Stub: void <init>()>
<android.os.MemoryFile: java.io.FileDescriptor native_open(java.lang.String,int)>
<com.android.internal.os.BatteryStatsImpl: long computeRealtime(long,int)>
<android.telephony.gsm.GsmCellLocation: int getLac()>
<android.view.GLES20Canvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>
<android.net.wifi.WifiWatchdogStateMachine: void access$5500(android.net.wifi.WifiWatchdogStateMachine,com.android.internal.util.IState)>
<com.android.internal.telephony.gsm.GsmSmsAddress: boolean isCphsVoiceMessageSet()>
<android.database.sqlite.DatabaseConnectionPool$PoolObj: java.lang.String toString()>
<android.telephony.NeighboringCellInfo: int describeContents()>
<com.android.internal.widget.LockPatternView: void onMeasure(int,int)>
<GenerationGG: android.widget.Scroller get_androidwidgetScroller()>
<com.android.internal.view.InputConnectionWrapper$InputContextCallback: void setSelectedText(java.lang.CharSequence,int)>
<com.android.server.connectivity.Vpn: int jniCreate(int)>
<android.widget.Gallery: int computeHorizontalScrollExtent()>
<android.view.KeyEvent: void <init>(long,long,int,int,int,int)>
<android.webkit.WebViewCore: void access$1600(android.webkit.WebViewCore,float,int)>
<com.android.server.am.UsageStatsService: java.util.ArrayList getUsageStatsFileListFLOCK()>
<android.webkit.WebSettings: void setTextSize(android.webkit.WebSettings$TextSize)>
<android.bluetooth.BluetoothDeviceProfileState$IncomingHandsfree: void <init>(android.bluetooth.BluetoothDeviceProfileState)>
<android.webkit.CallbackProxy: android.webkit.WebChromeClient getWebChromeClient()>
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void setSignalStrengthDefaultValues()>
<com.android.server.wm.WindowManagerService: boolean moveInputMethodWindowsIfNeededLocked(boolean)>
<android.view.animation.Transformation: java.lang.String toShortString()>
<android.graphics.RegionIterator: void nativeDestructor(int)>
<android.net.http.Headers: void setCacheControl(java.lang.String)>
<com.android.internal.os.HandlerCaller: com.android.internal.os.HandlerCaller$SomeArgs obtainArgs()>
<android.speech.tts.SynthesisRequest: java.lang.String getText()>
<android.renderscript.RenderScript: void nAllocationData2D(int,int,int,int,int,int,int,int,int,int,int,int)>
<android.view.ActionProvider: boolean hasSubMenu()>
<android.os.StrictMode$VmPolicy: void <init>(int,java.util.HashMap)>
<android.telephony.ServiceState: java.lang.String getOperatorNumeric()>
<GenerationGG: java.io.Reader get_javaioReader()>
<android.app.Instrumentation$ActivityResult: int getResultCode()>
<android.os.Handler: boolean sendMessageAtFrontOfQueue(android.os.Message)>
<GenerationGG: android.app.PendingIntent$OnFinished get_androidappPendingIntent__OnFinished()>
<android.view.View: float getLeftFadingEdgeStrength()>
<android.webkit.GeolocationPermissions$2: void handleMessage(android.os.Message)>
<android.graphics.Path: void moveTo(float,float)>
<android.app.ActivityManager$RunningServiceInfo$1: android.app.ActivityManager$RunningServiceInfo createFromParcel(android.os.Parcel)>
<android.net.http.AndroidHttpClientConnection: void sendRequestHeader(org.apache.http.HttpRequest)>
<android.net.wifi.WifiStateMachine: void access$14300(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask: int access$1202(android.accounts.AccountManager$GetAuthTokenByTypeAndFeaturesTask,int)>
<android.os.Parcel: java.io.Serializable readSerializable()>
<android.text.TextUtils: int getCapsMode(java.lang.CharSequence,int,int)>
<com.android.internal.textservice.ISpellCheckerSessionListener$Stub$Proxy: android.os.IBinder asBinder()>
<android.webkit.WebTextView$MyResultReceiver: void <init>(android.webkit.WebTextView,android.os.Handler)>
<android.bluetooth.IBluetooth$Stub: android.bluetooth.IBluetooth asInterface(android.os.IBinder)>
<com.android.internal.telephony.cat.Duration$1: com.android.internal.telephony.cat.Duration[] newArray(int)>
<android.media.AudioRecord: void loge(java.lang.String)>
<android.text.PackedIntVector: void moveRowGapTo(int)>
<com.android.internal.telephony.DataConnection: com.android.internal.telephony.DataCallState$SetupResult setLinkProperties(com.android.internal.telephony.DataCallState,android.net.LinkProperties)>
<android.view.KeyEvent: android.view.KeyCharacterMap getKeyCharacterMap()>
<android.accounts.AccountAuthenticatorResponse: void <init>(android.accounts.IAccountAuthenticatorResponse)>
<com.android.internal.telephony.cat.CatLog: void d(java.lang.Object,java.lang.String)>
<android.test.mock.MockResources: java.lang.String getString(int,java.lang.Object[])>
<android.preference.PreferenceManager: boolean shouldCommit()>
<android.content.ContentProviderNative: void <init>()>
<android.test.RenamingDelegatingContext: boolean deleteFile(java.lang.String)>
<android.text.style.SubscriptSpan: void updateMeasureState(android.text.TextPaint)>
<android.os.AsyncResult: android.os.AsyncResult forMessage(android.os.Message,java.lang.Object,java.lang.Throwable)>
<android.text.style.SpellCheckSpan: void setSpellCheckInProgress(boolean)>
<android.content.pm.ApplicationInfo: android.content.pm.ApplicationInfo getApplicationInfo()>
<android.util.JsonReader: boolean fillBuffer(int)>
<android.graphics.Paint: float getTextSize()>
<android.graphics.Region: void <init>(android.graphics.Rect)>
<android.app.Activity: void setFinishOnTouchOutside(boolean)>
<com.android.internal.telephony.cdma.CdmaConnection: com.android.internal.telephony.cdma.CdmaCall parentFromDCState(com.android.internal.telephony.DriverCall$State)>
<android.location.Criteria: void writeToParcel(android.os.Parcel,int)>
<android.app.WallpaperManager$FastBitmapDrawable: int getIntrinsicHeight()>
<com.android.internal.os.BatteryStatsImpl$Uid: java.util.Map getProcessStats()>
<com.android.internal.telephony.gsm.VoiceMailConstants: java.lang.String getVoiceMailTag(java.lang.String)>
<android.app.ContextImpl$19: void <init>()>
<android.widget.GridLayout$Axis: int[] getLeadingMargins()>
<android.app.admin.DeviceAdminInfo$1: void <init>()>
<android.widget.ExpandableListConnector: int findGroupPosition(long,int)>
<android.server.search.Searchables$1: void <init>()>
<android.accounts.AccountManagerService: void <clinit>()>
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: java.util.HashMap access$700(com.android.server.pm.PackageManagerService$ActivityIntentResolver)>
<android.server.BluetoothA2dpService: void addAudioSink(android.bluetooth.BluetoothDevice)>
<android.net.http.Request: android.net.http.EventHandler getEventHandler()>
<com.android.internal.telephony.gsm.SmsMessage: void <init>()>
<android.view.GLES20RenderLayer: boolean isValid()>
<android.preference.PreferenceCategory: boolean isEnabled()>
<android.widget.OverScroller: void abortAnimation()>
<android.graphics.Matrix$1: boolean preSkew(float,float)>
<android.app.ContextImpl: java.io.FileInputStream openFileInput(java.lang.String)>
<android.widget.ListPopupWindow: boolean isInputMethodNotNeeded()>
<android.media.AudioService: int access$4700(android.media.AudioService)>
<android.telephony.PhoneNumberUtils$CountryCallingCodeAndNewIndex: void <init>(int,int)>
<android.renderscript.Element: android.renderscript.Element I8(android.renderscript.RenderScript)>
<android.widget.AbsListView$SavedState: void <init>(android.os.Parcelable)>
<android.text.style.StrikethroughSpan: void <init>(android.os.Parcel)>
<GenerationGG: android.test.suitebuilder.annotation.Suppress get_androidtestsuitebuilderannotationSuppress()>
<com.android.server.AlarmManagerService$AlarmThread: void <init>(com.android.server.AlarmManagerService)>
<com.android.server.am.BaseErrorDialog: boolean access$002(com.android.server.am.BaseErrorDialog,boolean)>
<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean canDispatchAccessibilityEvent(android.view.accessibility.AccessibilityEvent)>
<android.webkit.DeviceMotionService: void <clinit>()>
<android.content.SyncContext: void <init>(android.content.ISyncContext)>
<android.os.Parcel: android.os.Bundle readBundle(java.lang.ClassLoader)>
<android.content.SyncStatusInfo: void <init>(int)>
<com.android.internal.telephony.RetryManager: boolean validateNonNegativeInt(java.lang.String,int)>
<android.os.Handler: void handleCallback(android.os.Message)>
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: void writeToParcel(android.os.Parcel,long)>
<android.view.CompatibilityInfoHolder: android.content.res.CompatibilityInfo getIfNeeded()>
<android.app.DialogFragment: void <init>()>
<android.accounts.AccountManagerService: java.util.LinkedHashMap access$500(android.accounts.AccountManagerService)>
<android.widget.ImageView: int getBaseline()>
<android.widget.CalendarView$WeekView: boolean getDayFromLocation(float,java.util.Calendar)>
<android.widget.CalendarView: void setCurrentLocale(java.util.Locale)>
<DumbClass: void DumbMethod30()>
<com.android.server.LocationManagerService$LpPowerComparator: void <init>(com.android.server.LocationManagerService)>
<GenerationGG: android.media.audiofx.Equalizer get_androidmediaaudiofxEqualizer()>
<android.graphics.Paint: boolean isDither()>
<android.os.Debug: int getThreadExternalAllocSize()>
<android.os.StrictMode: void enableDefaults()>
<android.widget.TableLayout: void setShrinkAllColumns(boolean)>
<android.view.ActionProvider: void onPrepareSubMenu(android.view.SubMenu)>
<android.net.NetworkTemplate: void <init>(int,java.lang.String)>
<android.view.View$13: void setValue(android.view.View,float)>
<android.text.method.HideReturnsTransformationMethod: char[] getReplacement()>
<android.content.res.StringBlock: java.lang.String nativeGetString(int,int)>
<android.widget.RadioGroup: android.widget.CompoundButton$OnCheckedChangeListener access$700(android.widget.RadioGroup)>
<com.android.server.pm.PackageManagerService$DumpState: void setDump(int)>
<android.net.wifi.p2p.WifiP2pService$WifiStateReceiver: void <init>(android.net.wifi.p2p.WifiP2pService,android.net.wifi.p2p.WifiP2pService$1)>
<Wrapper_android_graphics_PixelXorXfermode: void test_android_graphics_PixelXorXfermode()>
<android.preference.DialogPreference: void setPositiveButtonText(java.lang.CharSequence)>
<GenerationGG: android.database.AbstractCursor get_androiddatabaseAbstractCursor()>
<android.hardware.Sensor: float getResolution()>
<android.graphics.RectF$1: java.lang.Object[] newArray(int)>
<com.android.internal.telephony.DataConnection$DcInactiveState: void enter()>
<GenerationGG: java.util.Formatter get_javautilFormatter()>
<android.content.res.AssetManager: void makeStringBlocks(boolean)>
<com.android.internal.app.AlertController: android.widget.Button access$000(com.android.internal.app.AlertController)>
<android.location.GpsSatellite: boolean hasAlmanac()>
<android.app.ActivityManager$MemoryInfo: void <clinit>()>
<android.bluetooth.BluetoothDeviceProfileState: void access$7500(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.renderscript.RenderScript: void nFileA3DGetIndexEntries(int,int,int[],java.lang.String[])>
<android.view.MotionEvent: int nativeGetToolType(int,int)>
<com.android.i18n.phonenumbers.geocoding.DefaultMapStorage: int getPrefix(int)>
<android.telephony.PhoneNumberFormattingTextWatcher: void stopFormatting()>
<android.graphics.drawable.shapes.Shape: float getWidth()>
<android.server.BluetoothService: int getNumberOfApplicationStateChangeTrackers()>
<android.net.sip.SimpleSessionDescription$Fields: void access$000(android.net.sip.SimpleSessionDescription$Fields,java.lang.String)>
<com.android.internal.telephony.CommandsInterface$RadioState: boolean isCdma()>
<android.animation.Animator: void removeListener(android.animation.Animator$AnimatorListener)>
<android.app.NativeActivity: void onResume()>
<android.content.ClipboardManager: android.os.Handler access$000(android.content.ClipboardManager)>
<com.android.internal.telephony.cat.AppInterface$CommandType: com.android.internal.telephony.cat.AppInterface$CommandType[] values()>
<android.webkit.URLUtil: boolean isAboutUrl(java.lang.String)>
<android.gesture.Instance: void <clinit>()>
<android.view.accessibility.AccessibilityNodeInfo: void <init>()>
<Wrapper_android_content_SyncResult: void test_android_content_SyncResult()>
<android.view.ViewDebug: void <init>()>
<android.graphics.Picture: int ni()>
<android.graphics.Path: void native_setFillType(int,int)>
<com.android.server.am.ProcessRecord: void toShortString(java.lang.StringBuilder)>
<android.server.BluetoothPanProfileHandler$BluetoothPanDevice: void <init>(android.server.BluetoothPanProfileHandler,int,java.lang.String,java.lang.String,int)>
<android.renderscript.Element: android.renderscript.Element I64_3(android.renderscript.RenderScript)>
<android.view.SurfaceView$4: android.graphics.Canvas lockCanvas()>
<android.app.IBackupAgent$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.server.am.ActivityManagerService: boolean incProviderCount(com.android.server.am.ProcessRecord,com.android.server.am.ContentProviderRecord)>
<android.hardware.usb.UsbAccessory: java.lang.String getUri()>
<com.android.server.sip.SipSessionListenerProxy$2: void <init>(com.android.server.sip.SipSessionListenerProxy,android.net.sip.ISipSession,android.net.sip.SipProfile,java.lang.String)>
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimImpiLoaded: void onRecordLoaded(android.os.AsyncResult)>
<android.net.wifi.WifiNative: boolean p2pFind()>
<android.location.GpsSatellite: float getAzimuth()>
<com.android.internal.view.menu.ActionMenuItem: int getGroupId()>
<android.widget.TextView$ChangeWatcher: void <init>(android.widget.TextView)>
<android.graphics.BitmapRegionDecoder: int getWidth()>
<android.webkit.LoadListener: void cancel()>
<android.net.LocalSocketImpl: void finalize()>
<com.android.internal.statusbar.StatusBarIconList: void copyFrom(com.android.internal.statusbar.StatusBarIconList)>
<android.webkit.WebView$HitTestResult: void access$900(android.webkit.WebView$HitTestResult,int)>
<com.android.server.accessibility.TouchExplorer: int computeInjectionAction(int,int)>
<com.android.internal.telephony.PhoneBase: com.android.internal.telephony.ims.IsimRecords getIsimRecords()>
<android.location.Criteria: void <init>(android.location.Criteria)>
<android.telephony.ServiceState: void setRoaming(boolean)>
<android.content.ContentProvider: void onConfigurationChanged(android.content.res.Configuration)>
<junit.framework.TestCase: void assertEquals(float,float,float)>
<com.android.server.wm.AppWindowToken: void clearAnimation()>
<GenerationGG: android.media.audiofx.PresetReverb$Settings get_androidmediaaudiofxPresetReverb__Settings()>
<Wrapper_android_test_ComparisonFailure: void test_android_test_ComparisonFailure()>
<com.android.server.accessibility.AccessibilityManagerService: java.util.List getEnabledAccessibilityServiceList(int)>
<android.view.Display: int getRawWidth()>
<android.opengl.ETC1Util: android.opengl.ETC1Util$ETC1Texture compressTexture(java.nio.Buffer,int,int,int,int)>
<com.android.server.sip.SipSessionGroup$SipSessionImpl$SessionTimer: void cancel()>
<android.graphics.Bitmap: int nativeWidth(int)>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker$ApnChangeObserver: void <init>(com.android.internal.telephony.gsm.GsmDataConnectionTracker)>
<android.os.Bundle: void <init>(android.os.Bundle)>
<android.filterfw.core.GLFrame: int getFboId()>
<GenerationGG: android.animation.AnimatorInflater get_androidanimationAnimatorInflater()>
<android.database.sqlite.SQLiteConstraintException: void <init>(java.lang.String)>
<GenerationGG: android.text.style.EasyEditSpan get_androidtextstyleEasyEditSpan()>
<com.android.server.wm.InputManager$InputFilterHost: void sendInputEvent(android.view.InputEvent,int)>
<android.app.ApplicationLoaders: void <clinit>()>
<android.os.MemoryFile$MemoryOutputStream: void write(byte[],int,int)>
<android.view.WindowManagerImpl: void <clinit>()>
<android.content.ComponentName: boolean equals(java.lang.Object)>
<android.net.wifi.WpsStateMachine$1: void <clinit>()>
<android.accounts.AccountManager$9: void <init>(android.accounts.AccountManager,android.app.Activity,android.os.Handler,android.accounts.AccountManagerCallback,java.lang.String,android.app.Activity)>
<android.util.JsonReader: void <init>(java.io.Reader)>
<com.android.internal.telephony.cdma.CDMAPhone: void onMMIDone(com.android.internal.telephony.cdma.CdmaMmiCode)>
<android.webkit.JWebCoreJavaBridge: void <init>()>
<com.android.internal.telephony.IccCard$State: void <init>(java.lang.String,int)>
<android.content.ContentResolver: void maybeLogQueryToEventLog(long,android.net.Uri,java.lang.String[],java.lang.String,java.lang.String)>
<com.android.server.DevicePolicyManagerService: com.android.server.DevicePolicyManagerService$ActiveAdmin getActiveAdminForCallerLocked(android.content.ComponentName,int)>
<com.android.internal.telephony.sip.SipCommandInterface: void dial(java.lang.String,int,android.os.Message)>
<GenerationGG: android.text.method.TransformationMethod get_androidtextmethodTransformationMethod()>
<android.nfc.tech.IsoDep: android.nfc.Tag getTag()>
<com.android.internal.view.menu.MenuBuilder: int getOrdering(int)>
<Wrapper_android_text_style_MetricAffectingSpan: void test_android_text_style_MetricAffectingSpan()>
<android.graphics.Matrix: void mapPoints(float[],int,float[],int,int)>
<android.app.LoadedApk: android.content.IIntentReceiver forgetReceiverDispatcher(android.content.Context,android.content.BroadcastReceiver)>
<junit.framework.TestCase: java.lang.String toString()>
<android.net.Uri$StringUri: java.lang.String getEncodedAuthority()>
<android.speech.tts.FileSynthesisCallback: int getMaxBufferSize()>
<com.android.internal.telephony.PhoneProxy: android.telephony.ServiceState getServiceState()>
<com.android.internal.telephony.gsm.GsmSmsAddress: void <init>(byte[],int,int)>
<android.net.SSLCertificateSocketFactory: void setTrustManagers(javax.net.ssl.TrustManager[])>
<android.text.method.TextKeyListener: void <init>(android.text.method.TextKeyListener$Capitalize,boolean)>
<android.net.INetworkPolicyListener$Stub: android.net.INetworkPolicyListener asInterface(android.os.IBinder)>
<android.widget.RelativeLayout: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeFile(java.lang.String)>
<android.widget.ListView: void setDividerHeight(int)>
<android.text.method.HideReturnsTransformationMethod: char[] getOriginal()>
<android.content.pm.ComponentInfo: void dumpBack(android.util.Printer,java.lang.String)>
<DumbClass: void DumbMethod28()>
<android.view.ViewConfiguration: int getEdgeSlop()>
<android.content.ContentValues: void put(java.lang.String,java.lang.Boolean)>
<android.media.ExifInterface: void saveAttributesNative(java.lang.String,java.lang.String)>
<android.os.TokenWatcher: void dump()>
<android.app.backup.BackupDataInput$EntityHeader: void <init>(android.app.backup.BackupDataInput$1)>
<android.view.View$9: void <init>(java.lang.String)>
<android.net.wifi.WifiManager: int access$000(android.net.wifi.WifiManager)>
<android.view.View: void bringToFront()>
<android.widget.TimePicker: java.lang.Integer getCurrentHour()>
<android.renderscript.RenderScript: int rsnFileA3DCreateFromFile(int,java.lang.String)>
<android.database.sqlite.SQLiteDoneException: void <init>()>
<android.widget.GridLayout$1: void <init>()>
<android.view.TextureView: android.view.HardwareLayer getHardwareLayer()>
<android.preference.ListPreference: java.lang.CharSequence[] getEntries()>
<android.app.IThumbnailReceiver$Stub: android.app.IThumbnailReceiver asInterface(android.os.IBinder)>
<com.android.server.InputMethodManagerService$SessionState: java.lang.String toString()>
<android.media.SoundPool: void finalize()>
<java.lang.Object: void setInput(java.io.InputStream,java.lang.String)>
<android.media.MediaScannerConnection: void onServiceDisconnected(android.content.ComponentName)>
<android.util.JsonWriter: void setIndent(java.lang.String)>
<android.net.NetworkStats$1: void <init>()>
<android.text.style.SuggestionRangeSpan: void writeToParcel(android.os.Parcel,int)>
<GenerationGG: android.widget.SearchView$OnQueryTextListener get_androidwidgetSearchView__OnQueryTextListener()>
<com.android.server.PowerManagerService: void access$1100(com.android.server.PowerManagerService,int)>
<android.webkit.CallbackProxy$UploadFileMessageData: java.lang.String getAcceptType()>
<com.android.internal.app.IUsageStats$Stub$Proxy: android.os.IBinder asBinder()>
<android.accounts.AccountManager$AmsTask: java.lang.Object getResult()>
<android.content.ContextWrapper: boolean deleteFile(java.lang.String)>
<android.gesture.Gesture$1: java.lang.Object[] newArray(int)>
<com.android.internal.widget.ActionBarContextView: boolean shouldDelayChildPressedState()>
<com.android.server.sip.SipService$AutoRegistrationProcess: boolean isRegistered()>
<android.media.MediaRecorder: void native_reset()>
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: boolean shouldPostNotification(com.android.internal.telephony.DataConnection$FailCause)>
<android.view.accessibility.AccessibilityNodeInfo: int hashCode()>
<com.android.internal.view.menu.ActionMenuItem: android.view.MenuItem setIntent(android.content.Intent)>
<android.widget.OverScroller: void <init>(android.content.Context,android.view.animation.Interpolator,boolean)>
<android.net.SntpClient: void <init>()>
<com.android.server.am.ActivityManagerService$ServiceRestarter: void setService(com.android.server.am.ServiceRecord)>
<android.graphics.drawable.BitmapDrawable: void <init>()>
<android.media.AudioService: int access$4600(android.media.AudioService)>
<android.media.audiofx.AudioEffect: int native_setEnabled(boolean)>
<android.widget.AutoCompleteTextView: android.widget.ListAdapter getAdapter()>
<android.server.BluetoothService: void removeProfileState(java.lang.String)>
<android.widget.FastScroller: void onItemCountChanged(int,int)>
<com.android.server.am.PendingIntentRecord$Key: boolean equals(java.lang.Object)>
<com.android.internal.telephony.sip.SipCommandInterface: void setRadioPower(boolean,android.os.Message)>
<android.view.GLES20Canvas: void concat(android.graphics.Matrix)>
<android.view.TextureView: void nSetDefaultBufferSize(android.graphics.SurfaceTexture,int,int)>
<android.view.View: void setKeyedTag(int,java.lang.Object)>
<android.graphics.drawable.GradientDrawable: int getOpacity()>
<android.animation.AnimatorSet: boolean isRunning()>
<android.media.AudioTrack: int native_get_min_buff_size(int,int,int)>
<android.media.effect.EffectFactory: void <init>(android.media.effect.EffectContext)>
<android.inputmethodservice.KeyboardView: int access$1100(android.inputmethodservice.KeyboardView)>
<android.view.ViewGroup: void detachViewFromParent(android.view.View)>
<android.webkit.HTML5VideoFullScreen: boolean canSeekForward()>
<android.net.wifi.ScanResult: void <clinit>()>
<android.gesture.GestureStore: void save(java.io.OutputStream)>
<android.filterfw.core.OutputPort: void clear()>
<android.view.InputDevice: void writeToParcel(android.os.Parcel,int)>
<com.android.server.am.ActivityStack: int findActivityInHistoryLocked(com.android.server.am.ActivityRecord,int)>
<android.webkit.WebView: int access$9100(android.webkit.WebView)>
<android.widget.PopupWindow: void update()>
<android.content.res.XmlBlock$Parser: int getAttributeCount()>
<android.text.style.DynamicDrawableSpan: int getVerticalAlignment()>
<com.android.server.BackupManagerService: com.android.internal.backup.IBackupTransport access$000(com.android.server.BackupManagerService,java.lang.String)>
<android.net.LinkProperties: java.util.Collection getAddresses()>
<android.test.suitebuilder.TestGrouping$TestMethodPredicate: boolean apply(java.lang.Object)>
<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothDevice getRemoteDevice()>
<android.view.KeyEvent: void <init>(android.view.KeyEvent,int)>
<android.nfc.NfcActivityManager: void maybeRemoveState(android.app.Activity,android.nfc.NfcActivityManager$NfcActivityState)>
<android.app.ContextImpl: java.io.File getSharedPrefsFile(java.lang.String)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: java.lang.String access$1100(com.android.internal.telephony.cdma.CdmaLteUiccRecords)>
<android.accounts.AccountManagerService$7: void <init>(android.accounts.AccountManagerService,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,java.lang.String)>
<android.media.audiofx.AudioEffect: void <clinit>()>
<android.app.backup.BackupAgent: android.os.IBinder onBind()>
<android.webkit.WebViewCore: void access$2100(android.webkit.WebViewCore,int,int,boolean)>
<android.app.Fragment: void <clinit>()>
<android.text.style.ImageSpan: void <init>(android.graphics.drawable.Drawable,java.lang.String)>
<android.database.sqlite.SQLiteDatabase: int getCachesize()>
<android.widget.TableRow$ChildrenTracker: void setOnHierarchyChangeListener(android.view.ViewGroup$OnHierarchyChangeListener)>
<android.graphics.Canvas: void finalizer(int)>
<com.android.server.wm.WindowManagerService: void wallpaperCommandComplete(android.os.IBinder,android.os.Bundle)>
<android.net.wifi.WifiStateMachine: void access$4700(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<com.android.internal.view.menu.MenuBuilder: int findItemIndex(int)>
<android.webkit.WebSettings$EventHandler: void createHandler()>
<android.renderscript.Sampler$Builder: void setWrapT(android.renderscript.Sampler$Value)>
<android.view.ViewGroup: void onInitializeAccessibilityNodeInfoInternal(android.view.accessibility.AccessibilityNodeInfo)>
<com.android.internal.telephony.UUSInfo: byte[] getUserData()>
<android.graphics.drawable.PaintDrawable: void <init>(int)>
<android.view.MotionEvent: void nativeTransform(int,android.graphics.Matrix)>
<android.test.suitebuilder.TestGrouping: java.util.List select(java.util.Collection,com.android.internal.util.Predicate)>
<DumbClass: void DumbMethod25()>
<android.widget.RemoteViewsService: void <clinit>()>
<com.android.internal.view.menu.ActionMenuView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.webkit.WebView: boolean access$2000(android.webkit.WebView)>
<android.webkit.WebView: int access$4300(android.webkit.WebView)>
<com.android.server.sip.SipSessionGroup: com.android.server.sip.SipWakeupTimer access$2700(com.android.server.sip.SipSessionGroup)>
<com.android.internal.telephony.sip.SipPhoneBase: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>
<com.android.internal.telephony.IccRecords: java.lang.String getOperatorNumeric()>
<android.media.AudioService: boolean isStreamAffectedByRingerMode(int)>
<com.android.internal.view.menu.MenuBuilder: android.view.MenuItem findItem(int)>
<android.telephony.SignalStrength: void <init>(android.os.Parcel)>
<com.android.server.NotificationManagerService: void <clinit>()>
<com.android.server.wm.InputManager: void monitor()>
<android.net.rtp.AudioCodec: void <clinit>()>
<android.content.ContextWrapper: boolean deleteDatabase(java.lang.String)>
<android.view.View: boolean awakenScrollBars()>
<android.security.Credentials: android.security.Credentials getInstance()>
<com.android.internal.os.BatteryStatsImpl: void noteInputEventAtomic()>
<com.android.server.location.GpsLocationProvider: boolean access$1200(com.android.server.location.GpsLocationProvider)>
<android.text.style.LeadingMarginSpan$Standard: void writeToParcel(android.os.Parcel,int)>
<com.android.i18n.phonenumbers.Phonenumber$PhoneNumber: boolean hasCountryCodeSource()>
<android.accounts.AccountAuthenticatorResponse$1: java.lang.Object createFromParcel(android.os.Parcel)>
<GenerationGG: android.view.LayoutInflater$Filter get_androidviewLayoutInflater__Filter()>
<android.net.wifi.WifiStateMachine: android.net.wifi.WpsStateMachine access$3800(android.net.wifi.WifiStateMachine)>
<android.os.StrictMode: void access$1100(int,android.os.StrictMode$ViolationInfo)>
<android.view.View: void setNextFocusUpId(int)>
<android.content.ContentProvider: void <init>(android.content.Context,java.lang.String,java.lang.String,android.content.pm.PathPermission[])>
<Wrapper_android_net_rtp_AudioGroup: void test_android_net_rtp_AudioGroup()>
<android.app.FragmentManagerImpl: void popBackStack()>
<android.net.wifi.p2p.WifiP2pDeviceList: boolean clear()>
<android.widget.Spinner$DropDownAdapter: int getViewTypeCount()>
<android.media.JetPlayer$NativeEventHandler: void handleMessage(android.os.Message)>
<android.widget.TextView$CharWrapper: void <init>(char[],int,int)>
<com.android.server.location.MockProvider: boolean hasMonetaryCost()>
<android.widget.TimePicker: android.widget.NumberPicker access$500(android.widget.TimePicker)>
<android.webkit.WebTextView: void sendDomEvent(android.view.KeyEvent)>
<android.text.Spannable$Factory: void <clinit>()>
<com.android.server.DiskStatsService: void reportFreeSpace(java.io.File,java.lang.String,java.io.PrintWriter)>
<android.location.Address: void setFeatureName(java.lang.String)>
<com.android.internal.view.menu.MenuItemImpl: void setExclusiveCheckable(boolean)>
<GenerationGG: android.net.Credentials get_androidnetCredentials()>
<android.net.wifi.WifiConfigStore: boolean isUsingStaticIp(int)>
<android.view.animation.GridLayoutAnimationController: void <init>(android.view.animation.Animation)>
<android.media.SoundPool: java.lang.Object access$000(android.media.SoundPool)>
<android.server.BluetoothService: void createIncomingConnectionStateFile()>
<android.test.mock.MockContentResolver: void addProvider(java.lang.String,android.content.ContentProvider)>
<android.graphics.Path: void native_rLineTo(int,float,float)>
<android.graphics.Canvas: void native_drawRect(int,float,float,float,float,int)>
<android.view.MotionEvent: int nativeFindPointerIndex(int,int)>
<android.net.InterfaceConfiguration: java.lang.String toString()>
<android.hardware.usb.UsbEndpoint: void <clinit>()>
<android.preference.Preference: void unregisterDependent(android.preference.Preference)>
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: void dispose()>
<android.content.ContentProviderOperation: java.lang.String toString()>
<android.media.AsyncPlayer$Command: java.lang.String toString()>
<android.widget.AutoCompleteTextView: int getDropDownAnchor()>
<android.accessibilityservice.AccessibilityServiceInfo: void <init>()>
<com.android.server.wm.WindowManagerService: void reAddWindowToListInOrderLocked(com.android.server.wm.WindowState)>
<com.android.server.am.ActivityManagerService: java.io.File getCalledPreBootReceiversFile()>
<android.os.Parcel: void readLongArray(long[])>
<android.net.NetworkIdentity: boolean getRoaming()>
<android.content.pm.PackageParser: java.lang.String buildClassName(java.lang.String,java.lang.CharSequence,java.lang.String[])>
<com.android.server.DropBoxManagerService$EntryFile: void <init>(java.io.File,int)>
<android.drm.DrmInfoRequest: boolean isValidType(int)>
<android.widget.HeaderViewListAdapter: boolean removeHeader(android.view.View)>
<android.bluetooth.BluetoothDeviceProfileState: void access$6900(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<com.android.server.am.ActivityManagerService$1: java.lang.String packageForFilter(com.android.server.am.BroadcastFilter)>
<android.media.AudioTrack: android.media.AudioTrack$OnPlaybackPositionUpdateListener access$300(android.media.AudioTrack)>
<android.graphics.Matrix$1: void oops()>
<android.server.BluetoothHealthProfileHandler: android.server.BluetoothHealthProfileHandler$HealthChannel getMainChannel(android.bluetooth.BluetoothDevice,android.bluetooth.BluetoothHealthAppConfiguration)>
<android.widget.RemoteViews$Action: void <init>()>
<android.widget.TextView$PositionListener: void addSubscriber(android.widget.TextView$TextViewPositionListener,boolean)>
<android.app.SharedPreferencesImpl$MemoryCommitResult: void <init>(android.app.SharedPreferencesImpl$1)>
<android.media.audiofx.AudioEffect: void native_init()>
<android.widget.RemoteViews$SetOnClickPendingIntent: void <init>(android.widget.RemoteViews,android.os.Parcel)>
<com.android.internal.telephony.sip.SipCommandInterface: void getLastCallFailCause(android.os.Message)>
<android.net.Uri$OpaqueUri: void writeToParcel(android.os.Parcel,int)>
<android.view.KeyCharacterMap: int nativeGetKeyboardType(int)>
<android.bluetooth.BluetoothProfileState$StableState: void <init>(android.bluetooth.BluetoothProfileState)>
<android.widget.AbsListView$FlingRunnable: android.widget.OverScroller access$1000(android.widget.AbsListView$FlingRunnable)>
<GenerationGG: android.os.AsyncTask get_androidosAsyncTask()>
<com.android.server.DropBoxManagerService: void init()>
<android.net.http.SslCertificate: java.util.Date parseDate(java.lang.String)>
<android.webkit.WebViewCore: void nativeScrollFocusedTextInput(float,int)>
<com.android.internal.telephony.gsm.GsmSMSDispatcher$SmsCbConcatInfo: boolean matchesLocation(java.lang.String,int,int)>
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: int getViewTypeCount()>
<GenerationGG: android.graphics.PorterDuff get_androidgraphicsPorterDuff()>
<android.view.InputChannel: android.view.InputChannel[] openInputChannelPair(java.lang.String)>
<android.net.wifi.WifiStateMachine: void access$8300(android.net.wifi.WifiStateMachine,android.os.Message)>
<android.net.wifi.WifiConfiguration: java.util.BitSet readBitSet(android.os.Parcel)>
<android.test.mock.MockContext: int checkCallingUriPermission(android.net.Uri,int)>
<com.android.server.location.GpsLocationProvider: boolean supportsBearing()>
<android.view.MotionEvent: long getEventTimeNano()>
<android.app.backup.BackupHelperDispatcher$Header: void <init>(android.app.backup.BackupHelperDispatcher$1)>
<android.content.ContextWrapper: android.content.res.AssetManager getAssets()>
<Wrapper_android_nfc_NfcManager: void test_android_nfc_NfcManager()>
<android.webkit.URLUtil: boolean isNetworkUrl(java.lang.String)>
<android.widget.ScrollView: int computeScrollDeltaToGetChildRectOnScreen(android.graphics.Rect)>
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getIMSI()>
<android.telephony.SmsMessage: java.lang.String getServiceCenterAddress()>
<Wrapper_android_test_mock_MockCursor: void test_android_test_mock_MockCursor()>
<com.android.server.location.MockProvider: boolean supportsAltitude()>
<android.graphics.PixelFormat: void <clinit>()>
<android.app.NativeActivity: void onPause()>
<GenerationGG: android.os.Parcel get_androidosParcel()>
<android.speech.tts.TextToSpeech: java.lang.Object access$900(android.speech.tts.TextToSpeech)>
<android.location.Address: void setLocality(java.lang.String)>
<GenerationGG: android.widget.SeekBar$OnSeekBarChangeListener get_androidwidgetSeekBar__OnSeekBarChangeListener()>
<android.hardware.Camera: void _addCallbackBuffer(byte[],int)>
<android.graphics.Paint: android.graphics.Xfermode setXfermode(android.graphics.Xfermode)>
<GenerationGG: android.test.ActivityUnitTestCase get_androidtestActivityUnitTestCase()>
<android.test.mock.MockContext: void sendOrderedBroadcast(android.content.Intent,java.lang.String,android.content.BroadcastReceiver,android.os.Handler,int,java.lang.String,android.os.Bundle)>
<android.view.inputmethod.InputMethodSubtype: java.util.List sort(android.content.Context,int,android.view.inputmethod.InputMethodInfo,java.util.List)>
<android.text.BoringLayout: int getEllipsisStart(int)>
<com.android.server.ConnectivityService: android.net.ProxyProperties access$3000(com.android.server.ConnectivityService)>
<android.app.Fragment$SavedState: void <init>(android.os.Bundle)>
<android.view.ViewRootImpl$AccessibilityInteractionController$1: android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs newInstance()>
<android.nfc.NfcFragment: void remove(android.app.Activity)>
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void invalidateCache()>
<android.app.Fragment: void setIndex(int)>
<android.webkit.WebView: int viewToContentY(int)>
<android.webkit.WebViewCore$WebCoreThread: void <init>(android.webkit.WebViewCore$1)>
<com.android.server.wm.WindowManagerService: float[] getAnimationScales()>
<android.media.AudioRecord$NativeEventHandler: void handleMessage(android.os.Message)>
<android.webkit.ZoomManager: float getTextWrapScale()>
<android.graphics.drawable.NinePatchDrawable: android.graphics.drawable.Drawable mutate()>
<android.app.ActivityThread: void queueOrSendMessage(int,java.lang.Object,int)>
<android.os.Handler: java.lang.String toString()>
<android.webkit.HTML5VideoView: boolean getAutostart()>
<android.app.ActivityManager$RunningServiceInfo$1: android.app.ActivityManager$RunningServiceInfo[] newArray(int)>
<android.media.ToneGenerator: void native_finalize()>
<android.gesture.Gesture: long access$002(android.gesture.Gesture,long)>
<android.media.IAudioFocusDispatcher$Stub$Proxy: void <init>(android.os.IBinder)>
<android.nfc.tech.NfcB: byte[] getApplicationData()>
<android.widget.VideoView: int access$100(android.widget.VideoView)>
<android.view.View: boolean onDragEvent(android.view.DragEvent)>
<com.android.server.pm.Settings: void readEnabledComponentsLPw(com.android.server.pm.PackageSettingBase,org.xmlpull.v1.XmlPullParser)>
<android.widget.TextView$InputContentType: void <init>(android.widget.TextView)>
<com.android.server.WifiService$DeathRecipient: void <init>(com.android.server.WifiService,int,java.lang.String,android.os.IBinder,android.os.WorkSource)>
<com.android.internal.telephony.cat.Item: void <init>(int,java.lang.String)>
<com.android.internal.os.ProcessStats: int onMeasureProcessName(java.lang.String)>
<com.android.server.connectivity.Vpn$Connection: void <init>(com.android.server.connectivity.Vpn)>
<com.android.server.pm.PreferredActivity: boolean onReadTag(java.lang.String,org.xmlpull.v1.XmlPullParser)>
<android.webkit.WebView$InvokeListBox: boolean access$9900(android.webkit.WebView$InvokeListBox)>
<android.net.http.AndroidHttpClientConnection: void doFlush()>
<android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper: com.android.internal.os.HandlerCaller access$100(android.service.wallpaper.WallpaperService$IWallpaperEngineWrapper)>
<com.android.internal.telephony.sip.SipCallBase: java.lang.String toString()>
<com.android.internal.app.ActionBarImpl: com.android.internal.widget.ActionBarContainer access$100(com.android.internal.app.ActionBarImpl)>
<android.telephony.TelephonyManager: android.telephony.TelephonyManager getDefault()>
<android.widget.LinearLayout: int getDividerWidth()>
<android.view.InputQueue: void access$100(long,boolean)>
<GenerationGG: android.view.KeyEvent$DispatcherState get_androidviewKeyEvent__DispatcherState()>
<android.webkit.WebView: boolean access$5700(android.webkit.WebView)>
<android.graphics.drawable.GradientDrawable$GradientState: void setGradientRadius(float)>
<android.net.NetworkTemplate: boolean matchesWifi(android.net.NetworkIdentity)>
<android.util.JsonReader: java.lang.String nextString(char)>
<android.mtp.MtpObjectInfo: int getParent()>
<android.location.Address: java.lang.String getCountryName()>
<android.media.audiofx.AudioEffect: void setEnableStatusListener(android.media.audiofx.AudioEffect$OnEnableStatusChangeListener)>
<com.android.internal.telephony.cat.ResponseData: void writeLength(java.io.ByteArrayOutputStream,int)>
<com.android.server.sip.SipHelper: javax.sip.address.SipURI createSipUri(java.lang.String,java.lang.String,java.lang.String,int)>
<com.android.server.PreferredComponent: boolean sameSet(java.util.List,int)>
<android.nfc.tech.Ndef: android.nfc.Tag getTag()>
<android.widget.TextView: java.lang.CharSequence getError()>
<android.view.accessibility.AccessibilityRecord: int getRemovedCount()>
<android.bluetooth.BluetoothDeviceProfileState: android.os.Message access$1900(android.bluetooth.BluetoothDeviceProfileState)>
<android.renderscript.FieldPacker: void addF64(android.renderscript.Double2)>
<com.android.server.am.ServiceRecord$2: void <init>(com.android.server.am.ServiceRecord,java.lang.String,int)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void setWifiP2pInfoOnGroupFormation(java.lang.String)>
<android.webkit.WebSettings: boolean getAllowContentAccess()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: java.lang.String access$902(com.android.internal.telephony.cdma.CdmaLteUiccRecords,java.lang.String)>
<android.widget.TextView$Blink: void uncancel()>
<android.media.AudioService: int getStreamMaxVolume(int)>
<com.android.server.wm.WindowManagerService$DummyAnimation: void <init>()>
<android.graphics.Paint: void setCompatibilityScaling(float)>
<com.android.server.pm.Settings: com.android.server.pm.PackageSetting getPackageLPw(android.content.pm.PackageParser$Package,com.android.server.pm.PackageSetting,java.lang.String,com.android.server.pm.SharedUserSetting,java.io.File,java.io.File,java.lang.String,int,boolean,boolean)>
<android.view.ViewPropertyAnimator$AnimatorEventListener: void <init>(android.view.ViewPropertyAnimator,android.view.ViewPropertyAnimator$1)>
<com.android.internal.app.ActionBarImpl: int getHeight()>
<android.content.res.XmlBlock: void decOpenCountLocked()>
<com.android.server.MountService$DefaultContainerConnection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<GenerationGG: android.graphics.Paint$Style get_androidgraphicsPaint__Style()>
<android.widget.CalendarView: boolean isEnabled()>
<Wrapper_android_content_ActivityNotFoundException: void test_android_content_ActivityNotFoundException()>
<com.android.internal.telephony.ISms$Stub: com.android.internal.telephony.ISms asInterface(android.os.IBinder)>
<android.drm.DrmInfo: java.util.Iterator iterator()>
<com.android.server.wm.DimAnimator: void <init>(android.view.SurfaceSession)>
<Wrapper_android_renderscript_Matrix3f: void test_android_renderscript_Matrix3f()>
<android.view.KeyEvent: android.view.KeyEvent obtain()>
<android.drm.DrmUtils$ExtendedMetadataParser: java.lang.String readMultipleBytes(byte[],int,int)>
<android.preference.PreferenceActivity$HeaderAdapter$HeaderViewHolder: void <init>(android.preference.PreferenceActivity$1)>
<android.widget.GridLayout$Axis: void init(int[])>
<android.graphics.drawable.ShapeDrawable: int getIntrinsicWidth()>
<android.app.Service: void onTrimMemory(int)>
<android.os.Parcel: java.io.FileDescriptor dupFileDescriptor(java.io.FileDescriptor)>
<android.os.storage.StorageManager$ListenerDelegate: void <init>(android.os.storage.StorageManager,android.os.storage.StorageEventListener)>
<android.os.Parcel: void writeByte(byte)>
<android.content.Intent: java.lang.String getPackage()>
<android.app.Dialog: boolean takeCancelAndDismissListeners(java.lang.String,android.content.DialogInterface$OnCancelListener,android.content.DialogInterface$OnDismissListener)>
<android.speech.tts.EventLogger: void onError()>
<DumbClass: void DumbMethod55()>
<android.webkit.WebViewCore: void sendMessage(int,int,int,java.lang.Object)>
<com.android.server.wm.WindowState: long getInputDispatchingTimeoutNanos()>
<com.android.internal.telephony.ISms$Stub: void <init>()>
<android.graphics.drawable.LayerDrawable: void setId(int,int)>
<android.widget.MediaController$1: void <init>(android.widget.MediaController)>
<android.app.Instrumentation$EmptyRunnable: void <init>()>
<android.opengl.GLSurfaceView: android.opengl.GLSurfaceView$GLThreadManager access$800()>
<android.location.ILocationListener$Stub$Proxy: void <init>(android.os.IBinder)>
<android.net.sip.SimpleSessionDescription$Media: void write(java.lang.StringBuilder)>
<android.webkit.WebStorage: void access$000(java.lang.String,long)>
<com.android.server.MountService: void waitForReady()>
<GenerationGG: java.io.File get_javaioFile()>
<android.widget.ActivityChooserModel$DefaultSorter: void sort(android.content.Intent,java.util.List,java.util.List)>
<android.app.Notification$Builder: android.app.Notification$Builder setContentTitle(java.lang.CharSequence)>
<android.net.NetworkTemplate: java.lang.String getMatchRuleName(int)>
<android.widget.SearchView: android.app.SearchableInfo access$1300(android.widget.SearchView)>
<com.android.server.wm.Watermark: void positionSurface(int,int)>
<android.webkit.HTML5VideoFullScreen: boolean canSeekBackward()>
<GenerationGG: android.content.IntentSender$OnFinished get_androidcontentIntentSender__OnFinished()>
<android.view.ViewGroup: void setAnimationCacheEnabled(boolean)>
<com.android.server.ThrottleService: int access$902(com.android.server.ThrottleService,int)>
<android.view.View: void setRotationY(float)>
<com.android.internal.util.StateMachine: android.os.Message getCurrentMessage()>
<android.widget.ExpandableListView: void <clinit>()>
<android.webkit.WebSettings: boolean getPluginsEnabled()>
<android.renderscript.RenderScript: int rsnSamplerCreate(int,int,int,int,int,int,float)>
<android.test.IsolatedContext$MockAccountManager$MockAccountManagerFuture: void <init>(android.test.IsolatedContext$MockAccountManager,java.lang.Object)>
<android.graphics.Paint$Cap: void <clinit>()>
<android.telephony.ServiceState: void setCdmaEriIconIndex(int)>
<com.android.internal.telephony.sip.SipPhone: java.lang.String getLine1AlphaTag()>
<android.widget.GridLayout: android.widget.GridLayout$Alignment getAlignment(android.widget.GridLayout$Alignment,boolean)>
<Wrapper_android_gesture_GestureStroke: void test_android_gesture_GestureStroke()>
<android.graphics.Region: boolean op(int,int,int,int,android.graphics.Region$Op)>
<android.inputmethodservice.KeyboardView: android.inputmethodservice.KeyboardView$SwipeTracker access$600(android.inputmethodservice.KeyboardView)>
<android.webkit.WebView: void requestLabel(int,int)>
<android.app.Fragment: void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo)>
<android.webkit.WebView$InnerGlobalLayoutListener: void <init>(android.webkit.WebView,android.webkit.WebView$1)>
<android.nfc.TechListParcel: void writeToParcel(android.os.Parcel,int)>
<android.test.mock.MockContext: void grantUriPermission(java.lang.String,android.net.Uri,int)>
<android.app.ActivityThread: android.app.Instrumentation getInstrumentation()>
<GenerationGG: javax.net.ssl.TrustManager[] get_javaxnetsslTrustManager_ARRAY_()>
<android.test.MoreAsserts: void assertEquals(byte[],byte[])>
<DumbClass: void DumbMethod57()>
<com.android.internal.util.JournaledFile: java.io.File chooseForRead()>
<java.lang.Object: int getDepth()>
<android.net.http.RequestQueue: android.net.http.RequestHandle queueSynchronousRequest(java.lang.String,android.net.WebAddress,java.lang.String,java.util.Map,android.net.http.EventHandler,java.io.InputStream,int)>
<android.net.rtp.AudioStream: void join(android.net.rtp.AudioGroup)>
<com.android.internal.telephony.DataConnection$DcDefaultState: void <init>(com.android.internal.telephony.DataConnection)>
<android.filterfw.core.FilterPort: java.lang.String toString()>
<android.content.res.Resources: int selectDefaultTheme(int,int)>
<com.android.internal.telephony.IPhoneStateListener$Stub$Proxy: android.os.IBinder asBinder()>
<java.lang.Object: android.view.View getGroupView(int,boolean,android.view.View,android.view.ViewGroup)>
<android.net.wifi.WifiManager: int access$010(android.net.wifi.WifiManager)>
<android.graphics.drawable.StateListDrawable: boolean isStateful()>
<com.android.internal.statusbar.StatusBarIcon: java.lang.Object clone()>
<android.widget.AutoCompleteTextView: void doBeforeTextChanged()>
<android.app.ActivityThread$ProviderRefCount: void <init>(android.app.ActivityThread,int)>
<android.server.BluetoothAdapterStateMachine: android.server.BluetoothAdapterStateMachine$Switching access$3200(android.server.BluetoothAdapterStateMachine)>
<android.telephony.gsm.SmsMessage$MessageClass: void <clinit>()>
<android.net.TrafficStats: int getThreadStatsTag()>
<com.android.server.usb.UsbDeviceManager: com.android.server.usb.UsbSettingsManager access$1200(com.android.server.usb.UsbDeviceManager)>
<android.app.ActivityThread$2: void onTrimMemory(int)>
<android.view.accessibility.AccessibilityRecord: int getAddedCount()>
<com.android.internal.telephony.WspTypeDecoder: boolean decodeXWapApplicationId(int)>
<android.media.audiofx.Virtualizer: boolean getStrengthSupported()>
<android.net.Uri$PathSegments: void <init>(java.lang.String[],int)>
<android.net.wifi.WifiStateMachine$SupplicantStartingState: void enter()>
<GenerationGG: android.net.wifi.p2p.WifiP2pConfig get_androidnetwifip2pWifiP2pConfig()>
<com.android.internal.app.ActionBarImpl: int access$300(com.android.internal.app.ActionBarImpl)>
<com.android.server.wm.WindowState: void finishExit()>
<android.view.ViewGroup: void detachViewsFromParent(int,int)>
<Wrapper_android_os_BadParcelableException: void test_android_os_BadParcelableException()>
<android.view.accessibility.AccessibilityRecord: void setScrollX(int)>
<android.widget.AbsListView: int getListPaddingTop()>
<android.net.wifi.WifiStateMachine: void access$15300(android.net.wifi.WifiStateMachine,android.os.Message)>
<android.view.View: android.view.View findViewByPredicateInsideOut(android.view.View,com.android.internal.util.Predicate)>
<android.graphics.Rect: int centerY()>
<android.os.Parcel: void readException(int,java.lang.String)>
<android.util.JsonReader: java.lang.CharSequence getSnippet()>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor fromDatagramSocket(java.net.DatagramSocket)>
<com.android.internal.telephony.BaseCommands: void unregisterForIccStatusChanged(android.os.Handler)>
<android.app.Activity: void setProgressBarVisibility(boolean)>
<android.view.animation.AccelerateInterpolator: float getInterpolation(float)>
<android.renderscript.RenderScript: void rsnScriptBindAllocation(int,int,int,int)>
<android.bluetooth.IBluetoothCallback$Stub$Proxy: android.os.IBinder asBinder()>
<android.content.res.Resources: java.lang.String[] getStringArray(int)>
<com.android.server.connectivity.Tethering: int untether(java.lang.String)>
<android.test.mock.MockCursor: boolean isFirst()>
<android.graphics.drawable.ShapeDrawable: void <init>(android.graphics.drawable.ShapeDrawable$ShapeState)>
<android.net.ProxyProperties: java.lang.String getHost()>
<android.app.ContextImpl$ServiceFetcher: java.lang.Object createService(android.app.ContextImpl)>
<com.android.internal.policy.PolicyManager: void <clinit>()>
<android.view.GLES20Canvas: void nRestoreToCount(int,int)>
<android.test.IsolatedContext$MockAccountManager: java.lang.String blockingGetAuthToken(android.accounts.Account,java.lang.String,boolean)>
<GenerationGG: android.widget.AbsSeekBar get_androidwidgetAbsSeekBar()>
<com.android.server.ConnectivityService: java.lang.Object access$2800(com.android.server.ConnectivityService)>
<android.net.wifi.WifiStateMachine: void setHighPerfModeEnabledNative(boolean)>
<android.appwidget.AppWidgetProviderInfo: void <init>(android.os.Parcel)>
<android.text.method.WordIterator: void <init>(java.util.Locale)>
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read()>
<android.database.AbstractCursor: android.database.CursorWindow getWindow()>
<com.android.internal.os.IResultReceiver$Stub: void <init>()>
<android.media.AudioManager: java.lang.Object access$000(android.media.AudioManager)>
<android.media.MediaRecorder: void setOutputFile(java.io.FileDescriptor)>
<android.speech.tts.BlockingMediaPlayer$3: boolean onError(android.media.MediaPlayer,int,int)>
<android.hardware.Sensor: java.lang.String getVendor()>
<android.text.style.SuggestionSpan: java.lang.String[] getSuggestions()>
<android.test.mock.MockContentResolver: android.content.IContentProvider acquireProvider(android.content.Context,java.lang.String)>
<com.android.server.wm.Watermark: void drawIfNeeded()>
<android.location.Criteria: int getPowerRequirement()>
<android.net.DhcpStateMachine: com.android.internal.util.State access$600(android.net.DhcpStateMachine)>
<android.net.wifi.SupplicantState$1: android.net.wifi.SupplicantState[] newArray(int)>
<Wrapper_android_view_OrientationListener: void test_android_view_OrientationListener()>
<com.android.server.location.PassiveProvider: void removeListener(int)>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getAmpLegal()>
<android.view.textservice.SpellCheckerSession$InternalListener: void <init>(android.view.textservice.SpellCheckerSession,android.view.textservice.SpellCheckerSession$1)>
<android.os.Bundle$1: java.lang.Object[] newArray(int)>
<android.mtp.MtpDevice: android.mtp.MtpStorageInfo getStorageInfo(int)>
<android.renderscript.Long3: void <init>(long,long,long)>
<android.net.DhcpStateMachine: void access$1100(android.net.DhcpStateMachine,com.android.internal.util.IState)>
<android.util.Pair: int hashCode()>
<android.widget.TabHost: int getCurrentTab()>
<com.android.server.am.ActivityManagerService: java.lang.String getPackageForToken(android.os.IBinder)>
<android.webkit.ZoomControlEmbedded$ZoomListener: void <init>(android.webkit.ZoomControlEmbedded,android.webkit.ZoomControlEmbedded$1)>
<android.view.accessibility.AccessibilityRecord: boolean isScrollable()>
<com.android.internal.telephony.sip.SipCommandInterface: void setGsmBroadcastActivation(boolean,android.os.Message)>
<com.android.internal.appwidget.IAppWidgetService$Stub: void <init>()>
<GenerationGG: java.util.ArrayList get_javautilArrayList()>
<android.accounts.AuthenticatorDescription$1: android.accounts.AuthenticatorDescription[] newArray(int)>
<android.server.BluetoothA2dpService: boolean access$600(android.server.BluetoothA2dpService,java.lang.String)>
<android.net.DnsPinger$ActivePing: void <init>(android.net.DnsPinger)>
<android.telephony.PhoneNumberUtils: java.lang.String calledPartyBCDToString(byte[],int,int)>
<android.net.wifi.WifiStateMachine$DriverUnloadingState: boolean processMessage(android.os.Message)>
<android.text.SpannableStringInternal: char charAt(int)>
<android.content.SyncManager$SyncTimeTracker: void update()>
<android.webkit.CookieManager: java.util.ArrayList parseCookie(java.lang.String,java.lang.String,java.lang.String)>
<android.test.mock.MockContext: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>
<android.hardware.Camera: void setFaceDetectionListener(android.hardware.Camera$FaceDetectionListener)>
<android.os.Binder$1: void <init>(android.os.Binder,java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.webkit.WebStorage: void postMessage(android.os.Message)>
<android.view.View: boolean isScrollbarFadingEnabled()>
<GenerationGG: android.drm.DrmConvertedStatus get_androiddrmDrmConvertedStatus()>
<GenerationGG: android.sax.TextElementListener get_androidsaxTextElementListener()>
<android.test.mock.MockContext: java.io.File getCacheDir()>
<android.view.View$6: void setValue(java.lang.Object,float)>
<android.graphics.RadialGradient: void <init>(float,float,float,int,int,android.graphics.Shader$TileMode)>
<android.hardware.usb.UsbAccessory: boolean equals(java.lang.Object)>
<android.view.MotionEvent: void setSource(int)>
<android.view.SurfaceView$1: void <init>(android.view.SurfaceView)>
<android.net.wifi.WifiStateMachine: void enableAllNetworks()>
<com.android.server.sip.SipSessionGroup: android.net.sip.SipProfile access$1400(com.android.server.sip.SipSessionGroup)>
<com.android.internal.os.ProcessStats: int[] collectStats(java.lang.String,int,boolean,int[],java.util.ArrayList)>
<android.app.SearchableInfo: boolean getVoiceSearchLaunchRecognizer()>
<android.text.style.AbsoluteSizeSpan: void <init>(int,boolean)>
<android.content.pm.ConfigurationInfo: void <init>(android.os.Parcel)>
<DumbClass: void DumbMethod4()>
<android.media.AudioRecord: android.media.AudioRecord$OnRecordPositionUpdateListener access$100(android.media.AudioRecord)>
<android.net.wifi.WifiConfiguration$1: void <init>()>
<android.net.SSLSessionCache: void <init>(java.io.File)>
<android.graphics.Paint$Cap: void <init>(java.lang.String,int,int)>
<com.android.internal.telephony.OperatorInfo: java.lang.String toString()>
<android.bluetooth.BluetoothDeviceProfileState: android.os.Message access$8600(android.bluetooth.BluetoothDeviceProfileState)>
<com.android.server.am.UriPermissionOwner: void removeUriPermissionsLocked(int)>
<android.preference.TwoStatePreference: java.lang.CharSequence getSummaryOff()>
<com.android.server.pm.Settings: com.android.server.pm.SharedUserSetting getSharedUserLPw(java.lang.String,int,boolean)>
<android.os.MemoryFile: void writeBytes(byte[],int,int,int)>
<com.android.internal.telephony.ITelephonyRegistry$Stub: void <init>()>
<android.hardware.SensorManager$ListenerDelegate: boolean hasSensor(android.hardware.Sensor)>
<com.android.server.pm.Installer: int unlinkNativeLibraryDirectory(java.lang.String)>
<android.view.ViewPropertyAnimator: android.view.ViewPropertyAnimator setDuration(long)>
<android.text.util.Rfc822Token: java.lang.String toString()>
<android.widget.DatePicker: boolean getCalendarViewShown()>
<android.net.http.AndroidHttpClientConnection: void flush()>
<android.net.LocalSocketImpl: java.io.FileDescriptor getFileDescriptor()>
<GenerationGG: android.view.LayoutInflater get_androidviewLayoutInflater()>
<android.view.View: android.view.View inflate(android.content.Context,int,android.view.ViewGroup)>
<android.net.sip.SipProfile: java.lang.String getProfileName()>
<android.net.SSLCertificateSocketFactory: boolean isSslCheckRelaxed()>
<android.security.KeyStore: boolean password(byte[])>
<android.webkit.WebView: int pinLoc(int,int,int)>
<android.renderscript.RenderScript: int rsnProgramRasterCreate(int,boolean,int)>
<android.drm.DrmManagerClient: android.drm.DrmConvertedStatus convertData(int,byte[])>
<com.android.server.location.GpsLocationProvider: void access$1400(com.android.server.location.GpsLocationProvider,android.location.Location)>
<android.media.ExifInterface: void commitChangesNative(java.lang.String)>
<android.test.mock.MockContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>
<com.android.server.sip.SipService: com.android.server.sip.SipService$MyExecutor access$900(com.android.server.sip.SipService)>
<android.webkit.HTML5VideoInline: void deleteSurfaceTexture()>
<android.mtp.MtpObjectInfo: int getImagePixHeight()>
<android.app.Application: void dispatchActivityDestroyed(android.app.Activity)>
<android.net.RouteInfo: boolean isDefault()>
<GenerationGG: android.graphics.Movie get_androidgraphicsMovie()>
<android.server.BluetoothService: boolean removeServiceRecordNative(int)>
<android.animation.PropertyValuesHolder: java.lang.reflect.Method getPropertyFunction(java.lang.Class,java.lang.String,java.lang.Class)>
<android.content.ContentValues: boolean equals(java.lang.Object)>
<Wrapper_android_graphics_EmbossMaskFilter: void test_android_graphics_EmbossMaskFilter()>
<GenerationGG: android.renderscript.ProgramVertexFixedFunction get_androidrenderscriptProgramVertexFixedFunction()>
<android.view.inputmethod.InputMethodInfo: android.view.inputmethod.InputMethodSubtype getSubtypeAt(int)>
<com.android.server.pm.PackageSettingBase: boolean enableComponentLPw(java.lang.String)>
<android.widget.RelativeLayout$DependencyGraph$Node: void <clinit>()>
<android.graphics.Canvas$EdgeType: void <init>(java.lang.String,int,int)>
<GenerationGG: android.net.sip.SipProfile get_androidnetsipSipProfile()>
<android.widget.TextView$EasyEditSpanController$1: void <init>(android.widget.TextView$EasyEditSpanController)>
<com.android.internal.telephony.BaseCommands: void unSetOnCallRing(android.os.Handler)>
<android.location.GpsSatellite: float getSnr()>
<com.android.server.accessibility.AccessibilityManagerService: boolean access$502(com.android.server.accessibility.AccessibilityManagerService,boolean)>
<android.widget.PopupWindow$1: void <init>(android.widget.PopupWindow)>
<android.content.SyncManager: void cancelActiveSync(android.accounts.Account,java.lang.String)>
<android.webkit.WebView: boolean isRectFitOnScreen(android.graphics.Rect)>
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: void <init>(android.widget.RemoteViewsAdapter,int)>
<GenerationGG: java.lang.Long get_javalangLong()>
<android.widget.AbsListView$MultiChoiceModeWrapper: void setWrapped(android.widget.AbsListView$MultiChoiceModeListener)>
<android.hardware.Camera: void setParameters(android.hardware.Camera$Parameters)>
<android.util.LogPrinter: void <init>(int,java.lang.String)>
<android.text.StaticLayout: int getLineDescent(int)>
<com.android.internal.telephony.cdma.CdmaLteUiccFileHandler: void loge(java.lang.String)>
<android.view.TextureView: void nDestroyNativeWindow()>
<android.view.ViewConfiguration: int getScaledTouchSlop()>
<com.android.server.location.GeocoderProxy$Connection: void <init>(com.android.server.location.GeocoderProxy,com.android.server.location.GeocoderProxy$1)>
<android.content.res.Resources: java.lang.String getResourceName(int)>
<android.app.FragmentState: void <init>(android.app.Fragment)>
<android.app.ISearchManager$Stub: android.os.IBinder asBinder()>
<com.android.internal.view.menu.MenuItemImpl: boolean shouldShowShortcut()>
<android.app.Dialog: void onCreate(android.os.Bundle)>
<com.android.server.connectivity.Tethering: boolean access$102(com.android.server.connectivity.Tethering,boolean)>
<android.webkit.WebViewCore: void access$7000(android.webkit.WebViewCore)>
<android.net.WebAddress: void setHost(java.lang.String)>
<com.android.internal.telephony.cat.Duration: void <init>(android.os.Parcel,com.android.internal.telephony.cat.Duration$1)>
<android.net.wifi.WifiStateMachine: void connectNetwork(int)>
<android.content.res.XmlBlock: int nativeGetAttributeData(int,int)>
<android.webkit.JsResult: void wakeUp()>
<android.speech.tts.EventLogTags: void writeTtsSpeakSuccess(java.lang.String,java.lang.String,int,java.lang.String,int,int,long,long,long)>
<android.net.wifi.ScanResult: int describeContents()>
<com.android.server.WifiService: boolean access$300(com.android.server.WifiService)>
<android.filterfw.core.GLEnvironment: void <clinit>()>
<com.android.internal.view.IInputMethodCallback$Stub: com.android.internal.view.IInputMethodCallback asInterface(android.os.IBinder)>
<android.net.Uri: android.net.Uri fromParts(java.lang.String,java.lang.String,java.lang.String)>
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getEncodedUserInfo()>
<android.media.MediaPlayer: boolean isPlaying()>
<android.view.GLES20Canvas: int getSaveCount()>
<android.webkit.WebIconDatabase: void retainIconForPageUrl(java.lang.String)>
<com.android.internal.os.PkgUsageStats$1: java.lang.Object[] newArray(int)>
<android.app.BackStackRecord: android.app.FragmentTransaction setCustomAnimations(int,int,int,int)>
<android.graphics.Paint: android.graphics.Paint$FontMetricsInt getFontMetricsInt()>
<com.android.internal.telephony.DataConnection$1: void <clinit>()>
<android.widget.AutoCompleteTextView$PassThroughClickListener: void <init>(android.widget.AutoCompleteTextView,android.widget.AutoCompleteTextView$1)>
<android.graphics.drawable.AnimatedRotateDrawable: int getIntrinsicHeight()>
<com.android.internal.view.BaseIWindow: void dispatchSystemUiVisibilityChanged(int,int,int,int)>
<android.opengl.GLES10Ext: void <init>()>
<com.android.server.IntentResolver: void addFilter(android.content.IntentFilter)>
<com.android.internal.telephony.cdma.sms.BearerData: boolean decodeReplyOption(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)>
<com.android.internal.os.SamplingProfilerIntegration: void <clinit>()>
<android.media.AudioManager$FocusEventHandlerDelegate$1: void handleMessage(android.os.Message)>
<android.net.wifi.ScanResult: java.lang.String toString()>
<android.inputmethodservice.KeyboardView: void setPreviewEnabled(boolean)>
<android.content.pm.PermissionInfo$1: java.lang.Object[] newArray(int)>
<android.view.View: int getMeasuredHeight()>
<android.view.ViewDebug: void profileViewAndChildren(android.view.View,java.io.BufferedWriter)>
<com.android.internal.view.InputBindResult: void writeToParcel(android.os.Parcel,int)>
<android.widget.Gallery: boolean scrollToChild(int)>
<android.content.ClipDescription: void <init>(android.content.ClipDescription)>
<android.media.ThumbnailUtils: android.graphics.Bitmap extractThumbnail(android.graphics.Bitmap,int,int)>
<android.media.audiofx.Visualizer: int getWaveForm(byte[])>
<android.view.CompatibilityInfoHolder: android.content.res.CompatibilityInfo get()>
<android.net.wifi.WifiStateMachine$DriverUnloadingState$1: void <init>(android.net.wifi.WifiStateMachine$DriverUnloadingState,android.os.Message)>
<junit.runner.BaseTestRunner: void savePreferences()>
<android.graphics.drawable.BitmapDrawable: android.graphics.Bitmap getBitmap()>
<com.android.server.VibratorService$Vibration: long[] access$600(com.android.server.VibratorService$Vibration)>
<android.webkit.WebViewCore: void <clinit>()>
<android.graphics.drawable.GradientDrawable$Orientation: void <clinit>()>
<com.android.server.AlarmManagerService: java.util.ArrayList access$900(com.android.server.AlarmManagerService)>
<android.widget.BaseExpandableListAdapter: int getGroupType(int)>
<android.speech.RecognitionService: void access$200(android.speech.RecognitionService,android.speech.IRecognitionListener)>
<java.lang.Object: int getAttributeCount()>
<android.content.res.StringBlock$StyleIDs: int access$800(android.content.res.StringBlock$StyleIDs)>
<android.util.ReflectiveProperty: java.lang.Object get(java.lang.Object)>
<android.text.style.TextAppearanceSpan: void updateMeasureState(android.text.TextPaint)>
<android.renderscript.ProgramStore$BlendSrcFunc: void <clinit>()>
<android.hardware.usb.UsbRequest: android.hardware.usb.UsbEndpoint getEndpoint()>
<android.widget.VideoView$6: void <init>(android.widget.VideoView)>
<android.webkit.HTML5VideoFullScreen$3: void <init>(android.webkit.HTML5VideoFullScreen)>
<android.test.mock.MockPackageManager: java.util.List getInstalledApplications(int)>
<com.android.internal.telephony.IccCardApplication$AppType: void <clinit>()>
<com.android.internal.telephony.cdma.CdmaConnection: java.lang.String getCnapName()>
<android.widget.LinearLayout: android.widget.LinearLayout$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<android.content.res.ObbInfo: void writeToParcel(android.os.Parcel,int)>
<android.net.NetworkTemplate: java.lang.String getSubscriberId()>
<android.view.KeyEvent: java.lang.String toString()>
<android.view.MotionEvent: int getSource()>
<android.app.Dialog: boolean onOptionsItemSelected(android.view.MenuItem)>
<android.animation.AnimatorSet$DependencyListener: void onAnimationCancel(android.animation.Animator)>
<android.app.LauncherActivity$ActivityAdapter$ArrayFilter: void <init>(android.app.LauncherActivity$ActivityAdapter,android.app.LauncherActivity$1)>
<android.app.ApplicationPackageManager: void <init>(android.app.ContextImpl,android.content.pm.IPackageManager)>
<android.graphics.Shader: void finalize()>
<android.webkit.CookieManager: boolean nativeHasCookies(boolean)>
<android.webkit.WebSettings$RenderPriority: void <init>(java.lang.String,int)>
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.lang.Object access$000(com.android.internal.telephony.cdma.RuimSmsInterfaceManager)>
<android.content.Intent: android.content.Intent makeMainActivity(android.content.ComponentName)>
<android.net.wifi.SupplicantState: boolean isConnecting(android.net.wifi.SupplicantState)>
<android.test.mock.MockPackageManager: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>
<com.android.internal.telephony.gsm.GsmServiceStateTracker$4: void <clinit>()>
<android.net.NetworkStats$Entry: void <init>()>
<com.android.internal.telephony.cdma.CdmaSMSDispatcher: boolean checkDuplicatePortOmadmWappush(byte[],int)>
<com.android.server.WifiService: boolean access$1902(com.android.server.WifiService,boolean)>
<android.view.KeyEvent: int metaStateFilterDirectionalModifiers(int,int,int,int,int)>
<android.text.util.Rfc822Tokenizer: int findTokenStart(java.lang.CharSequence,int)>
<android.view.ViewTreeObserver: void dispatchOnComputeInternalInsets(android.view.ViewTreeObserver$InternalInsetsInfo)>
<com.android.internal.telephony.cdma.CdmaInformationRecords$CdmaDisplayInfoRec: java.lang.String toString()>
<android.content.ContentProvider: java.lang.String getWritePermission()>
<com.android.server.AlarmManagerService: java.util.ArrayList access$1000(com.android.server.AlarmManagerService)>
<com.android.server.connectivity.Vpn$Connection: void onServiceDisconnected(android.content.ComponentName)>
<GenerationGG: android.graphics.PorterDuff$Mode get_androidgraphicsPorterDuff__Mode()>
<android.widget.AbsListView: void requestDisallowInterceptTouchEvent(boolean)>
<android.graphics.Canvas$CanvasFinalizer: void finalize()>
<android.view.Surface: void init(android.view.SurfaceSession,int,java.lang.String,int,int,int,int,int)>
<android.content.BroadcastReceiver: void setDebugUnregister(boolean)>
<android.widget.TextView: int access$700(android.widget.TextView,boolean)>
<android.webkit.WebViewCore: void access$2300(android.webkit.WebViewCore,int,boolean,int,int)>
<android.widget.Switch: boolean getTargetCheckedState()>
<GenerationGG: android.app.Application$ActivityLifecycleCallbacks get_androidappApplication__ActivityLifecycleCallbacks()>
<android.webkit.WebViewCore: java.util.ArrayList access$7100(android.webkit.WebViewCore,int,int,int)>
<android.util.Property: java.lang.Class getType()>
<com.android.server.ThrottleService$DataRecorder: void zeroData(int)>
<android.graphics.Rect: int height()>
<android.webkit.ByteArrayBuilder: void <clinit>()>
<android.text.Layout: boolean isRtlCharAt(int)>
<android.view.inputmethod.EditorInfo$1: android.view.inputmethod.EditorInfo[] newArray(int)>
<android.view.IApplicationToken$Stub: android.view.IApplicationToken asInterface(android.os.IBinder)>
<android.view.accessibility.AccessibilityEvent: void setEventType(int)>
<GenerationGG: android.content.pm.InstrumentationInfo get_androidcontentpmInstrumentationInfo()>
<com.android.internal.statusbar.StatusBarNotification: void <init>(java.lang.String,int,java.lang.String,int,int,android.app.Notification)>
<com.android.internal.app.IUsageStats$Stub: void <init>()>
<android.text.style.BackgroundColorSpan: void <init>(android.os.Parcel)>
<com.android.internal.telephony.cdma.CdmaCallTracker: void unregisterForVoiceCallEnded(android.os.Handler)>
<android.graphics.Rect: boolean contains(int,int,int,int)>
<android.view.ViewDebug$LooperProfiler: void save()>
<com.android.internal.telephony.DataConnection$FailCause: boolean isPermanentFail()>
<com.android.server.am.ActivityManagerService$MemItem: void <init>(java.lang.String,long)>
<com.android.server.am.UsageStatsService$PkgUsageStatsExtended: void updatePause()>
<android.graphics.Canvas: void drawText(java.lang.String,int,int,float,float,android.graphics.Paint)>
<android.widget.TimePicker: android.os.Parcelable onSaveInstanceState()>
<android.view.GLES20Canvas: void nDestroyLayer(int)>
<android.bluetooth.BluetoothDeviceProfileState: void access$10400(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<GenerationGG: android.preference.Preference$OnPreferenceClickListener get_androidpreferencePreference__OnPreferenceClickListener()>
<android.webkit.LoadListener: void nativeAddData(byte[],int)>
<android.view.GLES20RecordingCanvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Rect,android.graphics.RectF,android.graphics.Paint)>
<android.nfc.NfcManager: android.nfc.NfcAdapter getDefaultAdapter()>
<com.android.internal.view.InputBindResult$1: com.android.internal.view.InputBindResult[] newArray(int)>
<android.app.Activity: void setProgressBarIndeterminate(boolean)>
<android.webkit.HTML5VideoView: void setOnPreparedListener(android.webkit.HTML5VideoViewProxy)>
<android.view.ViewRootImpl: android.view.WindowLeaked getLocation()>
<android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs: android.view.ViewRootImpl$AccessibilityInteractionController$SomeArgs getNextPoolable()>
<android.gesture.InstanceLearner: void <clinit>()>
<android.hardware.usb.UsbAccessory$1: void <init>()>
<android.graphics.Rect: void <init>()>
<com.android.internal.telephony.cat.SelectItemParams: void <init>(com.android.internal.telephony.cat.CommandDetails,com.android.internal.telephony.cat.Menu,boolean)>
<com.android.server.PowerManagerService$12: void <init>(com.android.server.PowerManagerService,java.lang.String,java.lang.String)>
<android.test.suitebuilder.TestGrouping$TestMethodPredicate: boolean apply(java.lang.reflect.Method)>
<android.os.AsyncTask: void <init>()>
<GenerationGG: android.view.FocusFinder get_androidviewFocusFinder()>
<com.android.server.WallpaperManagerService: android.app.WallpaperInfo getWallpaperInfo()>
<android.view.ViewConfiguration: int getScrollBarFadeDuration()>
<android.content.res.AssetManager$AssetInputStream: int getAssetInt()>
<android.animation.PropertyValuesHolder: int access$300(java.lang.Class,java.lang.String)>
<android.view.ActionMode: void <init>()>
<android.content.Intent: java.lang.String toShortString(boolean,boolean,boolean)>
<android.net.NetworkTemplate$1: void <init>()>
<android.view.ViewGroup: boolean canViewReceivePointerEvents(android.view.View)>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: void <init>()>
<android.view.MotionEvent: float getHistoricalSize(int)>
<android.view.View: void setOnHoverListener(android.view.View$OnHoverListener)>
<android.database.sqlite.SQLiteDiskIOException: void <init>()>
<android.widget.TableRow: boolean checkLayoutParams(android.view.ViewGroup$LayoutParams)>
<com.android.internal.view.BaseSurfaceHolder: void setFormat(int)>
<android.webkit.WebView: void onChildViewAdded(android.view.View,android.view.View)>
<android.graphics.BitmapFactory: android.graphics.Bitmap decodeStream(java.io.InputStream)>
<android.widget.PopupWindow: void <init>(android.view.View)>
<android.gesture.GestureOverlayView: void onDetachedFromWindow()>
<com.android.server.pm.PackageManagerService: boolean isSystemApp(android.content.pm.PackageParser$Package)>
<java.lang.Object: int getColumnNumber()>
<android.telephony.JapanesePhoneNumberFormatter: void <clinit>()>
<com.android.internal.os.BatteryStatsImpl$KernelWakelockStats: void <init>(com.android.internal.os.BatteryStatsImpl,int,long,int)>
<com.android.server.WallpaperManagerService: void finalize()>
<android.content.pm.PathPermission: java.lang.String getReadPermission()>
<GenerationGG: android.nfc.FormatException get_androidnfcFormatException()>
<android.view.GLES20Canvas: int nSaveLayer(int,int,int)>
<android.net.wifi.WifiConfigStore: void log(java.lang.String)>
<android.gesture.GestureOverlayView: boolean processEvent(android.view.MotionEvent)>
<android.webkit.WebView: int access$4800(android.webkit.WebView)>
<android.graphics.SweepGradient: int nativePostCreate2(int,float,float,int,int)>
<android.graphics.drawable.PictureDrawable: int getIntrinsicWidth()>
<com.android.internal.telephony.IccCardStatus$CardState: boolean isCardPresent()>
<android.media.SoundPool: void setOnLoadCompleteListener(android.media.SoundPool$OnLoadCompleteListener)>
<android.net.http.SslCertificate: java.lang.String formatDate(java.util.Date)>
<android.text.util.Linkify$1: boolean acceptMatch(java.lang.CharSequence,int,int)>
<android.drm.DrmConvertedStatus: void <init>(int,byte[],int)>
<android.app.Instrumentation: void startProfiling()>
<android.widget.FrameLayout: boolean getConsiderGoneChildrenWhenMeasuring()>
<android.telephony.NeighboringCellInfo: void setRssi(int)>
<android.content.Loader$ForceLoadContentObserver: void onChange(boolean)>
<com.android.internal.view.menu.ActionMenuItem: char getAlphabeticShortcut()>
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: void dumpFilter(java.io.PrintWriter,java.lang.String,android.content.pm.PackageParser$ActivityIntentInfo)>
<android.app.ActivityThread$ApplicationThread: void scheduleNewIntent(java.util.List,android.os.IBinder)>
<android.graphics.Matrix$1: boolean setConcat(android.graphics.Matrix,android.graphics.Matrix)>
<android.server.BluetoothAdapterStateMachine: void access$7000(android.server.BluetoothAdapterStateMachine,com.android.internal.util.IState)>
<android.test.AndroidTestRunner: void <init>()>
<android.telephony.SignalStrength: int getGsmLevel()>
<com.android.internal.telephony.cat.ComprehensionTlv: int getTag()>
<com.android.server.TextServicesManagerService$TextServicesMonitor: void <init>(com.android.server.TextServicesManagerService,com.android.server.TextServicesManagerService$1)>
<android.view.HardwareCanvas: void setBitmap(android.graphics.Bitmap)>
<android.os.ConditionVariable: void block()>
<junit.framework.TestCase: void assertEquals(byte,byte)>
<android.widget.TextView: boolean shouldBlink()>
<android.content.pm.PackageParser$Component: android.content.ComponentName getComponentName()>
<com.android.server.usb.UsbService: boolean hasAccessoryPermission(android.hardware.usb.UsbAccessory)>
<android.speech.SpeechRecognizer$1: void <init>(android.speech.SpeechRecognizer)>
<android.util.AndroidException: void <init>()>
<android.text.method.TextKeyListener: int getInputType()>
<android.renderscript.Element: android.renderscript.Element U32(android.renderscript.RenderScript)>
<android.net.http.Headers: void setContentEncoding(java.lang.String)>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: android.net.sip.SipProfile getLocalProfile()>
<com.android.server.connectivity.Tethering$TetherMasterSM: void access$4900(com.android.server.connectivity.Tethering$TetherMasterSM,com.android.internal.util.IState)>
<android.telephony.PhoneNumberFormattingTextWatcher: void <init>(java.lang.String)>
<com.android.internal.telephony.gsm.SIMRecords$Get_Spn_Fsm_State: com.android.internal.telephony.gsm.SIMRecords$Get_Spn_Fsm_State[] values()>
<android.widget.ExpandableListConnector$GroupMetadata$1: void <init>()>
<android.widget.GridLayout$LayoutParams: void <init>(android.view.ViewGroup$LayoutParams)>
<android.media.AudioTrack: int getAudioSessionId()>
<android.webkit.WebView$5: void <init>(android.webkit.WebView,android.os.Message)>
<com.android.server.usb.UsbDeviceManager: void initRndisAddress()>
<android.net.ProxyProperties: java.lang.String getExclusionList()>
<android.media.MediaRecorder: void native_init()>
<android.view.accessibility.AccessibilityNodeInfo: void setBooleanProperty(int,boolean)>
<android.app.PendingIntent: java.lang.String toString()>
<com.android.server.pm.PackageSettingBase: int getCurrentEnabledStateLPr(java.lang.String)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void loge(java.lang.String)>
<android.location.Address: java.lang.String getCountryCode()>
<android.util.Base64DataException: void <init>(java.lang.String)>
<com.android.internal.util.State: boolean processMessage(android.os.Message)>
<android.webkit.WebView: void nativeDebugDump()>
<Wrapper_android_media_effect_EffectFactory: void test_android_media_effect_EffectFactory()>
<android.net.LocalSocketAddress$Namespace: void <clinit>()>
<android.webkit.ByteArrayBuilder$Chunk: void <init>(int)>
<android.widget.TextView: boolean getFreezesText()>
<com.android.internal.telephony.gsm.GSMPhone: java.lang.String getPhoneName()>
<android.view.ViewRootImpl$3: void setSizeFromLayout()>
<android.webkit.CallbackProxy$ResultTransport: void setResult(java.lang.Object)>
<android.app.Notification: void <init>(int,java.lang.CharSequence,long)>
<android.net.wifi.WifiNative: boolean removeNetworkCommand(int)>
<com.android.server.pm.Settings: void readSharedUserLPw(org.xmlpull.v1.XmlPullParser)>
<android.view.GLES20Canvas: void flushCaches(int)>
<android.webkit.WebSettings: int pin(int)>
<android.app.backup.BackupDataInput: void <init>(java.io.FileDescriptor)>
<android.util.Slog: int println(int,java.lang.String,java.lang.String)>
<android.app.ApplicationErrorReport$CrashInfo: void <init>(java.lang.Throwable)>
<android.animation.LayoutTransition: void setAnimator(int,android.animation.Animator)>
<android.os.Process: int myPid()>
<android.content.pm.PackageParser: void <clinit>()>
<android.widget.StackView$StackSlider: float getDuration(boolean,float)>
<com.android.server.wm.ViewServer: void <init>(com.android.server.wm.WindowManagerService,int)>
<GenerationGG: android.view.TextureView$SurfaceTextureListener get_androidviewTextureView__SurfaceTextureListener()>
<android.accounts.AccountManagerService: java.lang.Integer access$800(android.accounts.AccountManagerService,android.accounts.Account)>
<GenerationGG: android.os.RecoverySystem$ProgressListener get_androidosRecoverySystem__ProgressListener()>
<GenerationGG: android.content.ContentUris get_androidcontentContentUris()>
<android.graphics.Rect: void sort()>
<com.android.server.AttributeCache: com.android.server.AttributeCache instance()>
<android.content.AbstractThreadedSyncAdapter: android.accounts.Account toSyncKey(android.accounts.Account)>
<android.widget.ScrollView: int clamp(int,int,int)>
<com.android.internal.view.BaseSurfaceHolder: void <init>()>
<android.content.ComponentName: android.content.ComponentName readFromParcel(android.os.Parcel)>
<android.net.wifi.WifiStateMachine: void connectNetwork(android.net.wifi.WifiConfiguration)>
<android.webkit.WebViewCore$TouchHighlightData: void <init>()>
<com.android.server.DevicePolicyManagerService: void validatePasswordOwnerLocked()>
<android.content.res.ObbInfo: void <init>(android.os.Parcel,android.content.res.ObbInfo$1)>
<android.test.suitebuilder.TestSuiteBuilder: junit.framework.TestSuite build()>
<com.android.internal.telephony.cdma.SmsMessage: boolean isMwiDontStore()>
<android.content.SyncStorageEngine: void writeStatusLocked()>
<android.app.ActivityThread: void handleDumpService(android.app.ActivityThread$DumpComponentInfo)>
<android.webkit.CookieSyncManager: void sync()>
<android.gesture.GestureLibrary: void removeGesture(java.lang.String,android.gesture.Gesture)>
<GenerationGG: android.media.MediaRecorder$OnInfoListener get_androidmediaMediaRecorder__OnInfoListener()>
<android.animation.Animator: void <init>()>
<com.android.internal.view.menu.ActionMenuView: com.android.internal.view.menu.ActionMenuView$LayoutParams generateDefaultLayoutParams()>
<com.android.internal.telephony.cdma.sms.UserData: void <init>()>
<android.content.res.Configuration: int updateFrom(android.content.res.Configuration)>
<com.android.server.connectivity.Tethering$TetherMasterSM$ErrorState: void notify(int)>
<android.webkit.WebSettings: void setAutoFillEnabled(boolean)>
<android.os.Bundle: void <init>()>
<android.net.wifi.WifiConfigStore: void loge(java.lang.String)>
<android.net.sip.SipProfile: void setCallingUid(int)>
<android.content.res.AssetManager: boolean retrieveAttributes(int,int[],int[],int[])>
<android.os.MessageQueue: void nativeDestroy()>
<android.webkit.WebView: void nativeSetFindIsUp(boolean)>
<android.webkit.WebView: int computeDuration(int,int)>
<GenerationGG: android.app.backup.RestoreObserver get_androidappbackupRestoreObserver()>
<android.os.Parcel: void appendFrom(android.os.Parcel,int,int)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords: void onGetCSimEprlDone(android.os.AsyncResult)>
<android.app.Fragment: void setMenuVisibility(boolean)>
<android.media.audiofx.EnvironmentalReverb: void setReverbDelay(int)>
<com.android.server.pm.PackageManagerService: void verifyPendingInstall(int,int)>
<android.server.BluetoothAdapterStateMachine: void access$600(java.lang.String)>
<android.graphics.RectF: float centerY()>
<android.net.NetworkState: void <clinit>()>
<com.android.internal.telephony.cat.Duration$TimeUnit: void <clinit>()>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>
<android.widget.TextView: void setRawInputType(int)>
<android.net.NetworkStatsHistory$DataStreamUtils: void writeVarLong(java.io.DataOutputStream,long)>
<android.net.NetworkInfo: android.net.NetworkInfo$DetailedState access$102(android.net.NetworkInfo,android.net.NetworkInfo$DetailedState)>
<android.animation.IntEvaluator: java.lang.Object evaluate(float,java.lang.Object,java.lang.Object)>
<android.graphics.Canvas: int getSaveCount()>
<android.content.res.StringBlock$StyleIDs: int access$200(android.content.res.StringBlock$StyleIDs)>
<android.widget.VideoView: boolean canSeekForward()>
<android.widget.Gallery: android.view.ContextMenu$ContextMenuInfo getContextMenuInfo()>
<android.renderscript.RenderScript: void rsnAllocationRead(int,int,short[])>
<android.graphics.Region$Op: void <init>(java.lang.String,int,int)>
<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.Intent)>
<android.widget.RelativeLayout$DependencyGraph: android.util.SparseArray access$500(android.widget.RelativeLayout$DependencyGraph)>
<com.android.internal.telephony.cat.Item: java.lang.String toString()>
<android.widget.Spinner$DialogPopup: boolean isShowing()>
<android.content.pm.InstrumentationInfo$1: void <init>()>
<android.webkit.WebView: int computeRealHorizontalScrollRange()>
<android.widget.GridLayout$Arc: void <init>(android.widget.GridLayout$Interval,android.widget.GridLayout$MutableInt)>
<android.app.ActivityThread: void unscheduleGcIdler()>
<android.view.InputEventConsistencyVerifier: void <init>(java.lang.Object,int)>
<com.android.server.location.MockProvider: void clearLocation()>
<com.android.server.InputMethodManagerService$5: void <init>(com.android.server.InputMethodManagerService)>
<android.content.res.XmlBlock: int access$1400(int,int)>
<android.view.GLES20Canvas: void drawRect(android.graphics.Rect,android.graphics.Paint)>
<android.webkit.WebView: int contentToViewY(int)>
<android.media.AudioSystem: int setStreamVolumeIndex(int,int)>
<android.view.ViewGroup: android.view.View getFocusedChild()>
<android.webkit.LoadListener: java.lang.String getErrorDescription()>
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: java.util.List access$200(com.android.internal.telephony.cdma.RuimSmsInterfaceManager)>
<android.net.wifi.WifiConfigStore: void <clinit>()>
<android.webkit.WebSettings$EventHandler: boolean access$800(android.webkit.WebSettings$EventHandler,android.os.Message)>
<com.android.internal.telephony.cat.ToneSettings$1: java.lang.Object[] newArray(int)>
<android.bluetooth.BluetoothDeviceProfileState: void updateIncomingAllowedTimer()>
<android.text.style.TextAppearanceSpan: android.content.res.ColorStateList getLinkTextColor()>
<android.animation.ValueAnimator: android.animation.Animator setDuration(long)>
<android.text.BoringLayout: int getLineDescent(int)>
<android.webkit.ZoomManager: float access$1500(android.webkit.ZoomManager)>
<android.widget.ZoomButtonsController: void dismissControlsDelayed(int)>
<GenerationGG: android.content.pm.LabeledIntent get_androidcontentpmLabeledIntent()>
<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean isActionPermitted(int)>
<android.bluetooth.BluetoothDeviceProfileState: void access$3800(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.drm.DrmSupportInfo: java.util.Iterator getMimeTypeIterator()>
<android.media.JetPlayer: void native_finalize()>
<com.android.internal.app.ActionBarImpl: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.inputmethodservice.KeyboardView: void setVerticalCorrection(int)>
<com.android.server.sip.SipWakeupTimer: void insertEvent(com.android.server.sip.SipWakeupTimer$MyEvent)>
<Wrapper_android_renderscript_FieldPacker: void test_android_renderscript_FieldPacker()>
<java.lang.Object: boolean isEmpty()>
<android.net.wifi.WifiStateMachine: com.android.internal.util.State access$7400(android.net.wifi.WifiStateMachine)>
<android.bluetooth.BluetoothSocket: void throwErrnoNative(int)>
<com.android.server.DevicePolicyManagerService: int getPasswordHistoryLength(android.content.ComponentName)>
<android.view.FocusFinder$SequentialFocusComparator: void recycle()>
<java.lang.Object: boolean isLast()>
<com.android.server.wm.WindowManagerService: int[] getInputDeviceIds()>
<android.test.mock.MockContentProvider: android.content.ContentProviderResult[] applyBatch(java.util.ArrayList)>
<android.app.Instrumentation: void callActivityOnRestart(android.app.Activity)>
<com.android.server.am.ActivityManagerService: android.os.Debug$MemoryInfo[] getProcessMemoryInfo(int[])>
<android.widget.AbsListView: void setDrawSelectorOnTop(boolean)>
<android.bluetooth.BluetoothSocket: int write(byte[],int,int)>
<android.graphics.Paint: android.graphics.Rasterizer getRasterizer()>
<android.content.ContentProvider: android.content.Context getContext()>
<com.android.server.am.AppErrorDialog$1: void <init>(com.android.server.am.AppErrorDialog)>
<com.android.internal.os.BatteryStatsImpl: void noteStartGpsLocked(int)>
<com.android.server.PowerManagerService$DockReceiver: void <init>(com.android.server.PowerManagerService,com.android.server.PowerManagerService$1)>
<android.media.MediaRecorder: void _setOutputFile(java.io.FileDescriptor,long,long)>
<android.text.method.PasswordTransformationMethod: void beforeTextChanged(java.lang.CharSequence,int,int,int)>
<android.view.View: int computeVerticalScrollOffset()>
<com.android.internal.net.NetworkStatsFactory: long getParsedLong(java.util.HashMap,java.lang.String)>
<android.telephony.ServiceState: void setState(int)>
<android.view.HardwareRenderer$Gl20Renderer: void setup(int,int)>
<android.webkit.WebViewCore$EventHub: void access$200(android.webkit.WebViewCore$EventHub)>
<android.test.AndroidTestCase: android.content.Context getContext()>
<android.renderscript.Element: android.renderscript.Element I16_2(android.renderscript.RenderScript)>
<com.android.internal.app.ActionBarImpl: void setSplitBackgroundDrawable(android.graphics.drawable.Drawable)>
<com.android.internal.os.BatteryStatsImpl: void addHistoryBufferLocked(long)>
<Wrapper_android_graphics_Interpolator: void test_android_graphics_Interpolator()>
<android.widget.StackView$HolographicHelper: void drawOutline(android.graphics.Canvas,android.graphics.Bitmap)>
<com.android.internal.telephony.IccRecords: boolean getRecordsLoaded()>
<com.android.internal.telephony.SmsMessageBase: int getStatusOnIcc()>
<android.database.sqlite.SQLiteQuery: java.lang.String nativeColumnName(int,int)>
<android.util.Base64InputStream: void refill()>
<android.graphics.Canvas: void nativeDrawBitmapMesh(int,int,int,int,float[],int,int[],int,int)>
<android.telephony.gsm.SmsMessage: int getIndexOnSim()>
<android.graphics.SurfaceTexture: void <init>(int,boolean)>
<android.webkit.WebViewClient: void onProceededAfterSslError(android.webkit.WebView,android.net.http.SslError)>
<android.net.wifi.WifiStateMachine$ConnectedState: void exit()>
<android.net.INetworkPolicyListener$Stub$Proxy: android.os.IBinder asBinder()>
<GenerationGG: android.test.AndroidTestCase get_androidtestAndroidTestCase()>
<android.test.suitebuilder.TestGrouping: java.util.List getTestMethods(java.lang.Class)>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: int getWakeups(int)>
<android.webkit.WebSettings: void setNeedInitialFocus(boolean)>
<android.util.SparseArray: int binarySearch(int[],int,int,int)>
<com.android.server.pm.PackageManagerService$InstallParams: int installLocationPolicy(android.content.pm.PackageInfoLite,int)>
<android.widget.ActivityChooserModel: int getActivityCount()>
<android.net.wifi.WifiStateMachine: android.net.wifi.WifiMonitor access$2500(android.net.wifi.WifiStateMachine)>
<android.util.JsonReader: void close()>
<android.webkit.WebView: android.graphics.Rect nativeGetCursorRingBounds()>
<android.widget.AbsListView: void setTranscriptMode(int)>
<android.net.NetworkPolicy: void <clinit>()>
<android.server.search.Searchables: void <clinit>()>
<com.android.internal.app.ActionBarImpl$ActionModeImpl: android.view.View getCustomView()>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap getFrameAtTime()>
<android.graphics.Paint: void getTextBounds(java.lang.String,int,int,android.graphics.Rect)>
<android.database.CursorToBulkCursorAdaptor$ContentObserverProxy: boolean unlinkToDeath(android.os.IBinder$DeathRecipient)>
<android.renderscript.Type: boolean hasMipmaps()>
<android.drm.DrmManagerClient: void setOnEventListener(android.drm.DrmManagerClient$OnEventListener)>
<android.security.KeyStore: void <clinit>()>
<android.text.BoringLayout: int getLineTop(int)>
<android.os.Debug: void dumpHprofData(java.lang.String)>
<android.view.accessibility.IAccessibilityInteractionConnectionCallback$Stub: android.view.accessibility.IAccessibilityInteractionConnectionCallback asInterface(android.os.IBinder)>
<android.provider.ContactsContract: void <init>()>
<android.location.LocationManager: android.location.ILocationManager access$100(android.location.LocationManager)>
<android.view.ViewRootImpl: void finishKeyEvent(android.view.KeyEvent,boolean,boolean)>
<android.widget.RelativeLayout$DependencyGraph$Node: android.widget.RelativeLayout$DependencyGraph$Node getNextPoolable()>
<android.graphics.RectF$1: android.graphics.RectF[] newArray(int)>
<android.os.Messenger: void writeMessengerOrNullToParcel(android.os.Messenger,android.os.Parcel)>
<GenerationGG: android.view.InputEvent get_androidviewInputEvent()>
<com.android.org.bouncycastle.openssl.PEMReader: void <init>(java.io.Reader)>
<android.widget.FastScroller: void setScrollbarPosition(int)>
<com.android.server.LocationManagerService$UpdateRecord: void disposeLocked()>
<android.graphics.Canvas: int saveLayerAlpha(android.graphics.RectF,int,int)>
<android.net.sip.SipProfile: int access$400(android.net.sip.SipProfile)>
<android.webkit.HTML5VideoView: void setOnErrorListener(android.webkit.HTML5VideoViewProxy)>
<android.webkit.WebView: boolean nativeFocusCandidateIsTextInput()>
<com.android.internal.telephony.sip.SipConnectionBase: void setDisconnectCause(com.android.internal.telephony.Connection$DisconnectCause)>
<android.test.MoreAsserts: void assertNotContainsRegex(java.lang.String,java.lang.String)>
<com.android.server.PowerManagerService$8: void <init>(com.android.server.PowerManagerService)>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg: void plug(long,long)>
<com.android.server.DevicePolicyManagerService: void validateQualityConstant(int)>
<android.net.wifi.WifiStateMachine$DriverFailedState: boolean processMessage(android.os.Message)>
<android.app.ActivityManager: int staticGetLargeMemoryClass()>
<android.widget.TimePicker$4: void <init>(android.widget.TimePicker)>
<GenerationGG: android.app.Activity[] get_androidappActivity_ARRAY_()>
<android.app.backup.FileBackupHelperBase: void finalize()>
<android.widget.NumberPicker: int getMaxValue()>
<android.renderscript.RenderScriptGL: void resume()>
<android.util.TypedValue: void <clinit>()>
<android.location.Address$1: java.lang.Object[] newArray(int)>
<android.media.MediaRecorder: void setOrientationHint(int)>
<com.android.server.usb.UsbSettingsManager$DeviceFilter: int hashCode()>
<com.android.internal.telephony.sip.SipCommandInterface: void deleteSmsOnRuim(int,android.os.Message)>
<android.view.ViewGroup$LayoutParams: void setBaseAttributes(android.content.res.TypedArray,int,int)>
<android.widget.AbsListView: int getRightPaddingOffset()>
<android.net.wifi.WifiStateMachine: android.os.Message access$15000(android.net.wifi.WifiStateMachine)>
<android.net.wifi.p2p.IWifiP2pManager$Stub$Proxy: void <init>(android.os.IBinder)>
<android.graphics.SurfaceTexture: void finalize()>
<android.graphics.drawable.DrawableContainer: int getIntrinsicHeight()>
<android.graphics.Canvas: int saveLayer(android.graphics.RectF,android.graphics.Paint,int)>
<android.app.NativeActivity: void surfaceDestroyed(android.view.SurfaceHolder)>
<android.graphics.Canvas: void concat(android.graphics.Matrix)>
<android.graphics.Interpolator$Result: void <clinit>()>
<com.android.internal.telephony.BaseCommands: void unSetOnNewCdmaSms(android.os.Handler)>
<com.android.server.AppWidgetService$Host: void <init>()>
<android.net.wifi.WifiConfigStore: void clearIpConfiguration(int)>
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void createPbrFile(java.util.ArrayList)>
<android.gesture.GestureLibraries$FileGestureLibrary: void <init>(java.io.File)>
<android.renderscript.Element: android.renderscript.Element createUser(android.renderscript.RenderScript,android.renderscript.Element$DataType)>
<com.android.internal.app.ActionBarImpl: int getSelectedNavigationIndex()>
<android.net.NetworkPolicyManager: void <init>(android.net.INetworkPolicyManager)>
<com.android.internal.os.IDropBoxManagerService$Stub$Proxy: void <init>(android.os.IBinder)>
<android.widget.AutoCompleteTextView: int getDropDownWidth()>
<android.graphics.PathMeasure: float native_getLength(int)>
<android.app.ContextImpl$23: void <init>()>
<android.util.TypedValue: void setTo(android.util.TypedValue)>
<com.android.internal.backup.LocalTransport: int performBackup(android.content.pm.PackageInfo,android.os.ParcelFileDescriptor)>
<android.view.KeyEvent$DispatcherState: void reset()>
<android.graphics.Rect: void union(int,int,int,int)>
<android.net.DummyDataStateTracker: android.net.LinkCapabilities getLinkCapabilities()>
<android.renderscript.Matrix3f: void loadRotate(float)>
<android.widget.ActivityChooserView$1: void <init>(android.widget.ActivityChooserView)>
<android.ddm.DdmHandleAppName: void sendAPNM(java.lang.String)>
<android.view.View: void invalidate(android.graphics.Rect)>
<com.android.internal.widget.ActionBarView: android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams)>
<com.android.internal.widget.LockPatternView: void drawArrow(android.graphics.Canvas,float,float,com.android.internal.widget.LockPatternView$Cell,com.android.internal.widget.LockPatternView$Cell)>
<android.net.NetworkStatsHistory: void writeToStream(java.io.DataOutputStream)>
<android.widget.RemoteViewsAdapter: void finalize()>
<GenerationGG: android.Manifest get_androidManifest()>
<android.net.wifi.WifiConfiguration$EnterpriseField: java.lang.String varName()>
<android.animation.ObjectAnimator: void <init>(java.lang.Object,android.util.Property)>
<android.graphics.SweepGradient: int nativePostCreate1(int,float,float,int[],float[])>
<android.net.RouteInfo$1: android.net.RouteInfo[] newArray(int)>
<android.renderscript.Type: boolean hasFaces()>
<android.media.MediaPlayer: void setDataSource(java.lang.String,java.util.Map)>
<com.android.server.am.UsageStatsService: void readHistoryStatsFromFile()>
<android.content.pm.ServiceInfo: java.lang.String toString()>
<android.text.Layout$Ellipsizer: void <init>(java.lang.CharSequence)>
<com.android.server.usb.UsbDeviceManager: boolean access$900(com.android.server.usb.UsbDeviceManager)>
<android.animation.ObjectAnimator: void setPropertyName(java.lang.String)>
<android.webkit.WebView: int access$9302(android.webkit.WebView,int)>
<android.bluetooth.IBluetoothHealthCallback$Stub: android.bluetooth.IBluetoothHealthCallback asInterface(android.os.IBinder)>
<android.net.wifi.WifiNative: boolean setDeviceName(java.lang.String)>
<android.app.IAlarmManager$Stub$Proxy: android.os.IBinder asBinder()>
<android.app.ActivityThread: android.content.res.Configuration getConfiguration()>
<android.webkit.WebViewCore: android.webkit.CallbackProxy access$3300(android.webkit.WebViewCore)>
<android.widget.TextView: boolean onTrackballEvent(android.view.MotionEvent)>
<android.widget.TextView: int getGravity()>
<android.mtp.MtpDevice: byte[] native_get_object(int,int)>
<com.android.server.am.ActivityManagerService: void <clinit>()>
<android.view.InputDevice$1: java.lang.Object createFromParcel(android.os.Parcel)>
<Wrapper_android_util_DebugUtils: void test_android_util_DebugUtils()>
<android.app.DialogFragment: boolean getShowsDialog()>
<com.android.server.pm.Installer: boolean writeCommand(java.lang.String)>
<android.util.MonthDisplayHelper: void recalculate()>
<android.view.ViewStub: int getInflatedId()>
<android.mtp.MtpDevice: int getDeviceId()>
<com.android.internal.backup.LocalTransport: int clearBackupData(android.content.pm.PackageInfo)>
<android.app.Dialog: boolean onMenuOpened(int,android.view.Menu)>
<android.net.wifi.WifiStateMachine: com.android.internal.util.State access$2600(android.net.wifi.WifiStateMachine)>
<Wrapper_android_os_MessageQueue: void test_android_os_MessageQueue()>
<com.android.internal.telephony.cat.CatService$1: void <clinit>()>
<com.android.server.PowerManagerService$SettingsObserver: void <init>(com.android.server.PowerManagerService)>
<android.graphics.drawable.LayerDrawable: int getIntrinsicHeight()>
<com.android.server.am.ActivityManagerService$4: void <init>(java.lang.String,int)>
<android.os.StrictMode: boolean access$800()>
<android.app.Activity: void setVolumeControlStream(int)>
<android.webkit.WebSyncManager$SyncHandler: void <init>(android.webkit.WebSyncManager)>
<com.android.internal.telephony.cat.Duration: int describeContents()>
<android.content.res.TypedArray: void recycle()>
<android.widget.DatePicker$SavedState: int access$1300(android.widget.DatePicker$SavedState)>
<android.speech.tts.TextToSpeechService$SynthHandler: android.speech.tts.TextToSpeechService$SpeechItem getCurrentSpeechItem()>
<com.android.internal.telephony.DataConnection: int getSuggestedRetryTime(android.os.AsyncResult)>
<com.android.server.usb.UsbService: boolean hasDevicePermission(android.hardware.usb.UsbDevice)>
<android.media.AudioService: boolean isBluetoothScoOn()>
<com.android.internal.backup.LocalTransport: int getRestoreData(android.os.ParcelFileDescriptor)>
<android.media.audiofx.Visualizer: int native_getSamplingRate()>
<android.webkit.WebView$InnerScrollChangedListener: void <init>(android.webkit.WebView,android.webkit.WebView$1)>
<com.android.internal.telephony.cdma.sms.BearerData: void encodeCdmaSmsAddress(com.android.internal.telephony.cdma.sms.CdmaSmsAddress)>
<android.telephony.SmsMessage: boolean isReplace()>
<android.content.IntentFilter$AuthorityEntry: int access$100(android.content.IntentFilter$AuthorityEntry)>
<com.android.internal.widget.ActionBarView$1: void onItemSelected(android.widget.AdapterView,android.view.View,int,long)>
<com.android.server.usb.UsbHostManager: void <init>(android.content.Context,com.android.server.usb.UsbSettingsManager)>
<android.animation.FloatEvaluator: void <init>()>
<android.media.AudioManager: void forceVolumeControlStream(int)>
<android.widget.ListView: boolean showingTopFadingEdge()>
<Wrapper_android_text_util_Rfc822Tokenizer: void test_android_text_util_Rfc822Tokenizer()>
<android.net.EthernetDataTracker$InterfaceObserver: void interfaceRemoved(java.lang.String)>
<android.util.Base64OutputStream: void <init>(java.io.OutputStream,int,boolean)>
<GenerationGG: android.graphics.PathEffect get_androidgraphicsPathEffect()>
<android.app.Activity: void onRestart()>
<android.webkit.WebHistoryItem: android.webkit.WebHistoryItem clone()>
<android.animation.Keyframe$IntKeyframe: void setValue(java.lang.Object)>
<android.content.pm.ActivityInfo$1: void <init>()>
<android.content.ContentQueryMap: boolean access$002(android.content.ContentQueryMap,boolean)>
<android.graphics.Color: void RGBToHSV(int,int,int,float[])>
<android.net.http.Request: void sendRequest(android.net.http.AndroidHttpClientConnection)>
<android.hardware.usb.UsbDeviceConnection: byte[] native_get_desc()>
<android.drm.DrmUtils: void writeToFile(java.lang.String,byte[])>
<android.graphics.drawable.ScaleDrawable: boolean isStateful()>
<android.media.RingtoneManager: int getDefaultType(android.net.Uri)>
<android.app.ActivityThread: android.app.ActivityThread currentActivityThread()>
<android.content.IntentFilter: int match(java.lang.String,java.lang.String,java.lang.String,android.net.Uri,java.util.Set,java.lang.String)>
<android.view.ViewDebug$LooperProfiler$1: void <init>(android.view.ViewDebug$LooperProfiler)>
<android.view.GLES20Canvas: boolean clipPath(android.graphics.Path,android.graphics.Region$Op)>
<android.os.Message$1: android.os.Message[] newArray(int)>
<android.renderscript.Matrix4f: void translate(float,float,float)>
<com.android.internal.widget.LockPatternUtils: java.util.concurrent.atomic.AtomicBoolean access$100()>
<android.content.pm.ApplicationInfo$1: void <init>()>
<android.net.wifi.WifiStateMachine$DriverUnloadingState: void <init>(android.net.wifi.WifiStateMachine)>
<GenerationGG: android.webkit.WebSettings$ZoomDensity get_androidwebkitWebSettings__ZoomDensity()>
<GenerationGG: android.database.ContentObserver get_androiddatabaseContentObserver()>
<android.app.Instrumentation$InstrumentationThread: void <init>(android.app.Instrumentation,java.lang.String)>
<android.animation.IntKeyframeSet: java.lang.Object clone()>
<android.renderscript.Element: android.renderscript.Element RGB_888(android.renderscript.RenderScript)>
<android.preference.Preference$BaseSavedState$1: java.lang.Object[] newArray(int)>
<android.graphics.Matrix: void toShortString(java.lang.StringBuilder)>
<android.graphics.Matrix$1: void set(android.graphics.Matrix)>
<android.view.animation.TranslateAnimation: void <init>(float,float,float,float)>
<android.test.suitebuilder.TestGrouping$TestCasePredicate: boolean apply(java.lang.Class)>
<android.text.style.AlignmentSpan$Standard: void <init>(android.os.Parcel)>
<android.webkit.WebView: int nativeFindIndex()>
<GenerationGG: android.view.SurfaceHolder get_androidviewSurfaceHolder()>
<com.android.server.usb.UsbSettingsManager: boolean clearPackageDefaultsLocked(java.lang.String)>
<android.webkit.WebView: int keyCodeToSoundsEffect(int)>
<com.android.server.PowerManagerService$LockList: int getIndex(android.os.IBinder)>
<android.net.http.Headers: java.lang.String getXPermittedCrossDomainPolicies()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: android.net.wifi.p2p.WifiP2pGroup access$1302(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,android.net.wifi.p2p.WifiP2pGroup)>
<android.location.Criteria: int access$302(android.location.Criteria,int)>
<android.graphics.drawable.GradientDrawable$Orientation: android.graphics.drawable.GradientDrawable$Orientation[] values()>
<GenerationGG: android.webkit.WebSettings$RenderPriority get_androidwebkitWebSettings__RenderPriority()>
<com.android.internal.telephony.SmsMessageBase: int getIndexOnIcc()>
<android.widget.ImageView: boolean getBaselineAlignBottom()>
<android.widget.ExpandableListPosition: void recycle()>
<android.os.UEventObserver: void ensureThreadStarted()>
<android.database.DatabaseUtils: java.lang.String getHexCollationKey(java.lang.String)>
<com.android.internal.widget.EditableInputConnection: boolean performPrivateCommand(java.lang.String,android.os.Bundle)>
<com.android.server.wm.DimAnimator: void printTo(java.lang.String,java.io.PrintWriter)>
<com.android.internal.telephony.cat.IconLoader: boolean handleImageDescriptor(byte[])>
<android.preference.PreferenceActivity$3: void onClick(android.view.View)>
<android.widget.MediaController: void access$000(android.widget.MediaController)>
<android.widget.AbsListView: boolean acceptFilter()>
<com.android.server.sip.SipSessionGroup: java.lang.String getStackName()>
<android.telephony.PhoneNumberUtils: byte[] networkPortionToCalledPartyBCD(java.lang.String)>
<com.android.server.EventLogTags: void writeNetstatsWifiSample(long,long,long,long,long,long,long,long,long,long,long,long,long)>
<android.view.accessibility.IAccessibilityManager$Stub$Proxy: void <init>(android.os.IBinder)>
<GenerationGG: android.gesture.GestureLibrary get_androidgestureGestureLibrary()>
<android.widget.Scroller: void <init>(android.content.Context,android.view.animation.Interpolator,boolean)>
<com.android.server.sip.SipSessionListenerProxy: void onRegistrationFailed(android.net.sip.ISipSession,int,java.lang.String)>
<Wrapper_android_bluetooth_BluetoothHealthAppConfiguration: void test_android_bluetooth_BluetoothHealthAppConfiguration()>
<com.android.server.pm.PackageSignatures: java.lang.String toString()>
<android.content.pm.UserInfo: void <clinit>()>
<android.text.method.MetaKeyKeyListener: long handleKeyDown(long,int,android.view.KeyEvent)>
<android.app.WallpaperManager$Globals: void onWallpaperChanged()>
<android.graphics.DrawFilter: void finalize()>
<junit.runner.BaseTestRunner: junit.framework.Test getTest(java.lang.String)>
<android.view.MenuInflater: java.lang.Object[] access$500(android.view.MenuInflater)>
<com.android.internal.telephony.gsm.SmsBroadcastConfigInfo: java.lang.String toString()>
<android.app.SearchDialog$5: boolean onSuggestionSelect(int)>
<GenerationGG: android.widget.AutoCompleteTextView$Validator get_androidwidgetAutoCompleteTextView__Validator()>
<GenerationGG: android.graphics.AvoidXfermode get_androidgraphicsAvoidXfermode()>
<com.android.server.sip.SipSessionListenerProxy: void <init>()>
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.protocol.HttpContext)>
<android.server.BluetoothService$2: void <init>(android.server.BluetoothService)>
<android.os.ParcelFileDescriptor: android.os.ParcelFileDescriptor dup(java.io.FileDescriptor)>
<com.android.internal.telephony.DataConnectionTracker: java.lang.String apnIdToType(int)>
<com.android.server.WallpaperManagerService: com.android.internal.util.JournaledFile makeJournaledFile()>
<android.webkit.WebSettings$TextSize: void <clinit>()>
<android.content.res.AssetManager$AssetInputStream: void <init>(android.content.res.AssetManager,int)>
<Wrapper_android_media_audiofx_EnvironmentalReverb: void test_android_media_audiofx_EnvironmentalReverb()>
<android.view.ViewRootImpl$SystemUiVisibilityInfo: void <init>()>
<android.media.JetPlayer: boolean queueJetSegment(int,int,int,int,int,byte)>
<android.graphics.NinePatch: int getHeight()>
<android.webkit.WebViewCore$EventHub: void <init>(android.webkit.WebViewCore,android.webkit.WebViewCore$1)>
<com.android.server.WifiService: android.content.Context access$200(com.android.server.WifiService)>
<android.graphics.Interpolator: android.graphics.Interpolator$Result timeToValues(int,float[])>
<android.widget.OverScroller$SplineOverScroller: int access$700(android.widget.OverScroller$SplineOverScroller)>
<android.widget.AdapterViewAnimator: int modulo(int,int)>
<android.location.Location: double getAltitude()>
<android.view.KeyCharacterMap: int get(int,int)>
<android.net.NetworkStats$1: java.lang.Object[] newArray(int)>
<android.text.style.IconMarginSpan: void drawLeadingMargin(android.graphics.Canvas,android.graphics.Paint,int,int,int,int,int,java.lang.CharSequence,int,int,boolean,android.text.Layout)>
<android.renderscript.ProgramStore$DepthFunc: void <init>(java.lang.String,int,int)>
<Wrapper_android_opengl_GLES11Ext: void test_android_opengl_GLES11Ext()>
<android.net.wifi.WifiWatchdogStateMachine: android.net.wifi.WifiInfo access$1300(android.net.wifi.WifiWatchdogStateMachine)>
<android.webkit.WebSettings: android.webkit.WebSettings$TextSize getTextSize()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$4400(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,com.android.internal.util.IState)>
<com.android.internal.telephony.sip.SipConnectionBase: void setState(com.android.internal.telephony.Call$State)>
<junit.runner.BaseTestRunner: java.lang.String getPreference(java.lang.String)>
<com.android.server.pm.PackageManagerService: boolean collectCertificatesLI(android.content.pm.PackageParser,com.android.server.pm.PackageSetting,android.content.pm.PackageParser$Package,java.io.File,int)>
<android.net.ProxyProperties$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.net.InterfaceConfiguration: void <clinit>()>
<android.view.inputmethod.CorrectionInfo$1: android.view.inputmethod.CorrectionInfo[] newArray(int)>
<android.app.Instrumentation: void removeMonitor(android.app.Instrumentation$ActivityMonitor)>
<GenerationGG: android.widget.HeaderViewListAdapter get_androidwidgetHeaderViewListAdapter()>
<com.android.server.pm.PackageManagerService: void enforceSystemOrRoot(java.lang.String)>
<android.net.UrlQuerySanitizer: android.net.UrlQuerySanitizer$ValueSanitizer getEffectiveValueSanitizer(java.lang.String)>
<android.database.sqlite.SQLiteDatabase: void setMaxSqlCacheSize(int)>
<android.net.MailTo: java.lang.String getBody()>
<com.android.server.am.BatteryStatsService: boolean isOnBattery()>
<android.os.Process: void setArgV0(java.lang.String)>
<android.app.ActivityManager$RunningServiceInfo: void readFromParcel(android.os.Parcel)>
<android.accounts.Account: boolean equals(java.lang.Object)>
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: android.content.pm.ResolveInfo newResult(android.content.pm.PackageParser$ServiceIntentInfo,int)>
<com.android.server.pm.PackageManagerService: android.content.pm.PermissionInfo getPermissionInfo(java.lang.String,int)>
<android.os.Bundle$1: android.os.Bundle createFromParcel(android.os.Parcel)>
<android.animation.LayoutTransition: void <clinit>()>
<android.database.Observable: void registerObserver(java.lang.Object)>
<android.os.Parcel: byte[] marshall()>
<com.android.internal.telephony.DataConnection$DcInactiveState: void exit()>
<com.android.server.PowerManagerService$LockList: void <init>(com.android.server.PowerManagerService,com.android.server.PowerManagerService$1)>
<GenerationGG: android.text.format.DateFormat get_androidtextformatDateFormat()>
<android.os.Debug: int getGlobalClassInitTime()>
<android.view.View$2: void <init>(android.view.View,int)>
<android.widget.ExpandableListPosition: android.widget.ExpandableListPosition obtainChildPosition(int,int)>
<com.android.server.location.PassiveProvider: java.lang.String getName()>
<android.app.Fragment: void setRetainInstance(boolean)>
<android.net.NetworkStats: void <init>(android.os.Parcel)>
<com.android.internal.telephony.cat.ComprehensionTlv: void <init>(int,boolean,int,byte[],int)>
<android.view.accessibility.AccessibilityRecord: java.lang.CharSequence getBeforeText()>
<android.widget.CalendarView$WeekView: int getMonthOfLastWeekDay()>
<android.database.BulkCursorNative: android.os.IBinder asBinder()>
<android.database.sqlite.SQLiteDatabase: void removeSQLiteClosable(android.database.sqlite.SQLiteClosable)>
<com.android.internal.widget.ActionBarContainer: void setSplitBackground(android.graphics.drawable.Drawable)>
<android.os.storage.StorageManager$StorageEvent: void <init>(android.os.storage.StorageManager,int)>
<android.app.LoaderManagerImpl$LoaderInfo: java.lang.String toString()>
<com.android.server.location.LocationProviderProxy: com.android.internal.location.DummyLocationProvider getCachedAttributes()>
<com.android.server.connectivity.Tethering$TetherMasterSM: java.lang.String access$4600(com.android.server.connectivity.Tethering$TetherMasterSM)>
<GenerationGG: android.hardware.Camera$ShutterCallback get_androidhardwareCamera__ShutterCallback()>
<android.media.audiofx.PresetReverb: void setParameterListener(android.media.audiofx.PresetReverb$OnParameterChangeListener)>
<android.widget.GridLayout$Axis: void setCount(int)>
<android.view.View$6: void setValue(android.view.View,float)>
<android.widget.SearchView$6: void <init>(android.widget.SearchView)>
<android.view.Surface$CompatibleCanvas: void <init>(android.view.Surface,android.view.Surface$1)>
<com.android.internal.telephony.PhoneBase: void notifyPreciseCallStateChangedP()>
<android.view.GLES20RecordingCanvas: void drawLine(float,float,float,float,android.graphics.Paint)>
<android.widget.ToggleButton: java.lang.CharSequence getTextOn()>
<android.widget.ListPopupWindow: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.server.BluetoothAdapterStateMachine: void access$5500(android.server.BluetoothAdapterStateMachine,android.os.Message)>
<android.net.wifi.WpsStateMachine: android.net.wifi.WpsInfo access$000(android.net.wifi.WpsStateMachine)>
<android.view.inputmethod.CorrectionInfo: void <init>(int,java.lang.CharSequence,java.lang.CharSequence)>
<android.widget.GridLayout$5$1: void reset()>
<android.view.ViewRootImpl$TakenSurfaceHolder: void setFormat(int)>
<android.graphics.Matrix: float native_mapRadius(int,float)>
<com.android.server.WifiService: boolean access$4002(com.android.server.WifiService,boolean)>
<android.test.ViewAsserts: void assertGroupNotContains(android.view.ViewGroup,android.view.View)>
<android.inputmethodservice.InputMethodService$1: void <init>(android.inputmethodservice.InputMethodService)>
<android.location.ILocationManager$Stub: android.os.IBinder asBinder()>
<android.view.View: int resolveSize(int,int)>
<GenerationGG: android.accounts.Account[] get_androidaccountsAccount_ARRAY_()>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$BatteryCallback access$000(com.android.internal.os.BatteryStatsImpl)>
<android.webkit.WebBackForwardList: void nativeClose(int)>
<android.net.wifi.SupplicantStateTracker: boolean access$102(android.net.wifi.SupplicantStateTracker,boolean)>
<android.widget.ListView: int getHeaderViewsCount()>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: android.net.sip.SipProfile getPeerProfile()>
<android.widget.AdapterViewAnimator: void setAnimateFirstView(boolean)>
<android.app.Activity: java.lang.IllegalArgumentException missingDialog(int)>
<android.graphics.PointF: float length(float,float)>
<android.view.View$8: void <init>(java.lang.String)>
<android.app.SharedPreferencesImpl: void unregisterOnSharedPreferenceChangeListener(android.content.SharedPreferences$OnSharedPreferenceChangeListener)>
<GenerationGG: android.graphics.BitmapRegionDecoder get_androidgraphicsBitmapRegionDecoder()>
<android.content.ContentService$1: void <init>(android.content.ContentService,android.util.SparseIntArray)>
<android.widget.TextView$PositionListener: void onScrollChanged()>
<android.webkit.WebSettings: int getMinimumLogicalFontSize()>
<android.text.method.MultiTapKeyListener: void onSpanAdded(android.text.Spannable,java.lang.Object,int,int)>
<com.android.server.pm.PackageManagerService: void processPendingMove(com.android.server.pm.PackageManagerService$MoveParams,int)>
<android.media.audiofx.Equalizer$Settings: java.lang.String toString()>
<android.server.BluetoothAdapterStateMachine: void access$5600(android.server.BluetoothAdapterStateMachine,com.android.internal.util.IState)>
<android.net.sip.SipSession$Listener: void onCallEnded(android.net.sip.SipSession)>
<com.android.server.TelephonyRegistry$Record: void <init>(com.android.server.TelephonyRegistry$1)>
<android.net.http.Request: void <clinit>()>
<android.view.MotionEvent: float getSize(int)>
<android.content.res.XmlBlock: int access$1300(int)>
<com.android.internal.telephony.BaseCommands: void unSetOnCatProactiveCmd(android.os.Handler)>
<android.os.UEventObserver$UEventThread: void removeObserver(android.os.UEventObserver)>
<android.widget.ProgressBar: int getProgress()>
<com.android.server.sip.SipSessionGroup: java.lang.String access$1300(com.android.server.sip.SipSessionGroup)>
<android.view.View$9: void setValue(java.lang.Object,float)>
<android.location.Criteria: void setSpeedRequired(boolean)>
<android.drm.DrmManagerClient: int access$200(android.drm.DrmManagerClient,int)>
<android.app.WallpaperManager$Globals$1: void handleMessage(android.os.Message)>
<android.renderscript.RenderScriptGL: void setSurfaceTexture(android.graphics.SurfaceTexture,int,int)>
<com.android.internal.telephony.cat.CatCmdMessage$2: void <clinit>()>
<junit.framework.TestCase: void assertEquals(boolean,boolean)>
<com.android.internal.telephony.ISms$Stub$Proxy: void <init>(android.os.IBinder)>
<android.view.GLES20Canvas: void nDestroyLayerDeferred(int)>
<com.android.internal.widget.ActionBarView: int getNavigationMode()>
<android.graphics.Picture$RecordingCanvas: void <init>(android.graphics.Picture,int)>
<android.webkit.WebViewCore: void access$1700(android.webkit.WebViewCore,java.lang.String,java.util.Map)>
<android.widget.AutoCompleteTextView: void setDropDownBackgroundDrawable(android.graphics.drawable.Drawable)>
<GenerationGG: android.view.textservice.SuggestionsInfo get_androidviewtextserviceSuggestionsInfo()>
<android.telephony.PhoneNumberUtils: java.lang.String internalGetStrippedReversed(java.lang.String,int)>
<android.view.View$6: void <init>(java.lang.String)>
<android.util.SparseIntArray: void append(int,int)>
<android.net.wifi.WifiConfiguration$KeyMgmt: void <clinit>()>
<com.android.server.NativeDaemonConnector: java.lang.String[] doListCommand(java.lang.String,int)>
<com.android.internal.telephony.EncodeException: void <init>(java.lang.String)>
<android.hardware.usb.UsbDeviceConnection: int native_get_fd()>
<android.app.DownloadManager$Request: void <init>(java.lang.String)>
<android.widget.RadioGroup: boolean access$302(android.widget.RadioGroup,boolean)>
<android.widget.TextView: void onBeginBatchEdit()>
<android.app.FragmentManagerImpl: void invalidateOptionsMenu()>
<GenerationGG: android.webkit.WebViewClient get_androidwebkitWebViewClient()>
<android.content.ComponentName: void <clinit>()>
<android.test.LoaderTestCase$1: void <init>()>
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: long getItemId(int)>
<android.content.ContentValues: void put(java.lang.String,java.lang.Integer)>
<android.mtp.MtpObjectInfo: int getThumbPixHeight()>
<android.os.Parcel: void writeBinderList(java.util.List)>
<android.content.SyncStorageEngine: android.content.SyncStorageEngine getSingleton()>
<android.accounts.AccountManagerService: void insertAccountIntoCacheLocked(android.accounts.Account)>
<android.drm.DrmInfo: int getInfoType()>
<com.android.internal.os.PkgUsageStats: void <init>(java.lang.String,int,long,java.util.Map)>
<android.widget.MediaController: boolean isShowing()>
<android.widget.TableRow$ChildrenTracker: void access$100(android.widget.TableRow$ChildrenTracker,android.view.ViewGroup$OnHierarchyChangeListener)>
<com.android.server.pm.PackageManagerService: void cleanupInstallFailedPackage(com.android.server.pm.PackageSetting)>
<android.media.audiofx.Virtualizer: short getRoundedStrength()>
<Wrapper_android_renderscript_Long2: void test_android_renderscript_Long2()>
<android.app.Dialog: void setVolumeControlStream(int)>
<android.webkit.AccessibilityInjector$AccessibilityWebContentKeyBinding: int getThirdArgument(int)>
<com.android.server.NativeDaemonConnector: void <init>(com.android.server.INativeDaemonConnectorCallbacks,java.lang.String,int,java.lang.String)>
<com.android.server.StatusBarManagerService$2: void <init>(com.android.server.StatusBarManagerService,boolean)>
<android.view.VelocityTracker: float getYVelocity(int)>
<android.view.animation.Animation: void setStartOffset(long)>
<android.accounts.AccountManager$AmsTask: android.os.Bundle getResult()>
<android.net.wifi.NetworkUpdateResult: int getNetworkId()>
<android.content.SyncStorageEngine: java.util.List getCurrentSyncs()>
<com.android.server.BackupManagerService$4: void <clinit>()>
<android.widget.RemoteViewsAdapter$RemoteViewsFrameLayoutRefSet: void add(int,android.widget.RemoteViewsAdapter$RemoteViewsFrameLayout)>
<android.content.IntentFilter: java.lang.String getDataScheme(int)>
<android.database.CursorWindow: void nativeWriteToParcel(int,android.os.Parcel)>
<android.util.SparseArray: void delete(int)>
<android.graphics.Paint$FontMetrics: void <init>()>
<android.drm.DrmEvent: void <init>(int,int,java.lang.String)>
<android.text.TextUtils: boolean equals(java.lang.CharSequence,java.lang.CharSequence)>
<android.app.Dialog: boolean dispatchKeyShortcutEvent(android.view.KeyEvent)>
<android.view.MotionEvent: int getButtonState()>
<com.android.server.net.NetworkStatsService: int access$902(com.android.server.net.NetworkStatsService,int)>
<android.widget.ViewSwitcher: android.view.View getNextView()>
<android.view.View: boolean isVerticalScrollBarHidden()>
<android.content.SyncManager: boolean access$000(android.content.SyncManager)>
<android.telephony.SignalStrength: int getCdmaLevel()>
<Wrapper_android_webkit_ValueCallback: void test_android_webkit_ValueCallback()>
<android.preference.DialogPreference: java.lang.CharSequence getNegativeButtonText()>
<android.net.Credentials: void <init>(int,int,int)>
<com.android.internal.telephony.BaseCommands: void unregisterForRUIMLockedOrAbsent(android.os.Handler)>
<android.webkit.WebViewCore: void access$6000(android.webkit.WebViewCore)>
<com.android.internal.os.SamplingProfilerIntegration$1: void <init>()>
<com.android.internal.os.BatteryStatsImpl$Counter: void readSummaryFromParcelLocked(android.os.Parcel)>
<com.android.internal.widget.LockPatternView: void setDisplayMode(com.android.internal.widget.LockPatternView$DisplayMode)>
<android.net.Uri$AbstractHierarchicalUri: java.lang.String getLastPathSegment()>
<android.location.Location: long getTime()>
<android.renderscript.Double3: void <init>()>
<android.net.LocalSocketImpl: int access$300(android.net.LocalSocketImpl,java.io.FileDescriptor)>
<android.content.SyncStorageEngine: void readPendingOperationsLocked()>
<android.app.Instrumentation$Idler: void <init>(java.lang.Runnable)>
<android.webkit.WebTextView: boolean isSameTextField(int)>
<GenerationGG: android.view.ViewManager get_androidviewViewManager()>
<android.webkit.WebViewCore: void access$6600(android.webkit.WebViewCore)>
<android.graphics.Paint: android.graphics.Paint$Cap getStrokeCap()>
<com.android.server.connectivity.Tethering$TetherMasterSM: void access$3100(com.android.server.connectivity.Tethering$TetherMasterSM,com.android.internal.util.IState)>
<android.util.Base64: void <clinit>()>
<com.android.internal.os.BatteryStatsImpl$SamplingTimer: int computeCurrentCountLocked()>
<android.text.SpannableStringBuilder: java.lang.Object[] getSpans(int,int,java.lang.Class)>
<android.widget.OverScroller$SplineOverScroller: int access$400(android.widget.OverScroller$SplineOverScroller)>
<android.bluetooth.BluetoothDeviceProfileState: void access$9400(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.renderscript.RSSurfaceView: void init()>
<android.os.Process: int getUidForPid(int)>
<com.android.server.location.PassiveProvider: boolean hasMonetaryCost()>
<android.view.ViewRootImpl: android.view.ActionMode startActionModeForChild(android.view.View,android.view.ActionMode$Callback)>
<android.net.NetworkTemplate: void <init>(android.os.Parcel)>
<android.webkit.ZoomControlEmbedded: android.webkit.WebView access$100(android.webkit.ZoomControlEmbedded)>
<Wrapper_android_graphics_Matrix: void test_android_graphics_Matrix()>
<android.media.AudioService: int getMode()>
<android.animation.LayoutTransition: java.util.ArrayList access$800(android.animation.LayoutTransition)>
<android.renderscript.RenderScript: void nScriptSetVarJ(int,int,long)>
<com.android.server.PowerManagerService$14: void onSensorChanged(android.hardware.SensorEvent)>
<android.app.ContextImpl$3: void <init>()>
<com.android.server.AlarmManagerService: android.app.PendingIntent access$200(com.android.server.AlarmManagerService)>
<android.widget.TextView$InsertionPointCursorController: void <init>(android.widget.TextView)>
<android.content.SyncStorageEngine: android.util.Pair getBackoff(android.accounts.Account,java.lang.String)>
<android.app.IAlarmManager$Stub: android.app.IAlarmManager asInterface(android.os.IBinder)>
<com.android.server.AlarmManagerService: long timeToNextAlarm()>
<com.android.internal.app.ActionBarImpl: int getNavigationMode()>
<android.renderscript.Sampler: android.renderscript.Sampler CLAMP_LINEAR(android.renderscript.RenderScript)>
<android.media.AudioRecord: void startRecording()>
<android.widget.ExpandableListConnector$PositionMetadata: android.widget.ExpandableListConnector$PositionMetadata getRecycledOrCreate()>
<android.view.ViewDebug$5: void <init>(android.view.ViewDebug$ViewOperation,long[],java.util.concurrent.CountDownLatch)>
<junit.framework.TestSuite: java.util.Enumeration tests()>
<android.view.View: int getNextFocusUpId()>
<android.app.ApplicationErrorReport: void writeToParcel(android.os.Parcel,int)>
<android.animation.ObjectAnimator: void setTarget(java.lang.Object)>
<android.app.Dialog: void onPanelClosed(int,android.view.Menu)>
<android.webkit.LoadListener: boolean proxyAuthenticate()>
<android.content.res.XmlBlock$Parser: int getLineNumber()>
<android.widget.AutoCompleteTextView: int getDropDownVerticalOffset()>
<android.graphics.drawable.BitmapDrawable: int getGravity()>
<android.view.GLES20Canvas: void nDrawArc(int,float,float,float,float,float,float,boolean,int)>
<android.speech.SpeechRecognizer$InternalListener: void onPartialResults(android.os.Bundle)>
<android.app.ActivityThread$ApplicationThread: void scheduleStopActivity(android.os.IBinder,boolean,int)>
<Wrapper_android_test_FlakyTest: void test_android_test_FlakyTest()>
<com.android.internal.telephony.cdma.CdmaCall: java.util.List getConnections()>
<android.net.Uri$PathSegmentsBuilder: android.net.Uri$PathSegments build()>
<android.view.textservice.SuggestionsInfo: int getSuggestionsAttributes()>
<android.net.wifi.p2p.WifiP2pService: int access$3602(android.net.wifi.p2p.WifiP2pService,int)>
<android.test.suitebuilder.TestGrouping: java.util.List getTests()>
<android.app.ActivityThread$2: void onLowMemory()>
<android.widget.TableLayout$LayoutParams: void <init>()>
<android.renderscript.Script: void setVar(int,long)>
<android.telephony.PhoneNumberUtils: byte[] numberToCalledPartyBCD(java.lang.String)>
<android.text.AndroidBidi: int runBidi(int,char[],byte[],int,boolean)>
<android.database.IContentObserver$Stub$Proxy: void <init>(android.os.IBinder)>
<android.database.sqlite.SQLiteQueryBuilder: void appendWhere(java.lang.CharSequence)>
<com.android.server.LocationManagerService: java.lang.String access$2300(com.android.server.LocationManagerService)>
<com.android.internal.telephony.gsm.SimPhoneBookInterfaceManager: void dispose()>
<android.hardware.SensorManager$ListenerDelegate: void addSensor(android.hardware.Sensor)>
<android.content.res.ColorStateList$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.server.wm.WindowManagerService: boolean dumpWindows(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String,java.lang.String[],int,boolean)>
<android.animation.ObjectAnimator: java.lang.String getPropertyName()>
<android.content.pm.ActivityInfo: void <init>()>
<android.webkit.WebViewCore: void access$5700(android.webkit.WebViewCore,boolean)>
<android.location.GpsSatellite: boolean hasEphemeris()>
<com.android.internal.telephony.IccPhoneBookInterfaceManager: void dispose()>
<com.android.internal.telephony.cat.CatService: void finalize()>
<android.net.sip.SipSessionAdapter: void onError(android.net.sip.ISipSession,int,java.lang.String)>
<android.webkit.WebView: void nativeStopGL()>
<android.os.RegistrantList: void notifyRegistrants()>
<android.net.wifi.p2p.WifiP2pService: int access$3604(android.net.wifi.p2p.WifiP2pService)>
<android.util.JsonReader: void endObject()>
<com.android.internal.telephony.IccFileHandler$LoadLinearFixedContext: void <init>(int,android.os.Message)>
<com.android.server.RandomBlock: void <init>()>
<android.content.pm.PackageParser$Permission: void setPackageName(java.lang.String)>
<android.test.mock.MockPackageManager: void addPreferredActivity(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)>
<com.android.internal.telephony.AdnRecord: java.lang.String getNumber()>
<android.net.wifi.WifiStateMachine: void access$12000(android.net.wifi.WifiStateMachine,android.os.Message)>
<android.text.TextLine$SpanSet: void <init>(android.text.Spanned,int,int,java.lang.Class)>
<android.webkit.WebSettings: java.lang.String getFantasyFontFamily()>
<android.database.CursorWindow: java.lang.String nativeGetString(int,int,int)>
<android.view.inputmethod.CompletionInfo: void <init>(long,int,java.lang.CharSequence,java.lang.CharSequence)>
<android.util.JsonReader: double nextDouble()>
<android.app.Activity: void takeKeyEvents(boolean)>
<com.android.internal.util.Predicates: com.android.internal.util.Predicate or(com.android.internal.util.Predicate[])>
<android.content.pm.PackageParser: java.lang.String buildCompoundName(java.lang.String,java.lang.CharSequence,java.lang.String,java.lang.String[])>
<android.view.ViewRootImpl: void destroyHardwareLayers()>
<android.os.ParcelUuid$1: java.lang.Object[] newArray(int)>
<android.test.ActivityUnitTestCase$MockParent: void finishActivityFromChild(android.app.Activity,int)>
<android.webkit.LoadListener: android.content.Context getContext()>
<android.webkit.HTML5VideoFullScreen: int getBufferPercentage()>
<android.bluetooth.IBluetooth$Stub: void <init>()>
<android.net.wifi.WifiStateMachine: void access$4500(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.view.ScaleGestureDetector$SimpleOnScaleGestureListener: void onScaleEnd(android.view.ScaleGestureDetector)>
<android.text.Selection: void <clinit>()>
<android.view.ViewPropertyAnimator: void <init>(android.view.View)>
<android.speech.tts.TextToSpeechService$SilenceSpeechItem: void <init>(android.speech.tts.TextToSpeechService,java.lang.String,android.os.Bundle,long)>
<com.android.server.connectivity.Tethering$TetherMasterSM: void access$4300(com.android.server.connectivity.Tethering$TetherMasterSM,com.android.internal.util.IState)>
<android.view.GLES20Canvas: boolean quickReject(android.graphics.Path,android.graphics.Canvas$EdgeType)>
<android.test.AndroidTestRunner: void addTestListener(junit.framework.TestListener)>
<android.preference.MultiSelectListPreference$SavedState$1: android.preference.MultiSelectListPreference$SavedState[] newArray(int)>
<com.android.server.InputMethodManagerService$SessionState: void <init>(com.android.server.InputMethodManagerService,com.android.server.InputMethodManagerService$ClientState,com.android.internal.view.IInputMethod,com.android.internal.view.IInputMethodSession)>
<android.view.View$5: void setValue(java.lang.Object,float)>
<android.text.style.ImageSpan: void <init>(android.graphics.drawable.Drawable,java.lang.String,int)>
<android.view.Surface: void setSize(int,int)>
<android.bluetooth.BluetoothTetheringDataTracker: boolean reconnect()>
<android.view.GLES20Canvas: boolean nGetClipBounds(int,android.graphics.Rect)>
<android.content.pm.ManifestDigest$1: android.content.pm.ManifestDigest createFromParcel(android.os.Parcel)>
<android.util.JsonToken: void <init>(java.lang.String,int)>
<android.net.wifi.p2p.WifiP2pManager$Channel$P2pHandler: void <init>(android.net.wifi.p2p.WifiP2pManager$Channel,android.os.Looper)>
<com.android.server.DevicePolicyManagerService: com.android.internal.util.JournaledFile makeJournaledFile()>
<android.text.SpannableStringInternal: java.lang.Object[] getSpans(int,int,java.lang.Class)>
<android.view.View: boolean skipInvalidate()>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Phone$State getState()>
<android.webkit.WebView: float access$2800(android.webkit.WebView)>
<android.view.animation.AnimationSet: boolean willChangeBounds()>
<android.graphics.drawable.DrawableContainer: android.graphics.drawable.Drawable mutate()>
<android.bluetooth.BluetoothDeviceProfileState: void access$9200(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.database.sqlite.SQLiteAccessPermException: void <init>(java.lang.String)>
<android.view.SurfaceView$MyWindow: void resized(int,int,android.graphics.Rect,android.graphics.Rect,boolean,android.content.res.Configuration)>
<android.util.Log: int println_native(int,int,java.lang.String,java.lang.String)>
<android.view.inputmethod.InputMethodSubtype: java.lang.String getLocale()>
<android.server.BluetoothHealthProfileHandler$HealthChannel: android.bluetooth.BluetoothDevice access$1000(android.server.BluetoothHealthProfileHandler$HealthChannel)>
<com.android.server.NetworkManagementService: void modifyRoute(java.lang.String,int,android.net.RouteInfo)>
<android.speech.SpeechRecognizer: android.speech.SpeechRecognizer createSpeechRecognizer(android.content.Context,android.content.ComponentName)>
<com.android.internal.telephony.SmsHeader: void <init>()>
<com.android.internal.net.VpnConfig$1: com.android.internal.net.VpnConfig[] newArray(int)>
<android.location.Country: boolean equals(java.lang.Object)>
<android.net.INetworkStatsService$Stub$Proxy: void <init>(android.os.IBinder)>
<android.view.View: boolean checkInputConnectionProxy(android.view.View)>
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.gsm.GsmCall getCall()>
<android.net.wifi.WifiStateMachine: void access$11300(android.net.wifi.WifiStateMachine,android.os.Message)>
<android.net.sip.ISipService$Stub: void <init>()>
<android.telephony.ServiceState: void <init>()>
<android.view.Display: android.view.Display createCompatibleDisplay(int,android.view.CompatibilityInfoHolder)>
<android.app.PendingIntent: void writePendingIntentOrNullToParcel(android.app.PendingIntent,android.os.Parcel)>
<android.hardware.Camera: void setErrorCallback(android.hardware.Camera$ErrorCallback)>
<android.speech.SpeechRecognizer$Connection: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<android.test.mock.MockContentProvider: void <init>(android.content.Context)>
<com.android.server.accessibility.TouchExplorer$PointerTracker: int getLastInjectedHoverAction()>
<android.widget.ScrollView: void initVelocityTrackerIfNotExists()>
<com.android.server.LocationManagerService: java.lang.String access$2100(com.android.server.LocationManagerService)>
<android.view.ViewGroup: void invalidateChild(android.view.View,android.graphics.Rect)>
<android.os.StrictMode: boolean amTheSystemServerProcess()>
<android.app.Instrumentation$ActivityResult: android.content.Intent getResultData()>
<android.content.res.AssetManager: long access$600(android.content.res.AssetManager,int,long,int)>
<com.android.server.accessibility.TouchExplorer$PerformLongPressDelayed: boolean isPenidng()>
<com.android.server.pm.PackageManagerService$DumpState: com.android.server.pm.SharedUserSetting getSharedUser()>
<android.view.ViewGroup: boolean isMotionEventSplittingEnabled()>
<android.server.BluetoothDeviceProperties: java.util.Set keySet()>
<com.android.server.accessibility.TouchExplorer$PointerTracker: boolean isInjectedPointerDown(int)>
<android.widget.ProgressBar$AccessibilityEventSender: void <init>(android.widget.ProgressBar,android.widget.ProgressBar$1)>
<GenerationGG: android.graphics.Rect get_androidgraphicsRect()>
<android.widget.ImageView: boolean verifyDrawable(android.graphics.drawable.Drawable)>
<android.inputmethodservice.KeyboardView$SwipeTracker: void computeCurrentVelocity(int,float)>
<android.accounts.AccountManager: void <init>(android.content.Context,android.accounts.IAccountManager)>
<android.webkit.WebSettings: android.webkit.WebSettings$RenderPriority access$600(android.webkit.WebSettings)>
<com.android.internal.net.NetworkStatsFactory: android.net.NetworkStats readNetworkStatsDetail()>
<android.media.AudioRecord: int getAudioSource()>
<android.widget.AbsSpinner$SavedState: void <clinit>()>
<com.android.server.wm.InputFilter: void install(com.android.server.wm.InputFilter$Host)>
<android.net.NetworkInfo: void <init>(int)>
<com.android.internal.telephony.CommandsInterface$RadioState: boolean isRUIMReady()>
<com.android.server.pm.PackageSettingBase: boolean restoreComponentLPw(java.lang.String)>
<android.opengl.ETC1: boolean isValid(java.nio.Buffer)>
<android.text.Layout$TabStops: void reset(int,java.lang.Object[])>
<android.media.MediaPlayer: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>
<android.bluetooth.BluetoothHealthAppConfiguration: java.lang.String getName()>
<android.accounts.AccountManager$AmsTask: android.os.Bundle internalGetResult(java.lang.Long,java.util.concurrent.TimeUnit)>
<com.android.internal.telephony.cdma.CdmaCall: void onHangupLocal()>
<com.android.server.sip.SipService: com.android.server.sip.SipWakeupTimer access$300(com.android.server.sip.SipService)>
<android.view.KeyEvent$1: java.lang.Object[] newArray(int)>
<android.text.style.URLSpan: void <init>(java.lang.String)>
<android.server.BluetoothService: boolean setDevicePropertyStringNative(java.lang.String,java.lang.String,java.lang.String)>
<android.animation.PropertyValuesHolder$IntPropertyValuesHolder: void <init>(java.lang.String,int[])>
<android.net.wifi.SupplicantStateTracker: boolean access$602(android.net.wifi.SupplicantStateTracker,boolean)>
<Wrapper_android_os_RemoteException: void test_android_os_RemoteException()>
<android.app.ActivityManager$ProcessErrorStateInfo: int describeContents()>
<com.android.internal.telephony.PhoneBase: void setSystemProperty(java.lang.String,java.lang.String)>
<GenerationGG: android.preference.PreferenceFragment get_androidpreferencePreferenceFragment()>
<android.test.LoaderTestCase$3: void <init>(android.test.LoaderTestCase,android.os.Looper,android.content.Loader,android.content.Loader$OnLoadCompleteListener)>
<android.widget.Chronometer: void setFormat(java.lang.String)>
<com.android.internal.statusbar.StatusBarIconList: int describeContents()>
<android.webkit.WebView: int getVisibleTitleHeightImpl()>
<android.os.Binder: boolean unlinkToDeath(android.os.IBinder$DeathRecipient,int)>
<android.os.Parcel: long readLong()>
<android.widget.ExpandableListConnector$GroupMetadata: void writeToParcel(android.os.Parcel,int)>
<android.location.Criteria: int describeContents()>
<com.android.server.NotificationManagerService: void scheduleTimeoutLocked(com.android.server.NotificationManagerService$ToastRecord,boolean)>
<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,float[])>
<android.util.TimeUtils: int formatDurationLocked(long,int)>
<GenerationGG: android.graphics.drawable.shapes.RoundRectShape get_androidgraphicsdrawableshapesRoundRectShape()>
<android.animation.LayoutTransition: void setStartDelay(int,long)>
<com.android.internal.telephony.cdma.sms.BearerData: boolean decodePrivacyIndicator(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)>
<android.view.MotionEvent: void setTainted(boolean)>
<android.net.wifi.WifiStateMachine: com.android.internal.util.State access$4400(android.net.wifi.WifiStateMachine)>
<android.widget.RemoteViewsService$RemoteViewsFactoryAdapter: void onDestroy(android.content.Intent)>
<android.net.wifi.p2p.WifiP2pDevice: void <clinit>()>
<com.android.server.usb.UsbSettingsManager$MyPackageMonitor: void onPackageRemoved(java.lang.String,int)>
<android.media.audiofx.BassBoost: void setParameterListener(android.media.audiofx.BassBoost$OnParameterChangeListener)>
<android.os.StrictMode$ViolationInfo: void <init>(android.os.Parcel)>
<android.location.Location: void removeBearing()>
<com.android.internal.view.menu.ActionMenuView: void initialize(com.android.internal.view.menu.MenuBuilder)>
<android.net.LinkProperties: boolean isIdenticalDnses(android.net.LinkProperties)>
<android.media.AudioRecord: int native_read_in_byte_array(byte[],int,int)>
<android.graphics.ColorMatrix: void set(android.graphics.ColorMatrix)>
<android.net.wifi.WpsStateMachine: void access$200(android.net.wifi.WpsStateMachine,com.android.internal.util.IState)>
<android.hardware.Camera: void setOneShotPreviewCallback(android.hardware.Camera$PreviewCallback)>
<com.android.internal.telephony.gsm.GsmServiceStateTracker$1: void <init>(com.android.internal.telephony.gsm.GsmServiceStateTracker)>
<android.preference.PreferenceScreen: android.app.Dialog getDialog()>
<android.webkit.WebView: android.graphics.Rect sendOurVisibleRect()>
<com.android.server.am.ActivityStack: int indexOfTokenLocked(android.os.IBinder)>
<GenerationGG: android.database.sqlite.SQLiteException get_androiddatabasesqliteSQLiteException()>
<android.webkit.WebView: boolean access$5600(android.webkit.WebView)>
<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo getPackageInfo(java.lang.String,int)>
<android.animation.AnimatorSet: void playTogether(java.util.Collection)>
<Wrapper_android_text_style_UnderlineSpan: void test_android_text_style_UnderlineSpan()>
<android.webkit.WebView$InnerScrollChangedListener: void <init>(android.webkit.WebView)>
<android.widget.BaseExpandableListAdapter: int getChildType(int,int)>
<android.content.SyncManager$AccountSyncStats: void <init>(java.lang.String)>
<com.android.server.WifiService: void access$1500(com.android.server.WifiService)>
<com.android.internal.view.IInputMethod$Stub$Proxy: void <init>(android.os.IBinder)>
<com.android.server.location.MockProvider: boolean isEnabled()>
<com.android.server.accessibility.AccessibilityManagerService: java.util.List getInstalledAccessibilityServiceList()>
<android.view.View: android.view.View findViewByPredicateTraversal(com.android.internal.util.Predicate,android.view.View)>
<android.widget.PopupWindow: void setClipToScreenEnabled(boolean)>
<android.view.ViewGroup: boolean isViewTransitioning(android.view.View)>
<com.android.internal.telephony.AdnRecord: boolean hasExtendedRecord()>
<android.webkit.WebViewCore: void access$7300(android.webkit.WebViewCore,int)>
<android.widget.VideoView: int access$102(android.widget.VideoView,int)>
<android.webkit.LoadListener: boolean isSynchronous()>
<android.media.audiofx.AudioEffect: android.media.audiofx.AudioEffect$OnControlStatusChangeListener access$100(android.media.audiofx.AudioEffect)>
<android.graphics.drawable.shapes.RoundRectShape: android.graphics.drawable.shapes.Shape clone()>
<android.content.AbstractThreadedSyncAdapter: boolean access$400(android.content.AbstractThreadedSyncAdapter)>
<android.webkit.WebView: void onChildViewRemoved(android.view.View,android.view.View)>
<com.android.server.net.NetworkStatsService: java.lang.Object access$300(com.android.server.net.NetworkStatsService)>
<android.widget.OverScroller: int getFinalY()>
<com.android.server.TextServicesManagerService: java.util.ArrayList access$300(com.android.server.TextServicesManagerService)>
<com.android.internal.telephony.SmsRawData$1: void <init>()>
<android.location.Address: java.lang.String getSubThoroughfare()>
<android.test.ClassPathPackageInfoSource: android.test.ClassPathPackageInfo createPackageInfo(java.lang.String)>
<java.lang.Object: long getGroupId(int)>
<android.widget.TextView: void setImeOptions(int)>
<android.widget.ViewFlipper$1: void <init>(android.widget.ViewFlipper)>
<android.renderscript.AllocationAdapter: void resize(int)>
<android.widget.StackView$LayoutParams: void setHorizontalOffset(int)>
<android.graphics.Typeface: android.graphics.Typeface createFromFile(java.lang.String)>
<android.server.BluetoothService: boolean notifyIncomingConnection(java.lang.String)>
<android.os.ResultReceiver$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.net.LocalSocketImpl: void accept(android.net.LocalSocketImpl)>
<com.android.internal.os.HandlerCaller: android.os.Message obtainMessage(int)>
<android.graphics.Canvas: void drawPosText(char[],int,int,float[],android.graphics.Paint)>
<android.content.res.XmlBlock: int nativeGetStyleAttribute(int)>
<android.hardware.GeomagneticField: float getFieldStrength()>
<android.net.wifi.WpsStateMachine: android.net.wifi.WifiStateMachine access$500(android.net.wifi.WpsStateMachine)>
<android.app.BackStackRecord: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.database.sqlite.SQLiteDatabase: boolean isInStatementCache(java.lang.String)>
<android.widget.TimePicker$2: void <init>(android.widget.TimePicker)>
<com.android.internal.telephony.IccCardApplication: java.lang.String toString()>
<android.widget.TextView: boolean isPasswordInputType(int)>
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: int getActivityCount()>
<android.view.MotionEvent: int getPointerCount()>
<Wrapper_android_drm_DrmInfo: void test_android_drm_DrmInfo()>
<android.app.Fragment$SavedState: int describeContents()>
<com.android.internal.telephony.cdma.sms.BearerData: void encodeMessageId(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)>
<android.content.res.AssetManager: java.lang.String getResourceTypeName(int)>
<android.filterfw.core.GLFrame: java.lang.String toString()>
<android.widget.TimePicker$1: void <init>()>
<android.widget.TextView$HandleView: boolean isDragging()>
<com.android.internal.widget.ActionBarContextView: void onAnimationCancel(android.animation.Animator)>
<android.graphics.Color: int red(int)>
<android.content.pm.ManifestDigest: java.lang.String toString()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setLeadingZeroPossible(boolean)>
<android.os.Parcel: void writeFloat(float)>
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.ShapeDrawable$ShaderFactory getShaderFactory()>
<android.widget.OverScroller: void notifyVerticalEdgeReached(int,int,int)>
<android.net.wifi.ScanResult: void writeToParcel(android.os.Parcel,int)>
<java.lang.Object: java.lang.String getAttributeValue(int)>
<android.app.backup.FileBackupHelper: void restoreEntity(android.app.backup.BackupDataInputStream)>
<android.webkit.HTML5VideoViewProxy$VideoPlayer: void <clinit>()>
<GenerationGG: android.text.style.DrawableMarginSpan get_androidtextstyleDrawableMarginSpan()>
<android.content.pm.VerifierDeviceIdentity: java.lang.String encodeBase32(long)>
<com.android.server.wm.WindowManagerService: void addInputMethodWindowToListLocked(com.android.server.wm.WindowState)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimImsimLoaded: java.lang.String getEfName()>
<android.widget.OverScroller$SplineOverScroller: boolean update()>
<Wrapper_android_drm_DrmEvent: void test_android_drm_DrmEvent()>
<android.widget.TextView: int getImeOptions()>
<android.app.SearchDialog$2: void <init>(android.app.SearchDialog)>
<android.text.SpannableStringBuilder: java.lang.String toString()>
<com.android.internal.telephony.cdma.CdmaLteServiceStateTracker: void setSignalStrengthDefaultValues()>
<android.view.accessibility.AccessibilityRecord: void setToIndex(int)>
<com.android.server.am.PendingIntentRecord: void finalize()>
<android.util.EventLogTags: android.util.EventLogTags$Description get(java.lang.String)>
<android.webkit.WebViewCore: void access$6400(android.webkit.WebViewCore,int)>
<android.webkit.BrowserFrame: boolean firstLayoutDone()>
<android.view.View: void dispatchGetDisplayList()>
<android.view.MotionEvent: android.view.MotionEvent createFromParcelBody(android.os.Parcel)>
<android.net.wifi.WifiStateMachine$DefaultState: void <init>(android.net.wifi.WifiStateMachine)>
<GenerationGG: android.mtp.MtpDeviceInfo get_androidmtpMtpDeviceInfo()>
<com.android.internal.os.BatteryStatsImpl: long getAwakeTimeBattery()>
<android.nfc.INdefPushCallback$Stub$Proxy: android.os.IBinder asBinder()>
<android.widget.TabHost$TabSpec: android.widget.TabHost$IndicatorStrategy access$200(android.widget.TabHost$TabSpec)>
<android.view.View: boolean isHoverable()>
<android.app.SharedPreferencesImpl: void <clinit>()>
<com.android.internal.os.BatteryStatsImpl: void initTimes()>
<android.speech.tts.TextToSpeech: android.speech.tts.TextToSpeech$OnUtteranceCompletedListener access$800(android.speech.tts.TextToSpeech)>
<android.webkit.BrowserFrame: java.lang.String externalRepresentation()>
<android.server.BluetoothHealthProfileHandler: java.lang.String access$100(android.server.BluetoothHealthProfileHandler,int)>
<android.content.ContentProviderOperation$Builder: void <init>(int,android.net.Uri)>
<com.android.server.sip.SipSessionListenerProxy: void onError(android.net.sip.ISipSession,int,java.lang.String)>
<android.server.BluetoothService: boolean validateProfileConnectionState(int)>
<android.webkit.WebViewCore: void access$4500(android.webkit.WebViewCore)>
<android.graphics.LayerRasterizer: void <init>()>
<GenerationGG: android.view.inputmethod.InputMethodSubtype[] get_androidviewinputmethodInputMethodSubtype_ARRAY_()>
<android.media.AudioService$VolumeStreamState: int access$4800(android.media.AudioService$VolumeStreamState)>
<android.widget.TextView: android.view.ActionMode$Callback access$5100(android.widget.TextView)>
<android.webkit.WebBackForwardList: void setClearPending()>
<android.view.GLES20Canvas: int nCreateLayer(int,int,boolean,int[])>
<android.database.CursorIndexOutOfBoundsException: void <init>(int,int)>
<android.webkit.HTML5VideoViewProxy$VideoPlayer: boolean isPlaying(android.webkit.HTML5VideoViewProxy)>
<android.view.LayoutInflater: void <clinit>()>
<com.android.internal.telephony.DataConnection: boolean isRetryNeeded()>
<android.graphics.Path: void native_addRect(int,android.graphics.RectF,int)>
<android.net.MobileDataStateTracker: void access$700(android.net.MobileDataStateTracker,java.lang.String)>
<android.widget.RatingBar: android.widget.RatingBar$OnRatingBarChangeListener getOnRatingBarChangeListener()>
<android.graphics.drawable.InsetDrawable: int getChangingConfigurations()>
<android.util.DisplayMetrics: void <clinit>()>
<android.widget.PopupWindow: void setClippingEnabled(boolean)>
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap,android.renderscript.Allocation$MipmapControl,int)>
<GenerationGG: android.graphics.Region$Op get_androidgraphicsRegion__Op()>
<android.widget.SlidingDrawer: boolean access$300(android.widget.SlidingDrawer)>
<GenerationGG: android.test.PerformanceTestCase get_androidtestPerformanceTestCase()>
<android.database.MergeCursor$1: void <init>(android.database.MergeCursor)>
<android.os.DropBoxManager$Entry: java.io.InputStream getInputStream()>
<android.net.wifi.p2p.WifiP2pService: android.app.Notification access$8000(android.net.wifi.p2p.WifiP2pService)>
<android.net.wifi.WifiStateMachine: void addToBlacklist(java.lang.String)>
<GenerationGG: android.text.method.NumberKeyListener get_androidtextmethodNumberKeyListener()>
<android.util.SparseArray: android.util.SparseArray clone()>
<android.drm.DrmRights: void <init>(android.drm.ProcessedData,java.lang.String)>
<com.android.server.am.ActivityManagerService: android.content.res.CompatibilityInfo compatibilityInfoForPackageLocked(android.content.pm.ApplicationInfo)>
<android.view.VelocityTracker: float getXVelocity(int)>
<com.android.internal.telephony.gsm.GsmMmiCode: boolean isActivate()>
<android.app.FragmentManagerImpl: void dispatchOptionsMenuClosed(android.view.Menu)>
<android.gesture.GestureLibraries$FileGestureLibrary: boolean load()>
<android.os.PatternMatcher: void <init>(java.lang.String,int)>
<android.view.ViewRootImpl: void getGfxInfo(android.view.View,int[])>
<android.util.LongSparseArray: void <init>(int)>
<com.android.internal.widget.ActionBarView: com.android.internal.widget.ActionBarView$HomeView access$700(com.android.internal.widget.ActionBarView)>
<android.os.Handler: boolean post(java.lang.Runnable)>
<android.test.ClassPathPackageInfo: java.util.Set getTopLevelClassesRecursive()>
<GenerationGG: android.os.StrictMode get_androidosStrictMode()>
<android.widget.AbsSpinner: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<android.view.ViewGroup$3: void <init>(android.view.ViewGroup)>
<android.content.SyncResult: void <init>(boolean)>
<android.content.SyncStorageEngine$SyncHistoryItem: void <init>()>
<android.hardware.usb.UsbRequest: void native_dequeue_array(byte[],int,boolean)>
<android.webkit.HTML5VideoFullScreen: android.widget.MediaController access$200(android.webkit.HTML5VideoFullScreen)>
<android.test.InstrumentationTestRunner: junit.framework.TestSuite getTestSuite()>
<GenerationGG: android.view.SurfaceHolder$Callback get_androidviewSurfaceHolder__Callback()>
<android.widget.DatePicker: boolean isNewDate(int,int,int)>
<android.opengl.GLSurfaceView: void onResume()>
<android.net.UrlQuerySanitizer: java.lang.String unescape(java.lang.String)>
<GenerationGG: android.graphics.drawable.shapes.PathShape get_androidgraphicsdrawableshapesPathShape()>
<com.android.internal.telephony.cdma.SmsMessage: int getTeleService()>
<android.widget.ViewFlipper$2: void <init>(android.widget.ViewFlipper)>
<android.text.style.ImageSpan: void <init>(android.content.Context,int)>
<GenerationGG: android.view.LayoutInflater$Factory2 get_androidviewLayoutInflater__Factory2()>
<android.view.inputmethod.InputMethodInfo: android.content.pm.ServiceInfo getServiceInfo()>
<android.widget.MediaController$6: void <init>(android.widget.MediaController)>
<android.app.Fragment$SavedState$1: android.app.Fragment$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader)>
<com.android.internal.util.XmlUtils: int convertValueToInt(java.lang.CharSequence,int)>
<android.widget.Scroller: void extendDuration(int)>
<GenerationGG: android.text.style.CharacterStyle get_androidtextstyleCharacterStyle()>
<GenerationGG: android.mtp.MtpDevice get_androidmtpMtpDevice()>
<android.drm.DrmInfoStatus: void <init>(int,int,android.drm.ProcessedData,java.lang.String)>
<android.net.wifi.WifiInfo: void setSSID(java.lang.String)>
<android.gesture.InstanceLearner: void <init>()>
<com.android.server.EntropyService: void <clinit>()>
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.Drawable mutate()>
<android.graphics.Paint: android.graphics.Paint$Align getTextAlign()>
<android.net.wifi.WifiStateMachine: com.android.internal.util.State access$2300(android.net.wifi.WifiStateMachine)>
<android.widget.TextView: boolean shouldAdvanceFocusOnTab()>
<android.text.PackedIntVector: void moveValueGapTo(int,int)>
<android.webkit.ContentLoader: void buildHeaders(android.net.http.Headers)>
<GenerationGG: android.sax.EndTextElementListener get_androidsaxEndTextElementListener()>
<android.inputmethodservice.KeyboardView: boolean setShifted(boolean)>
<android.view.inputmethod.InputMethodManager$1: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<android.bluetooth.BluetoothDeviceProfileState: android.bluetooth.BluetoothDevice access$700(android.bluetooth.BluetoothDeviceProfileState)>
<android.widget.AbsSeekBar: void onStopTrackingTouch()>
<com.android.server.WifiService$2: void <init>(com.android.server.WifiService)>
<android.net.DhcpInfo$1: android.net.DhcpInfo[] newArray(int)>
<com.android.internal.telephony.AdnRecord: boolean isEqual(com.android.internal.telephony.AdnRecord)>
<android.widget.RemoteViews: void showPrevious(int)>
<android.speech.tts.FileSynthesisCallback: void error()>
<com.android.server.sip.SipService$AutoRegistrationProcess: void setListener(android.net.sip.ISipSessionListener)>
<android.text.style.StrikethroughSpan: int getSpanTypeId()>
<android.view.textservice.SpellCheckerSubtype$1: void <init>()>
<android.media.SoundPool: int load(java.lang.String,int)>
<android.widget.TextView: boolean onPrivateIMECommand(java.lang.String,android.os.Bundle)>
<GenerationGG: android.graphics.LayerRasterizer get_androidgraphicsLayerRasterizer()>
<android.speech.RecognitionService: void dispatchCancel(android.speech.IRecognitionListener)>
<com.android.internal.telephony.ServiceStateTracker: void registerForPsRestrictedEnabled(android.os.Handler,int,java.lang.Object)>
<android.webkit.WebView: android.webkit.WebChromeClient getWebChromeClient()>
<android.animation.Keyframe: android.animation.Keyframe ofInt(float)>
<android.content.IntentFilter: void readFromXml(org.xmlpull.v1.XmlPullParser)>
<android.graphics.RectF: boolean intersects(float,float,float,float)>
<com.android.internal.telephony.ApnSetting: void <init>(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String,int,java.lang.String[],java.lang.String,java.lang.String,boolean,int)>
<android.view.GLES20Canvas: void drawText(java.lang.String,float,float,android.graphics.Paint)>
<android.os.storage.StorageVolume: void <clinit>()>
<android.graphics.Canvas: int saveLayerAlpha(float,float,float,float,int,int)>
<android.content.SyncAdapterType$1: java.lang.Object[] newArray(int)>
<android.net.TrafficStats: void <init>()>
<com.android.internal.os.storage.ExternalStorageFormatter: android.os.IBinder onBind(android.content.Intent)>
<android.graphics.Paint: android.graphics.ColorFilter getColorFilter()>
<android.util.JsonReader: long nextLong()>
<android.opengl.Matrix: void translateM(float[],int,float,float,float)>
<com.android.server.AppWidgetService$1: void <init>(com.android.server.AppWidgetService,android.content.Intent)>
<GenerationGG: android.graphics.ImageFormat get_androidgraphicsImageFormat()>
<android.widget.GridView: android.widget.ListAdapter getAdapter()>
<android.database.AbstractCursor: android.os.Bundle respond(android.os.Bundle)>
<android.os.Debug: void resetThreadAllocSize()>
<com.android.server.am.ActivityManagerService: void cancelIntentSenderLocked(com.android.server.am.PendingIntentRecord,boolean)>
<android.renderscript.ProgramRaster: android.renderscript.ProgramRaster CULL_FRONT(android.renderscript.RenderScript)>
<android.graphics.Region: boolean quickReject(int,int,int,int)>
<com.android.server.ConnectivityService: android.net.ProxyProperties getGlobalProxy()>
<android.webkit.CacheManager: android.webkit.CacheManager$CacheResult parseHeaders(int,android.net.http.Headers,java.lang.String)>
<android.widget.ZoomButtonsController: android.view.ViewGroup getContainer()>
<android.text.style.RelativeSizeSpan: int describeContents()>
<android.preference.ListPreference: java.lang.CharSequence[] getEntryValues()>
<com.android.server.location.GpsLocationProvider: void native_update_network_state(boolean,int,boolean,boolean,java.lang.String,java.lang.String)>
<android.content.pm.IPackageInstallObserver$Stub: android.content.pm.IPackageInstallObserver asInterface(android.os.IBinder)>
<android.media.AudioService: java.util.ArrayList access$1900(android.media.AudioService)>
<android.content.res.XmlBlock: int nativeGetAttributeResource(int,int)>
<android.graphics.drawable.GradientDrawable$GradientState: float access$302(android.graphics.drawable.GradientDrawable$GradientState,float)>
<android.widget.AbsListView: android.os.StrictMode$Span access$1302(android.widget.AbsListView,android.os.StrictMode$Span)>
<android.net.http.Connection: void <clinit>()>
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: android.widget.RemoteViewsAdapter$RemoteViewsIndexMetaData getMetaDataAt(int)>
<android.net.http.AndroidHttpClient: void <clinit>()>
<android.view.accessibility.AccessibilityEvent$1: java.lang.Object[] newArray(int)>
<android.nfc.tech.MifareClassic: void validateValueOperand(int)>
<com.android.server.location.LocationProviderProxy: java.lang.String getName()>
<android.app.BackStackState: android.app.BackStackRecord instantiate(android.app.FragmentManagerImpl)>
<android.test.mock.MockResources: android.content.res.ColorStateList getColorStateList(int)>
<com.android.server.LocationManagerService: com.android.server.LocationManagerService$LocationWorkerHandler access$200(com.android.server.LocationManagerService)>
<android.drm.DrmInfoRequest: java.util.Iterator iterator()>
<com.android.server.connectivity.Tethering$TetherMasterSM: com.android.internal.util.State access$3300(com.android.server.connectivity.Tethering$TetherMasterSM)>
<android.content.CursorLoader: void setUri(android.net.Uri)>
<android.renderscript.RenderScript: void nObjDestroy(int)>
<android.content.res.XmlBlock$Parser: boolean isWhitespace()>
<android.content.pm.ResolveInfo$DisplayNameComparator: void <init>(android.content.pm.PackageManager)>
<android.view.VelocityTracker: int nativeInitialize()>
<android.media.TimedText: void readKaraoke()>
<android.accounts.AccountAuthenticatorCache$MySerializer: android.accounts.AuthenticatorDescription createFromXml(org.xmlpull.v1.XmlPullParser)>
<com.android.i18n.phonenumbers.geocoding.AreaCodeMapStorageStrategy: java.lang.String toString()>
<com.android.internal.telephony.DataConnection$FailCause: int getErrorCode()>
<Wrapper_android_media_effect_EffectUpdateListener: void test_android_media_effect_EffectUpdateListener()>
<android.text.Spannable$Factory: android.text.Spannable$Factory getInstance()>
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void saveNitzTime(long)>
<android.view.inputmethod.InputBinding: void <init>(android.view.inputmethod.InputConnection,android.view.inputmethod.InputBinding)>
<android.util.JsonWriter: void flush()>
<android.view.ViewRootImpl$W: void resized(int,int,android.graphics.Rect,android.graphics.Rect,boolean,android.content.res.Configuration)>
<android.test.mock.MockCursor: void registerDataSetObserver(android.database.DataSetObserver)>
<android.app.IActivityManager$WaitResult: void <clinit>()>
<android.view.animation.AnimationSet: void setStartTime(long)>
<java.lang.Object: int nextToken()>
<com.android.internal.telephony.ApnContext: boolean getDependencyMet()>
<android.drm.DrmManagerClient: void setOnErrorListener(android.drm.DrmManagerClient$OnErrorListener)>
<com.android.server.DeviceStorageMonitorService: void access$300(com.android.server.DeviceStorageMonitorService,boolean,long)>
<android.location.GpsStatus: int getTimeToFirstFix()>
<com.android.server.ClipboardService: android.content.ClipDescription getPrimaryClipDescription()>
<android.webkit.WebSettings: boolean getSavePassword()>
<com.android.server.AlarmManagerService: int access$1700(com.android.server.AlarmManagerService,int,int)>
<android.net.wifi.WifiManager: void <init>(android.net.wifi.IWifiManager,android.os.Handler)>
<com.android.internal.util.CharSequences$2: int length()>
<android.widget.ListView: int getTopSelectionPixel(int,int,int)>
<android.renderscript.Matrix3f: void loadTranslate(float,float)>
<android.media.AudioTrack: int setPlaybackHeadPosition(int)>
<android.view.GLES20Canvas: void nDrawPath(int,int,int)>
<com.android.server.pm.PackageManagerService: void reportSettingsProblem(int,java.lang.String)>
<GenerationGG: android.renderscript.ProgramVertexFixedFunction$Constants get_androidrenderscriptProgramVertexFixedFunction__Constants()>
<android.app.ApplicationErrorReport$1: void <init>()>
<android.text.style.SubscriptSpan: void <init>()>
<android.provider.CallLog: void <init>()>
<android.filterfw.core.GLEnvironment: boolean nativeAllocate()>
<android.database.AbstractCursor: boolean onMove(int,int)>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: void access$3000(com.android.server.sip.SipSessionGroup$SipSessionImpl,int)>
<android.net.wifi.p2p.WifiP2pGroup: boolean isGroupOwner()>
<android.animation.Animator: void setTarget(java.lang.Object)>
<android.animation.PropertyValuesHolder: void setKeyframes(android.animation.Keyframe[])>
<com.android.server.NotificationManagerService: boolean access$1500(com.android.server.NotificationManagerService)>
<android.app.Activity: void onTrimMemory(int)>
<android.content.SyncManager: android.app.NotificationManager access$2900(android.content.SyncManager)>
<android.content.Context: boolean isRestricted()>
<android.graphics.Path$Direction: void <init>(java.lang.String,int,int)>
<com.android.server.sip.SipSessionGroup$MakeCallCommand: void <init>(com.android.server.sip.SipSessionGroup,android.net.sip.SipProfile,java.lang.String,int)>
<android.hardware.usb.UsbDeviceConnection: android.hardware.usb.UsbRequest requestWait()>
<com.android.server.accessibility.AccessibilityManagerService: boolean access$402(com.android.server.accessibility.AccessibilityManagerService,boolean)>
<android.hardware.SensorManager: int sensors_module_get_next_sensor(android.hardware.Sensor,int)>
<android.widget.CalendarView$WeekView: void onMeasure(int,int)>
<com.android.internal.view.menu.MenuItemImpl: android.view.ActionProvider getActionProvider()>
<android.util.StateSet: boolean stateSetMatches(int[],int[])>
<android.nfc.NdefMessage: void <init>(byte[])>
<android.net.NetworkState$1: void <init>()>
<android.graphics.Region: boolean nativeWriteToParcel(int,android.os.Parcel)>
<android.preference.PreferenceManager: void removePreferencesScreen(android.content.DialogInterface)>
<android.content.res.AssetManager: void destroyAsset(int)>
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: int getCount()>
<android.net.sip.SipProfile: java.lang.String getSipDomain()>
<android.net.wifi.WifiStateMachine: void access$8900(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<GenerationGG: android.media.Ringtone get_androidmediaRingtone()>
<com.android.internal.telephony.cat.IconLoader: void <init>(android.os.Looper,com.android.internal.telephony.IccFileHandler)>
<android.accounts.IAccountManager$Stub: void <init>()>
<com.android.server.accessibility.AccessibilityInputFilter: void onUninstalled()>
<GenerationGG: android.content.EntityIterator get_androidcontentEntityIterator()>
<android.test.mock.MockContentProvider$InversionIContentProvider: android.os.Bundle call(java.lang.String,java.lang.String,android.os.Bundle)>
<android.graphics.Canvas: boolean clipRect(float,float,float,float,android.graphics.Region$Op)>
<android.view.VolumePanel: void onStopSounds()>
<android.view.ActionProvider: void <init>(android.content.Context)>
<android.bluetooth.IBluetoothHeadset$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.internal.view.menu.ActionMenuPresenter: com.android.internal.view.menu.ActionMenuPresenter$OverflowPopup access$102(com.android.internal.view.menu.ActionMenuPresenter,com.android.internal.view.menu.ActionMenuPresenter$OverflowPopup)>
<com.android.server.pm.PackageManagerService$FileInstallArgs: java.lang.String getResourcePathFromCodePath()>
<android.widget.TextView: void dispatchFinishTemporaryDetach()>
<android.widget.Scroller: boolean computeScrollOffset()>
<android.server.BluetoothService: boolean disconnectPanDeviceNative(java.lang.String)>
<android.database.IContentObserver$Stub: android.os.IBinder asBinder()>
<android.drm.DrmManagerClient: int openConvertSession(java.lang.String)>
<android.speech.SpeechRecognizer$InternalListener$1: void handleMessage(android.os.Message)>
<android.graphics.ColorFilter: void finalizer(int,int)>
<android.server.BluetoothAdapterStateMachine: void access$4800(android.server.BluetoothAdapterStateMachine,android.os.Message)>
<android.filterfw.core.SerializedFrame: void releaseNativeAllocation()>
<android.widget.ScrollBarDrawable: int getOpacity()>
<android.content.OperationApplicationException: void <init>(int)>
<android.app.ActivityThread$ProviderClientRecord: void <init>(android.app.ActivityThread,java.lang.String,android.content.IContentProvider,android.content.ContentProvider)>
<android.graphics.ComposeShader: void <init>(android.graphics.Shader,android.graphics.Shader,android.graphics.Xfermode)>
<android.widget.ActivityChooserView$Callbacks: void <init>(android.widget.ActivityChooserView)>
<com.android.server.am.ServiceRecord: int getLastStartId()>
<com.android.internal.telephony.ims.IsimUiccRecords$EfIsimImpuLoaded: void <init>(com.android.internal.telephony.ims.IsimUiccRecords)>
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: void <init>(android.widget.ActivityChooserView,android.widget.ActivityChooserView$1)>
<android.text.method.TextKeyListener: android.text.method.KeyListener getKeyListener(android.view.KeyEvent)>
<com.android.internal.os.PkgUsageStats: int describeContents()>
<com.android.server.DropBoxManagerService: boolean access$002(com.android.server.DropBoxManagerService,boolean)>
<android.graphics.Bitmap: int nativeGenerationId(int)>
<com.android.server.pm.PackageManagerService$ServiceIntentResolver: void removeService(android.content.pm.PackageParser$Service)>
<android.view.ViewRootImpl: void windowFocusChanged(boolean,boolean)>
<android.view.inputmethod.EditorInfo: void dump(android.util.Printer,java.lang.String)>
<java.lang.Object: boolean isShortcutKey(int,android.view.KeyEvent)>
<android.media.AudioService$SoundPoolCallback: int status()>
<com.android.internal.telephony.gsm.SIMRecords: java.lang.String getMsisdnAlphaTag()>
<android.inputmethodservice.InputMethodService$InputMethodSessionImpl: void <init>(android.inputmethodservice.InputMethodService)>
<android.view.View: void resetResolvedTextDirection()>
<android.graphics.Matrix: void native_setTranslate(int,float,float)>
<android.opengl.GLSurfaceView$GLThread: void surfaceDestroyed()>
<android.renderscript.RenderScript: void rsnAllocationGenerateMipmaps(int,int)>
<android.app.ListFragment: void <init>()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata: com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadata setMobile(com.android.i18n.phonenumbers.Phonemetadata$PhoneNumberDesc)>
<android.widget.GridLayout$Interval: void <init>(int,int)>
<android.net.wifi.WifiStateMachine$DriverStartingState: boolean processMessage(android.os.Message)>
<android.media.AudioTrack: int getState()>
<android.view.GLES20RecordingCanvas: void <init>()>
<android.graphics.RectF: boolean intersect(float,float,float,float)>
<android.view.Display: void <init>(int,android.view.CompatibilityInfoHolder)>
<com.android.internal.widget.IRemoteViewsFactory$Stub: com.android.internal.widget.IRemoteViewsFactory asInterface(android.os.IBinder)>
<android.widget.TextView: boolean shouldAdvanceFocusOnEnter()>
<android.webkit.WebStorage$Origin: void <init>(java.lang.String,long,long,android.webkit.WebStorage$1)>
<android.net.UrlQuerySanitizer: void addSanitizedEntry(java.lang.String,java.lang.String)>
<android.widget.ScrollView: boolean isSmoothScrollingEnabled()>
<com.android.server.pm.Installer: java.lang.String transaction(java.lang.String)>
<GenerationGG: android.hardware.Camera$AutoFocusCallback get_androidhardwareCamera__AutoFocusCallback()>
<com.android.server.ThrottleService: android.content.Intent access$1502(com.android.server.ThrottleService,android.content.Intent)>
<GenerationGG: android.widget.ExpandableListAdapter get_androidwidgetExpandableListAdapter()>
<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,android.renderscript.Allocation,int,int)>
<android.app.FragmentState: int describeContents()>
<android.os.IHardwareService$Stub: android.os.IBinder asBinder()>
<com.android.internal.telephony.cat.RilMessageDecoder$StateCmdParamsReady: void <init>(com.android.internal.telephony.cat.RilMessageDecoder)>
<GenerationGG: android.database.DataSetObserver get_androiddatabaseDataSetObserver()>
<android.view.View$AttachInfo: void <init>(android.view.IWindowSession,android.view.IWindow,android.os.Handler,android.view.View$AttachInfo$Callbacks)>
<android.net.wifi.WifiConfigStore: boolean saveConfig()>
<android.accessibilityservice.AccessibilityServiceInfo$1: android.accessibilityservice.AccessibilityServiceInfo[] newArray(int)>
<android.app.Fragment: java.lang.String getTag()>
<android.webkit.WebSyncManager: void <init>(android.content.Context,java.lang.String)>
<android.app.Dialog: void setContentView(android.view.View)>
<android.net.wifi.WifiWatchdogStateMachine: java.lang.String wifiInfoToStr(android.net.wifi.WifiInfo)>
<android.content.ContentProviderResult: void <init>(android.net.Uri)>
<android.view.View: float getRotationY()>
<android.net.MailTo: java.lang.String getCc()>
<Wrapper_android_graphics_LinearGradient: void test_android_graphics_LinearGradient()>
<android.graphics.drawable.NinePatchDrawable$NinePatchState: void <init>(android.graphics.drawable.NinePatchDrawable$NinePatchState)>
<com.android.internal.os.BatteryStatsImpl$Uid: void noteStartSensor(int)>
<android.webkit.ZoomManager$FocusMovementQueue: void <init>(android.webkit.ZoomManager)>
<com.android.server.location.GpsLocationProvider$1: void addGpsStatusListener(android.location.IGpsStatusListener)>
<com.android.internal.telephony.cdma.CdmaCall: void attachFake(com.android.internal.telephony.Connection,com.android.internal.telephony.Call$State)>
<android.speech.tts.SynthesisRequest: java.lang.String getLanguage()>
<android.accounts.AccountManagerService$1: void <init>(android.accounts.AccountManagerService)>
<android.renderscript.FileA3D$EntryType: android.renderscript.FileA3D$EntryType toEntryType(int)>
<android.net.wifi.WifiNative: boolean wpsPin(java.lang.String)>
<android.net.sip.SipAudioCall: java.lang.String access$502(android.net.sip.SipAudioCall,java.lang.String)>
<android.content.Loader: java.lang.String toString()>
<com.android.internal.content.PackageMonitor: void onPackagesUnavailable(java.lang.String[])>
<android.media.MediaMetadataRetriever: void setDataSource(java.io.FileDescriptor,long,long)>
<android.view.GLES20TextureLayer: void <init>(boolean)>
<android.os.IRemoteCallback$Stub$Proxy: android.os.IBinder asBinder()>
<android.webkit.WebView: android.content.Context access$10100(android.webkit.WebView)>
<com.android.internal.telephony.DataConnection$FailCause: boolean isEventLoggable()>
<GenerationGG: android.bluetooth.BluetoothServerSocket get_androidbluetoothBluetoothServerSocket()>
<android.widget.ListPopupWindow$2: void onNothingSelected(android.widget.AdapterView)>
<android.view.View: boolean nonzero(float)>
<android.content.res.AssetManager: java.io.InputStream openNonAsset(java.lang.String)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState access$5200(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<android.app.Activity: void setResult(int)>
<android.app.FragmentManager: void enableDebugLogging(boolean)>
<android.view.accessibility.AccessibilityNodeInfo: android.view.accessibility.AccessibilityNodeInfo obtain()>
<android.app.Activity: void dismissDialog(int)>
<android.view.GLES20Canvas: void nSetViewport(int,int,int)>
<android.renderscript.Allocation: android.renderscript.Allocation createCubemapFromBitmap(android.renderscript.RenderScript,android.graphics.Bitmap)>
<android.inputmethodservice.ExtractEditText: void startInternalChanges()>
<android.net.NetworkStatsHistory: void generateRandom(long,long,long)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setNegativeButton(java.lang.CharSequence,android.content.DialogInterface$OnClickListener)>
<android.speech.tts.TextToSpeechService$CallbackMap: void kill()>
<android.view.accessibility.AccessibilityNodeInfo: void setSource(android.view.View)>
<com.android.server.wm.WindowManagerService: void dumpWindowsLocked(java.io.FileDescriptor,java.io.PrintWriter,boolean,java.util.ArrayList)>
<com.android.internal.telephony.cat.Item$1: java.lang.Object[] newArray(int)>
<android.app.NativeActivity: void onInputChannelDestroyedNative(int,android.view.InputChannel)>
<com.android.server.wm.FakeWindowImpl: void layout(int,int)>
<android.media.audiofx.Equalizer: void <init>(int,int)>
<com.android.server.am.TaskRecord: void <init>(int,android.content.pm.ActivityInfo,android.content.Intent)>
<com.android.server.accessibility.TouchExplorer$PointerTracker: void populateActivePointerIds(int[])>
<android.net.InterfaceConfiguration: boolean isActive()>
<com.android.internal.widget.ActionBarContextView: java.lang.CharSequence getSubtitle()>
<com.android.internal.backup.LocalTransport: java.lang.String currentDestinationString()>
<android.media.JetPlayer: boolean clearQueue()>
<android.renderscript.Font$Style: void <clinit>()>
<android.opengl.GLES10: void glVertexPointerBounds(int,int,int,java.nio.Buffer,int)>
<android.app.FragmentManagerState: int describeContents()>
<android.content.ContentProviderOperation: long backRefToValue(android.content.ContentProviderResult[],int,java.lang.Integer)>
<android.view.ViewGroup: android.view.View getChildAt(int)>
<android.graphics.Interpolator: void nativeReset(int,int,int)>
<GenerationGG: android.content.AsyncTaskLoader get_androidcontentAsyncTaskLoader()>
<com.android.internal.os.BatteryStatsImpl: void noteScanWifiLockReleasedLocked(int)>
<com.android.internal.telephony.gsm.SIMRecords$Get_Spn_Fsm_State: void <clinit>()>
<com.android.internal.telephony.cat.IconLoader: int bitToBnW(int)>
<android.renderscript.RSSurfaceView: void destroyRenderScriptGL()>
<com.android.internal.telephony.cat.CommandParamsFactory: boolean processProvideLocalInfo(com.android.internal.telephony.cat.CommandDetails,java.util.List)>
<android.widget.MediaController$2: void <init>(android.widget.MediaController)>
<android.content.SyncStorageEngine$PendingOperation: void <init>(android.accounts.Account,int,java.lang.String,android.os.Bundle,boolean)>
<android.content.Intent$ShortcutIconResource$1: android.content.Intent$ShortcutIconResource[] newArray(int)>
<android.os.HandlerThread: void onLooperPrepared()>
<GenerationGG: java.nio.ByteBuffer get_javanioByteBuffer()>
<Wrapper_android_graphics_PorterDuff: void test_android_graphics_PorterDuff()>
<android.graphics.Path: void native_offset(int,float,float,int)>
<com.android.server.am.CompatModePackages: void <init>(com.android.server.am.ActivityManagerService,java.io.File)>
<GenerationGG: java.security.Principal[] get_javasecurityPrincipal_ARRAY_()>
<android.graphics.Camera: void nativeGetMatrix(int)>
<android.animation.PropertyValuesHolder: android.animation.PropertyValuesHolder ofFloat(java.lang.String,float[])>
<android.net.wifi.SupplicantState: void writeToParcel(android.os.Parcel,int)>
<android.graphics.drawable.shapes.RectShape: void <init>()>
<android.net.DummyDataStateTracker: java.lang.String toString()>
<android.widget.ScrollView: boolean isViewDescendantOf(android.view.View,android.view.View)>
<android.nfc.NdefMessage: android.nfc.NdefRecord[] getRecords()>
<android.content.ContentProvider$Transport: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>
<android.webkit.HTML5VideoViewProxy: void access$700(android.webkit.HTML5VideoViewProxy,int,int,int,int)>
<com.android.server.location.GpsLocationProvider: void handleInjectNtpTime()>
<android.net.sip.ISipSessionListener$Stub$Proxy: void <init>(android.os.IBinder)>
<android.os.MemoryFile: boolean allowPurging(boolean)>
<android.renderscript.Int2: void <init>()>
<android.webkit.WebView$1: void onPostExecute(java.util.Set)>
<com.android.internal.view.InputBindResult$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: java.lang.String getActionIntentReconnectAlarm()>
<android.webkit.WebSettings: int getCacheMode()>
<android.webkit.ZoomManager: android.webkit.ZoomManager$FocusMovementQueue access$200(android.webkit.ZoomManager)>
<com.android.internal.os.HandlerCaller: android.os.Message obtainMessageOOO(int,java.lang.Object,java.lang.Object,java.lang.Object)>
<android.bluetooth.BluetoothPan: boolean isValidDevice(android.bluetooth.BluetoothDevice)>
<com.android.internal.app.ShutdownThread$3: void onReceive(android.content.Context,android.content.Intent)>
<com.android.internal.app.ShutdownThread$4: void onShutDownComplete(int)>
<Wrapper_android_graphics_Bitmap: void test_android_graphics_Bitmap()>
<GenerationGG: android.gesture.GestureStore get_androidgestureGestureStore()>
<Wrapper_android_net_http_SslError: void test_android_net_http_SslError()>
<com.android.internal.app.ActionBarImpl$2: void onAnimationEnd(android.animation.Animator)>
<com.android.internal.telephony.sip.SipConnectionBase$1: void <clinit>()>
<com.android.server.InputMethodManagerService$4: void <init>(com.android.server.InputMethodManagerService)>
<android.net.ProxyProperties: void <init>(java.lang.String,int,java.lang.String)>
<android.preference.Preference: android.content.Intent getIntent()>
<com.android.internal.widget.ActionBarView: android.app.ActionBar$OnNavigationListener access$000(com.android.internal.widget.ActionBarView)>
<com.android.server.usb.UsbSettingsManager: boolean hasDefaults(java.lang.String)>
<GenerationGG: android.speech.tts.TextToSpeech$OnUtteranceCompletedListener get_androidspeechttsTextToSpeech__OnUtteranceCompletedListener()>
<android.widget.Gallery: int getLimitedMotionScrollAmount(boolean,int)>
<android.webkit.WebViewDatabase: void <clinit>()>
<android.content.ContentProvider$Transport: void <init>(android.content.ContentProvider)>
<android.media.Metadata: boolean getBoolean(int)>
<com.android.internal.telephony.sip.SipCommandInterface: void reportStkServiceIsRunning(android.os.Message)>
<android.media.MediaPlayer: void _start()>
<android.text.SpannableString: int getSpanFlags(java.lang.Object)>
<android.util.MonthDisplayHelper: int getColumnOf(int)>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: void changeCall(java.lang.String,int)>
<android.telephony.SmsMessage: int getIndexOnSim()>
<android.webkit.PluginFullScreenHolder: void <init>(android.webkit.WebView,int,int)>
<android.net.wifi.WifiStateMachine: java.util.concurrent.atomic.AtomicInteger access$7700(android.net.wifi.WifiStateMachine)>
<com.android.server.pm.PackageManagerService: boolean comparePermissionInfos(android.content.pm.PermissionInfo,android.content.pm.PermissionInfo)>
<android.media.MediaMetadataRetriever: void native_init()>
<android.location.Address: void setPhone(java.lang.String)>
<android.webkit.WebViewCore: void access$3400(android.webkit.WebViewCore,int,int,java.lang.String,int,int,int)>
<DumbClass: void DumbMethod5()>
<com.android.server.wm.WindowState: boolean isVisibleLw()>
<android.webkit.JniUtil: boolean nativeUseChromiumHttpStack()>
<android.util.TypedValue: int complexToDimensionPixelSize(int,android.util.DisplayMetrics)>
<android.widget.RemoteViews$ViewGroupAction: void updateMemoryUsageEstimate(android.widget.RemoteViews$MemoryUsageCounter)>
<com.android.internal.util.StateMachine: android.os.Message obtainMessage(int,int,int,java.lang.Object)>
<com.android.server.am.ServiceRecord: void <init>(com.android.server.am.ActivityManagerService,com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv,android.content.ComponentName,android.content.Intent$FilterComparison,android.content.pm.ServiceInfo,java.lang.Runnable)>
<Wrapper_android_view_SoundEffectConstants: void test_android_view_SoundEffectConstants()>
<android.app.Activity: void removeDialog(int)>
<android.media.audiofx.AudioEffect: android.media.audiofx.AudioEffect$OnEnableStatusChangeListener access$000(android.media.audiofx.AudioEffect)>
<com.android.server.MountService$1$1: void <init>(com.android.server.MountService$1)>
<GenerationGG: android.graphics.DashPathEffect get_androidgraphicsDashPathEffect()>
<android.graphics.drawable.StateListDrawable: int getStateCount()>
<android.net.wifi.WifiWatchdogStateMachine$OnlineWatchState: void enter()>
<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateDefaultLayoutParams()>
<android.webkit.WebViewCore$EventHub: void access$7700(android.webkit.WebViewCore$EventHub,android.os.Message,long)>
<com.android.server.StatusBarManagerService: int gatherDisableActionsLocked()>
<android.widget.TextView: void checkForResize()>
<android.telephony.NeighboringCellInfo: int getPsc()>
<android.app.Fragment: android.app.Fragment getTargetFragment()>
<android.telephony.PhoneStateListener$1: void onCallForwardingIndicatorChanged(boolean)>
<android.media.MediaMetadataRetriever: android.graphics.Bitmap _getFrameAtTime(long,int)>
<android.graphics.Path: void native_addRoundRect(int,android.graphics.RectF,float[],int)>
<com.android.server.AttributeCache$Entry: void <init>(android.content.Context,android.content.res.TypedArray)>
<android.view.WindowManagerImpl: void <init>()>
<GenerationGG: java.util.regex.Matcher get_javautilregexMatcher()>
<android.renderscript.Element: boolean isCompatible(android.renderscript.Element)>
<android.text.style.UnderlineSpan: void <init>()>
<android.view.GLES20Canvas: boolean clipRect(android.graphics.Rect)>
<android.inputmethodservice.InputMethodService$InputMethodSessionImpl: void appPrivateCommand(java.lang.String,android.os.Bundle)>
<com.android.server.accessibility.AccessibilityManagerService: boolean access$1300(com.android.server.accessibility.AccessibilityManagerService,com.android.server.accessibility.AccessibilityManagerService$Service)>
<android.net.NetworkPolicy$1: java.lang.Object[] newArray(int)>
<android.test.mock.MockContentProvider$InversionIContentProvider: void <init>(android.test.mock.MockContentProvider)>
<android.widget.TextView$ChangeWatcher: void <init>(android.widget.TextView,android.widget.TextView$1)>
<GenerationGG: android.mtp.MtpStorageInfo get_androidmtpMtpStorageInfo()>
<GenerationGG: android.hardware.Camera$Parameters get_androidhardwareCamera__Parameters()>
<GenerationGG: android.view.textservice.SpellCheckerSubtype get_androidviewtextserviceSpellCheckerSubtype()>
<android.text.method.MultiTapKeyListener$Timeout: android.text.Editable access$002(android.text.method.MultiTapKeyListener$Timeout,android.text.Editable)>
<android.widget.AnalogClock: void onMeasure(int,int)>
<android.widget.ProgressBar: int getMax()>
<com.android.server.wm.InputManager: int nativeGetSwitchState(int,int,int)>
<android.view.IRotationWatcher$Stub: void <init>()>
<android.app.FragmentManagerImpl: void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: boolean isInCall()>
<com.android.internal.telephony.Connection: void <init>()>
<com.android.server.am.ActivityManagerService: android.app.ActivityManager$RunningServiceInfo makeRunningServiceInfoLocked(com.android.server.am.ServiceRecord)>
<android.os.Parcel: void writeStringList(java.util.List)>
<android.os.Parcel: void writeDoubleArray(double[])>
<android.text.style.TextAppearanceSpan: android.content.res.ColorStateList getTextColor()>
<android.content.pm.Signature$1: android.content.pm.Signature[] newArray(int)>
<android.net.sip.SipAudioCall: boolean access$800(android.net.sip.SipAudioCall)>
<com.android.internal.telephony.AdnRecordCache: void handleMessage(android.os.Message)>
<android.nfc.Tag: java.lang.String[] getTechList()>
<com.android.internal.util.XmlUtils: void beginDocument(org.xmlpull.v1.XmlPullParser,java.lang.String)>
<android.content.SyncStorageEngine$AuthorityInfo: void <init>(android.accounts.Account,java.lang.String,int)>
<android.database.sqlite.SQLiteDatatypeMismatchException: void <init>(java.lang.String)>
<android.webkit.WebIconDatabase$EventHandler: void requestIconAndSendResult(java.lang.String,android.webkit.WebIconDatabase$IconListener)>
<android.accounts.AccountManagerService: java.lang.String access$1000()>
<android.net.wifi.p2p.WifiP2pInfo: void writeToParcel(android.os.Parcel,int)>
<com.android.server.location.GpsLocationProvider: void native_inject_location(double,double,float)>
<GenerationGG: android.app.backup.BackupManager get_androidappbackupBackupManager()>
<android.widget.ProgressBar: void setInterpolator(android.view.animation.Interpolator)>
<android.webkit.WebView: void contentSizeChanged(boolean)>
<android.service.wallpaper.WallpaperService$Engine: void onOffsetsChanged(float,float,float,float,int,int)>
<android.net.wifi.WifiWatchdogStateMachine$BlacklistedApState: void enter()>
<android.media.MediaPlayer: void seekTo(int)>
<android.webkit.SslErrorHandlerImpl: void <init>(android.webkit.SslErrorHandler,android.webkit.LoadListener)>
<android.app.IWallpaperManagerCallback$Stub: void <init>()>
<android.os.WorkSource: void clear()>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void access$2400(com.android.server.connectivity.Tethering$TetherInterfaceSM,com.android.internal.util.IState)>
<android.widget.TextView: int computeVerticalScrollRange()>
<android.renderscript.Allocation: android.renderscript.Allocation createTyped(android.renderscript.RenderScript,android.renderscript.Type,int)>
<android.webkit.URLUtil: java.lang.String guessFileName(java.lang.String,java.lang.String,java.lang.String)>
<Wrapper_android_os_DeadObjectException: void test_android_os_DeadObjectException()>
<android.graphics.Picture: void nativeDraw(int,int)>
<com.android.internal.telephony.IccCard: void onQueryFdnEnabled(android.os.AsyncResult)>
<android.text.util.Rfc822Token: void <init>(java.lang.String,java.lang.String,java.lang.String)>
<android.media.AudioTrack: java.lang.Object access$200(android.media.AudioTrack)>
<android.text.TextDirectionHeuristics$TriState: android.text.TextDirectionHeuristics$TriState[] values()>
<com.android.server.VibratorService: android.os.WorkSource access$800(com.android.server.VibratorService)>
<android.view.View: boolean isActivated()>
<GenerationGG: android.util.Printer get_androidutilPrinter()>
<android.net.NetworkStatsHistory: void generateRandom(long,long,long,long,long,long,long,java.util.Random)>
<android.view.GLES20Canvas: int getDisplayList(int)>
<android.app.Activity: void openOptionsMenu()>
<com.android.i18n.phonenumbers.Phonemetadata$PhoneMetadataCollection: void readExternal(java.io.ObjectInput)>
<android.media.AudioService: android.bluetooth.BluetoothHeadset access$2302(android.media.AudioService,android.bluetooth.BluetoothHeadset)>
<android.app.Fragment: void onPrepareOptionsMenu(android.view.Menu)>
<android.gesture.GestureUtils: float[] rotate(float[],float)>
<android.test.mock.MockContext: android.content.pm.ApplicationInfo getApplicationInfo()>
<GenerationGG: android.test.FlakyTest get_androidtestFlakyTest()>
<android.content.Loader: void stopLoading()>
<com.android.server.am.ReceiverList: int hashCode()>
<junit.framework.TestCase: void setName(java.lang.String)>
<android.telephony.TelephonyManager: java.lang.String getNetworkCountryIso()>
<com.android.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitleForItemView(com.android.internal.view.menu.MenuView$ItemView)>
<android.database.AbstractCursor: boolean getWantsAllOnMoveCalls()>
<GenerationGG: android.graphics.Bitmap$CompressFormat get_androidgraphicsBitmap__CompressFormat()>
<android.widget.ListPopupWindow: void setForceIgnoreOutsideTouch(boolean)>
<android.webkit.WebIconDatabase$EventHandler: void access$1100(android.webkit.WebIconDatabase$EventHandler)>
<android.accounts.AccountManagerService$RemoveAccountSession: java.lang.String toDebugString(long)>
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void queueNextSignalStrengthPoll()>
<android.widget.VideoView: int resolveAdjustedSize(int,int)>
<android.drm.DrmRights: void instantiate(java.io.File,java.lang.String)>
<com.android.internal.telephony.DataConnection: void access$800(com.android.internal.telephony.DataConnection,com.android.internal.telephony.DataConnection$DisconnectParams)>
<com.android.i18n.phonenumbers.AsYouTypeFormatter: boolean isFormatEligible(java.lang.String)>
<android.content.pm.IPackageInstallObserver$Stub$Proxy: void <init>(android.os.IBinder)>
<android.content.pm.Signature: java.security.PublicKey getPublicKey()>
<android.net.wifi.WifiStateMachine: void access$8400(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<com.android.server.DevicePolicyManagerService: int getEncryptionStatus()>
<android.graphics.Canvas: void drawLines(float[],int,int,android.graphics.Paint)>
<android.view.Surface: boolean isValid()>
<GenerationGG: android.location.GpsSatellite get_androidlocationGpsSatellite()>
<android.bluetooth.BluetoothDeviceProfileState: void access$10100(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.content.SyncManager$SyncTimeTracker: void <init>(android.content.SyncManager)>
<GenerationGG: android.text.util.Rfc822Token get_androidtextutilRfc822Token()>
<com.android.internal.telephony.Call$State: void <clinit>()>
<android.view.Surface: void init(android.os.Parcel)>
<android.view.GestureDetector$SimpleOnGestureListener: boolean onDown(android.view.MotionEvent)>
<com.android.server.ThrottleService$DataRecorder: int getPeriodCount()>
<GenerationGG: org.xml.sax.ContentHandler get_orgxmlsaxContentHandler()>
<android.widget.TimePicker$SavedState$1: void <init>()>
<android.view.inputmethod.InputMethodSubtype: void <clinit>()>
<android.animation.ValueAnimator: void setRepeatMode(int)>
<android.app.ActivityThread$Profiler: void <init>()>
<android.net.http.AndroidHttpClientConnection: void setSocketTimeout(int)>
<com.android.server.connectivity.Vpn: int jniCheck(java.lang.String)>
<com.android.server.accessibility.TouchExplorer$SendHoverDelayed: boolean isPenidng()>
<com.android.internal.app.AlertController: int access$1302(com.android.internal.app.AlertController,int)>
<com.android.internal.util.StateMachine$SmHandler: void access$2100(com.android.internal.util.StateMachine$SmHandler,boolean)>
<android.preference.PreferenceScreen: boolean isOnSameScreenAsChildren()>
<com.android.server.LocationManagerService: int nextAccuracy(int)>
<android.bluetooth.IBluetooth$Stub: android.os.IBinder asBinder()>
<android.graphics.SurfaceTexture: void release()>
<android.location.ICountryDetector$Stub$Proxy: void <init>(android.os.IBinder)>
<GenerationGG: android.text.Spannable$Factory get_androidtextSpannable__Factory()>
<android.bluetooth.IBluetooth$Stub$Proxy: void <init>(android.os.IBinder)>
<android.widget.EditText: java.lang.CharSequence getText()>
<android.net.SntpClient: long getRoundTripTime()>
<android.net.wifi.WifiConfigStore: void readIpAndProxyConfigurations()>
<com.android.internal.telephony.BaseCommands: com.android.internal.telephony.CommandsInterface$RadioState getRadioState()>
<com.android.internal.telephony.PhoneProxy: java.lang.String getActiveApnHost(java.lang.String)>
<android.widget.SearchView: void postUpdateFocusedState()>
<android.webkit.WebViewCore: android.webkit.BrowserFrame getBrowserFrame()>
<android.webkit.JWebCoreJavaBridge: void addPackageName(java.lang.String)>
<com.android.server.am.ActivityManagerService: com.android.server.am.TaskRecord taskForIdLocked(int)>
<android.webkit.WebView: boolean drawHistory()>
<android.os.FileObserver$ObserverThread: int startWatching(int,java.lang.String,int)>
<android.test.mock.MockContext: int checkUriPermission(android.net.Uri,java.lang.String,java.lang.String,int,int,int)>
<com.android.server.pm.PackageManagerService$InstallParams: void <init>(com.android.server.pm.PackageManagerService,android.net.Uri,android.content.pm.IPackageInstallObserver,int,java.lang.String,android.net.Uri,android.content.pm.ManifestDigest)>
<com.android.server.PowerManagerService$13: void onAccuracyChanged(android.hardware.Sensor,int)>
<com.android.server.PowerManagerService: void monitor()>
<android.hardware.SensorManager: boolean disableSensorLocked(android.hardware.Sensor)>
<com.android.internal.telephony.cdma.EriManager: void dispose()>
<android.view.KeyEvent: void <init>(long,long,int,int,int,int,int,int,int,int)>
<com.android.server.DevicePolicyManagerService: int getPasswordMinimumNonLetter(android.content.ComponentName)>
<android.view.HardwareRenderer$Gl20Renderer: void <init>(boolean)>
<android.graphics.Color: int nativeHSVToColor(int,float[])>
<GenerationGG: android.widget.CursorAdapter get_androidwidgetCursorAdapter()>
<android.view.View: void onDraw(android.graphics.Canvas)>
<android.webkit.WebViewClient: void onReceivedClientCertRequest(android.webkit.WebView,android.webkit.ClientCertRequestHandler,java.lang.String)>
<com.android.internal.telephony.ApnContext: java.lang.String getApnType()>
<com.android.server.am.TransferPipe: void kill()>
<android.webkit.JWebCoreJavaBridge: void finalize()>
<android.os.Debug$MemoryInfo: int getTotalSharedDirty()>
<android.speech.tts.TextToSpeech$Connection: void <init>(android.speech.tts.TextToSpeech,android.speech.tts.TextToSpeech$1)>
<android.net.sip.SimpleSessionDescription$Media: java.lang.String getAttribute(java.lang.String)>
<android.graphics.Path: void native_addOval(int,android.graphics.RectF,int)>
<android.widget.RemoteViews$SetOnClickFillInIntent: void <init>(android.widget.RemoteViews,int,android.content.Intent)>
<android.server.BluetoothAdapterProperties: void <init>(android.content.Context,android.server.BluetoothService)>
<android.util.Xml: org.xmlpull.v1.XmlPullParser newPullParser()>
<com.android.server.pm.Installer: boolean readReply()>
<android.os.ConditionVariable: void close()>
<java.lang.Object: java.lang.Object getChild(int,int)>
<android.content.pm.ServiceInfo: int describeContents()>
<android.app.Service: void dump(java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[])>
<com.android.server.pm.Settings: java.util.ArrayList getListOfIncompleteInstallPackagesLPr()>
<com.android.internal.telephony.DataConnection$DisconnectParams: void <init>(java.lang.String,android.os.Message)>
<com.android.internal.widget.ActionBarView$SavedState$1: com.android.internal.widget.ActionBarView$SavedState[] newArray(int)>
<android.bluetooth.BluetoothProfileState$PendingCommandState: void enter()>
<android.text.method.ArrowKeyMovementMethod: boolean isSelecting(android.text.Spannable)>
<android.view.View$5: java.lang.Float get(android.view.View)>
<android.text.method.TextKeyListener: void onSpanAdded(android.text.Spannable,java.lang.Object,int,int)>
<android.text.DynamicLayout: int getLineCount()>
<android.database.sqlite.SQLiteDatabase: void markTableSyncable(java.lang.String,java.lang.String,java.lang.String)>
<android.net.sip.SimpleSessionDescription$Media: void setFormat(java.lang.String,java.lang.String)>
<android.database.AbstractCursor: android.net.Uri getNotificationUri()>
<android.webkit.PluginManager: void <clinit>()>
<android.net.http.RequestQueue$SyncFeeder: void <init>()>
<android.content.pm.RegisteredServicesCache$1: void <init>(android.content.pm.RegisteredServicesCache)>
<com.android.internal.telephony.gsm.GsmServiceStateTracker: java.util.TimeZone getNitzTimeZone(int,boolean,long)>
<com.android.server.wm.StrictModeFlash: void positionSurface(int,int)>
<android.widget.GridLayout$Axis$1: void <init>(android.widget.GridLayout$Axis,android.widget.GridLayout$Arc[])>
<android.animation.ValueAnimator: void setFrameDelay(long)>
<android.graphics.Interpolator: int getValueCount()>
<android.webkit.WebViewCore: void access$2800(android.webkit.WebViewCore)>
<com.android.server.usb.UsbSettingsManager: void readPreference(org.xmlpull.v1.XmlPullParser)>
<android.test.mock.MockContentProvider: java.lang.String[] getStreamTypes(android.net.Uri,java.lang.String)>
<android.graphics.drawable.PictureDrawable: android.graphics.Picture getPicture()>
<android.app.DownloadManager: android.net.Uri getDownloadUri(long)>
<android.test.mock.MockContentProvider$InversionIContentProvider: android.os.IBinder asBinder()>
<android.speech.tts.TtsEngines: boolean isSystemEngine(android.content.pm.ServiceInfo)>
<android.widget.RemoteViewsAdapter$5: void <init>(android.widget.RemoteViewsAdapter)>
<android.app.Activity$ManagedCursor: boolean access$302(android.app.Activity$ManagedCursor,boolean)>
<android.view.textservice.SpellCheckerSubtype: int getNameResId()>
<com.android.internal.telephony.sip.SipCommandInterface: void sendTerminalResponse(java.lang.String,android.os.Message)>
<android.bluetooth.BluetoothDeviceProfileState: void access$800(android.bluetooth.BluetoothDeviceProfileState,int)>
<android.renderscript.Matrix3f: void <init>()>
<android.net.sip.SimpleSessionDescription$Fields: void access$500(android.net.sip.SimpleSessionDescription$Fields,java.lang.String,char,java.lang.String)>
<android.renderscript.RenderScript: void destroy()>
<android.content.SyncResult$1: void <init>()>
<android.gesture.GestureStore: void save(java.io.OutputStream,boolean)>
<android.widget.BaseExpandableListAdapter: boolean isEmpty()>
<android.webkit.WebViewClient: void onLoadResource(android.webkit.WebView,java.lang.String)>
<com.android.server.wm.WindowManagerService: void createWatermark()>
<android.content.pm.FeatureInfo: void writeToParcel(android.os.Parcel,int)>
<android.view.SurfaceView: boolean isFixedSize()>
<com.android.server.usb.UsbDeviceManager$UsbHandler: void setEnabledFunctions(java.lang.String,boolean)>
<android.net.wifi.WifiNative: boolean stopSupplicant()>
<com.android.internal.telephony.gsm.GsmConnection: long getConnectTime()>
<android.net.http.HttpsConnection: void setCertificate(android.net.http.SslCertificate)>
<android.graphics.Paint: android.graphics.Shader getShader()>
<android.webkit.HttpAuthHandlerImpl: void waitForRequestToComplete()>
<com.android.server.pm.PreferredActivity: void <init>(android.content.IntentFilter,int,android.content.ComponentName[],android.content.ComponentName)>
<com.android.server.TextServicesManagerService$InternalServiceConnection: void <init>(com.android.server.TextServicesManagerService,java.lang.String,java.lang.String,com.android.internal.textservice.ISpellCheckerSessionListener,android.os.Bundle)>
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: com.android.internal.telephony.DataConnectionTracker$State getState(java.lang.String)>
<com.android.internal.os.BatteryStatsImpl$Uid$Sensor: com.android.internal.os.BatteryStatsImpl$Timer getSensorTime()>
<android.graphics.drawable.AnimatedRotateDrawable: void setFramesCount(int)>
<android.widget.AbsSpinner: void recycleAllViews()>
<android.view.GLES20Canvas: void restore()>
<android.view.TextureView: boolean destroyLayer()>
<android.view.View$3: void <init>(android.view.View,int)>
<android.net.LocalSocket: void shutdownInput()>
<com.android.server.MountService$ObbAction: void <init>(com.android.server.MountService,com.android.server.MountService$ObbState)>
<android.test.mock.MockContext: java.lang.String[] fileList()>
<GenerationGG: android.test.ApplicationTestCase get_androidtestApplicationTestCase()>
<android.widget.Scroller: int getStartX()>
<com.android.server.PowerManagerService: com.android.server.BatteryService access$700(com.android.server.PowerManagerService)>
<android.text.StaticLayout: void finish()>
<android.widget.OverScroller$SplineOverScroller: void startBounceAfterEdge(int,int,int)>
<android.app.backup.BackupDataInputStream: int read(byte[],int,int)>
<android.view.ViewRootImpl$W: void dispatchGetNewSurface()>
<android.util.Log: int v(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.animation.KeyframeSet: void <init>(android.animation.Keyframe[])>
<android.text.method.QwertyKeyListener: android.text.method.QwertyKeyListener getInstanceForFullKeyboard()>
<android.widget.ActivityChooserModel: int getHistorySize()>
<android.app.ActivityThread: void access$300(android.app.ActivityThread,int,java.lang.Object)>
<android.os.StrictMode$AndroidBlockGuardPolicy: java.lang.String toString()>
<android.content.res.AssetFileDescriptor: long getLength()>
<com.android.server.StatusBarManagerService$4: void <init>(com.android.server.StatusBarManagerService,int)>
<com.android.internal.telephony.cdma.CdmaCallTracker: void handleEcmTimer(int)>
<GenerationGG: android.opengl.GLSurfaceView$EGLConfigChooser get_androidopenglGLSurfaceView__EGLConfigChooser()>
<android.sax.Element: android.sax.Element requireChild(java.lang.String)>
<android.text.util.Rfc822Token: boolean stringEquals(java.lang.String,java.lang.String)>
<android.webkit.CookieManager$Cookie: void <init>(java.lang.String,java.lang.String)>
<android.widget.ZoomButtonsController: void setZoomSpeed(long)>
<android.inputmethodservice.ExtractEditLayout$ExtractActionMode: void setTitle(int)>
<android.graphics.drawable.Drawable: boolean getPadding(android.graphics.Rect)>
<Wrapper_android_database_sqlite_SQLiteReadOnlyDatabaseException: void test_android_database_sqlite_SQLiteReadOnlyDatabaseException()>
<android.content.ContentProviderResult: void <clinit>()>
<GenerationGG: android.renderscript.ProgramFragment get_androidrenderscriptProgramFragment()>
<GenerationGG: android.preference.PreferenceScreen get_androidpreferencePreferenceScreen()>
<Wrapper_android_graphics_Typeface: void test_android_graphics_Typeface()>
<com.android.server.connectivity.Tethering: java.lang.String[] getTetheredIfacePairs()>
<java.lang.Object: long getChildId(int,int)>
<GenerationGG: android.renderscript.RenderScript$Priority get_androidrenderscriptRenderScript__Priority()>
<android.graphics.Paint: android.graphics.MaskFilter getMaskFilter()>
<android.text.style.TypefaceSpan: java.lang.String getFamily()>
<android.app.ListActivity: void <init>()>
<android.content.Intent: java.lang.Object clone()>
<com.android.server.pm.PackageManagerService: void querySyncProviders(java.util.List,java.util.List)>
<android.webkit.WebViewCore: boolean access$4000(android.webkit.WebViewCore,int,int[],int[],int[],int,int,int)>
<android.widget.TextView: int getCompoundPaddingTop()>
<android.view.GLES20Canvas: void drawLine(float,float,float,float,android.graphics.Paint)>
<android.app.Activity: android.app.Activity getParent()>
<DumbClass: void DumbMethod65()>
<android.widget.AdapterViewAnimator: void applyTransformForChildAtIndex(android.view.View,int)>
<android.webkit.WebStorage$Origin: void <init>(java.lang.String,long)>
<android.text.method.DateKeyListener: char[] getAcceptedChars()>
<android.telephony.PhoneNumberUtils: java.lang.String convertKeypadLettersToDigits(java.lang.String)>
<android.media.MediaScannerConnection: void <init>(android.content.Context,android.media.MediaScannerConnection$MediaScannerConnectionClient)>
<com.android.internal.telephony.sip.SipPhone: com.android.internal.telephony.Call getForegroundCall()>
<android.app.ActivityThread: void access$2500(android.app.ActivityThread,android.app.ActivityThread$DumpComponentInfo)>
<com.android.internal.widget.IRemoteViewsAdapterConnection$Stub$Proxy: void <init>(android.os.IBinder)>
<android.graphics.Matrix: void setRotate(float)>
<android.app.backup.BackupDataInputStream: java.lang.String getKey()>
<com.android.server.am.UsageStatsService$PkgUsageStatsExtended: void addLaunchCount(java.lang.String)>
<android.view.MotionEvent: void scale(float)>
<android.renderscript.Allocation: void copy2DRangeFrom(int,int,int,int,int[])>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: java.lang.String[] parseTypes(java.lang.String)>
<android.graphics.Matrix: void native_setScale(int,float,float)>
<com.android.server.am.ActivityManagerService: void showWaitingForDebugger(android.app.IApplicationThread,boolean)>
<android.text.Selection$END: void <init>(android.text.Selection$1)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setOnCancelListener(android.content.DialogInterface$OnCancelListener)>
<android.graphics.RegionIterator: boolean nativeNext(int,android.graphics.Rect)>
<com.android.server.sip.SipSessionGroup: void setWakeupTimer(com.android.server.sip.SipWakeupTimer)>
<android.net.Uri$Builder: android.net.Uri$Builder fragment(android.net.Uri$Part)>
<com.android.server.pm.PackageManagerService: boolean compareStrings(java.lang.CharSequence,java.lang.CharSequence)>
<android.database.DataSetObserver: void onChanged()>
<android.widget.TabWidget: android.view.View getChildTabViewAt(int)>
<android.media.audiofx.Equalizer: short[] getBandLevelRange()>
<android.content.SyncManager: boolean access$1702(android.content.SyncManager,boolean)>
<android.widget.OverScroller: void setFinalY(int)>
<android.graphics.ColorMatrixColorFilter: int nativeColorMatrixFilter(float[])>
<android.net.sip.SipSession: android.net.sip.SipSession$Listener access$000(android.net.sip.SipSession)>
<android.graphics.Canvas: void <init>(int)>
<android.view.inputmethod.InputMethodSubtype: int hashCodeInternal(java.lang.String,java.lang.String,java.lang.String,boolean,boolean)>
<com.android.server.ThrottleService: long access$1314(com.android.server.ThrottleService,long)>
<android.drm.DrmManagerClient: int _getDrmObjectType(int,java.lang.String,java.lang.String)>
<android.view.accessibility.AccessibilityRecord: void setScrollY(int)>
<android.media.audiofx.PresetReverb: short getPreset()>
<android.widget.Gallery: void dispatchSetSelected(boolean)>
<android.telephony.PhoneStateListener$1: void onSignalStrengthChanged(int)>
<android.content.res.StringBlock$StyleIDs: int access$000(android.content.res.StringBlock$StyleIDs)>
<android.os.MessageQueue: void nativeInit()>
<android.security.KeyChainException: void <init>()>
<android.preference.Preference: void setFragment(java.lang.String)>
<android.widget.AbsListView$FlingRunnable$1: void <init>(android.widget.AbsListView$FlingRunnable)>
<com.android.internal.telephony.cdma.sms.BearerData$Gsm7bitCodingResult: void <init>(com.android.internal.telephony.cdma.sms.BearerData$1)>
<android.graphics.drawable.GradientDrawable$GradientState: void setSize(int,int)>
<com.android.server.Watchdog: void <init>()>
<android.webkit.CacheManager: boolean isCachableRedirect(int)>
<android.widget.TabHost: android.widget.FrameLayout getTabContentView()>
<android.text.method.ArrowKeyMovementMethod: void <clinit>()>
<android.text.Layout: float getSpacingMultiplier()>
<com.android.server.sip.SipService$SipSessionGroupExt: void setWakeupTimer(com.android.server.sip.SipWakeupTimer)>
<android.accounts.Account$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.content.CursorLoader: java.lang.String getSelection()>
<com.android.server.am.BackupRecord: void <init>(com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv,android.content.pm.ApplicationInfo,int)>
<com.android.internal.textservice.ITextServicesManager$Stub$Proxy: android.os.IBinder asBinder()>
<com.android.server.am.ActivityManagerService$9: void <init>(com.android.server.am.ActivityManagerService,java.lang.String,java.lang.StringBuilder,android.os.DropBoxManager,java.lang.String)>
<GenerationGG: android.widget.OverScroller get_androidwidgetOverScroller()>
<android.widget.GridLayout$2: int getAlignmentValue(android.view.View,int)>
<android.webkit.WebSettings: boolean supportMultipleWindows()>
<com.android.server.wm.InputManager: void setFocusedApplication(com.android.server.wm.InputApplicationHandle)>
<android.content.MutableContextWrapper: void setBaseContext(android.content.Context)>
<android.view.View: int getBottomPaddingOffset()>
<android.net.wifi.WifiStateMachine: void handlePreDhcpSetup()>
<android.telephony.ServiceState: void setOperatorName(java.lang.String,java.lang.String,java.lang.String)>
<android.gesture.GestureOverlayView: float getGestureStrokeLengthThreshold()>
<android.view.ViewGroup$HoverTarget: void recycle()>
<android.provider.Settings$Secure: java.lang.String getBluetoothA2dpSinkPriorityKey(java.lang.String)>
<android.content.ContextWrapper: java.io.File getCacheDir()>
<com.android.server.location.LocationProviderProxy: boolean requiresSatellite()>
<android.view.ViewGroup: android.view.View findFocus()>
<com.android.internal.os.BatteryStatsImpl: void prepareForDumpLocked()>
<android.webkit.PluginFullScreenHolder$CustomFrameLayout: boolean onTouchEvent(android.view.MotionEvent)>
<android.content.pm.Signature: int describeContents()>
<android.view.InputEvent$1: java.lang.Object[] newArray(int)>
<android.widget.VideoView: void setOnErrorListener(android.media.MediaPlayer$OnErrorListener)>
<com.android.server.wm.InputMonitor: void updateInputDispatchModeLw()>
<android.widget.ImageView: android.graphics.drawable.Drawable getDrawable()>
<android.widget.TableRow$ChildrenTracker: void <init>(android.widget.TableRow)>
<android.widget.SimpleAdapter: long getItemId(int)>
<android.webkit.WebView: void deleteSelection(int,int)>
<com.android.internal.view.InputConnectionWrapper$InputContextCallback: void setTextAfterCursor(java.lang.CharSequence,int)>
<android.text.SpannableStringBuilder: void moveGapTo(int)>
<android.net.sip.SipSessionAdapter: void <init>()>
<android.view.View: boolean hasIdentityMatrix()>
<android.graphics.Rect: int width()>
<android.net.LocalSocket: void setFileDescriptorsForSend(java.io.FileDescriptor[])>
<GenerationGG: android.renderscript.Double3 get_androidrenderscriptDouble3()>
<android.test.mock.MockResources: android.content.res.TypedArray obtainAttributes(android.util.AttributeSet,int[])>
<android.app.ActivityThread: void access$500(android.app.ActivityThread,java.io.FileDescriptor)>
<GenerationGG: android.util.SparseIntArray get_androidutilSparseIntArray()>
<android.mtp.MtpDevice: byte[] getThumbnail(int)>
<android.view.animation.Animation: void ensureInterpolator()>
<android.app.ResultInfo$1: java.lang.Object[] newArray(int)>
<android.app.admin.DeviceAdminReceiver: void onDisabled(android.content.Context,android.content.Intent)>
<android.widget.ZoomButtonsController: void setOnZoomListener(android.widget.ZoomButtonsController$OnZoomListener)>
<android.widget.CalendarView$WeekView: void drawWeekNumbers(android.graphics.Canvas)>
<android.server.BluetoothService: boolean disconnectInputDeviceNative(java.lang.String)>
<android.view.MotionEvent: int getHistorySize()>
<com.android.internal.telephony.cdma.CdmaDataConnectionTracker: void finalize()>
<android.app.ActivityThread$ApplicationThread: void setCoreSettings(android.os.Bundle)>
<android.net.wifi.WifiStateTracker: android.net.NetworkInfo$State access$402(android.net.wifi.WifiStateTracker,android.net.NetworkInfo$State)>
<android.os.BatteryStats$Uid$Sensor: void <init>()>
<GenerationGG: android.view.ViewGroup get_androidviewViewGroup()>
<android.widget.SimpleCursorAdapter: void setViewBinder(android.widget.SimpleCursorAdapter$ViewBinder)>
<android.telephony.PhoneNumberUtils: java.lang.String stringFromStringAndTOA(java.lang.String,int)>
<android.preference.RingtonePreference: void setShowDefault(boolean)>
<android.text.style.TypefaceSpan: void <init>(java.lang.String)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimLiLoaded: void onRecordLoaded(android.os.AsyncResult)>
<com.android.internal.appwidget.IAppWidgetService$Stub$Proxy: android.os.IBinder asBinder()>
<android.location.Country: void <init>(java.lang.String,int)>
<android.webkit.WebView: int access$9000(android.webkit.WebView)>
<android.util.FinitePool: void <init>(android.util.PoolableManager,int)>
<com.android.internal.telephony.gsm.SmsMessage: java.io.ByteArrayOutputStream getSubmitPduHead(java.lang.String,java.lang.String,byte,boolean,com.android.internal.telephony.gsm.SmsMessage$SubmitPdu)>
<android.net.rtp.AudioGroup: void add(android.net.rtp.AudioStream,android.net.rtp.AudioCodec,int)>
<android.media.AudioService: java.lang.String access$5900(android.media.AudioService)>
<com.android.internal.telephony.cdma.CDMALTEPhone: java.lang.String getMsisdn()>
<android.accessibilityservice.AccessibilityServiceInfo: void <clinit>()>
<com.android.internal.telephony.BaseCommands: void setOnNewGsmSms(android.os.Handler,int,java.lang.Object)>
<android.content.Intent$ShortcutIconResource: void <init>()>
<android.media.RingtoneManager: void setIncludeDrm(boolean)>
<android.telephony.ServiceState: int describeContents()>
<android.widget.TextView: int getLeftPaddingOffset()>
<android.net.wifi.WifiManager$WifiLock: void setReferenceCounted(boolean)>
<android.view.View: void onHoverChanged(boolean)>
<android.view.ViewRootImpl: void dispatchAppVisibility(boolean)>
<android.graphics.Point$1: void <init>()>
<com.android.internal.telephony.gsm.SmsMessage: android.telephony.SmsMessage$MessageClass getMessageClass()>
<android.app.BackStackState$1: java.lang.Object[] newArray(int)>
<android.util.DisplayMetrics: int getDeviceDensity()>
<android.widget.AbsListView: int computeVerticalScrollOffset()>
<android.net.wifi.WifiStateMachine: void enableBackgroundScanCommand(boolean)>
<android.text.SpannedString: int getSpanFlags(java.lang.Object)>
<android.net.wifi.WifiWatchdogStateMachine: void access$4700(android.net.wifi.WifiWatchdogStateMachine,com.android.internal.util.IState)>
<android.view.WindowManager$LayoutParams: java.lang.String debug(java.lang.String)>
<android.accounts.AccountAuthenticatorResponse: void <init>(android.os.Parcel)>
<com.android.server.StatusBarManagerService: void <init>(android.content.Context,com.android.server.wm.WindowManagerService)>
<android.net.Uri$HierarchicalUri: java.lang.String makeSchemeSpecificPart()>
<android.telephony.ServiceState: void setOperatorAlphaLong(java.lang.String)>
<android.content.IntentFilter$AuthorityEntry: int getPort()>
<android.hardware.SensorManager: void getAngleChange(float[],float[],float[])>
<android.graphics.drawable.RotateDrawable: boolean isStateful()>
<android.graphics.Rect: float exactCenterY()>
<android.text.SpannableStringInternal: void checkRange(java.lang.String,int,int)>
<android.renderscript.Allocation: void validateBitmapSize(android.graphics.Bitmap)>
<android.renderscript.RenderScript: void nAllocationCopyToBitmap(int,android.graphics.Bitmap)>
<com.android.internal.telephony.cat.Menu: void <clinit>()>
<android.content.pm.VerifierDeviceIdentity$1: java.lang.Object[] newArray(int)>
<android.widget.AbsListView: int access$200(android.widget.AbsListView)>
<android.app.IActivityManager$ContentProviderHolder$1: android.app.IActivityManager$ContentProviderHolder[] newArray(int)>
<android.net.wifi.p2p.WifiP2pDevice: java.lang.String trimQuotes(java.lang.String)>
<android.net.NetworkTemplate: boolean matchesEthernet(android.net.NetworkIdentity)>
<com.android.server.connectivity.Tethering$TetherInterfaceSM: void setAvailable(boolean)>
<android.media.AudioService$AudioServiceBroadcastReceiver: void <init>(android.media.AudioService)>
<android.app.AlertDialog: android.widget.ListView getListView()>
<android.media.JetPlayer: void setEventListener(android.media.JetPlayer$OnJetEventListener)>
<android.view.OrientationEventListener$SensorEventListenerImpl: void onAccuracyChanged(android.hardware.Sensor,int)>
<android.os.HandlerThread: int getThreadId()>
<com.android.internal.telephony.gsm.GsmDataConnectionTracker: boolean retryAfterDisconnected(java.lang.String)>
<android.widget.SearchView$10: void <init>(android.widget.SearchView)>
<com.android.server.PowerManagerService$9: void <init>(com.android.server.PowerManagerService)>
<com.android.server.LightsService$Light: void setColor(int)>
<android.net.Proxy: boolean isLocalHost(java.lang.String)>
<GenerationGG: android.view.MenuInflater get_androidviewMenuInflater()>
<android.graphics.Shader: void nativeSetLocalMatrix(int,int,int)>
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$StopwatchTimer getWakeTimerLocked(java.lang.String,int)>
<android.server.BluetoothA2dpService: boolean avrcpVolumeUpNative(java.lang.String)>
<android.app.ActivityThread$ApplicationThread: void scheduleExit()>
<android.view.ViewDebug: void startLooperProfiling(java.lang.String,java.io.FileDescriptor)>
<com.android.internal.telephony.PhoneProxy: java.lang.String getMsisdn()>
<android.server.BluetoothEventLoop$2: void onServiceConnected(int,android.bluetooth.BluetoothProfile)>
<android.view.textservice.SpellCheckerSubtype: java.lang.String getExtraValue()>
<android.view.GLES20Canvas: void drawText(char[],int,int,float,float,android.graphics.Paint)>
<android.test.mock.MockContext: java.lang.Object getSystemService(java.lang.String)>
<android.app.FragmentManagerImpl: int reverseTransit(int)>
<android.content.pm.PackageParser$Provider: void <init>(android.content.pm.PackageParser$Provider)>
<com.android.server.UiModeManagerService$7: void onStatusChanged(java.lang.String,int,android.os.Bundle)>
<android.app.Dialog$ListenersHandler: void <init>(android.app.Dialog)>
<android.media.audiofx.AudioEffect: void native_release()>
<Wrapper_android_net_sip_SipException: void test_android_net_sip_SipException()>
<android.util.Xml: void parse(java.lang.String,org.xml.sax.ContentHandler)>
<android.database.AbstractCursor: int getPosition()>
<android.media.audiofx.AudioEffect: void <init>(java.util.UUID,java.util.UUID,int,int)>
<GenerationGG: android.animation.Animator get_androidanimationAnimator()>
<android.net.http.AndroidHttpClientConnection: void assertOpen()>
<GenerationGG: android.graphics.SurfaceTexture$OnFrameAvailableListener get_androidgraphicsSurfaceTexture__OnFrameAvailableListener()>
<android.telephony.ServiceState: int getCdmaDefaultRoamingIndicator()>
<com.android.server.am.BroadcastFilter: java.lang.String toString()>
<android.bluetooth.BluetoothDeviceProfileState: void access$4600(android.bluetooth.BluetoothDeviceProfileState,android.os.Message)>
<android.view.GestureDetector: boolean isLongpressEnabled()>
<GenerationGG: android.graphics.PathDashPathEffect get_androidgraphicsPathDashPathEffect()>
<android.os.Debug: long getNativeHeapSize()>
<android.content.UriMatcher: void <init>()>
<android.content.SyncResult: int describeContents()>
<android.media.effect.EffectFactory: android.media.effect.Effect instantiateEffect(java.lang.Class,java.lang.String)>
<android.renderscript.RenderScript: void rsnAllocationData2D(int,int,int,int,int,int,int,int,int,int,int,int,int)>
<android.os.ParcelFileDescriptor$1: android.os.ParcelFileDescriptor[] newArray(int)>
<android.content.IntentFilter: int countDataTypes()>
<android.opengl.Matrix: void rotateM(float[],int,float[],int,float,float,float,float)>
<android.test.MoreAsserts: void failMatch(java.lang.String,java.lang.String,java.lang.String)>
<android.renderscript.Allocation: void copyFromUnchecked(short[])>
<android.view.View: boolean onKeyLongPress(int,android.view.KeyEvent)>
<android.renderscript.Element: android.renderscript.Element ELEMENT(android.renderscript.RenderScript)>
<android.view.View: float getPivotX()>
<android.widget.DatePicker$SavedState$1: android.widget.DatePicker$SavedState[] newArray(int)>
<android.media.MediaPlayer: android.media.MediaPlayer$OnSeekCompleteListener access$500(android.media.MediaPlayer)>
<android.test.AndroidTestCase: void setTestContext(android.content.Context)>
<android.net.wifi.WifiInfo: void writeToParcel(android.os.Parcel,int)>
<android.content.Intent: android.content.Intent setComponent(android.content.ComponentName)>
<android.renderscript.RSTextureView: void destroyRenderScriptGL()>
<android.webkit.CacheLoader: void <init>(android.webkit.LoadListener,android.webkit.CacheManager$CacheResult)>
<com.android.internal.telephony.gsm.SimTlv: void <init>(byte[],int,int)>
<com.android.internal.telephony.PhoneProxy: com.android.internal.telephony.IccPhoneBookInterfaceManager getIccPhoneBookInterfaceManager()>
<android.util.Log: int w(java.lang.String,java.lang.String)>
<android.view.PointerIcon: boolean equals(java.lang.Object)>
<GenerationGG: android.graphics.LightingColorFilter get_androidgraphicsLightingColorFilter()>
<android.app.ActivityManager$MemoryInfo: int describeContents()>
<android.renderscript.Element: android.renderscript.Element I32_4(android.renderscript.RenderScript)>
<android.content.pm.IPackageDataObserver$Stub: void <init>()>
<android.os.IVibratorService$Stub: android.os.IVibratorService asInterface(android.os.IBinder)>
<android.os.ParcelFileDescriptor: int describeContents()>
<android.test.mock.MockPackageManager: android.content.pm.ResolveInfo resolveActivity(android.content.Intent,int)>
<android.util.PrefixPrinter: void println(java.lang.String)>
<android.view.GLES20RecordingCanvas: void drawPath(android.graphics.Path,android.graphics.Paint)>
<android.text.format.Time: void <init>()>
<android.graphics.Region: void <init>()>
<android.view.accessibility.AccessibilityRecord: void clear()>
<android.renderscript.RenderScript: int nTypeCreate(int,int,int,int,boolean,boolean)>
<android.telephony.cdma.CdmaCellLocation: java.lang.String toString()>
<android.util.TimingLogger: void addSplit(java.lang.String)>
<android.test.suitebuilder.annotation.HasAnnotation: void <init>(java.lang.Class)>
<android.animation.ObjectAnimator: void <init>(java.lang.Object,java.lang.String)>
<android.view.GLES20RecordingCanvas: void drawBitmap(android.graphics.Bitmap,android.graphics.Matrix,android.graphics.Paint)>
<com.android.server.PowerManagerService$10: void <init>(com.android.server.PowerManagerService)>
<android.widget.AlphabetIndexer: void onChanged()>
<com.android.server.wm.InputManager$InputFilterHost: void <init>(com.android.server.wm.InputManager,com.android.server.wm.InputManager$1)>
<DumbClass: void DumbMethod8()>
<android.content.res.StringBlock$StyleIDs: int access$902(android.content.res.StringBlock$StyleIDs,int)>
<android.text.Layout$TabStops: float nextDefaultStop(float,int)>
<android.os.RemoteException: void <init>()>
<com.android.internal.telephony.cdma.RuimSmsInterfaceManager: boolean disableCellBroadcastRange(int,int)>
<android.emoji.EmojiFactory: int nativeGetMaximumAndroidPua(int)>
<com.android.server.accessibility.AccessibilityManagerService: void tryAddServiceLocked(com.android.server.accessibility.AccessibilityManagerService$Service)>
<android.graphics.RadialGradient: int nativeCreate1(float,float,float,int[],float[],int)>
<android.widget.AbsListView: boolean isPaddingOffsetRequired()>
<com.android.server.MountService: boolean access$2600(com.android.server.MountService,java.lang.String,int)>
<android.os.Debug$MemoryInfo$1: android.os.Debug$MemoryInfo createFromParcel(android.os.Parcel)>
<android.app.LauncherActivity$ActivityAdapter: java.lang.Object access$200(android.app.LauncherActivity$ActivityAdapter)>
<android.app.Service: void onStart(android.content.Intent,int)>
<android.os.WorkSource: void addLocked(int)>
<android.net.INetworkStatsService$Stub: android.net.INetworkStatsService asInterface(android.os.IBinder)>
<android.security.KeyChain$1: void onServiceConnected(android.content.ComponentName,android.os.IBinder)>
<android.net.http.AndroidHttpClient: org.apache.http.HttpResponse execute(org.apache.http.HttpHost,org.apache.http.HttpRequest)>
<android.preference.DialogPreference: java.lang.CharSequence getDialogMessage()>
<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getActivityIcon(android.content.ComponentName)>
<android.net.http.Headers: java.lang.String getEtag()>
<android.net.Uri$OpaqueUri: android.net.Uri$Builder buildUpon()>
<com.android.internal.net.LegacyVpnInfo: int describeContents()>
<com.android.internal.telephony.cat.GetInputParams: boolean setIcon(android.graphics.Bitmap)>
<android.widget.PopupWindow: void setAllowScrollingAnchorParent(boolean)>
<android.os.NetworkOnMainThreadException: void <init>()>
<android.telephony.SmsMessage: java.lang.String getMessageBody()>
<android.content.pm.ApplicationInfo: void <init>()>
<android.opengl.GLSurfaceView$DefaultWindowSurfaceFactory: void <init>()>
<android.view.accessibility.AccessibilityRecord: void setParcelableData(android.os.Parcelable)>
<GenerationGG: android.telephony.SignalStrength get_androidtelephonySignalStrength()>
<com.android.internal.telephony.gsm.UsimPhoneBookManager: void <init>(com.android.internal.telephony.PhoneBase,com.android.internal.telephony.AdnRecordCache)>
<com.android.internal.telephony.cdma.CdmaCallTracker: void checkAndEnableDataCallAfterEmergencyCallDropped()>
<android.media.JetPlayer: void release()>
<android.content.res.Resources: void clearDrawableCache(android.util.LongSparseArray,int)>
<android.graphics.drawable.AnimatedRotateDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<android.bluetooth.IBluetoothCallback$Stub: android.bluetooth.IBluetoothCallback asInterface(android.os.IBinder)>
<android.text.SpannedString: int getSpanEnd(java.lang.Object)>
<android.net.DhcpInfoInternal: int convertToInt(java.lang.String)>
<android.media.AudioService: void dumpFocusStack(java.io.PrintWriter)>
<android.widget.HorizontalScrollView: void recycleVelocityTracker()>
<android.view.View: void setX(float)>
<android.app.IThumbnailRetriever$Stub: android.app.IThumbnailRetriever asInterface(android.os.IBinder)>
<android.renderscript.Matrix4f: void loadFrustum(float,float,float,float,float,float)>
<com.android.server.NotificationManagerService$WorkerHandler: void <init>(com.android.server.NotificationManagerService,com.android.server.NotificationManagerService$1)>
<com.android.internal.telephony.BaseCommands: void setOnSmsStatus(android.os.Handler,int,java.lang.Object)>
<android.net.wifi.WifiStateMachine: void access$13600(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.bluetooth.BluetoothDeviceProfileState$IncomingA2dp: void <init>(android.bluetooth.BluetoothDeviceProfileState)>
<android.webkit.GeolocationPermissions: void access$100(android.webkit.GeolocationPermissions,android.os.Message)>
<com.android.internal.view.IInputContextCallback$Stub: android.os.IBinder asBinder()>
<android.net.LinkAddress$1: android.net.LinkAddress createFromParcel(android.os.Parcel)>
<android.opengl.GLSurfaceView$GLThread: void queueEvent(java.lang.Runnable)>
<android.net.wifi.WifiManager: int compareSignalLevel(int,int)>
<com.android.server.MountService: void access$2100(com.android.server.MountService,com.android.server.MountService$ObbState)>
<android.telephony.PhoneNumberUtils: java.lang.String extractPostDialPortion(java.lang.String)>
<android.view.ViewGroup: void bringChildToFront(android.view.View)>
<android.net.wifi.WifiWatchdogStateMachine: int access$4208(android.net.wifi.WifiWatchdogStateMachine)>
<com.android.server.am.ActivityManagerService: boolean finishReceiverLocked(android.os.IBinder,int,java.lang.String,android.os.Bundle,boolean,boolean)>
<android.graphics.Path: void set(android.graphics.Path)>
<android.view.PointerIcon: void <init>(int,android.view.PointerIcon$1)>
<android.net.IThrottleManager$Stub: android.net.IThrottleManager asInterface(android.os.IBinder)>
<android.widget.ShareActionProvider$ShareAcitivityChooserModelPolicy: void <init>(android.widget.ShareActionProvider,android.widget.ShareActionProvider$1)>
<com.android.internal.telephony.IWapPushManager$Stub$Proxy: android.os.IBinder asBinder()>
<android.os.ParcelFileDescriptor: void close()>
<android.view.SurfaceView$4: android.graphics.Rect getSurfaceFrame()>
<android.app.Activity: void startManagingCursor(android.database.Cursor)>
<android.net.http.HttpAuthHeader: java.lang.String getPassword()>
<android.provider.Downloads$Impl: void <clinit>()>
<android.webkit.BrowserFrame: java.lang.String stringByEvaluatingJavaScriptFromString(java.lang.String)>
<android.widget.NumberPicker$SetSelectionCommand: int access$702(android.widget.NumberPicker$SetSelectionCommand,int)>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: java.lang.String getLocalIp()>
<android.filterfw.core.FilterGraph: void tearDown(android.filterfw.core.FilterContext)>
<android.widget.TextView: void setMarqueeRepeatLimit(int)>
<DumbClass: void DumbMethod18()>
<android.accounts.AccountManager$Future2Task: java.lang.Object getResult(long,java.util.concurrent.TimeUnit)>
<com.android.internal.telephony.cdma.sms.BearerData: void encodeCallbackNumber(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseOutputStream)>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<android.speech.tts.TextToSpeechService: android.speech.tts.TextToSpeechService$SynthHandler access$700(android.speech.tts.TextToSpeechService)>
<android.text.format.DateFormat: java.lang.String formatZoneOffset(int,int)>
<android.app.DialogFragment: void setCancelable(boolean)>
<com.android.server.accessibility.AccessibilityManagerService: java.util.Set access$300(com.android.server.accessibility.AccessibilityManagerService)>
<com.android.server.PowerManagerService$3: void <init>(com.android.server.PowerManagerService,android.os.Handler)>
<android.widget.Spinner$DialogPopup: void <init>(android.widget.Spinner,android.widget.Spinner$1)>
<com.android.server.pm.PackageManagerService$DumpState: boolean onTitlePrinted()>
<android.widget.SearchView$SearchAutoComplete: boolean enoughToFilter()>
<android.util.XmlPullAttributes: java.lang.String getAttributeValue(int)>
<android.webkit.CookieManager$CookieComparator: void <init>()>
<android.widget.MediaController$7: void <init>(android.widget.MediaController)>
<android.net.MobileDataStateTracker: android.content.Context access$1100(android.net.MobileDataStateTracker)>
<android.app.ExpandableListActivity: void <init>()>
<android.net.NetworkPolicy: int describeContents()>
<android.webkit.WebViewClient: void doUpdateVisitedHistory(android.webkit.WebView,java.lang.String,boolean)>
<android.preference.Preference: int getTitleRes()>
<android.view.View: void updateMatrix()>
<android.view.ViewRootImpl$TakenSurfaceHolder: boolean isCreating()>
<GenerationGG: android.os.Parcelable get_androidosParcelable()>
<android.graphics.Path: void addRoundRect(android.graphics.RectF,float[],android.graphics.Path$Direction)>
<android.os.ResultReceiver$1: java.lang.Object[] newArray(int)>
<android.view.WindowManagerImpl: void trimLocalMemory()>
<com.android.internal.telephony.cdma.CDMAPhone: void registerForEriFileLoaded(android.os.Handler,int,java.lang.Object)>
<com.android.internal.telephony.PhoneFactory: void <clinit>()>
<com.android.server.am.ActivityManagerService$10: void <init>(com.android.server.am.ActivityManagerService,java.lang.String,android.os.DropBoxManager,java.lang.String)>
<com.android.server.VibratorService: void doCancelVibrateLocked()>
<android.webkit.WebView: int computeHorizontalScrollRange()>
<android.graphics.drawable.InsetDrawable: boolean getPadding(android.graphics.Rect)>
<android.webkit.WebView: void nativeExtendSelection(int,int)>
<android.renderscript.ProgramVertexFixedFunction$Constants: android.renderscript.Allocation getAllocation()>
<android.net.sip.SimpleSessionDescription: java.lang.String getAttribute(java.lang.String)>
<android.webkit.WebSettings: boolean getAllowFileAccess()>
<android.webkit.WebView: void removeTouchHighlight()>
<android.renderscript.RenderScript: int nProgramRasterCreate(boolean,int)>
<android.net.wifi.SupplicantStateTracker$InactiveState: void enter()>
<android.widget.TimePicker: void setOnTimeChangedListener(android.widget.TimePicker$OnTimeChangedListener)>
<android.view.View$TransformationInfo: boolean access$400(android.view.View$TransformationInfo)>
<android.emoji.EmojiFactory: android.graphics.Bitmap getBitmapFromAndroidPua(int)>
<com.android.server.usb.UsbSettingsManager$AccessoryFilter: java.lang.String toString()>
<android.hardware.SensorManager: boolean registerListener(android.hardware.SensorListener,int)>
<android.view.ViewRootImpl$InputMethodCallback: void <init>(android.view.ViewRootImpl)>
<android.app.Instrumentation: void callApplicationOnCreate(android.app.Application)>
<android.net.RouteInfo$1: void <init>()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: boolean access$4900(android.net.wifi.p2p.WifiP2pService$P2pStateMachine,java.lang.String)>
<android.animation.ValueAnimator: boolean delayedAnimationFrame(long)>
<android.webkit.HTML5VideoViewProxy: void nativeOnTimeupdate(int,int)>
<com.android.internal.util.FastXmlSerializer: void <init>()>
<android.view.MotionEvent: java.lang.String buttonStateToString(int)>
<android.app.ProgressDialog: void setProgressPercentFormat(java.text.NumberFormat)>
<android.renderscript.RenderScript: void nAllocationData2D(int,int,int,int,int,int,int,byte[],int)>
<android.webkit.ZoomManager: float access$1600(android.webkit.ZoomManager)>
<com.android.internal.telephony.IccCard: void log(java.lang.String)>
<android.view.FocusFinder$1: void <init>()>
<android.graphics.RectF$1: void <init>()>
<com.android.internal.view.menu.MenuItemImpl: java.lang.CharSequence getTitleCondensed()>
<android.view.View: void onMeasure(int,int)>
<android.renderscript.Element: android.renderscript.Element I32(android.renderscript.RenderScript)>
<android.webkit.WebViewCore: void sendMessage(int,int,java.lang.Object)>
<com.android.internal.telephony.cdma.CDMAPhone: com.android.internal.telephony.IccFileHandler getIccFileHandler()>
<com.android.server.sip.SipSessionGroup$SipSessionImpl: int getErrorCode(java.lang.Throwable)>
<com.android.internal.telephony.sip.SipPhone$SipCall: java.util.List getConnections()>
<Wrapper_android_view_Surface: void test_android_view_Surface()>
<GenerationGG: android.database.sqlite.SQLiteConstraintException get_androiddatabasesqliteSQLiteConstraintException()>
<android.net.wifi.WifiStateMachine$ConnectModeState: void enter()>
<android.bluetooth.BluetoothDeviceProfileState$OutgoingHandsfree: void <init>(android.bluetooth.BluetoothDeviceProfileState,android.bluetooth.BluetoothDeviceProfileState$1)>
<android.net.sip.SipSessionAdapter: void onRegistering(android.net.sip.ISipSession)>
<android.widget.RatingBar: void setOnRatingBarChangeListener(android.widget.RatingBar$OnRatingBarChangeListener)>
<com.android.server.am.ProcessList: void <clinit>()>
<android.widget.TextView: android.content.Context access$5500(android.widget.TextView)>
<com.android.server.MountService: boolean access$502(com.android.server.MountService,boolean)>
<android.os.storage.IMountServiceListener$Stub: android.os.IBinder asBinder()>
<android.view.View: float getRotation()>
<com.android.internal.widget.ActionBarContextView$1: void <init>(com.android.internal.widget.ActionBarContextView,android.view.ActionMode)>
<android.net.wifi.WifiWatchdogStateMachine: void dump(java.io.PrintWriter)>
<android.app.Activity: void onUserInteraction()>
<android.content.SyncManager: void access$100(android.content.SyncManager)>
<android.graphics.Region: boolean getBoundaryPath(android.graphics.Path)>
<android.app.ActivityThread$ApplicationThread: void scheduleRelaunchActivity(android.os.IBinder,java.util.List,java.util.List,int,boolean,android.content.res.Configuration)>
<android.webkit.GeolocationPermissions: void createUIHandler()>
<com.android.i18n.phonenumbers.geocoding.AreaCodeMap: java.lang.String toString()>
<android.widget.RemoteViewsAdapter$RemoteViewsFrameLayoutRefSet: void <init>(android.widget.RemoteViewsAdapter)>
<GenerationGG: android.animation.PropertyValuesHolder[] get_androidanimationPropertyValuesHolder_ARRAY_()>
<android.view.HardwareRenderer: void disable(boolean)>
<android.widget.RatingBar: int getNumStars()>
<android.test.RenamingDelegatingContext: java.io.File getDatabasePath(java.lang.String)>
<android.view.VelocityTracker: void nativeDispose(int)>
<android.content.res.AssetManager: void releaseTheme(int)>
<android.webkit.WebView: void passMultiTouchToWebKit(android.view.MotionEvent,long)>
<android.app.AlertDialog$Builder: android.app.AlertDialog$Builder setCancelable(boolean)>
<android.animation.ValueAnimator: void setRepeatCount(int)>
<android.view.VelocityTracker: void nativeAddMovement(int,android.view.MotionEvent)>
<android.graphics.drawable.shapes.RoundRectShape: void onResize(float,float)>
<GenerationGG: android.view.ViewTreeObserver get_androidviewViewTreeObserver()>
<android.os.Binder: void attachInterface(android.os.IInterface,java.lang.String)>
<android.media.AudioTrack: void native_pause()>
<android.net.NetworkIdentity: int getSubType()>
<android.net.Credentials: int getUid()>
<android.preference.PreferenceScreen: void onDismiss(android.content.DialogInterface)>
<android.animation.PropertyValuesHolder: void nCallFloatMethod(java.lang.Object,int,float)>
<android.view.InputChannel: void finalize()>
<com.android.server.ConnectivityService: void log(java.lang.String)>
<android.content.res.Resources$Theme: void <init>(android.content.res.Resources)>
<android.content.pm.PermissionInfo: void <init>(android.content.pm.PermissionInfo)>
<com.android.server.pm.PackageManagerService$10: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,android.content.pm.IPackageStatsObserver)>
<android.media.MediaPlayer: android.media.MediaPlayer$OnPreparedListener access$100(android.media.MediaPlayer)>
<GenerationGG: android.text.method.LinkMovementMethod get_androidtextmethodLinkMovementMethod()>
<GenerationGG: android.media.MediaRecorder$OnErrorListener get_androidmediaMediaRecorder__OnErrorListener()>
<android.widget.TextView$SavedState: java.lang.String toString()>
<android.media.AudioService: int[] access$2900(android.media.AudioService)>
<android.net.NetworkStatsHistory: void <init>(android.os.Parcel)>
<android.webkit.Network$RoamingMonitor: void <init>(android.webkit.Network,android.webkit.Network$1)>
<android.net.wifi.WifiStateMachine: void access$8200(android.net.wifi.WifiStateMachine,com.android.internal.util.IState)>
<android.os.StrictMode$StrictModeViolation: void <init>(int,int,java.lang.String)>
<android.net.wifi.WifiNative: boolean stopDriverCommand()>
<com.android.internal.net.DNParser: char getEscaped()>
<android.database.CursorWindow: double nativeGetDouble(int,int,int)>
<android.widget.ArrayAdapter$ArrayFilter: void <init>(android.widget.ArrayAdapter)>
<android.text.method.QwertyKeyListener: void <init>(android.text.method.TextKeyListener$Capitalize,boolean)>
<android.content.ContentProviderOperation: boolean isYieldAllowed()>
<android.text.style.ImageSpan: void <init>(android.content.Context,android.net.Uri,int)>
<android.server.BluetoothAdapterStateMachine: void shutoffBluetooth()>
<android.test.InstrumentationTestRunner: android.os.Bundle access$100(android.test.InstrumentationTestRunner)>
<android.widget.GridLayout$LayoutParams: void setColumnSpecSpan(android.widget.GridLayout$Interval)>
<android.widget.StackView$StackSlider: void setMode(int)>
<android.graphics.BitmapShader: void <init>(android.graphics.Bitmap,android.graphics.Shader$TileMode,android.graphics.Shader$TileMode)>
<android.webkit.WebViewCore: void access$3800(android.webkit.WebViewCore,int,android.graphics.Rect)>
<android.widget.TableRow: void setColumnsWidthConstraints(int[])>
<android.webkit.URLUtil: java.lang.String guessUrl(java.lang.String)>
<android.net.NetworkStats: android.net.NetworkStats$Entry getValues(int,android.net.NetworkStats$Entry)>
<android.inputmethodservice.Keyboard: int[] getNearestKeys(int,int)>
<android.view.VolumePanel: void resetTimeout()>
<android.graphics.drawable.GradientDrawable$GradientState: float access$200(android.graphics.drawable.GradientDrawable$GradientState)>
<android.app.ActivityThread$ResultData: void <init>()>
<android.animation.PropertyValuesHolder: void init()>
<android.view.DragEvent: android.content.ClipDescription getClipDescription()>
<android.widget.ActivityChooserView: void setDefaultActionButtonContentDescription(int)>
<android.widget.TimePicker$5: void <init>(android.widget.TimePicker)>
<android.view.View: float getY()>
<android.app.ContextImpl$12: void <init>()>
<android.widget.TextView: int access$2400(android.widget.TextView)>
<android.view.InputDevice: android.view.KeyCharacterMap getKeyCharacterMap()>
<android.graphics.drawable.Drawable: android.graphics.drawable.Drawable getCurrent()>
<com.android.internal.telephony.gsm.GsmCall: java.lang.String toString()>
<android.graphics.Path: android.graphics.Path$FillType getFillType()>
<com.android.internal.os.BatteryStatsImpl: long getGlobalWifiRunningTime(long,int)>
<android.widget.Spinner$DropdownPopup: void setPromptText(java.lang.CharSequence)>
<com.android.server.am.ActivityManagerService: com.android.server.am.ActivityRecord getCallingRecordLocked(android.os.IBinder)>
<android.renderscript.FieldPacker: void addU64(android.renderscript.Long2)>
<android.graphics.Paint: void set(android.graphics.Paint)>
<android.widget.TextView: void getInterestingRect(android.graphics.Rect,int)>
<android.drm.DrmManagerClient: void setOnInfoListener(android.drm.DrmManagerClient$OnInfoListener)>
<android.os.ResultReceiver: void <init>(android.os.Handler)>
<com.android.internal.view.menu.ActionMenuView$LayoutParams: void <init>(com.android.internal.view.menu.ActionMenuView$LayoutParams)>
<com.android.server.usb.UsbDeviceManager: boolean access$1400(com.android.server.usb.UsbDeviceManager)>
<Wrapper_android_gesture_GestureLibraries: void test_android_gesture_GestureLibraries()>
<android.widget.AutoCompleteTextView: boolean enoughToFilter()>
<android.net.wifi.p2p.WifiP2pConfig: int describeContents()>
<android.text.Layout: android.text.Layout$Alignment getAlignment()>
<android.media.AudioService$AudioHandler: void setForceUse(int,int)>
<android.app.backup.SharedPreferencesBackupHelper: void <init>(android.content.Context,java.lang.String[])>
<android.text.TextDirectionHeuristics$FirstStrong: void <init>()>
<android.webkit.WebView: void calcOurContentVisibleRect(android.graphics.Rect)>
<android.mtp.MtpObjectInfo: int getThumbPixWidth()>
<android.view.VolumePanel: void onPlaySound(int,int)>
<android.graphics.drawable.ShapeDrawable: int getIntrinsicHeight()>
<android.location.Location: void setBearing(float)>
<android.renderscript.Matrix2f: void rotate(float)>
<android.net.DhcpInfo: void writeToParcel(android.os.Parcel,int)>
<com.android.server.usb.UsbSettingsManager$AccessoryFilter: boolean matches(com.android.server.usb.UsbSettingsManager$AccessoryFilter)>
<com.android.internal.telephony.gsm.SimSmsInterfaceManager: void dispose()>
<android.net.EthernetDataTracker: void interfaceRemoved(java.lang.String)>
<GenerationGG: android.text.Annotation get_androidtextAnnotation()>
<android.content.CursorLoader: void onStopLoading()>
<com.android.internal.telephony.cdma.RuimFileHandler: java.lang.String getEFPath(int)>
<GenerationGG: android.app.DownloadManager$Request get_androidappDownloadManager__Request()>
<com.android.server.am.ConnectionRecord: void <init>(com.android.server.am.AppBindRecord,com.android.server.am.ActivityRecord,android.app.IServiceConnection,int,int,android.app.PendingIntent)>
<android.util.JsonReader: android.util.JsonToken nextInObject(boolean)>
<com.android.server.am.UsageStatsService$PkgUsageStatsExtended: void addLaunchTime(java.lang.String,int)>
<android.graphics.Canvas: boolean clipPath(android.graphics.Path)>
<android.text.DynamicLayout$ChangeWatcher: void afterTextChanged(android.text.Editable)>
<android.text.style.StyleSpan: void writeToParcel(android.os.Parcel,int)>
<com.android.server.ConnectivityService: void access$100(com.android.server.ConnectivityService,java.lang.String)>
<android.opengl.ETC1: int getHeight(java.nio.Buffer)>
<android.text.style.BulletSpan: void <init>(android.os.Parcel)>
<com.android.internal.telephony.sip.SipCommandInterface: void setNetworkSelectionModeAutomatic(android.os.Message)>
<android.content.res.AssetManager: java.lang.String[] getLocales()>
<android.os.Debug: int getGlobalGcInvocationCount()>
<GenerationGG: android.app.SearchManager$OnDismissListener get_androidappSearchManager__OnDismissListener()>
<GenerationGG: android.test.mock.MockResources get_androidtestmockMockResources()>
<Wrapper_android_os_BatteryManager: void test_android_os_BatteryManager()>
<android.webkit.BrowserFrame: void <clinit>()>
<com.android.server.net.NetworkPolicyManagerService: java.lang.String buildNotificationTag(android.net.NetworkPolicy,int)>
<android.view.HardwareRenderer$Gl20Renderer: void <clinit>()>
<com.android.internal.telephony.cdma.CdmaConnection: void onStartedHolding()>
<android.widget.CalendarView$WeeksAdapter: int getCount()>
<android.text.util.Linkify$4: boolean equals(java.lang.Object)>
<android.ddm.DdmHandleProfiling: void <init>()>
<android.os.Process: int myTid()>
<android.opengl.GLSurfaceView: void setEGLContextFactory(android.opengl.GLSurfaceView$EGLContextFactory)>
<GenerationGG: android.text.format.Time get_androidtextformatTime()>
<android.widget.TextView: float getTextSize()>
<android.net.wifi.WifiWatchdogStateMachine: long waitTime(long,java.lang.Long)>
<android.content.SyncManager$9: void <init>(android.content.SyncManager)>
<android.accounts.AccountsException: void <init>()>
<com.android.internal.telephony.gsm.GsmServiceStateTracker: java.util.TimeZone findTimeZone(int,boolean,long)>
<android.location.Address: int describeContents()>
<android.accounts.AccountManagerService$2: void <init>(android.accounts.AccountManagerService,android.accounts.IAccountManagerResponse,java.lang.String,boolean,boolean,android.accounts.Account,java.lang.String)>
<android.widget.PopupWindow: void setBackgroundDrawable(android.graphics.drawable.Drawable)>
<android.bluetooth.BluetoothDeviceProfileState: void access$10200(android.bluetooth.BluetoothDeviceProfileState,com.android.internal.util.IState)>
<android.text.method.DialerKeyListener: int lookup(android.view.KeyEvent,android.text.Spannable)>
<com.android.internal.os.BatteryStatsImpl: void noteUserActivityLocked(int,int)>
<android.os.BatteryStats$Uid$Wakelock: void <init>()>
<android.net.LinkCapabilities$1: void <init>()>
<android.content.res.CompatibilityInfo$Translator: void <init>(android.content.res.CompatibilityInfo)>
<android.widget.GridLayout: int max2(int[],int)>
<android.content.res.Resources: void <init>(android.content.res.AssetManager,android.util.DisplayMetrics,android.content.res.Configuration,android.content.res.CompatibilityInfo)>
<com.android.internal.telephony.BaseCommands: void setOnCatProactiveCmd(android.os.Handler,int,java.lang.Object)>
<com.android.i18n.phonenumbers.RegexCache: void <init>(int)>
<GenerationGG: android.util.LogPrinter get_androidutilLogPrinter()>
<android.content.res.AssetFileDescriptor$AutoCloseInputStream: int read(byte[],int,int)>
<com.android.internal.os.BatteryStatsImpl$Uid: com.android.internal.os.BatteryStatsImpl$StopwatchTimer getSensorTimerLocked(int,boolean)>
<android.view.ViewDebug: void <clinit>()>
<android.graphics.drawable.ClipDrawable$ClipState: int getChangingConfigurations()>
<android.bluetooth.BluetoothDeviceProfileState: java.lang.String getStringValue(long)>
<android.text.style.TextAppearanceSpan: void writeToParcel(android.os.Parcel,int)>
<android.server.BluetoothAdapterStateMachine: void access$6300(android.server.BluetoothAdapterStateMachine,android.os.Message)>
<android.database.sqlite.SQLiteDatabase: void setLocale(java.util.Locale)>
<com.android.server.location.LocationProviderProxy: boolean isEnabled()>
<android.net.wifi.WifiStateMachine: java.lang.String access$3900(android.net.wifi.WifiStateMachine)>
<android.net.MobileDataStateTracker: void access$500(android.net.MobileDataStateTracker,android.net.NetworkInfo$DetailedState,java.lang.String,java.lang.String)>
<android.net.EthernetDataTracker: android.net.EthernetDataTracker getInstance()>
<android.widget.CompoundButton$SavedState$1: java.lang.Object[] newArray(int)>
<com.android.internal.telephony.cdma.CDMAPhone: java.lang.String getPhoneName()>
<android.webkit.DeviceMotionService: void startSendingUpdates()>
<android.bluetooth.BluetoothTetheringDataTracker: void stopReverseTether(java.lang.String)>
<android.gesture.GestureUtils: float[][] computeCoVariance(float[])>
<android.net.wifi.WifiStateMachine: boolean access$5802(android.net.wifi.WifiStateMachine,boolean)>
<android.net.DummyDataStateTracker: boolean reconnect()>
<com.android.internal.telephony.WspTypeDecoder: boolean decodeContentType(int)>
<android.server.BluetoothService: void switchConnectable(boolean)>
<android.app.Fragment: boolean isInBackStack()>
<android.app.IProcessObserver$Stub$Proxy: void <init>(android.os.IBinder)>
<android.net.NetworkPolicy$1: void <init>()>
<android.os.FileObserver$ObserverThread: void <init>()>
<android.util.NtpTrustedTime: boolean hasCache()>
<com.android.server.wm.InputManager: int getScanCodeState(int,int,int)>
<android.accounts.AuthenticatorException: void <init>(java.lang.String)>
<android.media.AudioService: android.bluetooth.BluetoothHeadset access$2300(android.media.AudioService)>
<android.opengl.GLSurfaceView: void surfaceDestroyed(android.view.SurfaceHolder)>
<android.widget.TimePicker$SavedState: int getHour()>
<com.android.internal.os.BinderInternal: android.os.IBinder getContextObject()>
<com.android.server.am.ActivityStack$ActivityState: void <clinit>()>
<android.net.NetworkPolicy: void <init>(android.net.NetworkTemplate,int,long,long,long)>
<android.webkit.WebViewCore: void sendMessage(int,java.lang.Object)>
<com.android.server.accessibility.TouchExplorer$PointerTracker: boolean access$300(com.android.server.accessibility.TouchExplorer$PointerTracker,int)>
<android.net.LocalSocketImpl: void write_native(int,java.io.FileDescriptor)>
<android.app.Fragment: boolean isResumed()>
<android.net.wifi.WifiStateMachine: boolean access$9300(android.net.wifi.WifiStateMachine)>
<android.util.SparseBooleanArray: int indexOfKey(int)>
<android.security.KeyChain$KeyChainConnection: void <init>(android.content.Context,android.content.ServiceConnection,android.security.IKeyChainService,android.security.KeyChain$1)>
<android.net.wifi.WifiConfigStore: int lookupString(java.lang.String,java.lang.String[])>
<android.view.View: void offsetTopAndBottom(int)>
<com.android.server.DropBoxManagerService$EntryFile: void <init>(java.io.File,java.lang.String,long)>
<android.content.SyncResult$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.net.Uri$Part: android.net.Uri$Part readFrom(android.os.Parcel)>
<android.view.View: android.graphics.Matrix getInverseMatrix()>
<android.webkit.LoadListener: void detachRequestHandle()>
<com.android.internal.telephony.PhoneSubInfo: void finalize()>
<GenerationGG: android.media.MediaPlayer$OnErrorListener get_androidmediaMediaPlayer__OnErrorListener()>
<android.net.Uri$StringUri: java.lang.String parseQuery()>
<android.view.ViewRootImpl$3: boolean isCreating()>
<android.app.Fragment$SavedState$1: android.app.Fragment$SavedState createFromParcel(android.os.Parcel)>
<android.nfc.NdefMessage$1: java.lang.Object[] newArray(int)>
<android.graphics.drawable.GradientDrawable$GradientState: void setSolidColor(int)>
<android.content.res.StringBlock$StyleIDs: int access$102(android.content.res.StringBlock$StyleIDs,int)>
<android.widget.RelativeLayout$LayoutParams: int access$412(android.widget.RelativeLayout$LayoutParams,int)>
<android.webkit.HTML5VideoInline: void <init>(int,int,boolean)>
<com.android.internal.widget.LockPatternUtils: void <init>(android.content.Context)>
<junit.framework.TestCase: void assertTrue(java.lang.String,boolean)>
<android.content.ClipboardManager: void reportPrimaryClipChanged()>
<com.android.internal.util.AsyncChannel$SyncMessenger$SyncHandler: java.lang.Object access$300(com.android.internal.util.AsyncChannel$SyncMessenger$SyncHandler)>
<android.hardware.usb.UsbDeviceConnection: int native_bulk_request(int,byte[],int,int)>
<GenerationGG: android.graphics.PointF get_androidgraphicsPointF()>
<com.android.internal.view.menu.MenuPopupHelper$MenuAdapter: com.android.internal.view.menu.MenuBuilder access$000(com.android.internal.view.menu.MenuPopupHelper$MenuAdapter)>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: void access$7600(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<com.android.internal.telephony.CommandsInterface$RadioState: boolean isSIMReady()>
<android.widget.ListPopupWindow: void setOnDismissListener(android.widget.PopupWindow$OnDismissListener)>
<com.android.server.LocationManagerService: int access$2402(com.android.server.LocationManagerService,int)>
<Wrapper_android_os_SystemClock: void test_android_os_SystemClock()>
<android.graphics.Rect: void readFromParcel(android.os.Parcel)>
<android.os.Debug: int getThreadAllocCount()>
<android.view.GLES20Canvas: android.graphics.DrawFilter getDrawFilter()>
<android.graphics.Region: boolean set(android.graphics.Region)>
<GenerationGG: android.preference.DialogPreference get_androidpreferenceDialogPreference()>
<android.media.AudioTrack: void <init>(int,int,int,int,int,int,int)>
<Wrapper_android_telephony_NeighboringCellInfo: void test_android_telephony_NeighboringCellInfo()>
<android.widget.AbsListView: int getChoiceMode()>
<com.android.internal.telephony.cdma.SmsMessage: boolean isCphsMwiMessage()>
<android.os.storage.IMountService$Stub$Proxy: void <init>(android.os.IBinder)>
<android.net.wifi.WifiNative: void setScanIntervalCommand(int)>
<android.bluetooth.BluetoothSocket: java.io.OutputStream getOutputStream()>
<android.widget.ActivityChooserView$ActivityChooserViewAdapter: android.widget.ActivityChooserModel getDataModel()>
<android.location.GeocoderParams$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: void <init>()>
<android.widget.ExpandableListView$SavedState: void <clinit>()>
<android.graphics.Region: boolean quickContains(android.graphics.Rect)>
<android.bluetooth.BluetoothSocket: android.bluetooth.BluetoothSocket accept(int)>
<android.content.res.Configuration$1: android.content.res.Configuration createFromParcel(android.os.Parcel)>
<com.android.server.pm.SharedUserSetting: java.lang.String toString()>
<android.widget.AbsSpinner: int getChildHeight(android.view.View)>
<com.android.internal.telephony.cat.Duration$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.net.wifi.WifiStateMachine$SupplicantStartedState: void exit()>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.Call getRingingCall()>
<com.android.internal.telephony.cdma.EriManager: void <init>(com.android.internal.telephony.PhoneBase,android.content.Context,int)>
<android.media.AudioSystem: boolean isStreamActive(int,int)>
<android.util.JsonReader: android.util.JsonToken nextInArray(boolean)>
<android.database.ContentObserver: void <init>(android.os.Handler)>
<com.android.server.UiModeManagerService$7: boolean hasMoved(android.location.Location)>
<android.view.animation.LinearInterpolator: void <init>()>
<GenerationGG: android.net.wifi.p2p.WifiP2pManager$ActionListener get_androidnetwifip2pWifiP2pManager__ActionListener()>
<android.widget.TextView: void setMinEms(int)>
<android.app.FragmentBreadCrumbs: void setMaxVisible(int)>
<android.os.storage.StorageManager$ObbListenerDelegate: void <init>(android.os.storage.StorageManager,android.os.storage.OnObbStateChangeListener)>
<com.android.internal.util.BitwiseOutputStream$AccessException: void <init>(java.lang.String)>
<android.view.animation.AnimationUtils: void <init>()>
<android.animation.PropertyValuesHolder: void access$400(java.lang.Object,int,float)>
<android.drm.DrmManagerClient: void finalize()>
<android.renderscript.Mesh: int getVertexAllocationCount()>
<com.android.server.BackupManagerService$FullParams: void <init>(com.android.server.BackupManagerService)>
<android.inputmethodservice.SoftInputWindow: void setToken(android.os.IBinder)>
<android.graphics.Matrix: boolean native_invert(int,int)>
<com.android.server.am.ProcessRecord: void unlinkDeathRecipient()>
<android.renderscript.ProgramStore$Builder: android.renderscript.ProgramStore$Builder setDitherEnabled(boolean)>
<android.renderscript.Element: android.renderscript.Element RGBA_5551(android.renderscript.RenderScript)>
<android.app.Activity: void setFeatureDrawableUri(int,android.net.Uri)>
<android.webkit.LoadListener: int getErrorID()>
<android.text.LoginFilter: void onStart()>
<android.webkit.WebView: void viewInvalidate(int,int,int,int)>
<android.inputmethodservice.Keyboard: int access$000(android.inputmethodservice.Keyboard)>
<GenerationGG: android.view.inputmethod.InputMethodSession get_androidviewinputmethodInputMethodSession()>
<android.widget.Scroller: void <init>(android.content.Context)>
<com.android.server.AttributeCache$Package: android.util.SparseArray access$000(com.android.server.AttributeCache$Package)>
<android.view.animation.Animation: void finalize()>
<android.webkit.WebStorage$1: void handleMessage(android.os.Message)>
<android.net.wifi.WifiStateMachine: void access$12100(android.net.wifi.WifiStateMachine)>
<android.net.ProxyProperties: int hashCode()>
<android.app.backup.BackupDataInputStream: int size()>
<android.speech.tts.SynthesisRequest: void setPitch(int)>
<com.android.server.LightsService: android.content.Context access$300(com.android.server.LightsService)>
<android.view.View$MeasureSpec: int getMode(int)>
<android.server.BluetoothAdapterProperties: void clear()>
<com.android.internal.net.VpnConfig$1: java.lang.Object[] newArray(int)>
<android.webkit.DataLoader: void buildHeaders(android.net.http.Headers)>
<android.webkit.WebView: boolean access$8500(android.webkit.WebView,int,boolean)>
<android.app.Fragment: android.view.View getView()>
<com.android.server.am.ProcessList: void updateOomLevels(int,int,boolean)>
<com.android.internal.util.AsyncChannel$SyncMessenger$SyncHandler: android.os.Message access$400(com.android.internal.util.AsyncChannel$SyncMessenger$SyncHandler)>
<com.android.internal.location.DummyLocationProvider: boolean supportsBearing()>
<com.android.internal.telephony.gsm.GSMPhone: boolean isInCall()>
<android.widget.CompoundButton$SavedState: void <init>(android.os.Parcelable)>
<android.text.Layout: java.lang.CharSequence getText()>
<com.android.server.pm.Settings: void readDisabledSysPackageLPw(org.xmlpull.v1.XmlPullParser)>
<android.os.storage.StorageVolume$1: void <init>()>
<junit.framework.TestCase: java.lang.String getName()>
<android.widget.ProgressBar: android.view.animation.Interpolator getInterpolator()>
<com.android.internal.app.IMediaContainerService$Stub$Proxy: void <init>(android.os.IBinder)>
<android.os.Handler: android.os.Message getPostMessage(java.lang.Runnable)>
<android.widget.ListPopupWindow: android.view.View getSelectedView()>
<com.android.internal.telephony.sip.SipCommandInterface: void writeSmsToRuim(int,java.lang.String,android.os.Message)>
<GenerationGG: android.app.SearchManager$OnCancelListener get_androidappSearchManager__OnCancelListener()>
<android.util.EventLog: int writeEvent(int,java.lang.String)>
<com.android.internal.view.menu.MenuItemImpl: android.content.Intent getIntent()>
<android.view.accessibility.AccessibilityNodeInfo: boolean isSealed()>
<com.android.server.BackupManagerService$FullBackupParams: void <init>(com.android.server.BackupManagerService,android.os.ParcelFileDescriptor,boolean,boolean,boolean,boolean,java.lang.String[])>
<android.graphics.SurfaceTexture: void nativeUpdateTexImage()>
<android.view.GLES20Canvas: int nGetMaximumTextureWidth()>
<android.util.Slog: int d(java.lang.String,java.lang.String,java.lang.Throwable)>
<android.view.View: int getResolvedLayoutDirection(android.graphics.drawable.Drawable)>
<android.server.BluetoothPanProfileHandler: java.util.List getPanDevicesMatchingConnectionStates(int[])>
<android.content.ComponentName: java.lang.String toString()>
<com.android.server.wm.WindowManagerService: void showStrictModeViolation(boolean)>
<android.content.ContentResolver$ParcelFileDescriptorInner: void finalize()>
<android.os.ParcelUuid: void <init>(java.util.UUID)>
<com.android.internal.util.StateMachine$SmHandler$QuittingState: void <init>(com.android.internal.util.StateMachine$SmHandler,com.android.internal.util.StateMachine$1)>
<android.view.View: int getLayerType()>
<android.widget.TableRow: android.widget.LinearLayout$LayoutParams generateDefaultLayoutParams()>
<com.android.internal.widget.ActionBarView: int access$1400(com.android.internal.widget.ActionBarView)>
<com.android.server.LightsService: void access$200(int,int,int,int,int,int,int)>
<android.graphics.Matrix: java.lang.String toShortString()>
<com.android.server.accessibility.AccessibilityManagerService$SecurityPolicy: boolean canGetAccessibilityNodeInfoLocked(com.android.server.accessibility.AccessibilityManagerService$Service,int)>
<android.content.BroadcastReceiver$PendingResult$1: void <init>(android.content.BroadcastReceiver$PendingResult,android.app.IActivityManager)>
<android.view.View: float getBottomFadingEdgeStrength()>
<android.app.ProgressDialog: boolean isIndeterminate()>
<android.renderscript.RenderScript: void rsnContextDestroy(int)>
<com.android.internal.widget.AbsActionBarView: void <clinit>()>
<android.app.FragmentManagerImpl: int getBackStackEntryCount()>
<Wrapper_android_test_mock_MockContentProvider: void test_android_test_mock_MockContentProvider()>
<android.widget.ProgressBar: void setIndeterminateDrawable(android.graphics.drawable.Drawable)>
<android.net.wifi.SupplicantState$2: void <clinit>()>
<android.net.NetworkQuotaInfo: void <init>(android.os.Parcel)>
<android.webkit.HTML5VideoViewProxy: int access$802(android.webkit.HTML5VideoViewProxy,int)>
<android.widget.PopupWindow: int getWidth()>
<com.android.server.ConnectivityService: android.os.PowerManager$WakeLock access$1200(com.android.server.ConnectivityService)>
<android.service.wallpaper.IWallpaperConnection$Stub$Proxy: void <init>(android.os.IBinder)>
<Wrapper_android_os_PatternMatcher: void test_android_os_PatternMatcher()>
<android.media.MediaMetadataRetriever: void setDataSource(java.io.FileDescriptor)>
<android.net.wifi.WifiManager$WifiLock: java.lang.String toString()>
<android.renderscript.Element: android.renderscript.Element U8(android.renderscript.RenderScript)>
<com.android.server.pm.PackageManagerService$9: void <init>(com.android.server.pm.PackageManagerService,java.lang.String,android.content.pm.IPackageDataObserver)>
<android.renderscript.RenderScript: void rsnScriptSetVarF(int,int,int,float)>
<android.text.Editable$Factory: void <clinit>()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupNegotiationState: void enter()>
<com.android.internal.telephony.AdnRecord$1: void <init>()>
<android.widget.TextView: android.widget.TextView$InsertionPointCursorController getInsertionController()>
<android.webkit.WebView: void nativeInstrumentReport()>
<android.text.method.CharacterPickerDialog: android.view.LayoutInflater access$000(android.text.method.CharacterPickerDialog)>
<android.widget.CursorAdapter: android.widget.Filter getFilter()>
<android.animation.Keyframe$IntKeyframe: java.lang.Object clone()>
<com.android.internal.os.BatteryStatsImpl: com.android.internal.os.BatteryStatsImpl$Uid getUidStatsLocked(int)>
<android.content.ContextWrapper: java.io.File getDir(java.lang.String,int)>
<android.webkit.WebSettings: boolean getSaveFormData()>
<android.renderscript.RenderScriptGL: void bindProgramFragment(android.renderscript.ProgramFragment)>
<android.hardware.usb.UsbEndpoint: void <init>(int,int,int,int)>
<android.widget.TextView: boolean access$4900(android.widget.TextView)>
<com.android.internal.os.BatteryStatsImpl: boolean getIsOnBattery()>
<android.net.NetworkUtils: java.net.InetAddress numericToInetAddress(java.lang.String)>
<com.android.internal.telephony.cdma.CdmaCallTracker: void registerForVoiceCallStarted(android.os.Handler,int,java.lang.Object)>
<GenerationGG: android.webkit.ConsoleMessage get_androidwebkitConsoleMessage()>
<android.ddm.DdmHandleThread: void <init>()>
<android.database.sqlite.SQLiteOpenHelper: void onDowngrade(android.database.sqlite.SQLiteDatabase,int,int)>
<android.view.textservice.TextInfo: int getCookie()>
<android.text.style.ClickableSpan: void updateDrawState(android.text.TextPaint)>
<android.server.BluetoothAdapterStateMachine: android.server.BluetoothAdapterStateMachine$BluetoothOn access$4100(android.server.BluetoothAdapterStateMachine)>
<android.net.wifi.WifiStateMachine: void reconnectCommand()>
<android.content.SyncManager: void sendSyncAlarmMessage()>
<android.graphics.Typeface: int nativeGetStyle(int)>
<android.view.ViewGroup: void offsetRectIntoDescendantCoords(android.view.View,android.graphics.Rect)>
<android.widget.Gallery$1: void <init>(android.widget.Gallery)>
<android.net.RouteInfo: void <init>(android.net.LinkAddress,java.net.InetAddress)>
<android.net.Uri: java.lang.String decode(java.lang.String)>
<GenerationGG: android.graphics.Matrix$ScaleToFit get_androidgraphicsMatrix__ScaleToFit()>
<android.widget.TextView: android.widget.TextView$SelectionModifierCursorController getSelectionController()>
<GenerationGG: android.widget.AlphabetIndexer get_androidwidgetAlphabetIndexer()>
<android.filterfw.core.FrameFormat: java.lang.String metaDataToString(android.filterfw.core.KeyValueMap)>
<android.text.AutoText: int getSize()>
<android.view.GLES20RecordingCanvas: void drawPaint(android.graphics.Paint)>
<java.lang.Object: android.view.SubMenu addSubMenu(java.lang.CharSequence)>
<android.graphics.Region: boolean op(android.graphics.Rect,android.graphics.Region$Op)>
<android.hardware.usb.UsbEndpoint: int getEndpointNumber()>
<android.gesture.Gesture: android.graphics.Bitmap toBitmap(int,int,int,int,int)>
<com.android.internal.app.AlertController: int access$800(com.android.internal.app.AlertController)>
<android.net.http.RequestHandle: java.lang.String computeBasicAuthResponse(java.lang.String,java.lang.String)>
<android.animation.PropertyValuesHolder: void setupSetter(java.lang.Class)>
<com.android.server.pm.UserManager: void updateUserIds()>
<android.app.IWallpaperManager$Stub$Proxy: android.os.IBinder asBinder()>
<GenerationGG: android.location.GpsStatus$Listener get_androidlocationGpsStatus__Listener()>
<android.location.Country$1: java.lang.Object[] newArray(int)>
<android.server.BluetoothA2dpService: boolean access$700(android.server.BluetoothA2dpService,java.lang.String)>
<android.telephony.ServiceState: java.lang.String toString()>
<android.webkit.ZoomControlExternal$2: void <init>(android.webkit.ZoomControlExternal)>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimLiLoaded: void <init>(com.android.internal.telephony.cdma.CdmaLteUiccRecords,com.android.internal.telephony.cdma.CdmaLteUiccRecords$1)>
<com.android.server.usb.UsbSettingsManager$DeviceFilter: java.lang.String toString()>
<android.media.MediaPlayer: void <init>()>
<com.android.internal.telephony.cat.CatService: void getPliResponse(java.io.ByteArrayOutputStream)>
<com.android.internal.telephony.cdma.sms.BearerData: boolean decodePriorityIndicator(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)>
<android.preference.Preference: void onSetInitialValue(boolean,java.lang.Object)>
<com.android.internal.os.BatteryStatsImpl: void updateDischargeScreenLevelsLocked(boolean,boolean)>
<com.android.server.pm.PackageManagerService$FileInstallArgs: boolean doPostDeleteLI(boolean)>
<com.android.server.InputMethodManagerService: int getImeShowFlags()>
<android.app.backup.BackupDataInput: int readEntityData(byte[],int,int)>
<android.preference.SwitchPreference$Listener: void <init>(android.preference.SwitchPreference,android.preference.SwitchPreference$1)>
<android.webkit.HttpAuthHandlerImpl: void signalRequestComplete()>
<GenerationGG: android.app.admin.DevicePolicyManager get_androidappadminDevicePolicyManager()>
<android.view.MotionEvent: float getPressure(int)>
<android.renderscript.FieldPacker: void addU8(android.renderscript.Short4)>
<com.android.internal.telephony.cdma.sms.BearerData: com.android.internal.telephony.SmsMessageBase$TextEncodingDetails calcTextEncodingDetails(java.lang.CharSequence,boolean)>
<com.android.server.AppWidgetService$2: void <init>(com.android.server.AppWidgetService)>
<android.view.inputmethod.InputMethodInfo: android.content.ComponentName getComponent()>
<android.os.StrictMode: void setThreadPolicyMask(int)>
<com.android.server.usb.UsbSettingsManager: void dump(java.io.FileDescriptor,java.io.PrintWriter)>
<android.text.BoringLayout: int getParagraphDirection(int)>
<android.app.AlarmManager: void <init>(android.app.IAlarmManager)>
<android.graphics.Path: int init2(int)>
<com.android.internal.telephony.cdma.CdmaServiceStateTracker: boolean regCodeIsRoaming(int)>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: void <init>(com.android.internal.os.BatteryStatsImpl$Uid$Pkg)>
<com.android.i18n.phonenumbers.AsYouTypeFormatter: void clear()>
<android.widget.ViewAnimator: android.view.animation.Animation getOutAnimation()>
<android.test.mock.MockPackageManager: void verifyPendingInstall(int,int)>
<android.view.ViewConfiguration: int getMaximumDrawingCacheSize()>
<android.app.Activity$ManagedCursor: boolean access$300(android.app.Activity$ManagedCursor)>
<android.net.NetworkStatsHistory: void recordData(long,long,android.net.NetworkStats$Entry)>
<android.preference.ListPreference: java.lang.CharSequence getEntry()>
<android.widget.ActivityChooserModel$HistoricalRecord: void <init>(android.content.ComponentName,long,float)>
<android.drm.DrmUtils$ExtendedMetadataParser: void <init>(byte[],android.drm.DrmUtils$1)>
<android.widget.TextView: int access$7300(android.widget.TextView)>
<com.android.internal.statusbar.StatusBarNotification$1: java.lang.Object[] newArray(int)>
<android.app.Dialog: boolean onKeyDown(int,android.view.KeyEvent)>
<android.preference.Preference: java.lang.CharSequence getTitle()>
<android.net.wifi.WifiStateMachine: void access$14100(android.net.wifi.WifiStateMachine,android.os.Message)>
<android.net.DhcpStateMachine: void access$1300(android.net.DhcpStateMachine,com.android.internal.util.IState)>
<android.widget.RemoteViews: void setTextViewText(int,java.lang.CharSequence)>
<android.webkit.CacheManager: boolean removeAllCacheFiles()>
<com.android.internal.telephony.CallTracker: boolean checkNoOperationsPending()>
<android.content.pm.PathPermission: void <init>(java.lang.String,int,java.lang.String,java.lang.String)>
<android.os.Bundle: int describeContents()>
<android.os.StrictMode: android.os.StrictMode$ThreadPolicy allowThreadDiskWrites()>
<android.os.Parcel: void readStringList(java.util.List)>
<com.android.server.pm.PackageManagerService: void removePackageLI(android.content.pm.PackageParser$Package,boolean)>
<android.hardware.usb.UsbInterface: void <init>(int,int,int,int,android.os.Parcelable[])>
<android.widget.RemoteViews$ReflectionAction: void apply(android.view.View,android.view.ViewGroup)>
<android.view.WindowManagerImpl: void updateViewLayout(android.view.View,android.view.ViewGroup$LayoutParams)>
<android.media.audiofx.AudioEffect: int getParameter(byte[],byte[])>
<com.android.internal.telephony.IccFileHandler: void dispose()>
<Wrapper_android_net_MailTo: void test_android_net_MailTo()>
<android.speech.tts.TextToSpeech: int addSpeech(java.lang.String,java.lang.String,int)>
<android.net.wifi.p2p.WifiP2pGroup: java.lang.String getNetworkName()>
<com.android.server.accessibility.TouchExplorer$PointerTracker: long getLastInjectedDownEventTime()>
<android.gesture.GestureLibraries: android.gesture.GestureLibrary fromPrivateFile(android.content.Context,java.lang.String)>
<android.accounts.AccountManager$AmsTask$Response: void <init>(android.accounts.AccountManager$AmsTask)>
<android.content.pm.PackageParser: android.content.pm.ProviderInfo generateProviderInfo(android.content.pm.PackageParser$Provider,int)>
<android.telephony.SmsMessage: int getProtocolIdentifier()>
<android.view.ViewGroup: android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet)>
<android.widget.CursorAdapter: android.database.Cursor getCursor()>
<com.android.server.pm.PackageManagerService: android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName,int)>
<android.speech.tts.TextToSpeechService$SynthHandler$1: void <init>(android.speech.tts.TextToSpeechService$SynthHandler,android.speech.tts.TextToSpeechService$SpeechItem)>
<GenerationGG: android.text.InputFilter get_androidtextInputFilter()>
<android.widget.RatingBar: void onStartTrackingTouch()>
<GenerationGG: android.webkit.WebBackForwardList get_androidwebkitWebBackForwardList()>
<android.os.Debug: int getThreadGcInvocationCount()>
<android.graphics.drawable.shapes.Shape: void resize(float,float)>
<com.android.server.WifiService$LockList: com.android.server.WifiService$WifiLock access$3700(com.android.server.WifiService$LockList,android.os.IBinder)>
<com.android.internal.telephony.cdma.CdmaCallTracker: android.os.Message obtainCompleteMessage()>
<android.view.MotionEvent: float getHistoricalToolMajor(int,int)>
<android.widget.Gallery$LayoutParams: void <init>(int,int)>
<android.widget.SuggestionsAdapter: void storeInIconCache(java.lang.String,android.graphics.drawable.Drawable)>
<android.widget.TextView: java.lang.CharSequence getText()>
<android.view.View$AttachInfo$InvalidateInfo$1: void onReleased(android.util.Poolable)>
<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection$1: void <init>(android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection,android.widget.RemoteViewsAdapter)>
<android.server.BluetoothService: java.lang.String access$602(android.server.BluetoothService,java.lang.String)>
<android.widget.AbsSpinner$SavedState: void <init>(android.os.Parcelable)>
<com.android.internal.textservice.ITextServicesSessionListener$Stub: com.android.internal.textservice.ITextServicesSessionListener asInterface(android.os.IBinder)>
<com.android.server.pm.PackageManagerService: android.content.pm.ApplicationInfo generateApplicationInfoFromSettingsLPw(java.lang.String,int)>
<com.android.server.am.ActivityManagerService: android.content.Intent verifyBroadcastLocked(android.content.Intent)>
<android.os.Debug: long getPss(int)>
<com.android.internal.telephony.gsm.SmsMessage: com.android.internal.telephony.gsm.SmsMessage$SubmitPdu getSubmitPdu(java.lang.String,java.lang.String,int,byte[],boolean)>
<android.renderscript.RenderScript: int nFileA3DGetNumIndexEntries(int)>
<com.android.internal.widget.AbsActionBarView: void postShowOverflowMenu()>
<android.util.Base64$Encoder: int maxOutputSize(int)>
<android.os.BatteryStats$HistoryItem: void writeDelta(android.os.Parcel,android.os.BatteryStats$HistoryItem)>
<android.widget.AbsListView$WindowRunnnable: void <init>(android.widget.AbsListView,android.widget.AbsListView$1)>
<android.os.BatteryStats$BitDescription: void <init>(int,int,java.lang.String,java.lang.String[])>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: android.os.Message obtainMessage(android.os.Message)>
<android.database.sqlite.SQLiteMisuseException: void <init>(java.lang.String)>
<GenerationGG: android.renderscript.Double4 get_androidrenderscriptDouble4()>
<com.android.internal.view.menu.MenuItemImpl: int getOrder()>
<com.android.internal.os.ProcessStats: void <clinit>()>
<com.android.server.wm.InputManager: void nativeSetDisplayOrientation(int,int)>
<android.content.res.XmlBlock$Parser: int getAttributeUnsignedIntValue(java.lang.String,java.lang.String,int)>
<android.webkit.WebViewCore$TouchUpData: void <init>()>
<android.view.ViewRootImpl: void scheduleTraversals()>
<com.android.internal.os.BatteryStatsImpl: void addHistoryRecordLocked(long)>
<android.webkit.HTML5VideoFullScreen: boolean canPause()>
<android.net.NetworkQuotaInfo$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.net.DhcpInfo: void <clinit>()>
<com.android.server.BackupManagerService$BackupRequest: java.lang.String toString()>
<android.test.mock.MockPackageManager: android.graphics.drawable.Drawable getApplicationIcon(android.content.pm.ApplicationInfo)>
<android.widget.OverScroller$SplineOverScroller: int getSplineFlingDuration(int)>
<android.net.LocalSocketImpl$SocketInputStream: void <init>(android.net.LocalSocketImpl)>
<android.app.ContextImpl$20: java.lang.Object createService(android.app.ContextImpl)>
<android.app.ActivityThread$ApplicationThread: void scheduleLowMemory()>
<android.telephony.PhoneNumberUtils: boolean matchIntlPrefixAndCC(java.lang.String,int)>
<android.widget.AnalogClock$1: void <init>(android.widget.AnalogClock)>
<com.android.server.wm.InputManager: int nativeInjectInputEvent(android.view.InputEvent,int,int,int,int,int)>
<android.view.inputmethod.CompletionInfo$1: java.lang.Object[] newArray(int)>
<android.graphics.Canvas: void drawRect(float,float,float,float,android.graphics.Paint)>
<android.content.res.XmlBlock$Parser: int getAttributeResourceValue(java.lang.String,java.lang.String,int)>
<GenerationGG: android.text.style.MetricAffectingSpan get_androidtextstyleMetricAffectingSpan()>
<com.android.internal.telephony.PhoneProxy: boolean getCallForwardingIndicator()>
<android.telephony.gsm.SmsMessage$MessageClass: void <init>(java.lang.String,int)>
<android.net.wifi.SupplicantStateTracker$ScanState: void enter()>
<android.net.wifi.WifiStateMachine: void access$7600(android.net.wifi.WifiStateMachine,boolean)>
<android.content.AsyncQueryHandler: void <init>(android.content.ContentResolver)>
<android.content.pm.IPackageDataObserver$Stub: android.os.IBinder asBinder()>
<GenerationGG: android.text.method.BaseKeyListener get_androidtextmethodBaseKeyListener()>
<Wrapper_android_graphics_BitmapShader: void test_android_graphics_BitmapShader()>
<android.graphics.Path$FillType: void <clinit>()>
<android.os.storage.StorageVolume$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.gsm.SimTlv: boolean isValidObject()>
<android.content.res.AssetFileDescriptor$1: android.content.res.AssetFileDescriptor[] newArray(int)>
<android.net.Uri: boolean isAbsolute()>
<android.os.RemoteCallbackList$Callback: void <init>(android.os.RemoteCallbackList,android.os.IInterface,java.lang.Object)>
<android.animation.PropertyValuesHolder: java.lang.reflect.Method setupSetterOrGetter(java.lang.Class,java.util.HashMap,java.lang.String,java.lang.Class)>
<android.database.sqlite.SQLiteDatabase: void unlock()>
<com.android.server.am.TransferPipe: void go(java.io.FileDescriptor)>
<android.net.http.SslError: void <clinit>()>
<android.content.res.XmlBlock$Parser: java.lang.String getNamespaceUri(int)>
<Wrapper_android_telephony_SignalStrength: void test_android_telephony_SignalStrength()>
<android.gesture.GestureUtils: float squaredEuclideanDistance(float[],float[])>
<android.nfc.NfcAdapter: void <clinit>()>
<android.animation.Keyframe$IntKeyframe: android.animation.Keyframe clone()>
<android.gesture.GestureUtils: android.gesture.OrientedBoundingBox computeOrientedBoundingBox(java.util.ArrayList)>
<android.graphics.drawable.Drawable$ConstantState: void <init>()>
<com.android.server.MountService$4: void <init>(com.android.server.MountService,java.lang.String)>
<android.app.Notification$Builder: android.app.Notification$Builder setWhen(long)>
<android.server.BluetoothService: android.server.BluetoothBondState access$000(android.server.BluetoothService)>
<android.net.http.LoggingEventHandler: void <init>()>
<GenerationGG: android.graphics.BitmapFactory get_androidgraphicsBitmapFactory()>
<android.media.AudioService: int access$4300(int)>
<android.net.LocalSocket: void implCreateIfNeeded()>
<com.android.server.AlarmManagerService$BroadcastStats: void <init>(com.android.server.AlarmManagerService$1)>
<android.net.http.AndroidHttpClient: long getMinGzipSize(android.content.ContentResolver)>
<android.view.KeyEvent: java.lang.String actionToString(int)>
<com.android.internal.util.Predicates$NotPredicate: void <init>(com.android.internal.util.Predicate,com.android.internal.util.Predicates$1)>
<android.widget.AlphabetIndexer: java.lang.Object[] getSections()>
<android.view.WindowManager$LayoutParams$1: java.lang.Object[] newArray(int)>
<android.server.BluetoothService: boolean createPairedDeviceNative(java.lang.String,int)>
<android.nfc.NfcActivityManager: void <clinit>()>
<android.widget.ExpandableListConnector: int getCount()>
<android.location.Address: java.lang.String toString()>
<android.app.backup.FileBackupHelperBase: void writeNewStateDescription(android.os.ParcelFileDescriptor)>
<android.webkit.WebHistoryItem: byte[] getFlattenedData()>
<android.app.ActivityThread$ReceiverData: void <init>(android.content.Intent,int,java.lang.String,android.os.Bundle,boolean,boolean,android.os.IBinder)>
<com.android.server.PowerManagerService: com.android.server.PowerManagerService$UnsynchronizedWakeLock access$3300(com.android.server.PowerManagerService)>
<android.app.ActivityManager$RunningAppProcessInfo$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.os.Registrant: void notifyRegistrant(android.os.AsyncResult)>
<android.view.KeyEvent$1: void <init>()>
<android.net.wifi.WifiWatchdogStateMachine: void access$2900(android.net.wifi.WifiWatchdogStateMachine,com.android.internal.util.IState)>
<android.graphics.Matrix$1: void reset()>
<android.view.View$11: void setValue(java.lang.Object,float)>
<android.webkit.CallbackProxy$8: void <init>(android.webkit.CallbackProxy,android.webkit.JsPromptResult,android.widget.EditText)>
<android.net.http.HttpsConnection: java.lang.String toString()>
<com.android.server.wm.WindowManagerService: boolean inputMethodClientHasFocus(com.android.internal.view.IInputMethodClient)>
<android.inputmethodservice.KeyboardView: int access$700(android.inputmethodservice.KeyboardView)>
<android.util.JsonReader: void skipValue()>
<com.android.server.net.NetworkPolicyManagerService$XmlUtils: void writeLongAttribute(org.xmlpull.v1.XmlSerializer,java.lang.String,long)>
<android.telephony.ServiceState: int getState()>
<android.view.View: void removeSendViewScrolledAccessibilityEventCallback()>
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: int leadingDigitsPatternSize()>
<android.service.wallpaper.WallpaperService: java.util.ArrayList access$300(android.service.wallpaper.WallpaperService)>
<android.app.ActivityThread: java.lang.String currentPackageName()>
<android.view.ScaleGestureDetector: float getCurrentSpanY()>
<com.android.server.MountService$MountObbAction: java.lang.String toString()>
<com.android.internal.telephony.gsm.SmsMessage$SubmitPdu: void <init>()>
<android.hardware.Camera: void native_setup(java.lang.Object,int)>
<android.text.format.Time: boolean parse3339(java.lang.String)>
<GenerationGG: android.content.Intent[] get_androidcontentIntent_ARRAY_()>
<android.content.res.ColorStateList$1: void <init>()>
<android.gesture.GestureOverlayView: void touchDown(android.view.MotionEvent)>
<com.android.server.pm.PackageManagerService: int access$2108(com.android.server.pm.PackageManagerService)>
<android.webkit.WebView: android.webkit.FindActionModeCallback access$8300(android.webkit.WebView)>
<android.preference.TwoStatePreference: java.lang.CharSequence getSummaryOn()>
<android.database.sqlite.SQLiteConstraintException: void <init>()>
<android.content.pm.VerifierDeviceIdentity: android.content.pm.VerifierDeviceIdentity generate(java.util.Random)>
<android.media.JetPlayer: boolean pause()>
<android.webkit.HTML5VideoViewProxy$PosterDownloader: void error(int,java.lang.String)>
<android.graphics.YuvImage: void <init>(byte[],int,int,int,int[])>
<android.view.MotionEvent: void nativeSetDownTimeNanos(int,long)>
<android.content.res.StringBlock: int nativeGetSize(int)>
<Wrapper_android_text_AndroidCharacter: void test_android_text_AndroidCharacter()>
<android.net.sip.SimpleSessionDescription$Fields: java.lang.String getAttribute(java.lang.String)>
<android.widget.CalendarView$ScrollStateRunnable: void <init>(android.widget.CalendarView,android.widget.CalendarView$1)>
<com.android.internal.database.SortCursor$1: void onInvalidated()>
<java.lang.Object: void unregisterDataSetObserver(android.database.DataSetObserver)>
<android.widget.TextView: android.view.ActionMode$Callback getCustomSelectionActionModeCallback()>
<GenerationGG: android.text.util.Rfc822Tokenizer get_androidtextutilRfc822Tokenizer()>
<com.android.server.usb.UsbDeviceManager$1: void <init>(com.android.server.usb.UsbDeviceManager)>
<android.gesture.Gesture$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.internal.view.menu.ActionMenuItemView: boolean hasText()>
<android.net.wifi.WifiStateMachine: void access$4800(android.net.wifi.WifiStateMachine,android.os.Message)>
<android.webkit.ZoomManager: boolean isZoomScaleFixed()>
<android.bluetooth.BluetoothDeviceProfileState: android.os.Message access$10700(android.bluetooth.BluetoothDeviceProfileState)>
<android.content.pm.PackageItemInfo: void dumpFront(android.util.Printer,java.lang.String)>
<android.webkit.WebSettings$EventHandler: void access$900(android.webkit.WebSettings$EventHandler)>
<android.filterfw.core.Filter: void performClose(android.filterfw.core.FilterContext)>
<android.hardware.Sensor: int getType()>
<com.android.internal.os.BatteryStatsImpl$Uid$Pkg$Serv: void startRunningLocked()>
<android.app.ContextImpl$26: void <init>()>
<android.widget.AbsSeekBar: int getKeyProgressIncrement()>
<com.android.server.am.ActivityManagerService: boolean updateOomAdjLocked(com.android.server.am.ProcessRecord,int,com.android.server.am.ProcessRecord)>
<android.test.mock.MockCursor: boolean moveToPrevious()>
<com.android.server.sip.SipSessionListenerProxy: void onRingingBack(android.net.sip.ISipSession)>
<android.view.ViewConfiguration: int getScrollBarSize()>
<android.text.SpannableStringBuilder: int getSpanEnd(java.lang.Object)>
<android.widget.HorizontalScrollView: int clamp(int,int,int)>
<android.server.BluetoothEventLoop: boolean isEventLoopRunningNative()>
<android.database.DatabaseUtils: int getTypeOfObject(java.lang.Object)>
<android.widget.ListView: int amountToScroll(int,int)>
<android.content.OperationApplicationException: void <init>(java.lang.Throwable)>
<android.content.AbstractThreadedSyncAdapter: boolean access$800(android.content.AbstractThreadedSyncAdapter)>
<com.android.internal.telephony.gsm.GSMPhone: com.android.internal.telephony.PhoneSubInfo getPhoneSubInfo()>
<android.server.BluetoothHealthProfileHandler$HealthChannel: int access$900(android.server.BluetoothHealthProfileHandler$HealthChannel)>
<android.app.ActivityThread$ApplicationThread: void scheduleCreateService(android.os.IBinder,android.content.pm.ServiceInfo,android.content.res.CompatibilityInfo)>
<com.android.server.ThrottleService$DataRecorder: long getPeriodEnd()>
<android.util.MonthDisplayHelper: int getMonth()>
<android.widget.ExpandableListConnector$PositionMetadata: boolean isExpanded()>
<android.os.Parcel: void writeNative(byte[],int,int)>
<com.android.server.wm.WindowManagerService: int findWindowOffsetLocked(int)>
<android.widget.AbsListView$CheckForKeyLongPress: void <init>(android.widget.AbsListView,android.widget.AbsListView$1)>
<android.view.ViewConfiguration: int getWindowTouchSlop()>
<GenerationGG: android.graphics.Shader$TileMode get_androidgraphicsShader__TileMode()>
<android.mtp.MtpDeviceInfo: java.lang.String getModel()>
<android.net.WebAddress: void <init>(java.lang.String)>
<android.net.http.SslError: android.net.http.SslCertificate getCertificate()>
<android.os.MemoryFile$MemoryInputStream: void mark(int)>
<android.view.ViewGroup: void <clinit>()>
<android.widget.DatePicker: boolean getSpinnersShown()>
<com.android.server.MountService: com.android.server.MountService$DefaultContainerConnection access$2200(com.android.server.MountService)>
<android.webkit.WebView: boolean nativeHasCursorNode()>
<android.graphics.Paint: void native_setStyle(int,int)>
<android.webkit.ByteArrayBuilder: java.lang.ref.ReferenceQueue access$100()>
<android.webkit.FindActionModeCallback: boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu)>
<com.android.internal.telephony.cat.LaunchBrowserMode: com.android.internal.telephony.cat.LaunchBrowserMode[] values()>
<android.webkit.WebView: void invalidateContentRect(android.graphics.Rect)>
<com.android.internal.telephony.cat.Tone: int describeContents()>
<android.hardware.usb.UsbDeviceConnection: int bulkTransfer(android.hardware.usb.UsbEndpoint,byte[],int,int)>
<android.webkit.Plugin: java.lang.String toString()>
<android.app.IActivityManager$WaitResult$1: android.app.IActivityManager$WaitResult createFromParcel(android.os.Parcel)>
<android.widget.TextView: int access$5800(android.widget.TextView)>
<com.android.internal.telephony.MmiCode$State: void <init>(java.lang.String,int)>
<android.os.Parcel: boolean hasFileDescriptors()>
<android.os.SystemClock: boolean setCurrentTimeMillis(long)>
<android.text.style.RelativeSizeSpan: float getSizeChange()>
<android.os.storage.StorageVolume: void <init>(java.lang.String,java.lang.String,boolean,boolean,int,int,boolean,long)>
<GenerationGG: android.test.suitebuilder.TestSuiteBuilder get_androidtestsuitebuilderTestSuiteBuilder()>
<android.net.wifi.WifiNative: java.lang.String p2pGetInterfaceAddress(java.lang.String)>
<android.view.View: android.content.Context getContext()>
<android.widget.RemoteViewsAdapter$RemoteViewsAdapterServiceConnection: void onServiceConnected(android.os.IBinder)>
<com.android.internal.telephony.Phone$DataActivityState: com.android.internal.telephony.Phone$DataActivityState[] values()>
<android.media.AudioTrack: int reloadStaticData()>
<android.net.wifi.WifiNative: boolean startDriverCommand()>
<com.android.server.pm.PackageManagerService: com.android.server.pm.PackageManagerService$InstallArgs createInstallArgs(int,java.lang.String,java.lang.String,java.lang.String)>
<android.widget.PopupWindow: void <init>(int,int)>
<com.android.server.sip.SipSessionListenerProxy$8: void <init>(com.android.server.sip.SipSessionListenerProxy,android.net.sip.ISipSession,int,java.lang.String)>
<android.app.SharedPreferencesImpl: void enqueueDiskWrite(android.app.SharedPreferencesImpl$MemoryCommitResult,java.lang.Runnable)>
<com.android.internal.telephony.cat.CommandParamsFactory: com.android.internal.telephony.cat.CommandParamsFactory getInstance(com.android.internal.telephony.cat.RilMessageDecoder,com.android.internal.telephony.IccFileHandler)>
<android.net.SntpClient: long readTimeStamp(byte[],int)>
<com.android.server.pm.PackageManagerService$ActivityIntentResolver: void <init>(com.android.server.pm.PackageManagerService,com.android.server.pm.PackageManagerService$1)>
<android.widget.DialerFilter: java.lang.CharSequence getLetters()>
<android.content.pm.FeatureInfo: java.lang.String toString()>
<android.widget.GridView: void adjustForTopFadingEdge(android.view.View,int,int)>
<com.android.internal.telephony.AdnRecord$1: com.android.internal.telephony.AdnRecord[] newArray(int)>
<android.graphics.drawable.Drawable: void <clinit>()>
<android.os.storage.StorageVolume: void writeToParcel(android.os.Parcel,int)>
<android.graphics.Bitmap: void nativeRecycle(int)>
<android.graphics.Canvas: void rotate(float)>
<android.webkit.WebView: void nativeGetTextSelectionRegion(android.graphics.Region)>
<android.media.AudioService: void removeMediaButtonReceiverForPackage(java.lang.String)>
<android.view.MenuInflater$MenuState: char getShortcut(java.lang.String)>
<android.util.SparseBooleanArray: boolean get(int,boolean)>
<android.net.wifi.WifiStateMachine: void access$11200(android.net.wifi.WifiStateMachine,android.os.Message)>
<com.android.internal.view.menu.ActionMenuPresenter$SavedState$1: com.android.internal.view.menu.ActionMenuPresenter$SavedState createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.BaseCommands: void unSetOnSignalStrengthUpdate(android.os.Handler)>
<android.content.Intent$ShortcutIconResource$1: java.lang.Object createFromParcel(android.os.Parcel)>
<android.view.inputmethod.InputMethodSubtype: java.lang.String getMode()>
<android.app.DownloadManager: java.lang.String getWhereClauseForIds(long[])>
<android.hardware.Sensor: int getVersion()>
<android.view.KeyCharacterMap: char getDisplayLabel(int)>
<com.android.internal.telephony.gsm.GsmConnection: com.android.internal.telephony.Call$State getState()>
<com.android.server.WifiService$LockList: int findLockByBinder(android.os.IBinder)>
<android.hardware.usb.UsbDevice: int hashCode()>
<android.net.UrlQuerySanitizer: void setPreferFirstRepeatedParameter(boolean)>
<GenerationGG: android.renderscript.Int4 get_androidrenderscriptInt4()>
<android.net.Uri$AbstractHierarchicalUri: android.net.Uri$Part getUserInfoPart()>
<android.app.Fragment: boolean isHidden()>
<android.graphics.Bitmap: void setPixels(int[],int,int,int,int,int,int)>
<android.database.sqlite.SQLiteDiskIOException: void <init>(java.lang.String)>
<com.android.server.BatteryService: android.content.Context access$200(com.android.server.BatteryService)>
<Wrapper_android_database_sqlite_SQLiteMisuseException: void test_android_database_sqlite_SQLiteMisuseException()>
<junit.framework.TestCase: void assertFalse(java.lang.String,boolean)>
<android.app.backup.BackupDataOutput: void finalize()>
<android.text.style.QuoteSpan: int getLeadingMargin(boolean)>
<android.util.EventLogTags: void <init>()>
<java.lang.Object: void setNotificationUri(android.content.ContentResolver,android.net.Uri)>
<android.view.inputmethod.InputMethodSubtype: java.util.HashMap getExtraValueHashMap()>
<android.app.SharedPreferencesImpl: void access$100(android.app.SharedPreferencesImpl,android.app.SharedPreferencesImpl$MemoryCommitResult,java.lang.Runnable)>
<com.android.server.wm.WindowManagerService: int reAddAppWindowsLocked(int,com.android.server.wm.WindowToken)>
<DumbClass: void DumbMethod68()>
<com.android.server.wm.DragState: android.view.DragEvent obtainDragEvent(com.android.server.wm.WindowState,int,float,float,java.lang.Object,android.content.ClipDescription,android.content.ClipData,boolean)>
<android.content.res.AssetManager: void xmlBlockGone(int)>
<com.android.server.InputMethodManagerService: void showInputMethodPickerFromClient(com.android.internal.view.IInputMethodClient)>
<android.net.http.SslError: void <init>(int,android.net.http.SslCertificate)>
<android.net.LocalSocket: void connect(android.net.LocalSocketAddress)>
<android.net.sip.SipErrorCode: java.lang.String toString(int)>
<com.android.internal.os.BatteryStatsImpl: void noteWifiStoppedLocked(android.os.WorkSource)>
<android.widget.RemoteViewsAdapter$FixedSizeRemoteViewsCache: boolean containsRemoteViewAt(int)>
<android.text.format.Time: int nativeCompare(android.text.format.Time,android.text.format.Time)>
<android.content.pm.LabeledIntent: void <init>(android.content.Intent,java.lang.String,int,int)>
<com.android.internal.telephony.gsm.GsmCall: void onHangupLocal()>
<android.app.Dialog: android.app.Activity getOwnerActivity()>
<android.webkit.ZoomManager: float computeScaleWithLimits(float)>
<com.android.internal.telephony.gsm.GsmMmiCode: boolean isDeactivate()>
<android.net.ProxyProperties: boolean equals(java.lang.Object)>
<android.webkit.WebSyncManager: void onSyncInit()>
<android.app.BackStackRecord: int commitInternal(boolean)>
<android.view.inputmethod.BaseInputConnection: boolean commitCompletion(android.view.inputmethod.CompletionInfo)>
<android.filterfw.core.Filter: void clearOutputs()>
<android.filterfw.core.GLEnvironment: void finalize()>
<android.os.ParcelFileDescriptor: void writeToParcel(android.os.Parcel,int)>
<GenerationGG: android.nfc.TagLostException get_androidnfcTagLostException()>
<android.widget.NumberPicker$4: void <init>(android.widget.NumberPicker)>
<android.inputmethodservice.KeyboardView: void checkMultiTap(long,int)>
<android.telephony.SignalStrength: int getGsmBitErrorRate()>
<android.database.BulkCursorProxy: android.os.IBinder asBinder()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: android.net.wifi.p2p.WifiP2pConfig access$6000(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<com.android.server.NetworkManagementSocketTagger: void setThreadSocketStatsTag(int)>
<android.graphics.drawable.ShapeDrawable: android.graphics.drawable.Drawable$ConstantState getConstantState()>
<android.graphics.drawable.Drawable: boolean onStateChange(int[])>
<GenerationGG: android.test.mock.MockContentResolver get_androidtestmockMockContentResolver()>
<android.net.wifi.WifiStateMachine: boolean access$5800(android.net.wifi.WifiStateMachine)>
<android.graphics.Paint: void finalizer(int)>
<GenerationGG: android.preference.PreferenceActivity$Header get_androidpreferencePreferenceActivity__Header()>
<android.os.Message: android.os.Message obtain()>
<com.android.server.WallpaperManagerService$MyPackageMonitor: void <init>(com.android.server.WallpaperManagerService)>
<android.view.InputEventConsistencyVerifier$KeyState: void recycle()>
<android.content.BroadcastReceiver$PendingResult: int getResultCode()>
<GenerationGG: android.widget.CompoundButton$OnCheckedChangeListener get_androidwidgetCompoundButton__OnCheckedChangeListener()>
<android.widget.ProgressBar$SavedState: void <init>(android.os.Parcelable)>
<android.net.SSLCertificateSocketFactory: void setKeyManagers(javax.net.ssl.KeyManager[])>
<GenerationGG: android.text.method.ReplacementTransformationMethod get_androidtextmethodReplacementTransformationMethod()>
<com.android.server.am.UsageStatsService$PkgUsageStatsExtended: void updateResume(java.lang.String,boolean)>
<android.util.TimeUtils: void formatDuration(long,java.io.PrintWriter,int)>
<android.app.backup.BackupDataInputStream: int read()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine: android.net.wifi.p2p.WifiP2pService$P2pStateMachine$GroupCreatedState access$5700(android.net.wifi.p2p.WifiP2pService$P2pStateMachine)>
<Wrapper_android_media_ToneGenerator: void test_android_media_ToneGenerator()>
<android.net.wifi.WifiStateMachine$DriverStartedState: void <init>(android.net.wifi.WifiStateMachine)>
<GenerationGG: android.animation.PropertyValuesHolder get_androidanimationPropertyValuesHolder()>
<android.server.BluetoothHealthProfileHandler: boolean unregisterAppConfiguration(android.bluetooth.BluetoothHealthAppConfiguration)>
<android.gesture.GestureLibrary: java.util.ArrayList recognize(android.gesture.Gesture)>
<com.android.server.am.ActivityManagerService: boolean isIntentSenderTargetedToPackage(android.content.IIntentSender)>
<android.net.http.AndroidHttpClient: java.lang.Object execute(org.apache.http.client.methods.HttpUriRequest,org.apache.http.client.ResponseHandler,org.apache.http.protocol.HttpContext)>
<android.animation.AnimatorSet: long getDuration()>
<android.media.IRemoteControlClient$Stub: android.media.IRemoteControlClient asInterface(android.os.IBinder)>
<android.content.res.Resources: void finishPreloading()>
<android.server.BluetoothHealthProfileHandler: java.lang.String getStringChannelType(int)>
<android.view.InputQueue: void nativeUnregisterInputChannel(android.view.InputChannel)>
<com.android.internal.telephony.DefaultPhoneNotifier: int convertDataActivityState(com.android.internal.telephony.Phone$DataActivityState)>
<android.animation.AnimatorSet: void setupEndValues()>
<android.inputmethodservice.InputMethodService: void onInitializeInterface()>
<com.android.internal.telephony.cdma.CdmaLteUiccRecords$EfCsimLiLoaded: void <init>(com.android.internal.telephony.cdma.CdmaLteUiccRecords)>
<com.android.server.BackupManagerService$ClearDataObserver: void onRemoveCompleted(java.lang.String,boolean)>
<android.content.res.Configuration: void <clinit>()>
<android.net.UrlQuerySanitizer$IllegalCharacterValueSanitizer: void <init>(int)>
<android.location.Location: void removeAltitude()>
<android.net.Uri$OpaqueUri: boolean isHierarchical()>
<android.app.ActivityManager$MemoryInfo$1: java.lang.Object[] newArray(int)>
<android.content.pm.VerifierDeviceIdentity: void <init>(android.os.Parcel,android.content.pm.VerifierDeviceIdentity$1)>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: int getByte()>
<android.accessibilityservice.AccessibilityServiceInfo: java.lang.String getDescription()>
<android.inputmethodservice.KeyboardView: void swipeUp()>
<android.net.wifi.WifiNative: boolean disconnectCommand()>
<android.webkit.WebSettings: boolean access$202(android.webkit.WebSettings,boolean)>
<android.widget.PopupWindow: boolean access$600(android.widget.PopupWindow)>
<android.app.BackStackRecord: boolean isEmpty()>
<com.android.internal.util.StateMachine: void haltedProcessMessage(android.os.Message)>
<com.android.internal.telephony.cat.ResultCode: void <init>(java.lang.String,int,int)>
<GenerationGG: android.text.method.TextKeyListener get_androidtextmethodTextKeyListener()>
<junit.framework.TestCase: void fail(java.lang.String)>
<android.net.rtp.AudioStream: android.net.rtp.AudioGroup getGroup()>
<android.os.Process: boolean setOomAdj(int,int)>
<android.widget.CompoundButton: void setOnCheckedChangeWidgetListener(android.widget.CompoundButton$OnCheckedChangeListener)>
<android.text.style.SuggestionSpan: int getFlags()>
<android.graphics.Matrix: void native_getValues(int,float[])>
<android.os.StrictMode$AndroidBlockGuardPolicy$1: void <init>(android.os.StrictMode$AndroidBlockGuardPolicy,android.view.IWindowManager,java.util.ArrayList)>
<android.database.sqlite.SQLiteDebug: void getPagerStats(android.database.sqlite.SQLiteDebug$PagerStats)>
<android.view.GLES20Canvas: void drawVertices(android.graphics.Canvas$VertexMode,int,float[],int,float[],int,int[],int,short[],int,int,android.graphics.Paint)>
<android.content.ContentResolver$1: void onStatusChanged(int)>
<android.graphics.Canvas: void drawArc(android.graphics.RectF,float,float,boolean,android.graphics.Paint)>
<java.lang.Object: boolean isAttributeDefault(int)>
<android.content.res.CompatibilityInfo: void <init>(android.content.pm.ApplicationInfo,int,int,boolean)>
<android.view.Window: android.os.IBinder access$300(android.view.Window)>
<com.android.internal.telephony.cdma.RuimRecords: void onRadioOffOrNotAvailable()>
<android.net.MobileDataStateTracker: com.android.internal.telephony.Phone$DataState access$402(android.net.MobileDataStateTracker,com.android.internal.telephony.Phone$DataState)>
<android.bluetooth.BluetoothHealthAppConfiguration$1: java.lang.Object createFromParcel(android.os.Parcel)>
<com.android.internal.telephony.AdnRecord: void appendExtRecord(byte[])>
<android.os.Debug: void dumpNativeHeap(java.io.FileDescriptor)>
<android.text.method.MetaKeyKeyListener: boolean isSelectingMetaTracker(java.lang.CharSequence,java.lang.Object)>
<android.media.ExifInterface: java.lang.String getAttributesNative(java.lang.String)>
<android.webkit.ZoomManager: boolean supportsPanDuringZoom()>
<android.view.HardwareLayer: void update(int,int,boolean)>
<android.content.SyncManager$SyncHandler: void waitUntilReadyToRun()>
<com.android.internal.widget.LockPatternView$Cell: int getRow()>
<android.text.AlteredCharSequence$AlteredSpanned: void <init>(java.lang.CharSequence,char[],int,int,android.text.AlteredCharSequence$1)>
<android.content.res.CompatibilityInfo: int hashCode()>
<com.android.server.pm.Settings: boolean addUserIdLPw(int,java.lang.Object,java.lang.Object)>
<android.view.animation.Animation: void setStartTime(long)>
<android.widget.TextView: android.content.Context access$6100(android.widget.TextView)>
<com.android.server.pm.PackageManagerService: android.content.pm.PackageInfo generatePackageInfoFromSettingsLPw(java.lang.String,int)>
<android.drm.DrmSupportInfo: java.util.Iterator getFileSuffixIterator()>
<android.net.wifi.p2p.WifiP2pService$P2pStateMachine$3: void onClick(android.content.DialogInterface,int)>
<android.net.NetworkInfo: boolean access$402(android.net.NetworkInfo,boolean)>
<android.net.wifi.p2p.WifiP2pGroup: android.net.wifi.p2p.WifiP2pDevice getOwner()>
<GenerationGG: android.content.res.AssetFileDescriptor get_androidcontentresAssetFileDescriptor()>
<android.widget.AbsSeekBar: void setKeyProgressIncrement(int)>
<android.net.LocalSocketImpl$SocketInputStream: int read(byte[],int,int)>
<android.media.Ringtone: boolean isPlaying()>
<android.test.suitebuilder.TestMethod: boolean singleStringConstructor(java.lang.Class[])>
<android.widget.GridLayout: int getOrientation()>
<android.view.MenuInflater: java.lang.Class[] access$400()>
<android.view.ViewGroup$3: void startTransition(android.animation.LayoutTransition,android.view.ViewGroup,android.view.View,int)>
<android.widget.TextView$SavedState: void <init>(android.os.Parcelable)>
<com.android.internal.telephony.gsm.SmsMessage$PduParser: boolean moreDataPresent()>
<Wrapper_android_renderscript_RSInvalidStateException: void test_android_renderscript_RSInvalidStateException()>
<android.view.textservice.SpellCheckerSession$InternalListener: void <init>(android.view.textservice.SpellCheckerSession)>
<android.graphics.drawable.NinePatchDrawable: android.graphics.Paint getPaint()>
<android.widget.RemoteViews$SetPendingIntentTemplate: void <init>(android.widget.RemoteViews,int,android.app.PendingIntent)>
<com.android.server.am.ActivityStack: com.android.server.am.ActivityRecord topRunningActivityLocked(com.android.server.am.ActivityRecord)>
<DumbClass: void DumbMethod38()>
<com.android.internal.telephony.RetryManager: void retryForeverUsingLastTimeout()>
<android.accounts.IAccountAuthenticator$Stub: android.accounts.IAccountAuthenticator asInterface(android.os.IBinder)>
<android.accounts.AccountManager: android.accounts.AccountManager get(android.content.Context)>
<android.graphics.CornerPathEffect: void <init>(float)>
<android.graphics.Path: void addArc(android.graphics.RectF,float,float)>
<android.os.BatteryManager: void <init>()>
<GenerationGG: android.graphics.Path get_androidgraphicsPath()>
<android.view.ViewDebug: void capture(android.view.View,java.io.OutputStream,java.lang.String)>
<com.android.server.AlarmManagerService: void finalize()>
<android.filterfw.core.NativeFrame: void releaseNativeAllocation()>
<android.view.AbsSavedState: android.os.Parcelable getSuperState()>
<com.android.i18n.phonenumbers.Phonemetadata$NumberFormat: com.android.i18n.phonenumbers.Phonemetadata$NumberFormat setNationalPrefixFormattingRule(java.lang.String)>
<android.test.TouchUtils: void <init>()>
<android.webkit.WebView: android.graphics.Region access$2700(android.webkit.WebView)>
<android.content.IntentSender$FinishedDispatcher: void <init>(android.content.IntentSender,android.content.IntentSender$OnFinished,android.os.Handler)>
<GenerationGG: android.net.sip.SipRegistrationListener get_androidnetsipSipRegistrationListener()>
<com.android.internal.content.NativeLibraryHelper: int copyNativeBinariesIfNeededLI(java.io.File,java.io.File)>
<com.android.server.wm.AppWindowToken: void <init>(com.android.server.wm.WindowManagerService,android.view.IApplicationToken)>
<android.view.ViewRootImpl: void requestDisallowInterceptTouchEvent(boolean)>
<com.android.internal.telephony.gsm.GsmServiceStateTracker: void log(java.lang.String)>
<com.android.internal.telephony.cat.Duration: void <init>(android.os.Parcel)>
<android.preference.TwoStatePreference: boolean getDisableDependentsState()>
<android.app.Fragment: void setHasOptionsMenu(boolean)>
<android.media.MediaPlayer: android.media.MediaPlayer$OnErrorListener access$700(android.media.MediaPlayer)>
<android.speech.IRecognitionService$Stub$Proxy: void <init>(android.os.IBinder)>
<android.os.Debug: int getGlobalFreedSize()>
<android.renderscript.Element: android.renderscript.Element MATRIX_4X4(android.renderscript.RenderScript)>
<android.webkit.WebView: int nativeCacheHitNodePointer()>
<android.bluetooth.BluetoothDeviceProfileState$IncomingHid: void <init>(android.bluetooth.BluetoothDeviceProfileState,android.bluetooth.BluetoothDeviceProfileState$1)>
<com.android.internal.telephony.cdma.sms.BearerData: boolean decodeLanguageIndicator(com.android.internal.telephony.cdma.sms.BearerData,com.android.internal.util.BitwiseInputStream)>
<android.app.Application: java.lang.Object[] collectComponentCallbacks()>
<android.nfc.TransceiveResult: byte[] getResponseOrThrow()>
<android.os.Debug: void waitForDebugger()>
<android.view.GLES20Canvas: void drawLines(float[],android.graphics.Paint)>
<android.content.IntentFilter: boolean findMimeType(java.lang.String)>
<com.android.server.wm.BlackFrame: void clearMatrix()>
<com.android.internal.telephony.cat.CommandDetails: void <init>()>
<android.net.wifi.WpsStateMachine$DefaultState: void enter()>
<android.view.inputmethod.CompletionInfo: int describeContents()>
<android.accessibilityservice.AccessibilityServiceInfo: boolean getCanRetrieveWindowContent()>
<android.app.ContextImpl: java.io.File getExternalFilesDir(java.lang.String)>
<junit.runner.BaseTestRunner: void setPreference(java.lang.String,java.lang.String)>
<com.android.internal.telephony.Call: boolean isIdle()>
<android.test.IsolatedContext: void sendOrderedBroadcast(android.content.Intent,java.lang.String)>
<GenerationGG: android.text.method.SingleLineTransformationMethod get_androidtextmethodSingleLineTransformationMethod()>
<GenerationGG: android.app.ListActivity get_androidappListActivity()>
<GenerationGG: android.telephony.TelephonyManager get_androidtelephonyTelephonyManager()>
<android.text.Annotation: int describeContents()>
<GenerationGG: android.util.Patterns get_androidutilPatterns()>
